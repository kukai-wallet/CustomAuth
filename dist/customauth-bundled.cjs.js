/******/ (() => {
  // webpackBootstrap
  /******/ var __webpack_modules__ = {
    /***/ 8349: /***/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      "use strict";

      // EXPORTS
      __webpack_require__.d(__webpack_exports__, {
        RQ: () => /* reexport */ AbiCoder,
        _R: () => /* reexport */ ParamType,
      });

      // UNUSED EXPORTS: ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, Indexed, Interface, LogDescription, TransactionDescription, checkResultErrors, defaultAbiCoder

      // EXTERNAL MODULE: ./node_modules/@ethersproject/properties/lib.esm/index.js + 1 modules
      var lib_esm = __webpack_require__(3587);
      // EXTERNAL MODULE: ./node_modules/@ethersproject/logger/lib.esm/index.js + 1 modules
      var logger_lib_esm = __webpack_require__(711); // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/_version.js
      const version = "abi/5.7.0"; // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/fragments.js
      //# sourceMappingURL=_version.js.map
      const logger = new logger_lib_esm /* Logger */.Yd(version);
      const _constructorGuard = {};
      let ModifiersBytes = { calldata: true, memory: true, storage: true };
      let ModifiersNest = { calldata: true, memory: true };
      function checkModifier(type, name) {
        if (type === "bytes" || type === "string") {
          if (ModifiersBytes[name]) {
            return true;
          }
        } else if (type === "address") {
          if (name === "payable") {
            return true;
          }
        } else if (type.indexOf("[") >= 0 || type === "tuple") {
          if (ModifiersNest[name]) {
            return true;
          }
        }
        if (ModifiersBytes[name] || name === "payable") {
          logger.throwArgumentError("invalid modifier", "name", name);
        }
        return false;
      }
      // @TODO: Make sure that children of an indexed tuple are marked with a null indexed
      function parseParamType(param, allowIndexed) {
        let originalParam = param;
        function throwError(i) {
          logger.throwArgumentError(`unexpected character at position ${i}`, "param", param);
        }
        param = param.replace(/\s/g, " ");
        function newNode(parent) {
          let node = { type: "", name: "", parent: parent, state: { allowType: true } };
          if (allowIndexed) {
            node.indexed = false;
          }
          return node;
        }
        let parent = { type: "", name: "", state: { allowType: true } };
        let node = parent;
        for (let i = 0; i < param.length; i++) {
          let c = param[i];
          switch (c) {
            case "(":
              if (node.state.allowType && node.type === "") {
                node.type = "tuple";
              } else if (!node.state.allowParams) {
                throwError(i);
              }
              node.state.allowType = false;
              node.type = verifyType(node.type);
              node.components = [newNode(node)];
              node = node.components[0];
              break;
            case ")":
              delete node.state;
              if (node.name === "indexed") {
                if (!allowIndexed) {
                  throwError(i);
                }
                node.indexed = true;
                node.name = "";
              }
              if (checkModifier(node.type, node.name)) {
                node.name = "";
              }
              node.type = verifyType(node.type);
              let child = node;
              node = node.parent;
              if (!node) {
                throwError(i);
              }
              delete child.parent;
              node.state.allowParams = false;
              node.state.allowName = true;
              node.state.allowArray = true;
              break;
            case ",":
              delete node.state;
              if (node.name === "indexed") {
                if (!allowIndexed) {
                  throwError(i);
                }
                node.indexed = true;
                node.name = "";
              }
              if (checkModifier(node.type, node.name)) {
                node.name = "";
              }
              node.type = verifyType(node.type);
              let sibling = newNode(node.parent);
              //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
              node.parent.components.push(sibling);
              delete node.parent;
              node = sibling;
              break;
            // Hit a space...
            case " ":
              // If reading type, the type is done and may read a param or name
              if (node.state.allowType) {
                if (node.type !== "") {
                  node.type = verifyType(node.type);
                  delete node.state.allowType;
                  node.state.allowName = true;
                  node.state.allowParams = true;
                }
              }
              // If reading name, the name is done
              if (node.state.allowName) {
                if (node.name !== "") {
                  if (node.name === "indexed") {
                    if (!allowIndexed) {
                      throwError(i);
                    }
                    if (node.indexed) {
                      throwError(i);
                    }
                    node.indexed = true;
                    node.name = "";
                  } else if (checkModifier(node.type, node.name)) {
                    node.name = "";
                  } else {
                    node.state.allowName = false;
                  }
                }
              }
              break;
            case "[":
              if (!node.state.allowArray) {
                throwError(i);
              }
              node.type += c;
              node.state.allowArray = false;
              node.state.allowName = false;
              node.state.readArray = true;
              break;
            case "]":
              if (!node.state.readArray) {
                throwError(i);
              }
              node.type += c;
              node.state.readArray = false;
              node.state.allowArray = true;
              node.state.allowName = true;
              break;
            default:
              if (node.state.allowType) {
                node.type += c;
                node.state.allowParams = true;
                node.state.allowArray = true;
              } else if (node.state.allowName) {
                node.name += c;
                delete node.state.allowArray;
              } else if (node.state.readArray) {
                node.type += c;
              } else {
                throwError(i);
              }
          }
        }
        if (node.parent) {
          logger.throwArgumentError("unexpected eof", "param", param);
        }
        delete parent.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(originalParam.length - 7);
          }
          if (node.indexed) {
            throwError(originalParam.length - 7);
          }
          node.indexed = true;
          node.name = "";
        } else if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        parent.type = verifyType(parent.type);
        return parent;
      }
      function populate(object, params) {
        for (let key in params) {
          (0, lib_esm /* defineReadOnly */.zG)(object, key, params[key]);
        }
      }
      const FormatTypes = Object.freeze({
        // Bare formatting, as is needed for computing a sighash of an event or function
        sighash: "sighash",
        // Human-Readable with Minimal spacing and without names (compact human-readable)
        minimal: "minimal",
        // Human-Readable with nice spacing, including all names
        full: "full",
        // JSON-format a la Solidity
        json: "json",
      });
      const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
      class ParamType {
        constructor(constructorGuard, params) {
          if (constructorGuard !== _constructorGuard) {
            logger.throwError("use fromString", logger_lib_esm /* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION, {
              operation: "new ParamType()",
            });
          }
          populate(this, params);
          let match = this.type.match(paramTypeArray);
          if (match) {
            populate(this, {
              arrayLength: parseInt(match[2] || "-1"),
              arrayChildren: ParamType.fromObject({
                type: match[1],
                components: this.components,
              }),
              baseType: "array",
            });
          } else {
            populate(this, {
              arrayLength: null,
              arrayChildren: null,
              baseType: this.components != null ? "tuple" : this.type,
            });
          }
          this._isParamType = true;
          Object.freeze(this);
        }
        // Format the parameter fragment
        //   - sighash: "(uint256,address)"
        //   - minimal: "tuple(uint256,address) indexed"
        //   - full:    "tuple(uint256 foo, address bar) indexed baz"
        format(format) {
          if (!format) {
            format = FormatTypes.sighash;
          }
          if (!FormatTypes[format]) {
            logger.throwArgumentError("invalid format type", "format", format);
          }
          if (format === FormatTypes.json) {
            let result = {
              type: this.baseType === "tuple" ? "tuple" : this.type,
              name: this.name || undefined,
            };
            if (typeof this.indexed === "boolean") {
              result.indexed = this.indexed;
            }
            if (this.components) {
              result.components = this.components.map((comp) => JSON.parse(comp.format(format)));
            }
            return JSON.stringify(result);
          }
          let result = "";
          // Array
          if (this.baseType === "array") {
            result += this.arrayChildren.format(format);
            result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
          } else {
            if (this.baseType === "tuple") {
              if (format !== FormatTypes.sighash) {
                result += this.type;
              }
              result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
            } else {
              result += this.type;
            }
          }
          if (format !== FormatTypes.sighash) {
            if (this.indexed === true) {
              result += " indexed";
            }
            if (format === FormatTypes.full && this.name) {
              result += " " + this.name;
            }
          }
          return result;
        }
        static from(value, allowIndexed) {
          if (typeof value === "string") {
            return ParamType.fromString(value, allowIndexed);
          }
          return ParamType.fromObject(value);
        }
        static fromObject(value) {
          if (ParamType.isParamType(value)) {
            return value;
          }
          return new ParamType(_constructorGuard, {
            name: value.name || null,
            type: verifyType(value.type),
            indexed: value.indexed == null ? null : !!value.indexed,
            components: value.components ? value.components.map(ParamType.fromObject) : null,
          });
        }
        static fromString(value, allowIndexed) {
          function ParamTypify(node) {
            return ParamType.fromObject({
              name: node.name,
              type: node.type,
              indexed: node.indexed,
              components: node.components,
            });
          }
          return ParamTypify(parseParamType(value, !!allowIndexed));
        }
        static isParamType(value) {
          return !!(value != null && value._isParamType);
        }
      }
      function parseParams(value, allowIndex) {
        return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
      }
      class Fragment {
        constructor(constructorGuard, params) {
          if (constructorGuard !== _constructorGuard) {
            logger.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "new Fragment()",
            });
          }
          populate(this, params);
          this._isFragment = true;
          Object.freeze(this);
        }
        static from(value) {
          if (Fragment.isFragment(value)) {
            return value;
          }
          if (typeof value === "string") {
            return Fragment.fromString(value);
          }
          return Fragment.fromObject(value);
        }
        static fromObject(value) {
          if (Fragment.isFragment(value)) {
            return value;
          }
          switch (value.type) {
            case "function":
              return FunctionFragment.fromObject(value);
            case "event":
              return EventFragment.fromObject(value);
            case "constructor":
              return ConstructorFragment.fromObject(value);
            case "error":
              return ErrorFragment.fromObject(value);
            case "fallback":
            case "receive":
              // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
              return null;
          }
          return logger.throwArgumentError("invalid fragment object", "value", value);
        }
        static fromString(value) {
          // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
          value = value.replace(/\s/g, " ");
          value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
          value = value.trim();
          if (value.split(" ")[0] === "event") {
            return EventFragment.fromString(value.substring(5).trim());
          } else if (value.split(" ")[0] === "function") {
            return FunctionFragment.fromString(value.substring(8).trim());
          } else if (value.split("(")[0].trim() === "constructor") {
            return ConstructorFragment.fromString(value.trim());
          } else if (value.split(" ")[0] === "error") {
            return ErrorFragment.fromString(value.substring(5).trim());
          }
          return logger.throwArgumentError("unsupported fragment", "value", value);
        }
        static isFragment(value) {
          return !!(value && value._isFragment);
        }
      }
      class EventFragment extends /* unused pure expression or super */ (null && Fragment) {
        format(format) {
          if (!format) {
            format = FormatTypes.sighash;
          }
          if (!FormatTypes[format]) {
            logger.throwArgumentError("invalid format type", "format", format);
          }
          if (format === FormatTypes.json) {
            return JSON.stringify({
              type: "event",
              anonymous: this.anonymous,
              name: this.name,
              inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
            });
          }
          let result = "";
          if (format !== FormatTypes.sighash) {
            result += "event ";
          }
          result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
          if (format !== FormatTypes.sighash) {
            if (this.anonymous) {
              result += "anonymous ";
            }
          }
          return result.trim();
        }
        static from(value) {
          if (typeof value === "string") {
            return EventFragment.fromString(value);
          }
          return EventFragment.fromObject(value);
        }
        static fromObject(value) {
          if (EventFragment.isEventFragment(value)) {
            return value;
          }
          if (value.type !== "event") {
            logger.throwArgumentError("invalid event object", "value", value);
          }
          const params = {
            name: verifyIdentifier(value.name),
            anonymous: value.anonymous,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            type: "event",
          };
          return new EventFragment(_constructorGuard, params);
        }
        static fromString(value) {
          let match = value.match(regexParen);
          if (!match) {
            logger.throwArgumentError("invalid event string", "value", value);
          }
          let anonymous = false;
          match[3].split(" ").forEach((modifier) => {
            switch (modifier.trim()) {
              case "anonymous":
                anonymous = true;
                break;
              case "":
                break;
              default:
                logger.warn("unknown modifier: " + modifier);
            }
          });
          return EventFragment.fromObject({
            name: match[1].trim(),
            anonymous: anonymous,
            inputs: parseParams(match[2], true),
            type: "event",
          });
        }
        static isEventFragment(value) {
          return value && value._isFragment && value.type === "event";
        }
      }
      function parseGas(value, params) {
        params.gas = null;
        let comps = value.split("@");
        if (comps.length !== 1) {
          if (comps.length > 2) {
            logger.throwArgumentError("invalid human-readable ABI signature", "value", value);
          }
          if (!comps[1].match(/^[0-9]+$/)) {
            logger.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
          }
          params.gas = BigNumber.from(comps[1]);
          return comps[0];
        }
        return value;
      }
      function parseModifiers(value, params) {
        params.constant = false;
        params.payable = false;
        params.stateMutability = "nonpayable";
        value.split(" ").forEach((modifier) => {
          switch (modifier.trim()) {
            case "constant":
              params.constant = true;
              break;
            case "payable":
              params.payable = true;
              params.stateMutability = "payable";
              break;
            case "nonpayable":
              params.payable = false;
              params.stateMutability = "nonpayable";
              break;
            case "pure":
              params.constant = true;
              params.stateMutability = "pure";
              break;
            case "view":
              params.constant = true;
              params.stateMutability = "view";
              break;
            case "external":
            case "public":
            case "":
              break;
            default:
              console.log("unknown modifier: " + modifier);
          }
        });
      }
      function verifyState(value) {
        let result = {
          constant: false,
          payable: true,
          stateMutability: "payable",
        };
        if (value.stateMutability != null) {
          result.stateMutability = value.stateMutability;
          // Set (and check things are consistent) the constant property
          result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
          if (value.constant != null) {
            if (!!value.constant !== result.constant) {
              logger.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
            }
          }
          // Set (and check things are consistent) the payable property
          result.payable = result.stateMutability === "payable";
          if (value.payable != null) {
            if (!!value.payable !== result.payable) {
              logger.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
            }
          }
        } else if (value.payable != null) {
          result.payable = !!value.payable;
          // If payable we can assume non-constant; otherwise we can't assume
          if (value.constant == null && !result.payable && value.type !== "constructor") {
            logger.throwArgumentError("unable to determine stateMutability", "value", value);
          }
          result.constant = !!value.constant;
          if (result.constant) {
            result.stateMutability = "view";
          } else {
            result.stateMutability = result.payable ? "payable" : "nonpayable";
          }
          if (result.payable && result.constant) {
            logger.throwArgumentError("cannot have constant payable function", "value", value);
          }
        } else if (value.constant != null) {
          result.constant = !!value.constant;
          result.payable = !result.constant;
          result.stateMutability = result.constant ? "view" : "payable";
        } else if (value.type !== "constructor") {
          logger.throwArgumentError("unable to determine stateMutability", "value", value);
        }
        return result;
      }
      class ConstructorFragment extends /* unused pure expression or super */ (null && Fragment) {
        format(format) {
          if (!format) {
            format = FormatTypes.sighash;
          }
          if (!FormatTypes[format]) {
            logger.throwArgumentError("invalid format type", "format", format);
          }
          if (format === FormatTypes.json) {
            return JSON.stringify({
              type: "constructor",
              stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
              payable: this.payable,
              gas: this.gas ? this.gas.toNumber() : undefined,
              inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
            });
          }
          if (format === FormatTypes.sighash) {
            logger.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "format(sighash)",
            });
          }
          let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
          if (this.stateMutability && this.stateMutability !== "nonpayable") {
            result += this.stateMutability + " ";
          }
          return result.trim();
        }
        static from(value) {
          if (typeof value === "string") {
            return ConstructorFragment.fromString(value);
          }
          return ConstructorFragment.fromObject(value);
        }
        static fromObject(value) {
          if (ConstructorFragment.isConstructorFragment(value)) {
            return value;
          }
          if (value.type !== "constructor") {
            logger.throwArgumentError("invalid constructor object", "value", value);
          }
          let state = verifyState(value);
          if (state.constant) {
            logger.throwArgumentError("constructor cannot be constant", "value", value);
          }
          const params = {
            name: null,
            type: value.type,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            payable: state.payable,
            stateMutability: state.stateMutability,
            gas: value.gas ? BigNumber.from(value.gas) : null,
          };
          return new ConstructorFragment(_constructorGuard, params);
        }
        static fromString(value) {
          let params = { type: "constructor" };
          value = parseGas(value, params);
          let parens = value.match(regexParen);
          if (!parens || parens[1].trim() !== "constructor") {
            logger.throwArgumentError("invalid constructor string", "value", value);
          }
          params.inputs = parseParams(parens[2].trim(), false);
          parseModifiers(parens[3].trim(), params);
          return ConstructorFragment.fromObject(params);
        }
        static isConstructorFragment(value) {
          return value && value._isFragment && value.type === "constructor";
        }
      }
      class FunctionFragment extends /* unused pure expression or super */ (null && ConstructorFragment) {
        format(format) {
          if (!format) {
            format = FormatTypes.sighash;
          }
          if (!FormatTypes[format]) {
            logger.throwArgumentError("invalid format type", "format", format);
          }
          if (format === FormatTypes.json) {
            return JSON.stringify({
              type: "function",
              name: this.name,
              constant: this.constant,
              stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
              payable: this.payable,
              gas: this.gas ? this.gas.toNumber() : undefined,
              inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
              outputs: this.outputs.map((output) => JSON.parse(output.format(format))),
            });
          }
          let result = "";
          if (format !== FormatTypes.sighash) {
            result += "function ";
          }
          result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
          if (format !== FormatTypes.sighash) {
            if (this.stateMutability) {
              if (this.stateMutability !== "nonpayable") {
                result += this.stateMutability + " ";
              }
            } else if (this.constant) {
              result += "view ";
            }
            if (this.outputs && this.outputs.length) {
              result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
            }
            if (this.gas != null) {
              result += "@" + this.gas.toString() + " ";
            }
          }
          return result.trim();
        }
        static from(value) {
          if (typeof value === "string") {
            return FunctionFragment.fromString(value);
          }
          return FunctionFragment.fromObject(value);
        }
        static fromObject(value) {
          if (FunctionFragment.isFunctionFragment(value)) {
            return value;
          }
          if (value.type !== "function") {
            logger.throwArgumentError("invalid function object", "value", value);
          }
          let state = verifyState(value);
          const params = {
            type: value.type,
            name: verifyIdentifier(value.name),
            constant: state.constant,
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
            outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
            payable: state.payable,
            stateMutability: state.stateMutability,
            gas: value.gas ? BigNumber.from(value.gas) : null,
          };
          return new FunctionFragment(_constructorGuard, params);
        }
        static fromString(value) {
          let params = { type: "function" };
          value = parseGas(value, params);
          let comps = value.split(" returns ");
          if (comps.length > 2) {
            logger.throwArgumentError("invalid function string", "value", value);
          }
          let parens = comps[0].match(regexParen);
          if (!parens) {
            logger.throwArgumentError("invalid function signature", "value", value);
          }
          params.name = parens[1].trim();
          if (params.name) {
            verifyIdentifier(params.name);
          }
          params.inputs = parseParams(parens[2], false);
          parseModifiers(parens[3].trim(), params);
          // We have outputs
          if (comps.length > 1) {
            let returns = comps[1].match(regexParen);
            if (returns[1].trim() != "" || returns[3].trim() != "") {
              logger.throwArgumentError("unexpected tokens", "value", value);
            }
            params.outputs = parseParams(returns[2], false);
          } else {
            params.outputs = [];
          }
          return FunctionFragment.fromObject(params);
        }
        static isFunctionFragment(value) {
          return value && value._isFragment && value.type === "function";
        }
      }
      //export class StructFragment extends Fragment {
      //}
      function checkForbidden(fragment) {
        const sig = fragment.format();
        if (sig === "Error(string)" || sig === "Panic(uint256)") {
          logger.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
        }
        return fragment;
      }
      class ErrorFragment extends /* unused pure expression or super */ (null && Fragment) {
        format(format) {
          if (!format) {
            format = FormatTypes.sighash;
          }
          if (!FormatTypes[format]) {
            logger.throwArgumentError("invalid format type", "format", format);
          }
          if (format === FormatTypes.json) {
            return JSON.stringify({
              type: "error",
              name: this.name,
              inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
            });
          }
          let result = "";
          if (format !== FormatTypes.sighash) {
            result += "error ";
          }
          result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
          return result.trim();
        }
        static from(value) {
          if (typeof value === "string") {
            return ErrorFragment.fromString(value);
          }
          return ErrorFragment.fromObject(value);
        }
        static fromObject(value) {
          if (ErrorFragment.isErrorFragment(value)) {
            return value;
          }
          if (value.type !== "error") {
            logger.throwArgumentError("invalid error object", "value", value);
          }
          const params = {
            type: value.type,
            name: verifyIdentifier(value.name),
            inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
          };
          return checkForbidden(new ErrorFragment(_constructorGuard, params));
        }
        static fromString(value) {
          let params = { type: "error" };
          let parens = value.match(regexParen);
          if (!parens) {
            logger.throwArgumentError("invalid error signature", "value", value);
          }
          params.name = parens[1].trim();
          if (params.name) {
            verifyIdentifier(params.name);
          }
          params.inputs = parseParams(parens[2], false);
          return checkForbidden(ErrorFragment.fromObject(params));
        }
        static isErrorFragment(value) {
          return value && value._isFragment && value.type === "error";
        }
      }
      function verifyType(type) {
        // These need to be transformed to their full description
        if (type.match(/^uint($|[^1-9])/)) {
          type = "uint256" + type.substring(4);
        } else if (type.match(/^int($|[^1-9])/)) {
          type = "int256" + type.substring(3);
        }
        // @TODO: more verification
        return type;
      }
      // See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
      const regexIdentifier = /* unused pure expression or super */ null && new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
      function verifyIdentifier(value) {
        if (!value || !value.match(regexIdentifier)) {
          logger.throwArgumentError(`invalid identifier "${value}"`, "value", value);
        }
        return value;
      }
      const regexParen = /* unused pure expression or super */ null && new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
      function splitNesting(value) {
        value = value.trim();
        let result = [];
        let accum = "";
        let depth = 0;
        for (let offset = 0; offset < value.length; offset++) {
          let c = value[offset];
          if (c === "," && depth === 0) {
            result.push(accum);
            accum = "";
          } else {
            accum += c;
            if (c === "(") {
              depth++;
            } else if (c === ")") {
              depth--;
              if (depth === -1) {
                logger.throwArgumentError("unbalanced parenthesis", "value", value);
              }
            }
          }
        }
        if (accum) {
          result.push(accum);
        }
        return result;
      }
      //# sourceMappingURL=fragments.js.map
      // EXTERNAL MODULE: ./node_modules/@ethersproject/bytes/lib.esm/index.js + 1 modules
      var bytes_lib_esm = __webpack_require__(3286);
      // EXTERNAL MODULE: ./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js + 1 modules
      var bignumber = __webpack_require__(5154); // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js
      const abstract_coder_logger = new logger_lib_esm /* Logger */.Yd(version);
      function checkResultErrors(result) {
        // Find the first error (if any)
        const errors = [];
        const checkErrors = function (path, object) {
          if (!Array.isArray(object)) {
            return;
          }
          for (let key in object) {
            const childPath = path.slice();
            childPath.push(key);
            try {
              checkErrors(childPath, object[key]);
            } catch (error) {
              errors.push({ path: childPath, error: error });
            }
          }
        };
        checkErrors([], result);
        return errors;
      }
      class Coder {
        constructor(name, type, localName, dynamic) {
          // @TODO: defineReadOnly these
          this.name = name;
          this.type = type;
          this.localName = localName;
          this.dynamic = dynamic;
        }
        _throwError(message, value) {
          abstract_coder_logger.throwArgumentError(message, this.localName, value);
        }
      }
      class Writer {
        constructor(wordSize) {
          (0, lib_esm /* defineReadOnly */.zG)(this, "wordSize", wordSize || 32);
          this._data = [];
          this._dataLength = 0;
          this._padding = new Uint8Array(wordSize);
        }
        get data() {
          return (0, bytes_lib_esm /* hexConcat */.xs)(this._data);
        }
        get length() {
          return this._dataLength;
        }
        _writeData(data) {
          this._data.push(data);
          this._dataLength += data.length;
          return data.length;
        }
        appendWriter(writer) {
          return this._writeData((0, bytes_lib_esm /* concat */.zo)(writer._data));
        }
        // Arrayish items; padded on the right to wordSize
        writeBytes(value) {
          let bytes = (0, bytes_lib_esm /* arrayify */.lE)(value);
          const paddingOffset = bytes.length % this.wordSize;
          if (paddingOffset) {
            bytes = (0, bytes_lib_esm /* concat */.zo)([bytes, this._padding.slice(paddingOffset)]);
          }
          return this._writeData(bytes);
        }
        _getValue(value) {
          let bytes = (0, bytes_lib_esm /* arrayify */.lE)(bignumber /* BigNumber.from */.O$.from(value));
          if (bytes.length > this.wordSize) {
            abstract_coder_logger.throwError("value out-of-bounds", logger_lib_esm /* Logger.errors.BUFFER_OVERRUN */.Yd.errors.BUFFER_OVERRUN, {
              length: this.wordSize,
              offset: bytes.length,
            });
          }
          if (bytes.length % this.wordSize) {
            bytes = (0, bytes_lib_esm /* concat */.zo)([this._padding.slice(bytes.length % this.wordSize), bytes]);
          }
          return bytes;
        }
        // BigNumberish items; padded on the left to wordSize
        writeValue(value) {
          return this._writeData(this._getValue(value));
        }
        writeUpdatableValue() {
          const offset = this._data.length;
          this._data.push(this._padding);
          this._dataLength += this.wordSize;
          return (value) => {
            this._data[offset] = this._getValue(value);
          };
        }
      }
      class Reader {
        constructor(data, wordSize, coerceFunc, allowLoose) {
          (0, lib_esm /* defineReadOnly */.zG)(this, "_data", (0, bytes_lib_esm /* arrayify */.lE)(data));
          (0, lib_esm /* defineReadOnly */.zG)(this, "wordSize", wordSize || 32);
          (0, lib_esm /* defineReadOnly */.zG)(this, "_coerceFunc", coerceFunc);
          (0, lib_esm /* defineReadOnly */.zG)(this, "allowLoose", allowLoose);
          this._offset = 0;
        }
        get data() {
          return (0, bytes_lib_esm /* hexlify */.Dv)(this._data);
        }
        get consumed() {
          return this._offset;
        }
        // The default Coerce function
        static coerce(name, value) {
          let match = name.match("^u?int([0-9]+)$");
          if (match && parseInt(match[1]) <= 48) {
            value = value.toNumber();
          }
          return value;
        }
        coerce(name, value) {
          if (this._coerceFunc) {
            return this._coerceFunc(name, value);
          }
          return Reader.coerce(name, value);
        }
        _peekBytes(offset, length, loose) {
          let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
          if (this._offset + alignedLength > this._data.length) {
            if (this.allowLoose && loose && this._offset + length <= this._data.length) {
              alignedLength = length;
            } else {
              abstract_coder_logger.throwError("data out-of-bounds", logger_lib_esm /* Logger.errors.BUFFER_OVERRUN */.Yd.errors.BUFFER_OVERRUN, {
                length: this._data.length,
                offset: this._offset + alignedLength,
              });
            }
          }
          return this._data.slice(this._offset, this._offset + alignedLength);
        }
        subReader(offset) {
          return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
        }
        readBytes(length, loose) {
          let bytes = this._peekBytes(0, length, !!loose);
          this._offset += bytes.length;
          // @TODO: Make sure the length..end bytes are all 0?
          return bytes.slice(0, length);
        }
        readValue() {
          return bignumber /* BigNumber.from */.O$.from(this.readBytes(this.wordSize));
        }
      }
      //# sourceMappingURL=abstract-coder.js.map
      // EXTERNAL MODULE: ./node_modules/@ethersproject/address/lib.esm/index.js + 1 modules
      var address_lib_esm = __webpack_require__(4594); // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/address.js
      class AddressCoder extends Coder {
        constructor(localName) {
          super("address", "address", localName, false);
        }
        defaultValue() {
          return "0x0000000000000000000000000000000000000000";
        }
        encode(writer, value) {
          try {
            value = (0, address_lib_esm /* getAddress */.Kn)(value);
          } catch (error) {
            this._throwError(error.message, value);
          }
          return writer.writeValue(value);
        }
        decode(reader) {
          return (0, address_lib_esm /* getAddress */.Kn)((0, bytes_lib_esm /* hexZeroPad */.$m)(reader.readValue().toHexString(), 20));
        }
      } // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js
      //# sourceMappingURL=address.js.map
      // Clones the functionality of an existing Coder, but without a localName
      class AnonymousCoder extends Coder {
        constructor(coder) {
          super(coder.name, coder.type, undefined, coder.dynamic);
          this.coder = coder;
        }
        defaultValue() {
          return this.coder.defaultValue();
        }
        encode(writer, value) {
          return this.coder.encode(writer, value);
        }
        decode(reader) {
          return this.coder.decode(reader);
        }
      } // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/array.js
      //# sourceMappingURL=anonymous.js.map
      const array_logger = new logger_lib_esm /* Logger */.Yd(version);

      function pack(writer, coders, values) {
        let arrayValues = null;
        if (Array.isArray(values)) {
          arrayValues = values;
        } else if (values && typeof values === "object") {
          let unique = {};
          arrayValues = coders.map((coder) => {
            const name = coder.localName;
            if (!name) {
              array_logger.throwError(
                "cannot encode object for signature with missing names",
                logger_lib_esm /* Logger.errors.INVALID_ARGUMENT */.Yd.errors.INVALID_ARGUMENT,
                {
                  argument: "values",
                  coder: coder,
                  value: values,
                }
              );
            }
            if (unique[name]) {
              array_logger.throwError(
                "cannot encode object for signature with duplicate names",
                logger_lib_esm /* Logger.errors.INVALID_ARGUMENT */.Yd.errors.INVALID_ARGUMENT,
                {
                  argument: "values",
                  coder: coder,
                  value: values,
                }
              );
            }
            unique[name] = true;
            return values[name];
          });
        } else {
          array_logger.throwArgumentError("invalid tuple value", "tuple", values);
        }
        if (coders.length !== arrayValues.length) {
          array_logger.throwArgumentError("types/value length mismatch", "tuple", values);
        }
        let staticWriter = new Writer(writer.wordSize);
        let dynamicWriter = new Writer(writer.wordSize);
        let updateFuncs = [];
        coders.forEach((coder, index) => {
          let value = arrayValues[index];
          if (coder.dynamic) {
            // Get current dynamic offset (for the future pointer)
            let dynamicOffset = dynamicWriter.length;
            // Encode the dynamic value into the dynamicWriter
            coder.encode(dynamicWriter, value);
            // Prepare to populate the correct offset once we are done
            let updateFunc = staticWriter.writeUpdatableValue();
            updateFuncs.push((baseOffset) => {
              updateFunc(baseOffset + dynamicOffset);
            });
          } else {
            coder.encode(staticWriter, value);
          }
        });
        // Backfill all the dynamic offsets, now that we know the static length
        updateFuncs.forEach((func) => {
          func(staticWriter.length);
        });
        let length = writer.appendWriter(staticWriter);
        length += writer.appendWriter(dynamicWriter);
        return length;
      }
      function unpack(reader, coders) {
        let values = [];
        // A reader anchored to this base
        let baseReader = reader.subReader(0);
        coders.forEach((coder) => {
          let value = null;
          if (coder.dynamic) {
            let offset = reader.readValue();
            let offsetReader = baseReader.subReader(offset.toNumber());
            try {
              value = coder.decode(offsetReader);
            } catch (error) {
              // Cannot recover from this
              if (error.code === logger_lib_esm /* Logger.errors.BUFFER_OVERRUN */.Yd.errors.BUFFER_OVERRUN) {
                throw error;
              }
              value = error;
              value.baseType = coder.name;
              value.name = coder.localName;
              value.type = coder.type;
            }
          } else {
            try {
              value = coder.decode(reader);
            } catch (error) {
              // Cannot recover from this
              if (error.code === logger_lib_esm /* Logger.errors.BUFFER_OVERRUN */.Yd.errors.BUFFER_OVERRUN) {
                throw error;
              }
              value = error;
              value.baseType = coder.name;
              value.name = coder.localName;
              value.type = coder.type;
            }
          }
          if (value != undefined) {
            values.push(value);
          }
        });
        // We only output named properties for uniquely named coders
        const uniqueNames = coders.reduce((accum, coder) => {
          const name = coder.localName;
          if (name) {
            if (!accum[name]) {
              accum[name] = 0;
            }
            accum[name]++;
          }
          return accum;
        }, {});
        // Add any named parameters (i.e. tuples)
        coders.forEach((coder, index) => {
          let name = coder.localName;
          if (!name || uniqueNames[name] !== 1) {
            return;
          }
          if (name === "length") {
            name = "_length";
          }
          if (values[name] != null) {
            return;
          }
          const value = values[index];
          if (value instanceof Error) {
            Object.defineProperty(values, name, {
              enumerable: true,
              get: () => {
                throw value;
              },
            });
          } else {
            values[name] = value;
          }
        });
        for (let i = 0; i < values.length; i++) {
          const value = values[i];
          if (value instanceof Error) {
            Object.defineProperty(values, i, {
              enumerable: true,
              get: () => {
                throw value;
              },
            });
          }
        }
        return Object.freeze(values);
      }
      class ArrayCoder extends Coder {
        constructor(coder, length, localName) {
          const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
          const dynamic = length === -1 || coder.dynamic;
          super("array", type, localName, dynamic);
          this.coder = coder;
          this.length = length;
        }
        defaultValue() {
          // Verifies the child coder is valid (even if the array is dynamic or 0-length)
          const defaultChild = this.coder.defaultValue();
          const result = [];
          for (let i = 0; i < this.length; i++) {
            result.push(defaultChild);
          }
          return result;
        }
        encode(writer, value) {
          if (!Array.isArray(value)) {
            this._throwError("expected array value", value);
          }
          let count = this.length;
          if (count === -1) {
            count = value.length;
            writer.writeValue(value.length);
          }
          array_logger.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
          let coders = [];
          for (let i = 0; i < value.length; i++) {
            coders.push(this.coder);
          }
          return pack(writer, coders, value);
        }
        decode(reader) {
          let count = this.length;
          if (count === -1) {
            count = reader.readValue().toNumber();
            // Check that there is *roughly* enough data to ensure
            // stray random data is not being read as a length. Each
            // slot requires at least 32 bytes for their value (or 32
            // bytes as a link to the data). This could use a much
            // tighter bound, but we are erroring on the side of safety.
            if (count * 32 > reader._data.length) {
              array_logger.throwError("insufficient data length", logger_lib_esm /* Logger.errors.BUFFER_OVERRUN */.Yd.errors.BUFFER_OVERRUN, {
                length: reader._data.length,
                count: count,
              });
            }
          }
          let coders = [];
          for (let i = 0; i < count; i++) {
            coders.push(new AnonymousCoder(this.coder));
          }
          return reader.coerce(this.name, unpack(reader, coders));
        }
      } // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/boolean.js
      //# sourceMappingURL=array.js.map
      class BooleanCoder extends Coder {
        constructor(localName) {
          super("bool", "bool", localName, false);
        }
        defaultValue() {
          return false;
        }
        encode(writer, value) {
          return writer.writeValue(value ? 1 : 0);
        }
        decode(reader) {
          return reader.coerce(this.type, !reader.readValue().isZero());
        }
      } // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/bytes.js
      //# sourceMappingURL=boolean.js.map
      class DynamicBytesCoder extends Coder {
        constructor(type, localName) {
          super(type, type, localName, true);
        }
        defaultValue() {
          return "0x";
        }
        encode(writer, value) {
          value = (0, bytes_lib_esm /* arrayify */.lE)(value);
          let length = writer.writeValue(value.length);
          length += writer.writeBytes(value);
          return length;
        }
        decode(reader) {
          return reader.readBytes(reader.readValue().toNumber(), true);
        }
      }
      class BytesCoder extends DynamicBytesCoder {
        constructor(localName) {
          super("bytes", localName);
        }
        decode(reader) {
          return reader.coerce(this.name, (0, bytes_lib_esm /* hexlify */.Dv)(super.decode(reader)));
        }
      } // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js
      //# sourceMappingURL=bytes.js.map
      // @TODO: Merge this with bytes
      class FixedBytesCoder extends Coder {
        constructor(size, localName) {
          let name = "bytes" + String(size);
          super(name, name, localName, false);
          this.size = size;
        }
        defaultValue() {
          return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
        }
        encode(writer, value) {
          let data = (0, bytes_lib_esm /* arrayify */.lE)(value);
          if (data.length !== this.size) {
            this._throwError("incorrect data length", value);
          }
          return writer.writeBytes(data);
        }
        decode(reader) {
          return reader.coerce(this.name, (0, bytes_lib_esm /* hexlify */.Dv)(reader.readBytes(this.size)));
        }
      } // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/null.js
      //# sourceMappingURL=fixed-bytes.js.map
      class NullCoder extends Coder {
        constructor(localName) {
          super("null", "", localName, false);
        }
        defaultValue() {
          return null;
        }
        encode(writer, value) {
          if (value != null) {
            this._throwError("not null", value);
          }
          return writer.writeBytes([]);
        }
        decode(reader) {
          reader.readBytes(0);
          return reader.coerce(this.name, null);
        }
      }
      //# sourceMappingURL=null.js.map
      // EXTERNAL MODULE: ./node_modules/@ethersproject/constants/lib.esm/bignumbers.js
      var bignumbers = __webpack_require__(1046); // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/number.js
      class NumberCoder extends Coder {
        constructor(size, signed, localName) {
          const name = (signed ? "int" : "uint") + size * 8;
          super(name, name, localName, false);
          this.size = size;
          this.signed = signed;
        }
        defaultValue() {
          return 0;
        }
        encode(writer, value) {
          let v = bignumber /* BigNumber.from */.O$.from(value);
          // Check bounds are safe for encoding
          let maxUintValue = bignumbers /* MaxUint256.mask */.Bz.mask(writer.wordSize * 8);
          if (this.signed) {
            let bounds = maxUintValue.mask(this.size * 8 - 1);
            if (v.gt(bounds) || v.lt(bounds.add(bignumbers /* One */.fh).mul(bignumbers /* NegativeOne */.tL))) {
              this._throwError("value out-of-bounds", value);
            }
          } else if (v.lt(bignumbers /* Zero */._Y) || v.gt(maxUintValue.mask(this.size * 8))) {
            this._throwError("value out-of-bounds", value);
          }
          v = v.toTwos(this.size * 8).mask(this.size * 8);
          if (this.signed) {
            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
          }
          return writer.writeValue(v);
        }
        decode(reader) {
          let value = reader.readValue().mask(this.size * 8);
          if (this.signed) {
            value = value.fromTwos(this.size * 8);
          }
          return reader.coerce(this.name, value);
        }
      } // CONCATENATED MODULE: ./node_modules/@ethersproject/strings/lib.esm/_version.js
      //# sourceMappingURL=number.js.map
      const _version_version = "strings/5.7.0"; // CONCATENATED MODULE: ./node_modules/@ethersproject/strings/lib.esm/utf8.js
      //# sourceMappingURL=_version.js.map
      const utf8_logger = new logger_lib_esm /* Logger */.Yd(_version_version);
      ///////////////////////////////
      var UnicodeNormalizationForm;
      (function (UnicodeNormalizationForm) {
        UnicodeNormalizationForm["current"] = "";
        UnicodeNormalizationForm["NFC"] = "NFC";
        UnicodeNormalizationForm["NFD"] = "NFD";
        UnicodeNormalizationForm["NFKC"] = "NFKC";
        UnicodeNormalizationForm["NFKD"] = "NFKD";
      })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
      var Utf8ErrorReason;
      (function (Utf8ErrorReason) {
        // A continuation byte was present where there was nothing to continue
        // - offset = the index the codepoint began in
        Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
        // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
        // - offset = the index the codepoint began in
        Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
        // The string is too short to process the expected codepoint
        // - offset = the index the codepoint began in
        Utf8ErrorReason["OVERRUN"] = "string overrun";
        // A missing continuation byte was expected but not found
        // - offset = the index the continuation byte was expected at
        Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
        // The computed code point is outside the range for UTF-8
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; outside the UTF-8 range
        Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
        // UTF-8 strings may not contain UTF-16 surrogate pairs
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
        Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
        // The string is an overlong representation
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; already bounds checked
        Utf8ErrorReason["OVERLONG"] = "overlong representation";
      })(Utf8ErrorReason || (Utf8ErrorReason = {}));
      function errorFunc(reason, offset, bytes, output, badCodepoint) {
        return utf8_logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
      }
      function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
        // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
        if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
          let i = 0;
          for (let o = offset + 1; o < bytes.length; o++) {
            if (bytes[o] >> 6 !== 0x02) {
              break;
            }
            i++;
          }
          return i;
        }
        // This byte runs us past the end of the string, so just jump to the end
        // (but the first byte was read already read and therefore skipped)
        if (reason === Utf8ErrorReason.OVERRUN) {
          return bytes.length - offset - 1;
        }
        // Nothing to skip
        return 0;
      }
      function replaceFunc(reason, offset, bytes, output, badCodepoint) {
        // Overlong representations are otherwise "valid" code points; just non-deistingtished
        if (reason === Utf8ErrorReason.OVERLONG) {
          output.push(badCodepoint);
          return 0;
        }
        // Put the replacement character into the output
        output.push(0xfffd);
        // Otherwise, process as if ignoring errors
        return ignoreFunc(reason, offset, bytes, output, badCodepoint);
      }
      // Common error handing strategies
      const Utf8ErrorFuncs = Object.freeze({
        error: errorFunc,
        ignore: ignoreFunc,
        replace: replaceFunc,
      });
      // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
      function getUtf8CodePoints(bytes, onError) {
        if (onError == null) {
          onError = Utf8ErrorFuncs.error;
        }
        bytes = (0, bytes_lib_esm /* arrayify */.lE)(bytes);
        const result = [];
        let i = 0;
        // Invalid bytes are ignored
        while (i < bytes.length) {
          const c = bytes[i++];
          // 0xxx xxxx
          if (c >> 7 === 0) {
            result.push(c);
            continue;
          }
          // Multibyte; how many bytes left for this character?
          let extraLength = null;
          let overlongMask = null;
          // 110x xxxx 10xx xxxx
          if ((c & 0xe0) === 0xc0) {
            extraLength = 1;
            overlongMask = 0x7f;
            // 1110 xxxx 10xx xxxx 10xx xxxx
          } else if ((c & 0xf0) === 0xe0) {
            extraLength = 2;
            overlongMask = 0x7ff;
            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
          } else if ((c & 0xf8) === 0xf0) {
            extraLength = 3;
            overlongMask = 0xffff;
          } else {
            if ((c & 0xc0) === 0x80) {
              i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
            } else {
              i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
            }
            continue;
          }
          // Do we have enough bytes in our data?
          if (i - 1 + extraLength >= bytes.length) {
            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
            continue;
          }
          // Remove the length prefix from the char
          let res = c & ((1 << (8 - extraLength - 1)) - 1);
          for (let j = 0; j < extraLength; j++) {
            let nextChar = bytes[i];
            // Invalid continuation byte
            if ((nextChar & 0xc0) != 0x80) {
              i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
              res = null;
              break;
            }
            res = (res << 6) | (nextChar & 0x3f);
            i++;
          }
          // See above loop for invalid continuation byte
          if (res === null) {
            continue;
          }
          // Maximum code point
          if (res > 0x10ffff) {
            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
            continue;
          }
          // Reserved for UTF-16 surrogate halves
          if (res >= 0xd800 && res <= 0xdfff) {
            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
            continue;
          }
          // Check for overlong sequences (more bytes than needed)
          if (res <= overlongMask) {
            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
            continue;
          }
          result.push(res);
        }
        return result;
      }
      // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
      function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
        if (form != UnicodeNormalizationForm.current) {
          utf8_logger.checkNormalize();
          str = str.normalize(form);
        }
        let result = [];
        for (let i = 0; i < str.length; i++) {
          const c = str.charCodeAt(i);
          if (c < 0x80) {
            result.push(c);
          } else if (c < 0x800) {
            result.push((c >> 6) | 0xc0);
            result.push((c & 0x3f) | 0x80);
          } else if ((c & 0xfc00) == 0xd800) {
            i++;
            const c2 = str.charCodeAt(i);
            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
              throw new Error("invalid utf-8 string");
            }
            // Surrogate Pair
            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
            result.push((pair >> 18) | 0xf0);
            result.push(((pair >> 12) & 0x3f) | 0x80);
            result.push(((pair >> 6) & 0x3f) | 0x80);
            result.push((pair & 0x3f) | 0x80);
          } else {
            result.push((c >> 12) | 0xe0);
            result.push(((c >> 6) & 0x3f) | 0x80);
            result.push((c & 0x3f) | 0x80);
          }
        }
        return (0, bytes_lib_esm /* arrayify */.lE)(result);
      }
      function escapeChar(value) {
        const hex = "0000" + value.toString(16);
        return "\\u" + hex.substring(hex.length - 4);
      }
      function _toEscapedUtf8String(bytes, onError) {
        return (
          '"' +
          getUtf8CodePoints(bytes, onError)
            .map((codePoint) => {
              if (codePoint < 256) {
                switch (codePoint) {
                  case 8:
                    return "\\b";
                  case 9:
                    return "\\t";
                  case 10:
                    return "\\n";
                  case 13:
                    return "\\r";
                  case 34:
                    return '\\"';
                  case 92:
                    return "\\\\";
                }
                if (codePoint >= 32 && codePoint < 127) {
                  return String.fromCharCode(codePoint);
                }
              }
              if (codePoint <= 0xffff) {
                return escapeChar(codePoint);
              }
              codePoint -= 0x10000;
              return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
            })
            .join("") +
          '"'
        );
      }
      function _toUtf8String(codePoints) {
        return codePoints
          .map((codePoint) => {
            if (codePoint <= 0xffff) {
              return String.fromCharCode(codePoint);
            }
            codePoint -= 0x10000;
            return String.fromCharCode(((codePoint >> 10) & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);
          })
          .join("");
      }
      function toUtf8String(bytes, onError) {
        return _toUtf8String(getUtf8CodePoints(bytes, onError));
      }
      function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
        return getUtf8CodePoints(toUtf8Bytes(str, form));
      } // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/string.js
      //# sourceMappingURL=utf8.js.map
      class StringCoder extends DynamicBytesCoder {
        constructor(localName) {
          super("string", localName);
        }
        defaultValue() {
          return "";
        }
        encode(writer, value) {
          return super.encode(writer, toUtf8Bytes(value));
        }
        decode(reader) {
          return toUtf8String(super.decode(reader));
        }
      } // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/coders/tuple.js
      //# sourceMappingURL=string.js.map
      class TupleCoder extends Coder {
        constructor(coders, localName) {
          let dynamic = false;
          const types = [];
          coders.forEach((coder) => {
            if (coder.dynamic) {
              dynamic = true;
            }
            types.push(coder.type);
          });
          const type = "tuple(" + types.join(",") + ")";
          super("tuple", type, localName, dynamic);
          this.coders = coders;
        }
        defaultValue() {
          const values = [];
          this.coders.forEach((coder) => {
            values.push(coder.defaultValue());
          });
          // We only output named properties for uniquely named coders
          const uniqueNames = this.coders.reduce((accum, coder) => {
            const name = coder.localName;
            if (name) {
              if (!accum[name]) {
                accum[name] = 0;
              }
              accum[name]++;
            }
            return accum;
          }, {});
          // Add named values
          this.coders.forEach((coder, index) => {
            let name = coder.localName;
            if (!name || uniqueNames[name] !== 1) {
              return;
            }
            if (name === "length") {
              name = "_length";
            }
            if (values[name] != null) {
              return;
            }
            values[name] = values[index];
          });
          return Object.freeze(values);
        }
        encode(writer, value) {
          return pack(writer, this.coders, value);
        }
        decode(reader) {
          return reader.coerce(this.name, unpack(reader, this.coders));
        }
      } // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/abi-coder.js
      //# sourceMappingURL=tuple.js.map
      // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI

      const abi_coder_logger = new logger_lib_esm /* Logger */.Yd(version);

      const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
      const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
      class AbiCoder {
        constructor(coerceFunc) {
          (0, lib_esm /* defineReadOnly */.zG)(this, "coerceFunc", coerceFunc || null);
        }
        _getCoder(param) {
          switch (param.baseType) {
            case "address":
              return new AddressCoder(param.name);
            case "bool":
              return new BooleanCoder(param.name);
            case "string":
              return new StringCoder(param.name);
            case "bytes":
              return new BytesCoder(param.name);
            case "array":
              return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
            case "tuple":
              return new TupleCoder(
                (param.components || []).map((component) => {
                  return this._getCoder(component);
                }),
                param.name
              );
            case "":
              return new NullCoder(param.name);
          }
          // u?int[0-9]*
          let match = param.type.match(paramTypeNumber);
          if (match) {
            let size = parseInt(match[2] || "256");
            if (size === 0 || size > 256 || size % 8 !== 0) {
              abi_coder_logger.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
            }
            return new NumberCoder(size / 8, match[1] === "int", param.name);
          }
          // bytes[0-9]+
          match = param.type.match(paramTypeBytes);
          if (match) {
            let size = parseInt(match[1]);
            if (size === 0 || size > 32) {
              abi_coder_logger.throwArgumentError("invalid bytes length", "param", param);
            }
            return new FixedBytesCoder(size, param.name);
          }
          return abi_coder_logger.throwArgumentError("invalid type", "type", param.type);
        }
        _getWordSize() {
          return 32;
        }
        _getReader(data, allowLoose) {
          return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
        }
        _getWriter() {
          return new Writer(this._getWordSize());
        }
        getDefaultValue(types) {
          const coders = types.map((type) => this._getCoder(ParamType.from(type)));
          const coder = new TupleCoder(coders, "_");
          return coder.defaultValue();
        }
        encode(types, values) {
          if (types.length !== values.length) {
            abi_coder_logger.throwError(
              "types/values length mismatch",
              logger_lib_esm /* Logger.errors.INVALID_ARGUMENT */.Yd.errors.INVALID_ARGUMENT,
              {
                count: { types: types.length, values: values.length },
                value: { types: types, values: values },
              }
            );
          }
          const coders = types.map((type) => this._getCoder(ParamType.from(type)));
          const coder = new TupleCoder(coders, "_");
          const writer = this._getWriter();
          coder.encode(writer, values);
          return writer.data;
        }
        decode(types, data, loose) {
          const coders = types.map((type) => this._getCoder(ParamType.from(type)));
          const coder = new TupleCoder(coders, "_");
          return coder.decode(this._getReader((0, bytes_lib_esm /* arrayify */.lE)(data), loose));
        }
      }
      const defaultAbiCoder = new AbiCoder();
      //# sourceMappingURL=abi-coder.js.map // CONCATENATED MODULE: ./node_modules/@ethersproject/abi/lib.esm/index.js

      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 4594: /***/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      "use strict";

      // EXPORTS
      __webpack_require__.d(__webpack_exports__, {
        Kn: () => /* binding */ getAddress,
      });

      // UNUSED EXPORTS: getContractAddress, getCreate2Address, getIcapAddress, isAddress

      // EXTERNAL MODULE: ./node_modules/@ethersproject/bytes/lib.esm/index.js + 1 modules
      var lib_esm = __webpack_require__(3286);
      // EXTERNAL MODULE: ./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js + 1 modules
      var bignumber = __webpack_require__(5154);
      // EXTERNAL MODULE: ./node_modules/@ethersproject/keccak256/lib.esm/index.js
      var keccak256_lib_esm = __webpack_require__(8197);
      // EXTERNAL MODULE: ./node_modules/@ethersproject/logger/lib.esm/index.js + 1 modules
      var logger_lib_esm = __webpack_require__(711); // CONCATENATED MODULE: ./node_modules/@ethersproject/address/lib.esm/_version.js
      const version = "address/5.7.0"; // CONCATENATED MODULE: ./node_modules/@ethersproject/address/lib.esm/index.js
      //# sourceMappingURL=_version.js.map
      const logger = new logger_lib_esm /* Logger */.Yd(version);
      function getChecksumAddress(address) {
        if (!(0, lib_esm /* isHexString */.A7)(address, 20)) {
          logger.throwArgumentError("invalid address", "address", address);
        }
        address = address.toLowerCase();
        const chars = address.substring(2).split("");
        const expanded = new Uint8Array(40);
        for (let i = 0; i < 40; i++) {
          expanded[i] = chars[i].charCodeAt(0);
        }
        const hashed = (0, lib_esm /* arrayify */.lE)((0, keccak256_lib_esm /* keccak256 */.w)(expanded));
        for (let i = 0; i < 40; i += 2) {
          if (hashed[i >> 1] >> 4 >= 8) {
            chars[i] = chars[i].toUpperCase();
          }
          if ((hashed[i >> 1] & 0x0f) >= 8) {
            chars[i + 1] = chars[i + 1].toUpperCase();
          }
        }
        return "0x" + chars.join("");
      }
      // Shims for environments that are missing some required constants and functions
      const MAX_SAFE_INTEGER = 0x1fffffffffffff;
      function log10(x) {
        if (Math.log10) {
          return Math.log10(x);
        }
        return Math.log(x) / Math.LN10;
      }
      // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
      // Create lookup table
      const ibanLookup = {};
      for (let i = 0; i < 10; i++) {
        ibanLookup[String(i)] = String(i);
      }
      for (let i = 0; i < 26; i++) {
        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
      }
      // How many decimal digits can we process? (for 64-bit float, this is 15)
      const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
      function ibanChecksum(address) {
        address = address.toUpperCase();
        address = address.substring(4) + address.substring(0, 2) + "00";
        let expanded = address
          .split("")
          .map((c) => {
            return ibanLookup[c];
          })
          .join("");
        // Javascript can handle integers safely up to 15 (decimal) digits
        while (expanded.length >= safeDigits) {
          let block = expanded.substring(0, safeDigits);
          expanded = (parseInt(block, 10) % 97) + expanded.substring(block.length);
        }
        let checksum = String(98 - (parseInt(expanded, 10) % 97));
        while (checksum.length < 2) {
          checksum = "0" + checksum;
        }
        return checksum;
      }
      function getAddress(address) {
        let result = null;
        if (typeof address !== "string") {
          logger.throwArgumentError("invalid address", "address", address);
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
          // Missing the 0x prefix
          if (address.substring(0, 2) !== "0x") {
            address = "0x" + address;
          }
          result = getChecksumAddress(address);
          // It is a checksummed address with a bad checksum
          if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
            logger.throwArgumentError("bad address checksum", "address", address);
          }
          // Maybe ICAP? (we only support direct mode)
        } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
          // It is an ICAP address with a bad checksum
          if (address.substring(2, 4) !== ibanChecksum(address)) {
            logger.throwArgumentError("bad icap checksum", "address", address);
          }
          result = (0, bignumber /* _base36To16 */.g$)(address.substring(4));
          while (result.length < 40) {
            result = "0" + result;
          }
          result = getChecksumAddress("0x" + result);
        } else {
          logger.throwArgumentError("invalid address", "address", address);
        }
        return result;
      }
      function isAddress(address) {
        try {
          getAddress(address);
          return true;
        } catch (error) {}
        return false;
      }
      function getIcapAddress(address) {
        let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();
        while (base36.length < 30) {
          base36 = "0" + base36;
        }
        return "XE" + ibanChecksum("XE00" + base36) + base36;
      }
      // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
      function getContractAddress(transaction) {
        let from = null;
        try {
          from = getAddress(transaction.from);
        } catch (error) {
          logger.throwArgumentError("missing from address", "transaction", transaction);
        }
        const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
        return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));
      }
      function getCreate2Address(from, salt, initCodeHash) {
        if (hexDataLength(salt) !== 32) {
          logger.throwArgumentError("salt must be 32 bytes", "salt", salt);
        }
        if (hexDataLength(initCodeHash) !== 32) {
          logger.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
        }
        return getAddress(hexDataSlice(keccak256(concat(["0xff", getAddress(from), salt, initCodeHash])), 12));
      }
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 5154: /***/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      "use strict";

      // EXPORTS
      __webpack_require__.d(__webpack_exports__, {
        O$: () => /* binding */ BigNumber,
        g$: () => /* binding */ _base36To16,
      });

      // UNUSED EXPORTS: _base16To36, isBigNumberish

      // EXTERNAL MODULE: ./node_modules/bn.js/lib/bn.js
      var bn = __webpack_require__(3550);
      var bn_default = /*#__PURE__*/ __webpack_require__.n(bn);
      // EXTERNAL MODULE: ./node_modules/@ethersproject/bytes/lib.esm/index.js + 1 modules
      var lib_esm = __webpack_require__(3286);
      // EXTERNAL MODULE: ./node_modules/@ethersproject/logger/lib.esm/index.js + 1 modules
      var logger_lib_esm = __webpack_require__(711); // CONCATENATED MODULE: ./node_modules/@ethersproject/bignumber/lib.esm/_version.js
      const version = "bignumber/5.7.0"; // CONCATENATED MODULE: ./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
      //# sourceMappingURL=_version.js.map
      /**
       *  BigNumber
       *
       *  A wrapper around the BN.js object. We use the BN.js library
       *  because it is used by elliptic, so it is required regardless.
       *
       */

      var BN = bn_default().BN;

      const logger = new logger_lib_esm /* Logger */.Yd(version);
      const _constructorGuard = {};
      const MAX_SAFE = 0x1fffffffffffff;
      function isBigNumberish(value) {
        return (
          value != null &&
          (BigNumber.isBigNumber(value) ||
            (typeof value === "number" && value % 1 === 0) ||
            (typeof value === "string" && !!value.match(/^-?[0-9]+$/)) ||
            isHexString(value) ||
            typeof value === "bigint" ||
            isBytes(value))
        );
      }
      // Only warn about passing 10 into radix once
      let _warnedToStringRadix = false;
      class BigNumber {
        constructor(constructorGuard, hex) {
          if (constructorGuard !== _constructorGuard) {
            logger.throwError(
              "cannot call constructor directly; use BigNumber.from",
              logger_lib_esm /* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION,
              {
                operation: "new (BigNumber)",
              }
            );
          }
          this._hex = hex;
          this._isBigNumber = true;
          Object.freeze(this);
        }
        fromTwos(value) {
          return toBigNumber(toBN(this).fromTwos(value));
        }
        toTwos(value) {
          return toBigNumber(toBN(this).toTwos(value));
        }
        abs() {
          if (this._hex[0] === "-") {
            return BigNumber.from(this._hex.substring(1));
          }
          return this;
        }
        add(other) {
          return toBigNumber(toBN(this).add(toBN(other)));
        }
        sub(other) {
          return toBigNumber(toBN(this).sub(toBN(other)));
        }
        div(other) {
          const o = BigNumber.from(other);
          if (o.isZero()) {
            throwFault("division-by-zero", "div");
          }
          return toBigNumber(toBN(this).div(toBN(other)));
        }
        mul(other) {
          return toBigNumber(toBN(this).mul(toBN(other)));
        }
        mod(other) {
          const value = toBN(other);
          if (value.isNeg()) {
            throwFault("division-by-zero", "mod");
          }
          return toBigNumber(toBN(this).umod(value));
        }
        pow(other) {
          const value = toBN(other);
          if (value.isNeg()) {
            throwFault("negative-power", "pow");
          }
          return toBigNumber(toBN(this).pow(value));
        }
        and(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
            throwFault("unbound-bitwise-result", "and");
          }
          return toBigNumber(toBN(this).and(value));
        }
        or(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
            throwFault("unbound-bitwise-result", "or");
          }
          return toBigNumber(toBN(this).or(value));
        }
        xor(other) {
          const value = toBN(other);
          if (this.isNegative() || value.isNeg()) {
            throwFault("unbound-bitwise-result", "xor");
          }
          return toBigNumber(toBN(this).xor(value));
        }
        mask(value) {
          if (this.isNegative() || value < 0) {
            throwFault("negative-width", "mask");
          }
          return toBigNumber(toBN(this).maskn(value));
        }
        shl(value) {
          if (this.isNegative() || value < 0) {
            throwFault("negative-width", "shl");
          }
          return toBigNumber(toBN(this).shln(value));
        }
        shr(value) {
          if (this.isNegative() || value < 0) {
            throwFault("negative-width", "shr");
          }
          return toBigNumber(toBN(this).shrn(value));
        }
        eq(other) {
          return toBN(this).eq(toBN(other));
        }
        lt(other) {
          return toBN(this).lt(toBN(other));
        }
        lte(other) {
          return toBN(this).lte(toBN(other));
        }
        gt(other) {
          return toBN(this).gt(toBN(other));
        }
        gte(other) {
          return toBN(this).gte(toBN(other));
        }
        isNegative() {
          return this._hex[0] === "-";
        }
        isZero() {
          return toBN(this).isZero();
        }
        toNumber() {
          try {
            return toBN(this).toNumber();
          } catch (error) {
            throwFault("overflow", "toNumber", this.toString());
          }
          return null;
        }
        toBigInt() {
          try {
            return BigInt(this.toString());
          } catch (e) {}
          return logger.throwError(
            "this platform does not support BigInt",
            logger_lib_esm /* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION,
            {
              value: this.toString(),
            }
          );
        }
        toString() {
          // Lots of people expect this, which we do not support, so check (See: #889)
          if (arguments.length > 0) {
            if (arguments[0] === 10) {
              if (!_warnedToStringRadix) {
                _warnedToStringRadix = true;
                logger.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
              }
            } else if (arguments[0] === 16) {
              logger.throwError(
                "BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",
                logger_lib_esm /* Logger.errors.UNEXPECTED_ARGUMENT */.Yd.errors.UNEXPECTED_ARGUMENT,
                {}
              );
            } else {
              logger.throwError(
                "BigNumber.toString does not accept parameters",
                logger_lib_esm /* Logger.errors.UNEXPECTED_ARGUMENT */.Yd.errors.UNEXPECTED_ARGUMENT,
                {}
              );
            }
          }
          return toBN(this).toString(10);
        }
        toHexString() {
          return this._hex;
        }
        toJSON(key) {
          return { type: "BigNumber", hex: this.toHexString() };
        }
        static from(value) {
          if (value instanceof BigNumber) {
            return value;
          }
          if (typeof value === "string") {
            if (value.match(/^-?0x[0-9a-f]+$/i)) {
              return new BigNumber(_constructorGuard, toHex(value));
            }
            if (value.match(/^-?[0-9]+$/)) {
              return new BigNumber(_constructorGuard, toHex(new BN(value)));
            }
            return logger.throwArgumentError("invalid BigNumber string", "value", value);
          }
          if (typeof value === "number") {
            if (value % 1) {
              throwFault("underflow", "BigNumber.from", value);
            }
            if (value >= MAX_SAFE || value <= -MAX_SAFE) {
              throwFault("overflow", "BigNumber.from", value);
            }
            return BigNumber.from(String(value));
          }
          const anyValue = value;
          if (typeof anyValue === "bigint") {
            return BigNumber.from(anyValue.toString());
          }
          if ((0, lib_esm /* isBytes */._t)(anyValue)) {
            return BigNumber.from((0, lib_esm /* hexlify */.Dv)(anyValue));
          }
          if (anyValue) {
            // Hexable interface (takes priority)
            if (anyValue.toHexString) {
              const hex = anyValue.toHexString();
              if (typeof hex === "string") {
                return BigNumber.from(hex);
              }
            } else {
              // For now, handle legacy JSON-ified values (goes away in v6)
              let hex = anyValue._hex;
              // New-form JSON
              if (hex == null && anyValue.type === "BigNumber") {
                hex = anyValue.hex;
              }
              if (typeof hex === "string") {
                if ((0, lib_esm /* isHexString */.A7)(hex) || (hex[0] === "-" && (0, lib_esm /* isHexString */.A7)(hex.substring(1)))) {
                  return BigNumber.from(hex);
                }
              }
            }
          }
          return logger.throwArgumentError("invalid BigNumber value", "value", value);
        }
        static isBigNumber(value) {
          return !!(value && value._isBigNumber);
        }
      }
      // Normalize the hex string
      function toHex(value) {
        // For BN, call on the hex string
        if (typeof value !== "string") {
          return toHex(value.toString(16));
        }
        // If negative, prepend the negative sign to the normalized positive value
        if (value[0] === "-") {
          // Strip off the negative sign
          value = value.substring(1);
          // Cannot have multiple negative signs (e.g. "--0x04")
          if (value[0] === "-") {
            logger.throwArgumentError("invalid hex", "value", value);
          }
          // Call toHex on the positive component
          value = toHex(value);
          // Do not allow "-0x00"
          if (value === "0x00") {
            return value;
          }
          // Negate the value
          return "-" + value;
        }
        // Add a "0x" prefix if missing
        if (value.substring(0, 2) !== "0x") {
          value = "0x" + value;
        }
        // Normalize zero
        if (value === "0x") {
          return "0x00";
        }
        // Make the string even length
        if (value.length % 2) {
          value = "0x0" + value.substring(2);
        }
        // Trim to smallest even-length string
        while (value.length > 4 && value.substring(0, 4) === "0x00") {
          value = "0x" + value.substring(4);
        }
        return value;
      }
      function toBigNumber(value) {
        return BigNumber.from(toHex(value));
      }
      function toBN(value) {
        const hex = BigNumber.from(value).toHexString();
        if (hex[0] === "-") {
          return new BN("-" + hex.substring(3), 16);
        }
        return new BN(hex.substring(2), 16);
      }
      function throwFault(fault, operation, value) {
        const params = { fault: fault, operation: operation };
        if (value != null) {
          params.value = value;
        }
        return logger.throwError(fault, logger_lib_esm /* Logger.errors.NUMERIC_FAULT */.Yd.errors.NUMERIC_FAULT, params);
      }
      // value should have no prefix
      function _base36To16(value) {
        return new BN(value, 36).toString(16);
      }
      // value should have no prefix
      function _base16To36(value) {
        return new BN(value, 16).toString(36);
      }
      //# sourceMappingURL=bignumber.js.map

      /***/
    },

    /***/ 3286: /***/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      "use strict";

      // EXPORTS
      __webpack_require__.d(__webpack_exports__, {
        lE: () => /* binding */ arrayify,
        zo: () => /* binding */ concat,
        xs: () => /* binding */ hexConcat,
        E1: () => /* binding */ hexDataLength,
        p3: () => /* binding */ hexDataSlice,
        $m: () => /* binding */ hexZeroPad,
        Dv: () => /* binding */ hexlify,
        _t: () => /* binding */ isBytes,
        Zq: () => /* binding */ isBytesLike,
        A7: () => /* binding */ isHexString,
        N: () => /* binding */ splitSignature,
        G1: () => /* binding */ stripZeros,
      });

      // UNUSED EXPORTS: hexStripZeros, hexValue, joinSignature, zeroPad

      // EXTERNAL MODULE: ./node_modules/@ethersproject/logger/lib.esm/index.js + 1 modules
      var lib_esm = __webpack_require__(711); // CONCATENATED MODULE: ./node_modules/@ethersproject/bytes/lib.esm/_version.js
      const version = "bytes/5.7.0"; // CONCATENATED MODULE: ./node_modules/@ethersproject/bytes/lib.esm/index.js
      //# sourceMappingURL=_version.js.map
      const logger = new lib_esm /* Logger */.Yd(version);
      ///////////////////////////////
      function isHexable(value) {
        return !!value.toHexString;
      }
      function addSlice(array) {
        if (array.slice) {
          return array;
        }
        array.slice = function () {
          const args = Array.prototype.slice.call(arguments);
          return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
        };
        return array;
      }
      function isBytesLike(value) {
        return (isHexString(value) && !(value.length % 2)) || isBytes(value);
      }
      function isInteger(value) {
        return typeof value === "number" && value == value && value % 1 === 0;
      }
      function isBytes(value) {
        if (value == null) {
          return false;
        }
        if (value.constructor === Uint8Array) {
          return true;
        }
        if (typeof value === "string") {
          return false;
        }
        if (!isInteger(value.length) || value.length < 0) {
          return false;
        }
        for (let i = 0; i < value.length; i++) {
          const v = value[i];
          if (!isInteger(v) || v < 0 || v >= 256) {
            return false;
          }
        }
        return true;
      }
      function arrayify(value, options) {
        if (!options) {
          options = {};
        }
        if (typeof value === "number") {
          logger.checkSafeUint53(value, "invalid arrayify value");
          const result = [];
          while (value) {
            result.unshift(value & 0xff);
            value = parseInt(String(value / 256));
          }
          if (result.length === 0) {
            result.push(0);
          }
          return addSlice(new Uint8Array(result));
        }
        if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
          value = "0x" + value;
        }
        if (isHexable(value)) {
          value = value.toHexString();
        }
        if (isHexString(value)) {
          let hex = value.substring(2);
          if (hex.length % 2) {
            if (options.hexPad === "left") {
              hex = "0" + hex;
            } else if (options.hexPad === "right") {
              hex += "0";
            } else {
              logger.throwArgumentError("hex data is odd-length", "value", value);
            }
          }
          const result = [];
          for (let i = 0; i < hex.length; i += 2) {
            result.push(parseInt(hex.substring(i, i + 2), 16));
          }
          return addSlice(new Uint8Array(result));
        }
        if (isBytes(value)) {
          return addSlice(new Uint8Array(value));
        }
        return logger.throwArgumentError("invalid arrayify value", "value", value);
      }
      function concat(items) {
        const objects = items.map((item) => arrayify(item));
        const length = objects.reduce((accum, item) => accum + item.length, 0);
        const result = new Uint8Array(length);
        objects.reduce((offset, object) => {
          result.set(object, offset);
          return offset + object.length;
        }, 0);
        return addSlice(result);
      }
      function stripZeros(value) {
        let result = arrayify(value);
        if (result.length === 0) {
          return result;
        }
        // Find the first non-zero entry
        let start = 0;
        while (start < result.length && result[start] === 0) {
          start++;
        }
        // If we started with zeros, strip them
        if (start) {
          result = result.slice(start);
        }
        return result;
      }
      function zeroPad(value, length) {
        value = arrayify(value);
        if (value.length > length) {
          logger.throwArgumentError("value out of range", "value", arguments[0]);
        }
        const result = new Uint8Array(length);
        result.set(value, length - value.length);
        return addSlice(result);
      }
      function isHexString(value, length) {
        if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
          return false;
        }
        if (length && value.length !== 2 + 2 * length) {
          return false;
        }
        return true;
      }
      const HexCharacters = "0123456789abcdef";
      function hexlify(value, options) {
        if (!options) {
          options = {};
        }
        if (typeof value === "number") {
          logger.checkSafeUint53(value, "invalid hexlify value");
          let hex = "";
          while (value) {
            hex = HexCharacters[value & 0xf] + hex;
            value = Math.floor(value / 16);
          }
          if (hex.length) {
            if (hex.length % 2) {
              hex = "0" + hex;
            }
            return "0x" + hex;
          }
          return "0x00";
        }
        if (typeof value === "bigint") {
          value = value.toString(16);
          if (value.length % 2) {
            return "0x0" + value;
          }
          return "0x" + value;
        }
        if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
          value = "0x" + value;
        }
        if (isHexable(value)) {
          return value.toHexString();
        }
        if (isHexString(value)) {
          if (value.length % 2) {
            if (options.hexPad === "left") {
              value = "0x0" + value.substring(2);
            } else if (options.hexPad === "right") {
              value += "0";
            } else {
              logger.throwArgumentError("hex data is odd-length", "value", value);
            }
          }
          return value.toLowerCase();
        }
        if (isBytes(value)) {
          let result = "0x";
          for (let i = 0; i < value.length; i++) {
            let v = value[i];
            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
          }
          return result;
        }
        return logger.throwArgumentError("invalid hexlify value", "value", value);
      }
      /*
function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
    if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
        return "0x0" + value.substring(2);
    }
    return value;
}
*/
      function hexDataLength(data) {
        if (typeof data !== "string") {
          data = hexlify(data);
        } else if (!isHexString(data) || data.length % 2) {
          return null;
        }
        return (data.length - 2) / 2;
      }
      function hexDataSlice(data, offset, endOffset) {
        if (typeof data !== "string") {
          data = hexlify(data);
        } else if (!isHexString(data) || data.length % 2) {
          logger.throwArgumentError("invalid hexData", "value", data);
        }
        offset = 2 + 2 * offset;
        if (endOffset != null) {
          return "0x" + data.substring(offset, 2 + 2 * endOffset);
        }
        return "0x" + data.substring(offset);
      }
      function hexConcat(items) {
        let result = "0x";
        items.forEach((item) => {
          result += hexlify(item).substring(2);
        });
        return result;
      }
      function hexValue(value) {
        const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
        if (trimmed === "0x") {
          return "0x0";
        }
        return trimmed;
      }
      function hexStripZeros(value) {
        if (typeof value !== "string") {
          value = hexlify(value);
        }
        if (!isHexString(value)) {
          logger.throwArgumentError("invalid hex string", "value", value);
        }
        value = value.substring(2);
        let offset = 0;
        while (offset < value.length && value[offset] === "0") {
          offset++;
        }
        return "0x" + value.substring(offset);
      }
      function hexZeroPad(value, length) {
        if (typeof value !== "string") {
          value = hexlify(value);
        } else if (!isHexString(value)) {
          logger.throwArgumentError("invalid hex string", "value", value);
        }
        if (value.length > 2 * length + 2) {
          logger.throwArgumentError("value out of range", "value", arguments[1]);
        }
        while (value.length < 2 * length + 2) {
          value = "0x0" + value.substring(2);
        }
        return value;
      }
      function splitSignature(signature) {
        const result = {
          r: "0x",
          s: "0x",
          _vs: "0x",
          recoveryParam: 0,
          v: 0,
          yParityAndS: "0x",
          compact: "0x",
        };
        if (isBytesLike(signature)) {
          let bytes = arrayify(signature);
          // Get the r, s and v
          if (bytes.length === 64) {
            // EIP-2098; pull the v from the top bit of s and clear it
            result.v = 27 + (bytes[32] >> 7);
            bytes[32] &= 0x7f;
            result.r = hexlify(bytes.slice(0, 32));
            result.s = hexlify(bytes.slice(32, 64));
          } else if (bytes.length === 65) {
            result.r = hexlify(bytes.slice(0, 32));
            result.s = hexlify(bytes.slice(32, 64));
            result.v = bytes[64];
          } else {
            logger.throwArgumentError("invalid signature string", "signature", signature);
          }
          // Allow a recid to be used as the v
          if (result.v < 27) {
            if (result.v === 0 || result.v === 1) {
              result.v += 27;
            } else {
              logger.throwArgumentError("signature invalid v byte", "signature", signature);
            }
          }
          // Compute recoveryParam from v
          result.recoveryParam = 1 - (result.v % 2);
          // Compute _vs from recoveryParam and s
          if (result.recoveryParam) {
            bytes[32] |= 0x80;
          }
          result._vs = hexlify(bytes.slice(32, 64));
        } else {
          result.r = signature.r;
          result.s = signature.s;
          result.v = signature.v;
          result.recoveryParam = signature.recoveryParam;
          result._vs = signature._vs;
          // If the _vs is available, use it to populate missing s, v and recoveryParam
          // and verify non-missing s, v and recoveryParam
          if (result._vs != null) {
            const vs = zeroPad(arrayify(result._vs), 32);
            result._vs = hexlify(vs);
            // Set or check the recid
            const recoveryParam = vs[0] >= 128 ? 1 : 0;
            if (result.recoveryParam == null) {
              result.recoveryParam = recoveryParam;
            } else if (result.recoveryParam !== recoveryParam) {
              logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
            }
            // Set or check the s
            vs[0] &= 0x7f;
            const s = hexlify(vs);
            if (result.s == null) {
              result.s = s;
            } else if (result.s !== s) {
              logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
            }
          }
          // Use recid and v to populate each other
          if (result.recoveryParam == null) {
            if (result.v == null) {
              logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
            } else if (result.v === 0 || result.v === 1) {
              result.recoveryParam = result.v;
            } else {
              result.recoveryParam = 1 - (result.v % 2);
            }
          } else {
            if (result.v == null) {
              result.v = 27 + result.recoveryParam;
            } else {
              const recId = result.v === 0 || result.v === 1 ? result.v : 1 - (result.v % 2);
              if (result.recoveryParam !== recId) {
                logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
              }
            }
          }
          if (result.r == null || !isHexString(result.r)) {
            logger.throwArgumentError("signature missing or invalid r", "signature", signature);
          } else {
            result.r = hexZeroPad(result.r, 32);
          }
          if (result.s == null || !isHexString(result.s)) {
            logger.throwArgumentError("signature missing or invalid s", "signature", signature);
          } else {
            result.s = hexZeroPad(result.s, 32);
          }
          const vs = arrayify(result.s);
          if (vs[0] >= 128) {
            logger.throwArgumentError("signature s out of range", "signature", signature);
          }
          if (result.recoveryParam) {
            vs[0] |= 0x80;
          }
          const _vs = hexlify(vs);
          if (result._vs) {
            if (!isHexString(result._vs)) {
              logger.throwArgumentError("signature invalid _vs", "signature", signature);
            }
            result._vs = hexZeroPad(result._vs, 32);
          }
          // Set or check the _vs
          if (result._vs == null) {
            result._vs = _vs;
          } else if (result._vs !== _vs) {
            logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
          }
        }
        result.yParityAndS = result._vs;
        result.compact = result.r + result.yParityAndS.substring(2);
        return result;
      }
      function joinSignature(signature) {
        signature = splitSignature(signature);
        return hexlify(concat([signature.r, signature.s, signature.recoveryParam ? "0x1c" : "0x1b"]));
      }
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 1046: /***/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      "use strict";
      /* harmony export */ __webpack_require__.d(__webpack_exports__, {
        /* harmony export */ Bz: () => /* binding */ MaxUint256,
        /* harmony export */ _Y: () => /* binding */ Zero,
        /* harmony export */ fh: () => /* binding */ One,
        /* harmony export */ tL: () => /* binding */ NegativeOne,
        /* harmony export */
      });
      /* unused harmony exports Two, WeiPerEther, MinInt256, MaxInt256 */
      /* harmony import */ var _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5154);

      const NegativeOne = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__ /* .BigNumber.from */.O$.from(-1);
      const Zero = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__ /* .BigNumber.from */.O$.from(0);
      const One = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__ /* .BigNumber.from */.O$.from(1);
      const Two = /*#__PURE__*/ /* unused pure expression or super */ null && BigNumber.from(2);
      const WeiPerEther = /*#__PURE__*/ /* unused pure expression or super */ null && BigNumber.from("1000000000000000000");
      const MaxUint256 = /*#__PURE__*/ _ethersproject_bignumber__WEBPACK_IMPORTED_MODULE_0__ /* .BigNumber.from */.O$.from(
        "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
      );
      const MinInt256 =
        /*#__PURE__*/ /* unused pure expression or super */ null &&
        BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
      const MaxInt256 =
        /*#__PURE__*/ /* unused pure expression or super */ null &&
        BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

      //# sourceMappingURL=bignumbers.js.map

      /***/
    },

    /***/ 8197: /***/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      "use strict";
      /* harmony export */ __webpack_require__.d(__webpack_exports__, {
        /* harmony export */ w: () => /* binding */ keccak256,
        /* harmony export */
      });
      /* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1094);
      /* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_0___default =
        /*#__PURE__*/ __webpack_require__.n(js_sha3__WEBPACK_IMPORTED_MODULE_0__);
      /* harmony import */ var _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3286);

      function keccak256(data) {
        return (
          "0x" +
          js_sha3__WEBPACK_IMPORTED_MODULE_0___default().keccak_256((0, _ethersproject_bytes__WEBPACK_IMPORTED_MODULE_1__ /* .arrayify */.lE)(data))
        );
      }
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 711: /***/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      "use strict";

      // EXPORTS
      __webpack_require__.d(__webpack_exports__, {
        Yd: () => /* binding */ Logger,
      }); // CONCATENATED MODULE: ./node_modules/@ethersproject/logger/lib.esm/_version.js

      // UNUSED EXPORTS: ErrorCode, LogLevel

      const version = "logger/5.7.0"; // CONCATENATED MODULE: ./node_modules/@ethersproject/logger/lib.esm/index.js
      //# sourceMappingURL=_version.js.map
      let _permanentCensorErrors = false;
      let _censorErrors = false;
      const LogLevels = { debug: 1, default: 2, info: 2, warning: 3, error: 4, off: 5 };
      let _logLevel = LogLevels["default"];

      let _globalLogger = null;
      function _checkNormalize() {
        try {
          const missing = [];
          // Make sure all forms of normalization are supported
          ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
            try {
              if ("test".normalize(form) !== "test") {
                throw new Error("bad normalize");
              }
            } catch (error) {
              missing.push(form);
            }
          });
          if (missing.length) {
            throw new Error("missing " + missing.join(", "));
          }
          if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
            throw new Error("broken implementation");
          }
        } catch (error) {
          return error.message;
        }
        return null;
      }
      const _normalizeError = _checkNormalize();
      var LogLevel;
      (function (LogLevel) {
        LogLevel["DEBUG"] = "DEBUG";
        LogLevel["INFO"] = "INFO";
        LogLevel["WARNING"] = "WARNING";
        LogLevel["ERROR"] = "ERROR";
        LogLevel["OFF"] = "OFF";
      })(LogLevel || (LogLevel = {}));
      var ErrorCode;
      (function (ErrorCode) {
        ///////////////////
        // Generic Errors
        // Unknown Error
        ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        // Not Implemented
        ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        // Unsupported Operation
        //   - operation
        ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
        //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
        ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
        // Some sort of bad response from the server
        ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
        // Timeout
        ErrorCode["TIMEOUT"] = "TIMEOUT";
        ///////////////////
        // Operational  Errors
        // Buffer Overrun
        ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        // Numeric Fault
        //   - operation: the operation being executed
        //   - fault: the reason this faulted
        ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ///////////////////
        // Argument Errors
        // Missing new operator to an object
        //  - name: The name of the class
        ErrorCode["MISSING_NEW"] = "MISSING_NEW";
        // Invalid argument (e.g. value is incompatible with type) to a function:
        //   - argument: The argument name that was invalid
        //   - value: The value of the argument
        ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        // Missing argument to a function:
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        // Too many arguments
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ///////////////////
        // Blockchain Errors
        // Call exception
        //  - transaction: the transaction
        //  - address?: the contract address
        //  - args?: The arguments passed into the function
        //  - method?: The Solidity method signature
        //  - errorSignature?: The EIP848 error signature
        //  - errorArgs?: The EIP848 error parameters
        //  - reason: The reason (only for EIP848 "Error(string)")
        ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        // Insufficient funds (< value + gasLimit * gasPrice)
        //   - transaction: the transaction attempted
        ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        // Nonce has already been used
        //   - transaction: the transaction attempted
        ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        // The replacement fee for the transaction is too low
        //   - transaction: the transaction attempted
        ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        // The gas limit could not be estimated
        //   - transaction: the transaction passed to estimateGas
        ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        // The transaction was replaced by one with a higher gas price
        //   - reason: "cancelled", "replaced" or "repriced"
        //   - cancelled: true if reason == "cancelled" or reason == "replaced")
        //   - hash: original transaction hash
        //   - replacement: the full TransactionsResponse for the replacement
        //   - receipt: the receipt of the replacement
        ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
        ///////////////////
        // Interaction Errors
        // The user rejected the action, such as signing a message or sending
        // a transaction
        ErrorCode["ACTION_REJECTED"] = "ACTION_REJECTED";
      })(ErrorCode || (ErrorCode = {}));
      const HEX = "0123456789abcdef";
      class Logger {
        constructor(version) {
          Object.defineProperty(this, "version", {
            enumerable: true,
            value: version,
            writable: false,
          });
        }
        _log(logLevel, args) {
          const level = logLevel.toLowerCase();
          if (LogLevels[level] == null) {
            this.throwArgumentError("invalid log level name", "logLevel", logLevel);
          }
          if (_logLevel > LogLevels[level]) {
            return;
          }
          console.log.apply(console, args);
        }
        debug(...args) {
          this._log(Logger.levels.DEBUG, args);
        }
        info(...args) {
          this._log(Logger.levels.INFO, args);
        }
        warn(...args) {
          this._log(Logger.levels.WARNING, args);
        }
        makeError(message, code, params) {
          // Errors are being censored
          if (_censorErrors) {
            return this.makeError("censored error", code, {});
          }
          if (!code) {
            code = Logger.errors.UNKNOWN_ERROR;
          }
          if (!params) {
            params = {};
          }
          const messageDetails = [];
          Object.keys(params).forEach((key) => {
            const value = params[key];
            try {
              if (value instanceof Uint8Array) {
                let hex = "";
                for (let i = 0; i < value.length; i++) {
                  hex += HEX[value[i] >> 4];
                  hex += HEX[value[i] & 0x0f];
                }
                messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
              } else {
                messageDetails.push(key + "=" + JSON.stringify(value));
              }
            } catch (error) {
              messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
            }
          });
          messageDetails.push(`code=${code}`);
          messageDetails.push(`version=${this.version}`);
          const reason = message;
          let url = "";
          switch (code) {
            case ErrorCode.NUMERIC_FAULT: {
              url = "NUMERIC_FAULT";
              const fault = message;
              switch (fault) {
                case "overflow":
                case "underflow":
                case "division-by-zero":
                  url += "-" + fault;
                  break;
                case "negative-power":
                case "negative-width":
                  url += "-unsupported";
                  break;
                case "unbound-bitwise-result":
                  url += "-unbound-result";
                  break;
              }
              break;
            }
            case ErrorCode.CALL_EXCEPTION:
            case ErrorCode.INSUFFICIENT_FUNDS:
            case ErrorCode.MISSING_NEW:
            case ErrorCode.NONCE_EXPIRED:
            case ErrorCode.REPLACEMENT_UNDERPRICED:
            case ErrorCode.TRANSACTION_REPLACED:
            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
              url = code;
              break;
          }
          if (url) {
            message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
          }
          if (messageDetails.length) {
            message += " (" + messageDetails.join(", ") + ")";
          }
          // @TODO: Any??
          const error = new Error(message);
          error.reason = reason;
          error.code = code;
          Object.keys(params).forEach(function (key) {
            error[key] = params[key];
          });
          return error;
        }
        throwError(message, code, params) {
          throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name, value) {
          return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
            argument: name,
            value: value,
          });
        }
        assert(condition, message, code, params) {
          if (!!condition) {
            return;
          }
          this.throwError(message, code, params);
        }
        assertArgument(condition, message, name, value) {
          if (!!condition) {
            return;
          }
          this.throwArgumentError(message, name, value);
        }
        checkNormalize(message) {
          if (message == null) {
            message = "platform missing String.prototype.normalize";
          }
          if (_normalizeError) {
            this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "String.prototype.normalize",
              form: _normalizeError,
            });
          }
        }
        checkSafeUint53(value, message) {
          if (typeof value !== "number") {
            return;
          }
          if (message == null) {
            message = "value not safe";
          }
          if (value < 0 || value >= 0x1fffffffffffff) {
            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "out-of-safe-range",
              value: value,
            });
          }
          if (value % 1) {
            this.throwError(message, Logger.errors.NUMERIC_FAULT, {
              operation: "checkSafeInteger",
              fault: "non-integer",
              value: value,
            });
          }
        }
        checkArgumentCount(count, expectedCount, message) {
          if (message) {
            message = ": " + message;
          } else {
            message = "";
          }
          if (count < expectedCount) {
            this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
              count: count,
              expectedCount: expectedCount,
            });
          }
          if (count > expectedCount) {
            this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
              count: count,
              expectedCount: expectedCount,
            });
          }
        }
        checkNew(target, kind) {
          if (target === Object || target == null) {
            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
          }
        }
        checkAbstract(target, kind) {
          if (target === kind) {
            this.throwError(
              "cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class",
              Logger.errors.UNSUPPORTED_OPERATION,
              { name: target.name, operation: "new" }
            );
          } else if (target === Object || target == null) {
            this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
          }
        }
        static globalLogger() {
          if (!_globalLogger) {
            _globalLogger = new Logger(version);
          }
          return _globalLogger;
        }
        static setCensorship(censorship, permanent) {
          if (!censorship && permanent) {
            this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "setCensorship",
            });
          }
          if (_permanentCensorErrors) {
            if (!censorship) {
              return;
            }
            this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "setCensorship",
            });
          }
          _censorErrors = !!censorship;
          _permanentCensorErrors = !!permanent;
        }
        static setLogLevel(logLevel) {
          const level = LogLevels[logLevel.toLowerCase()];
          if (level == null) {
            Logger.globalLogger().warn("invalid log level - " + logLevel);
            return;
          }
          _logLevel = level;
        }
        static from(version) {
          return new Logger(version);
        }
      }
      Logger.errors = ErrorCode;
      Logger.levels = LogLevel;
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 3587: /***/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      "use strict";

      // EXPORTS
      __webpack_require__.d(__webpack_exports__, {
        uj: () => /* binding */ checkProperties,
        zG: () => /* binding */ defineReadOnly,
      });

      // UNUSED EXPORTS: Description, deepCopy, getStatic, resolveProperties, shallowCopy

      // EXTERNAL MODULE: ./node_modules/@ethersproject/logger/lib.esm/index.js + 1 modules
      var lib_esm = __webpack_require__(711); // CONCATENATED MODULE: ./node_modules/@ethersproject/properties/lib.esm/_version.js
      const version = "properties/5.7.0"; // CONCATENATED MODULE: ./node_modules/@ethersproject/properties/lib.esm/index.js
      //# sourceMappingURL=_version.js.map
      var __awaiter =
        (undefined && undefined.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };

      const logger = new lib_esm /* Logger */.Yd(version);
      function defineReadOnly(object, name, value) {
        Object.defineProperty(object, name, {
          enumerable: true,
          value: value,
          writable: false,
        });
      }
      // Crawl up the constructor chain to find a static method
      function getStatic(ctor, key) {
        for (let i = 0; i < 32; i++) {
          if (ctor[key]) {
            return ctor[key];
          }
          if (!ctor.prototype || typeof ctor.prototype !== "object") {
            break;
          }
          ctor = Object.getPrototypeOf(ctor.prototype).constructor;
        }
        return null;
      }
      function resolveProperties(object) {
        return __awaiter(this, void 0, void 0, function* () {
          const promises = Object.keys(object).map((key) => {
            const value = object[key];
            return Promise.resolve(value).then((v) => ({ key: key, value: v }));
          });
          const results = yield Promise.all(promises);
          return results.reduce((accum, result) => {
            accum[result.key] = result.value;
            return accum;
          }, {});
        });
      }
      function checkProperties(object, properties) {
        if (!object || typeof object !== "object") {
          logger.throwArgumentError("invalid object", "object", object);
        }
        Object.keys(object).forEach((key) => {
          if (!properties[key]) {
            logger.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
          }
        });
      }
      function shallowCopy(object) {
        const result = {};
        for (const key in object) {
          result[key] = object[key];
        }
        return result;
      }
      const opaque = { bigint: true, boolean: true, function: true, number: true, string: true };
      function _isFrozen(object) {
        // Opaque objects are not mutable, so safe to copy by assignment
        if (object === undefined || object === null || opaque[typeof object]) {
          return true;
        }
        if (Array.isArray(object) || typeof object === "object") {
          if (!Object.isFrozen(object)) {
            return false;
          }
          const keys = Object.keys(object);
          for (let i = 0; i < keys.length; i++) {
            let value = null;
            try {
              value = object[keys[i]];
            } catch (error) {
              // If accessing a value triggers an error, it is a getter
              // designed to do so (e.g. Result) and is therefore "frozen"
              continue;
            }
            if (!_isFrozen(value)) {
              return false;
            }
          }
          return true;
        }
        return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
      }
      // Returns a new copy of object, such that no properties may be replaced.
      // New properties may be added only to objects.
      function _deepCopy(object) {
        if (_isFrozen(object)) {
          return object;
        }
        // Arrays are mutable, so we need to create a copy
        if (Array.isArray(object)) {
          return Object.freeze(object.map((item) => deepCopy(item)));
        }
        if (typeof object === "object") {
          const result = {};
          for (const key in object) {
            const value = object[key];
            if (value === undefined) {
              continue;
            }
            defineReadOnly(result, key, deepCopy(value));
          }
          return result;
        }
        return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
      }
      function deepCopy(object) {
        return _deepCopy(object);
      }
      class Description {
        constructor(info) {
          for (const key in info) {
            this[key] = deepCopy(info[key]);
          }
        }
      }
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 5504: /***/ (__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
      "use strict";
      // ESM COMPAT FLAG
      __webpack_require__.r(__webpack_exports__);

      // EXPORTS
      __webpack_require__.d(__webpack_exports__, {
        TransactionTypes: () => /* binding */ TransactionTypes,
        accessListify: () => /* binding */ accessListify,
        computeAddress: () => /* binding */ computeAddress,
        parse: () => /* binding */ parse,
        recoverAddress: () => /* binding */ recoverAddress,
        serialize: () => /* binding */ serialize,
      });

      // EXTERNAL MODULE: ./node_modules/@ethersproject/address/lib.esm/index.js + 1 modules
      var lib_esm = __webpack_require__(4594);
      // EXTERNAL MODULE: ./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js + 1 modules
      var bignumber = __webpack_require__(5154);
      // EXTERNAL MODULE: ./node_modules/@ethersproject/bytes/lib.esm/index.js + 1 modules
      var bytes_lib_esm = __webpack_require__(3286);
      // EXTERNAL MODULE: ./node_modules/@ethersproject/constants/lib.esm/bignumbers.js
      var bignumbers = __webpack_require__(1046);
      // EXTERNAL MODULE: ./node_modules/@ethersproject/keccak256/lib.esm/index.js
      var keccak256_lib_esm = __webpack_require__(8197);
      // EXTERNAL MODULE: ./node_modules/@ethersproject/properties/lib.esm/index.js + 1 modules
      var properties_lib_esm = __webpack_require__(3587);
      // EXTERNAL MODULE: ./node_modules/@ethersproject/logger/lib.esm/index.js + 1 modules
      var logger_lib_esm = __webpack_require__(711); // CONCATENATED MODULE: ./node_modules/@ethersproject/rlp/lib.esm/_version.js
      const version = "rlp/5.7.0"; // CONCATENATED MODULE: ./node_modules/@ethersproject/rlp/lib.esm/index.js
      //# sourceMappingURL=_version.js.map
      //See: https://github.com/ethereum/wiki/wiki/RLP

      const logger = new logger_lib_esm /* Logger */.Yd(version);
      function arrayifyInteger(value) {
        const result = [];
        while (value) {
          result.unshift(value & 0xff);
          value >>= 8;
        }
        return result;
      }
      function unarrayifyInteger(data, offset, length) {
        let result = 0;
        for (let i = 0; i < length; i++) {
          result = result * 256 + data[offset + i];
        }
        return result;
      }
      function _encode(object) {
        if (Array.isArray(object)) {
          let payload = [];
          object.forEach(function (child) {
            payload = payload.concat(_encode(child));
          });
          if (payload.length <= 55) {
            payload.unshift(0xc0 + payload.length);
            return payload;
          }
          const length = arrayifyInteger(payload.length);
          length.unshift(0xf7 + length.length);
          return length.concat(payload);
        }
        if (!(0, bytes_lib_esm /* isBytesLike */.Zq)(object)) {
          logger.throwArgumentError("RLP object must be BytesLike", "object", object);
        }
        const data = Array.prototype.slice.call((0, bytes_lib_esm /* arrayify */.lE)(object));
        if (data.length === 1 && data[0] <= 0x7f) {
          return data;
        } else if (data.length <= 55) {
          data.unshift(0x80 + data.length);
          return data;
        }
        const length = arrayifyInteger(data.length);
        length.unshift(0xb7 + length.length);
        return length.concat(data);
      }
      function encode(object) {
        return (0, bytes_lib_esm /* hexlify */.Dv)(_encode(object));
      }
      function _decodeChildren(data, offset, childOffset, length) {
        const result = [];
        while (childOffset < offset + 1 + length) {
          const decoded = _decode(data, childOffset);
          result.push(decoded.result);
          childOffset += decoded.consumed;
          if (childOffset > offset + 1 + length) {
            logger.throwError("child data too short", logger_lib_esm /* Logger.errors.BUFFER_OVERRUN */.Yd.errors.BUFFER_OVERRUN, {});
          }
        }
        return { consumed: 1 + length, result: result };
      }
      // returns { consumed: number, result: Object }
      function _decode(data, offset) {
        if (data.length === 0) {
          logger.throwError("data too short", logger_lib_esm /* Logger.errors.BUFFER_OVERRUN */.Yd.errors.BUFFER_OVERRUN, {});
        }
        // Array with extra length prefix
        if (data[offset] >= 0xf8) {
          const lengthLength = data[offset] - 0xf7;
          if (offset + 1 + lengthLength > data.length) {
            logger.throwError("data short segment too short", logger_lib_esm /* Logger.errors.BUFFER_OVERRUN */.Yd.errors.BUFFER_OVERRUN, {});
          }
          const length = unarrayifyInteger(data, offset + 1, lengthLength);
          if (offset + 1 + lengthLength + length > data.length) {
            logger.throwError("data long segment too short", logger_lib_esm /* Logger.errors.BUFFER_OVERRUN */.Yd.errors.BUFFER_OVERRUN, {});
          }
          return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
        } else if (data[offset] >= 0xc0) {
          const length = data[offset] - 0xc0;
          if (offset + 1 + length > data.length) {
            logger.throwError("data array too short", logger_lib_esm /* Logger.errors.BUFFER_OVERRUN */.Yd.errors.BUFFER_OVERRUN, {});
          }
          return _decodeChildren(data, offset, offset + 1, length);
        } else if (data[offset] >= 0xb8) {
          const lengthLength = data[offset] - 0xb7;
          if (offset + 1 + lengthLength > data.length) {
            logger.throwError("data array too short", logger_lib_esm /* Logger.errors.BUFFER_OVERRUN */.Yd.errors.BUFFER_OVERRUN, {});
          }
          const length = unarrayifyInteger(data, offset + 1, lengthLength);
          if (offset + 1 + lengthLength + length > data.length) {
            logger.throwError("data array too short", logger_lib_esm /* Logger.errors.BUFFER_OVERRUN */.Yd.errors.BUFFER_OVERRUN, {});
          }
          const result = (0, bytes_lib_esm /* hexlify */.Dv)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
          return { consumed: 1 + lengthLength + length, result: result };
        } else if (data[offset] >= 0x80) {
          const length = data[offset] - 0x80;
          if (offset + 1 + length > data.length) {
            logger.throwError("data too short", logger_lib_esm /* Logger.errors.BUFFER_OVERRUN */.Yd.errors.BUFFER_OVERRUN, {});
          }
          const result = (0, bytes_lib_esm /* hexlify */.Dv)(data.slice(offset + 1, offset + 1 + length));
          return { consumed: 1 + length, result: result };
        }
        return { consumed: 1, result: (0, bytes_lib_esm /* hexlify */.Dv)(data[offset]) };
      }
      function decode(data) {
        const bytes = (0, bytes_lib_esm /* arrayify */.lE)(data);
        const decoded = _decode(bytes, 0);
        if (decoded.consumed !== bytes.length) {
          logger.throwArgumentError("invalid rlp data", "data", data);
        }
        return decoded.result;
      }
      //# sourceMappingURL=index.js.map
      // EXTERNAL MODULE: ./node_modules/bn.js/lib/bn.js
      var bn = __webpack_require__(3550);
      var bn_default = /*#__PURE__*/ __webpack_require__.n(bn);
      // EXTERNAL MODULE: ./node_modules/hash.js/lib/hash.js
      var hash = __webpack_require__(3715);
      var hash_default = /*#__PURE__*/ __webpack_require__.n(hash); // CONCATENATED MODULE: ./node_modules/@ethersproject/signing-key/lib.esm/elliptic.js
      var commonjsGlobal =
        typeof globalThis !== "undefined"
          ? globalThis
          : typeof window !== "undefined"
          ? window
          : typeof __webpack_require__.g !== "undefined"
          ? __webpack_require__.g
          : typeof self !== "undefined"
          ? self
          : {};

      function getDefaultExportFromCjs(x) {
        return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
      }

      function createCommonjsModule(fn, basedir, module) {
        return (
          (module = {
            path: basedir,
            exports: {},
            require: function (path, base) {
              return commonjsRequire(path, base === undefined || base === null ? module.path : base);
            },
          }),
          fn(module, module.exports),
          module.exports
        );
      }

      function getDefaultExportFromNamespaceIfPresent(n) {
        return n && Object.prototype.hasOwnProperty.call(n, "default") ? n["default"] : n;
      }

      function getDefaultExportFromNamespaceIfNotNamed(n) {
        return n && Object.prototype.hasOwnProperty.call(n, "default") && Object.keys(n).length === 1 ? n["default"] : n;
      }

      function getAugmentedNamespace(n) {
        if (n.__esModule) return n;
        var a = Object.defineProperty({}, "__esModule", { value: true });
        Object.keys(n).forEach(function (k) {
          var d = Object.getOwnPropertyDescriptor(n, k);
          Object.defineProperty(
            a,
            k,
            d.get
              ? d
              : {
                  enumerable: true,
                  get: function () {
                    return n[k];
                  },
                }
          );
        });
        return a;
      }

      function commonjsRequire() {
        throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
      }

      var minimalisticAssert = assert;

      function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }

      assert.equal = function assertEqual(l, r, msg) {
        if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
      };

      var utils_1 = createCommonjsModule(function (module, exports) {
        "use strict";

        var utils = exports;

        function toArray(msg, enc) {
          if (Array.isArray(msg)) return msg.slice();
          if (!msg) return [];
          var res = [];
          if (typeof msg !== "string") {
            for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
            return res;
          }
          if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/gi, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for (var i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
          } else {
            for (var i = 0; i < msg.length; i++) {
              var c = msg.charCodeAt(i);
              var hi = c >> 8;
              var lo = c & 0xff;
              if (hi) res.push(hi, lo);
              else res.push(lo);
            }
          }
          return res;
        }
        utils.toArray = toArray;

        function zero2(word) {
          if (word.length === 1) return "0" + word;
          else return word;
        }
        utils.zero2 = zero2;

        function toHex(msg) {
          var res = "";
          for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
          return res;
        }
        utils.toHex = toHex;

        utils.encode = function encode(arr, enc) {
          if (enc === "hex") return toHex(arr);
          else return arr;
        };
      });

      var utils_1$1 = createCommonjsModule(function (module, exports) {
        "use strict";

        var utils = exports;

        utils.assert = minimalisticAssert;
        utils.toArray = utils_1.toArray;
        utils.zero2 = utils_1.zero2;
        utils.toHex = utils_1.toHex;
        utils.encode = utils_1.encode;

        // Represent num in a w-NAF form
        function getNAF(num, w, bits) {
          var naf = new Array(Math.max(num.bitLength(), bits) + 1);
          naf.fill(0);

          var ws = 1 << (w + 1);
          var k = num.clone();

          for (var i = 0; i < naf.length; i++) {
            var z;
            var mod = k.andln(ws - 1);
            if (k.isOdd()) {
              if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
              else z = mod;
              k.isubn(z);
            } else {
              z = 0;
            }

            naf[i] = z;
            k.iushrn(1);
          }

          return naf;
        }
        utils.getNAF = getNAF;

        // Represent k1, k2 in a Joint Sparse Form
        function getJSF(k1, k2) {
          var jsf = [[], []];

          k1 = k1.clone();
          k2 = k2.clone();
          var d1 = 0;
          var d2 = 0;
          var m8;
          while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
            // First phase
            var m14 = (k1.andln(3) + d1) & 3;
            var m24 = (k2.andln(3) + d2) & 3;
            if (m14 === 3) m14 = -1;
            if (m24 === 3) m24 = -1;
            var u1;
            if ((m14 & 1) === 0) {
              u1 = 0;
            } else {
              m8 = (k1.andln(7) + d1) & 7;
              if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
              else u1 = m14;
            }
            jsf[0].push(u1);

            var u2;
            if ((m24 & 1) === 0) {
              u2 = 0;
            } else {
              m8 = (k2.andln(7) + d2) & 7;
              if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
              else u2 = m24;
            }
            jsf[1].push(u2);

            // Second phase
            if (2 * d1 === u1 + 1) d1 = 1 - d1;
            if (2 * d2 === u2 + 1) d2 = 1 - d2;
            k1.iushrn(1);
            k2.iushrn(1);
          }

          return jsf;
        }
        utils.getJSF = getJSF;

        function cachedProperty(obj, name, computer) {
          var key = "_" + name;
          obj.prototype[name] = function cachedProperty() {
            return this[key] !== undefined ? this[key] : (this[key] = computer.call(this));
          };
        }
        utils.cachedProperty = cachedProperty;

        function parseBytes(bytes) {
          return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
        }
        utils.parseBytes = parseBytes;

        function intFromLE(bytes) {
          return new (bn_default())(bytes, "hex", "le");
        }
        utils.intFromLE = intFromLE;
      });

      ("use strict");

      var getNAF = utils_1$1.getNAF;
      var getJSF = utils_1$1.getJSF;
      var assert$1 = utils_1$1.assert;

      function BaseCurve(type, conf) {
        this.type = type;
        this.p = new (bn_default())(conf.p, 16);

        // Use Montgomery, when there is no fast reduction for the prime
        this.red = conf.prime ? bn_default().red(conf.prime) : bn_default().mont(this.p);

        // Useful for many curves
        this.zero = new (bn_default())(0).toRed(this.red);
        this.one = new (bn_default())(1).toRed(this.red);
        this.two = new (bn_default())(2).toRed(this.red);

        // Curve configuration, optional
        this.n = conf.n && new (bn_default())(conf.n, 16);
        this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

        // Temporary arrays
        this._wnafT1 = new Array(4);
        this._wnafT2 = new Array(4);
        this._wnafT3 = new Array(4);
        this._wnafT4 = new Array(4);

        this._bitLength = this.n ? this.n.bitLength() : 0;

        // Generalized Greg Maxwell's trick
        var adjustCount = this.n && this.p.div(this.n);
        if (!adjustCount || adjustCount.cmpn(100) > 0) {
          this.redN = null;
        } else {
          this._maxwellTrick = true;
          this.redN = this.n.toRed(this.red);
        }
      }
      var base = BaseCurve;

      BaseCurve.prototype.point = function point() {
        throw new Error("Not implemented");
      };

      BaseCurve.prototype.validate = function validate() {
        throw new Error("Not implemented");
      };

      BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
        assert$1(p.precomputed);
        var doubles = p._getDoubles();

        var naf = getNAF(k, 1, this._bitLength);
        var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
        I /= 3;

        // Translate into more windowed form
        var repr = [];
        var j;
        var nafW;
        for (j = 0; j < naf.length; j += doubles.step) {
          nafW = 0;
          for (var l = j + doubles.step - 1; l >= j; l--) nafW = (nafW << 1) + naf[l];
          repr.push(nafW);
        }

        var a = this.jpoint(null, null, null);
        var b = this.jpoint(null, null, null);
        for (var i = I; i > 0; i--) {
          for (j = 0; j < repr.length; j++) {
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
          }
          a = a.add(b);
        }
        return a.toP();
      };

      BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
        var w = 4;

        // Precompute window
        var nafPoints = p._getNAFPoints(w);
        w = nafPoints.wnd;
        var wnd = nafPoints.points;

        // Get NAF form
        var naf = getNAF(k, w, this._bitLength);

        // Add `this`*(N+1) for every w-NAF index
        var acc = this.jpoint(null, null, null);
        for (var i = naf.length - 1; i >= 0; i--) {
          // Count zeroes
          for (var l = 0; i >= 0 && naf[i] === 0; i--) l++;
          if (i >= 0) l++;
          acc = acc.dblp(l);

          if (i < 0) break;
          var z = naf[i];
          assert$1(z !== 0);
          if (p.type === "affine") {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
            else acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
          } else {
            // J +- J
            if (z > 0) acc = acc.add(wnd[(z - 1) >> 1]);
            else acc = acc.add(wnd[(-z - 1) >> 1].neg());
          }
        }
        return p.type === "affine" ? acc.toP() : acc;
      };

      BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
        var wndWidth = this._wnafT1;
        var wnd = this._wnafT2;
        var naf = this._wnafT3;

        // Fill all arrays
        var max = 0;
        var i;
        var j;
        var p;
        for (i = 0; i < len; i++) {
          p = points[i];
          var nafPoints = p._getNAFPoints(defW);
          wndWidth[i] = nafPoints.wnd;
          wnd[i] = nafPoints.points;
        }

        // Comb small window NAFs
        for (i = len - 1; i >= 1; i -= 2) {
          var a = i - 1;
          var b = i;
          if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
          }

          var comb = [points[a] /* 1 */, null /* 3 */, null /* 5 */, points[b] /* 7 */];

          // Try to avoid Projective points, if possible
          if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
          } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
          } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
          }

          var index = [-3 /* -1 -1 */, -1 /* -1 0 */, -5 /* -1 1 */, -7 /* 0 -1 */, 0 /* 0 0 */, 7 /* 0 1 */, 5 /* 1 -1 */, 1 /* 1 0 */, 3 /* 1 1 */];

          var jsf = getJSF(coeffs[a], coeffs[b]);
          max = Math.max(jsf[0].length, max);
          naf[a] = new Array(max);
          naf[b] = new Array(max);
          for (j = 0; j < max; j++) {
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;

            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
          }
        }

        var acc = this.jpoint(null, null, null);
        var tmp = this._wnafT4;
        for (i = max; i >= 0; i--) {
          var k = 0;

          while (i >= 0) {
            var zero = true;
            for (j = 0; j < len; j++) {
              tmp[j] = naf[j][i] | 0;
              if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
          }
          if (i >= 0) k++;
          acc = acc.dblp(k);
          if (i < 0) break;

          for (j = 0; j < len; j++) {
            var z = tmp[j];
            p;
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][(z - 1) >> 1];
            else if (z < 0) p = wnd[j][(-z - 1) >> 1].neg();

            if (p.type === "affine") acc = acc.mixedAdd(p);
            else acc = acc.add(p);
          }
        }
        // Zeroify references
        for (i = 0; i < len; i++) wnd[i] = null;

        if (jacobianResult) return acc;
        else return acc.toP();
      };

      function BasePoint(curve, type) {
        this.curve = curve;
        this.type = type;
        this.precomputed = null;
      }
      BaseCurve.BasePoint = BasePoint;

      BasePoint.prototype.eq = function eq(/*other*/) {
        throw new Error("Not implemented");
      };

      BasePoint.prototype.validate = function validate() {
        return this.curve.validate(this);
      };

      BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
        bytes = utils_1$1.toArray(bytes, enc);

        var len = this.p.byteLength();

        // uncompressed, hybrid-odd, hybrid-even
        if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
          if (bytes[0] === 0x06) assert$1(bytes[bytes.length - 1] % 2 === 0);
          else if (bytes[0] === 0x07) assert$1(bytes[bytes.length - 1] % 2 === 1);

          var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));

          return res;
        } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
          return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
        }
        throw new Error("Unknown point format");
      };

      BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
        return this.encode(enc, true);
      };

      BasePoint.prototype._encode = function _encode(compact) {
        var len = this.curve.p.byteLength();
        var x = this.getX().toArray("be", len);

        if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

        return [0x04].concat(x, this.getY().toArray("be", len));
      };

      BasePoint.prototype.encode = function encode(enc, compact) {
        return utils_1$1.encode(this._encode(compact), enc);
      };

      BasePoint.prototype.precompute = function precompute(power) {
        if (this.precomputed) return this;

        var precomputed = {
          doubles: null,
          naf: null,
          beta: null,
        };
        precomputed.naf = this._getNAFPoints(8);
        precomputed.doubles = this._getDoubles(4, power);
        precomputed.beta = this._getBeta();
        this.precomputed = precomputed;

        return this;
      };

      BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
        if (!this.precomputed) return false;

        var doubles = this.precomputed.doubles;
        if (!doubles) return false;

        return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
      };

      BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
        if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;

        var doubles = [this];
        var acc = this;
        for (var i = 0; i < power; i += step) {
          for (var j = 0; j < step; j++) acc = acc.dbl();
          doubles.push(acc);
        }
        return {
          step: step,
          points: doubles,
        };
      };

      BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
        if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;

        var res = [this];
        var max = (1 << wnd) - 1;
        var dbl = max === 1 ? null : this.dbl();
        for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);
        return {
          wnd: wnd,
          points: res,
        };
      };

      BasePoint.prototype._getBeta = function _getBeta() {
        return null;
      };

      BasePoint.prototype.dblp = function dblp(k) {
        var r = this;
        for (var i = 0; i < k; i++) r = r.dbl();
        return r;
      };

      var inherits_browser = createCommonjsModule(function (module) {
        if (typeof Object.create === "function") {
          // implementation from standard node.js 'util' module
          module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {
                constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true,
                },
              });
            }
          };
        } else {
          // old school shim for old browsers
          module.exports = function inherits(ctor, superCtor) {
            if (superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function () {};
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            }
          };
        }
      });

      ("use strict");

      var assert$2 = utils_1$1.assert;

      function ShortCurve(conf) {
        base.call(this, "short", conf);

        this.a = new (bn_default())(conf.a, 16).toRed(this.red);
        this.b = new (bn_default())(conf.b, 16).toRed(this.red);
        this.tinv = this.two.redInvm();

        this.zeroA = this.a.fromRed().cmpn(0) === 0;
        this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

        // If the curve is endomorphic, precalculate beta and lambda
        this.endo = this._getEndomorphism(conf);
        this._endoWnafT1 = new Array(4);
        this._endoWnafT2 = new Array(4);
      }
      inherits_browser(ShortCurve, base);
      var short_1 = ShortCurve;

      ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
        // No efficient endomorphism
        if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;

        // Compute beta and lambda, that lambda * P = (beta * Px; Py)
        var beta;
        var lambda;
        if (conf.beta) {
          beta = new (bn_default())(conf.beta, 16).toRed(this.red);
        } else {
          var betas = this._getEndoRoots(this.p);
          // Choose the smallest beta
          beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
          beta = beta.toRed(this.red);
        }
        if (conf.lambda) {
          lambda = new (bn_default())(conf.lambda, 16);
        } else {
          // Choose the lambda that is matching selected beta
          var lambdas = this._getEndoRoots(this.n);
          if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
            lambda = lambdas[0];
          } else {
            lambda = lambdas[1];
            assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
          }
        }

        // Get basis vectors, used for balanced length-two representation
        var basis;
        if (conf.basis) {
          basis = conf.basis.map(function (vec) {
            return {
              a: new (bn_default())(vec.a, 16),
              b: new (bn_default())(vec.b, 16),
            };
          });
        } else {
          basis = this._getEndoBasis(lambda);
        }

        return {
          beta: beta,
          lambda: lambda,
          basis: basis,
        };
      };

      ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
        // Find roots of for x^2 + x + 1 in F
        // Root = (-1 +- Sqrt(-3)) / 2
        //
        var red = num === this.p ? this.red : bn_default().mont(num);
        var tinv = new (bn_default())(2).toRed(red).redInvm();
        var ntinv = tinv.redNeg();

        var s = new (bn_default())(3).toRed(red).redNeg().redSqrt().redMul(tinv);

        var l1 = ntinv.redAdd(s).fromRed();
        var l2 = ntinv.redSub(s).fromRed();
        return [l1, l2];
      };

      ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
        // aprxSqrt >= sqrt(this.n)
        var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

        // 3.74
        // Run EGCD, until r(L + 1) < aprxSqrt
        var u = lambda;
        var v = this.n.clone();
        var x1 = new (bn_default())(1);
        var y1 = new (bn_default())(0);
        var x2 = new (bn_default())(0);
        var y2 = new (bn_default())(1);

        // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
        var a0;
        var b0;
        // First vector
        var a1;
        var b1;
        // Second vector
        var a2;
        var b2;

        var prevR;
        var i = 0;
        var r;
        var x;
        while (u.cmpn(0) !== 0) {
          var q = v.div(u);
          r = v.sub(q.mul(u));
          x = x2.sub(q.mul(x1));
          var y = y2.sub(q.mul(y1));

          if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
          } else if (a1 && ++i === 2) {
            break;
          }
          prevR = r;

          v = u;
          u = r;
          x2 = x1;
          x1 = x;
          y2 = y1;
          y1 = y;
        }
        a2 = r.neg();
        b2 = x;

        var len1 = a1.sqr().add(b1.sqr());
        var len2 = a2.sqr().add(b2.sqr());
        if (len2.cmp(len1) >= 0) {
          a2 = a0;
          b2 = b0;
        }

        // Normalize signs
        if (a1.negative) {
          a1 = a1.neg();
          b1 = b1.neg();
        }
        if (a2.negative) {
          a2 = a2.neg();
          b2 = b2.neg();
        }

        return [
          { a: a1, b: b1 },
          { a: a2, b: b2 },
        ];
      };

      ShortCurve.prototype._endoSplit = function _endoSplit(k) {
        var basis = this.endo.basis;
        var v1 = basis[0];
        var v2 = basis[1];

        var c1 = v2.b.mul(k).divRound(this.n);
        var c2 = v1.b.neg().mul(k).divRound(this.n);

        var p1 = c1.mul(v1.a);
        var p2 = c2.mul(v2.a);
        var q1 = c1.mul(v1.b);
        var q2 = c2.mul(v2.b);

        // Calculate answer
        var k1 = k.sub(p1).sub(p2);
        var k2 = q1.add(q2).neg();
        return { k1: k1, k2: k2 };
      };

      ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
        x = new (bn_default())(x, 16);
        if (!x.red) x = x.toRed(this.red);

        var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
        var y = y2.redSqrt();
        if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");

        // XXX Is there any way to tell if the number is odd without converting it
        // to non-red form?
        var isOdd = y.fromRed().isOdd();
        if ((odd && !isOdd) || (!odd && isOdd)) y = y.redNeg();

        return this.point(x, y);
      };

      ShortCurve.prototype.validate = function validate(point) {
        if (point.inf) return true;

        var x = point.x;
        var y = point.y;

        var ax = this.a.redMul(x);
        var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
        return y.redSqr().redISub(rhs).cmpn(0) === 0;
      };

      ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
        var npoints = this._endoWnafT1;
        var ncoeffs = this._endoWnafT2;
        for (var i = 0; i < points.length; i++) {
          var split = this._endoSplit(coeffs[i]);
          var p = points[i];
          var beta = p._getBeta();

          if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
          }
          if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
          }

          npoints[i * 2] = p;
          npoints[i * 2 + 1] = beta;
          ncoeffs[i * 2] = split.k1;
          ncoeffs[i * 2 + 1] = split.k2;
        }
        var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

        // Clean-up references to points and coefficients
        for (var j = 0; j < i * 2; j++) {
          npoints[j] = null;
          ncoeffs[j] = null;
        }
        return res;
      };

      function Point(curve, x, y, isRed) {
        base.BasePoint.call(this, curve, "affine");
        if (x === null && y === null) {
          this.x = null;
          this.y = null;
          this.inf = true;
        } else {
          this.x = new (bn_default())(x, 16);
          this.y = new (bn_default())(y, 16);
          // Force redgomery representation when loading from JSON
          if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
          }
          if (!this.x.red) this.x = this.x.toRed(this.curve.red);
          if (!this.y.red) this.y = this.y.toRed(this.curve.red);
          this.inf = false;
        }
      }
      inherits_browser(Point, base.BasePoint);

      ShortCurve.prototype.point = function point(x, y, isRed) {
        return new Point(this, x, y, isRed);
      };

      ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
        return Point.fromJSON(this, obj, red);
      };

      Point.prototype._getBeta = function _getBeta() {
        if (!this.curve.endo) return;

        var pre = this.precomputed;
        if (pre && pre.beta) return pre.beta;

        var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
        if (pre) {
          var curve = this.curve;
          var endoMul = function (p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
          };
          pre.beta = beta;
          beta.precomputed = {
            beta: null,
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(endoMul),
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(endoMul),
            },
          };
        }
        return beta;
      };

      Point.prototype.toJSON = function toJSON() {
        if (!this.precomputed) return [this.x, this.y];

        return [
          this.x,
          this.y,
          this.precomputed && {
            doubles: this.precomputed.doubles && {
              step: this.precomputed.doubles.step,
              points: this.precomputed.doubles.points.slice(1),
            },
            naf: this.precomputed.naf && {
              wnd: this.precomputed.naf.wnd,
              points: this.precomputed.naf.points.slice(1),
            },
          },
        ];
      };

      Point.fromJSON = function fromJSON(curve, obj, red) {
        if (typeof obj === "string") obj = JSON.parse(obj);
        var res = curve.point(obj[0], obj[1], red);
        if (!obj[2]) return res;

        function obj2point(obj) {
          return curve.point(obj[0], obj[1], red);
        }

        var pre = obj[2];
        res.precomputed = {
          beta: null,
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [res].concat(pre.doubles.points.map(obj2point)),
          },
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [res].concat(pre.naf.points.map(obj2point)),
          },
        };
        return res;
      };

      Point.prototype.inspect = function inspect() {
        if (this.isInfinity()) return "<EC Point Infinity>";
        return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
      };

      Point.prototype.isInfinity = function isInfinity() {
        return this.inf;
      };

      Point.prototype.add = function add(p) {
        // O + P = P
        if (this.inf) return p;

        // P + O = P
        if (p.inf) return this;

        // P + P = 2P
        if (this.eq(p)) return this.dbl();

        // P + (-P) = O
        if (this.neg().eq(p)) return this.curve.point(null, null);

        // P + Q = O
        if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);

        var c = this.y.redSub(p.y);
        if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
        var nx = c.redSqr().redISub(this.x).redISub(p.x);
        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };

      Point.prototype.dbl = function dbl() {
        if (this.inf) return this;

        // 2P = O
        var ys1 = this.y.redAdd(this.y);
        if (ys1.cmpn(0) === 0) return this.curve.point(null, null);

        var a = this.curve.a;

        var x2 = this.x.redSqr();
        var dyinv = ys1.redInvm();
        var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

        var nx = c.redSqr().redISub(this.x.redAdd(this.x));
        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };

      Point.prototype.getX = function getX() {
        return this.x.fromRed();
      };

      Point.prototype.getY = function getY() {
        return this.y.fromRed();
      };

      Point.prototype.mul = function mul(k) {
        k = new (bn_default())(k, 16);
        if (this.isInfinity()) return this;
        else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
        else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);
        else return this.curve._wnafMul(this, k);
      };

      Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
        else return this.curve._wnafMulAdd(1, points, coeffs, 2);
      };

      Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
        else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
      };

      Point.prototype.eq = function eq(p) {
        return this === p || (this.inf === p.inf && (this.inf || (this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0)));
      };

      Point.prototype.neg = function neg(_precompute) {
        if (this.inf) return this;

        var res = this.curve.point(this.x, this.y.redNeg());
        if (_precompute && this.precomputed) {
          var pre = this.precomputed;
          var negate = function (p) {
            return p.neg();
          };
          res.precomputed = {
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(negate),
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(negate),
            },
          };
        }
        return res;
      };

      Point.prototype.toJ = function toJ() {
        if (this.inf) return this.curve.jpoint(null, null, null);

        var res = this.curve.jpoint(this.x, this.y, this.curve.one);
        return res;
      };

      function JPoint(curve, x, y, z) {
        base.BasePoint.call(this, curve, "jacobian");
        if (x === null && y === null && z === null) {
          this.x = this.curve.one;
          this.y = this.curve.one;
          this.z = new (bn_default())(0);
        } else {
          this.x = new (bn_default())(x, 16);
          this.y = new (bn_default())(y, 16);
          this.z = new (bn_default())(z, 16);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);

        this.zOne = this.z === this.curve.one;
      }
      inherits_browser(JPoint, base.BasePoint);

      ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
        return new JPoint(this, x, y, z);
      };

      JPoint.prototype.toP = function toP() {
        if (this.isInfinity()) return this.curve.point(null, null);

        var zinv = this.z.redInvm();
        var zinv2 = zinv.redSqr();
        var ax = this.x.redMul(zinv2);
        var ay = this.y.redMul(zinv2).redMul(zinv);

        return this.curve.point(ax, ay);
      };

      JPoint.prototype.neg = function neg() {
        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
      };

      JPoint.prototype.add = function add(p) {
        // O + P = P
        if (this.isInfinity()) return p;

        // P + O = P
        if (p.isInfinity()) return this;

        // 12M + 4S + 7A
        var pz2 = p.z.redSqr();
        var z2 = this.z.redSqr();
        var u1 = this.x.redMul(pz2);
        var u2 = p.x.redMul(z2);
        var s1 = this.y.redMul(pz2.redMul(p.z));
        var s2 = p.y.redMul(z2.redMul(this.z));

        var h = u1.redSub(u2);
        var r = s1.redSub(s2);
        if (h.cmpn(0) === 0) {
          if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
          else return this.dbl();
        }

        var h2 = h.redSqr();
        var h3 = h2.redMul(h);
        var v = u1.redMul(h2);

        var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
        var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(p.z).redMul(h);

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype.mixedAdd = function mixedAdd(p) {
        // O + P = P
        if (this.isInfinity()) return p.toJ();

        // P + O = P
        if (p.isInfinity()) return this;

        // 8M + 3S + 7A
        var z2 = this.z.redSqr();
        var u1 = this.x;
        var u2 = p.x.redMul(z2);
        var s1 = this.y;
        var s2 = p.y.redMul(z2).redMul(this.z);

        var h = u1.redSub(u2);
        var r = s1.redSub(s2);
        if (h.cmpn(0) === 0) {
          if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
          else return this.dbl();
        }

        var h2 = h.redSqr();
        var h3 = h2.redMul(h);
        var v = u1.redMul(h2);

        var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
        var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(h);

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype.dblp = function dblp(pow) {
        if (pow === 0) return this;
        if (this.isInfinity()) return this;
        if (!pow) return this.dbl();

        var i;
        if (this.curve.zeroA || this.curve.threeA) {
          var r = this;
          for (i = 0; i < pow; i++) r = r.dbl();
          return r;
        }

        // 1M + 2S + 1A + N * (4S + 5M + 8A)
        // N = 1 => 6M + 6S + 9A
        var a = this.curve.a;
        var tinv = this.curve.tinv;

        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();

        // Reuse results
        var jyd = jy.redAdd(jy);
        for (i = 0; i < pow; i++) {
          var jx2 = jx.redSqr();
          var jyd2 = jyd.redSqr();
          var jyd4 = jyd2.redSqr();
          var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

          var t1 = jx.redMul(jyd2);
          var nx = c.redSqr().redISub(t1.redAdd(t1));
          var t2 = t1.redISub(nx);
          var dny = c.redMul(t2);
          dny = dny.redIAdd(dny).redISub(jyd4);
          var nz = jyd.redMul(jz);
          if (i + 1 < pow) jz4 = jz4.redMul(jyd4);

          jx = nx;
          jz = nz;
          jyd = dny;
        }

        return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
      };

      JPoint.prototype.dbl = function dbl() {
        if (this.isInfinity()) return this;

        if (this.curve.zeroA) return this._zeroDbl();
        else if (this.curve.threeA) return this._threeDbl();
        else return this._dbl();
      };

      JPoint.prototype._zeroDbl = function _zeroDbl() {
        var nx;
        var ny;
        var nz;
        // Z = 1
        if (this.zOne) {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
          //     #doubling-mdbl-2007-bl
          // 1M + 5S + 14A

          // XX = X1^2
          var xx = this.x.redSqr();
          // YY = Y1^2
          var yy = this.y.redSqr();
          // YYYY = YY^2
          var yyyy = yy.redSqr();
          // S = 2 * ((X1 + YY)^2 - XX - YYYY)
          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s = s.redIAdd(s);
          // M = 3 * XX + a; a = 0
          var m = xx.redAdd(xx).redIAdd(xx);
          // T = M ^ 2 - 2*S
          var t = m.redSqr().redISub(s).redISub(s);

          // 8 * YYYY
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);

          // X3 = T
          nx = t;
          // Y3 = M * (S - T) - 8 * YYYY
          ny = m.redMul(s.redISub(t)).redISub(yyyy8);
          // Z3 = 2*Y1
          nz = this.y.redAdd(this.y);
        } else {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
          //     #doubling-dbl-2009-l
          // 2M + 5S + 13A

          // A = X1^2
          var a = this.x.redSqr();
          // B = Y1^2
          var b = this.y.redSqr();
          // C = B^2
          var c = b.redSqr();
          // D = 2 * ((X1 + B)^2 - A - C)
          var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
          d = d.redIAdd(d);
          // E = 3 * A
          var e = a.redAdd(a).redIAdd(a);
          // F = E^2
          var f = e.redSqr();

          // 8 * C
          var c8 = c.redIAdd(c);
          c8 = c8.redIAdd(c8);
          c8 = c8.redIAdd(c8);

          // X3 = F - 2 * D
          nx = f.redISub(d).redISub(d);
          // Y3 = E * (D - X3) - 8 * C
          ny = e.redMul(d.redISub(nx)).redISub(c8);
          // Z3 = 2 * Y1 * Z1
          nz = this.y.redMul(this.z);
          nz = nz.redIAdd(nz);
        }

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype._threeDbl = function _threeDbl() {
        var nx;
        var ny;
        var nz;
        // Z = 1
        if (this.zOne) {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
          //     #doubling-mdbl-2007-bl
          // 1M + 5S + 15A

          // XX = X1^2
          var xx = this.x.redSqr();
          // YY = Y1^2
          var yy = this.y.redSqr();
          // YYYY = YY^2
          var yyyy = yy.redSqr();
          // S = 2 * ((X1 + YY)^2 - XX - YYYY)
          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s = s.redIAdd(s);
          // M = 3 * XX + a
          var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
          // T = M^2 - 2 * S
          var t = m.redSqr().redISub(s).redISub(s);
          // X3 = T
          nx = t;
          // Y3 = M * (S - T) - 8 * YYYY
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          ny = m.redMul(s.redISub(t)).redISub(yyyy8);
          // Z3 = 2 * Y1
          nz = this.y.redAdd(this.y);
        } else {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
          // 3M + 5S

          // delta = Z1^2
          var delta = this.z.redSqr();
          // gamma = Y1^2
          var gamma = this.y.redSqr();
          // beta = X1 * gamma
          var beta = this.x.redMul(gamma);
          // alpha = 3 * (X1 - delta) * (X1 + delta)
          var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
          alpha = alpha.redAdd(alpha).redIAdd(alpha);
          // X3 = alpha^2 - 8 * beta
          var beta4 = beta.redIAdd(beta);
          beta4 = beta4.redIAdd(beta4);
          var beta8 = beta4.redAdd(beta4);
          nx = alpha.redSqr().redISub(beta8);
          // Z3 = (Y1 + Z1)^2 - gamma - delta
          nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
          // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
          var ggamma8 = gamma.redSqr();
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
        }

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype._dbl = function _dbl() {
        var a = this.curve.a;

        // 4M + 6S + 10A
        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();

        var jx2 = jx.redSqr();
        var jy2 = jy.redSqr();

        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var jxd4 = jx.redAdd(jx);
        jxd4 = jxd4.redIAdd(jxd4);
        var t1 = jxd4.redMul(jy2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);

        var jyd8 = jy2.redSqr();
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        var ny = c.redMul(t2).redISub(jyd8);
        var nz = jy.redAdd(jy).redMul(jz);

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype.trpl = function trpl() {
        if (!this.curve.zeroA) return this.dbl().add(this);

        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
        // 5M + 10S + ...

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // ZZ = Z1^2
        var zz = this.z.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // M = 3 * XX + a * ZZ2; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // MM = M^2
        var mm = m.redSqr();
        // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
        var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        e = e.redIAdd(e);
        e = e.redAdd(e).redIAdd(e);
        e = e.redISub(mm);
        // EE = E^2
        var ee = e.redSqr();
        // T = 16*YYYY
        var t = yyyy.redIAdd(yyyy);
        t = t.redIAdd(t);
        t = t.redIAdd(t);
        t = t.redIAdd(t);
        // U = (M + E)^2 - MM - EE - T
        var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
        // X3 = 4 * (X1 * EE - 4 * YY * U)
        var yyu4 = yy.redMul(u);
        yyu4 = yyu4.redIAdd(yyu4);
        yyu4 = yyu4.redIAdd(yyu4);
        var nx = this.x.redMul(ee).redISub(yyu4);
        nx = nx.redIAdd(nx);
        nx = nx.redIAdd(nx);
        // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
        var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        // Z3 = (Z1 + E)^2 - ZZ - EE
        var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype.mul = function mul(k, kbase) {
        k = new (bn_default())(k, kbase);

        return this.curve._wnafMul(this, k);
      };

      JPoint.prototype.eq = function eq(p) {
        if (p.type === "affine") return this.eq(p.toJ());

        if (this === p) return true;

        // x1 * z2^2 == x2 * z1^2
        var z2 = this.z.redSqr();
        var pz2 = p.z.redSqr();
        if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;

        // y1 * z2^3 == y2 * z1^3
        var z3 = z2.redMul(this.z);
        var pz3 = pz2.redMul(p.z);
        return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
      };

      JPoint.prototype.eqXToP = function eqXToP(x) {
        var zs = this.z.redSqr();
        var rx = x.toRed(this.curve.red).redMul(zs);
        if (this.x.cmp(rx) === 0) return true;

        var xc = x.clone();
        var t = this.curve.redN.redMul(zs);
        for (;;) {
          xc.iadd(this.curve.n);
          if (xc.cmp(this.curve.p) >= 0) return false;

          rx.redIAdd(t);
          if (this.x.cmp(rx) === 0) return true;
        }
      };

      JPoint.prototype.inspect = function inspect() {
        if (this.isInfinity()) return "<EC JPoint Infinity>";
        return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
      };

      JPoint.prototype.isInfinity = function isInfinity() {
        // XXX This code assumes that zero is always zero in red
        return this.z.cmpn(0) === 0;
      };

      var curve_1 = createCommonjsModule(function (module, exports) {
        "use strict";

        var curve = exports;

        curve.base = base;
        curve.short = short_1;
        curve.mont = /*RicMoo:ethers:require(./mont)*/ null;
        curve.edwards = /*RicMoo:ethers:require(./edwards)*/ null;
      });

      var curves_1 = createCommonjsModule(function (module, exports) {
        "use strict";

        var curves = exports;

        var assert = utils_1$1.assert;

        function PresetCurve(options) {
          if (options.type === "short") this.curve = new curve_1.short(options);
          else if (options.type === "edwards") this.curve = new curve_1.edwards(options);
          else this.curve = new curve_1.mont(options);
          this.g = this.curve.g;
          this.n = this.curve.n;
          this.hash = options.hash;

          assert(this.g.validate(), "Invalid curve");
          assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
        }
        curves.PresetCurve = PresetCurve;

        function defineCurve(name, options) {
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            get: function () {
              var curve = new PresetCurve(options);
              Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve,
              });
              return curve;
            },
          });
        }

        defineCurve("p192", {
          type: "short",
          prime: "p192",
          p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
          a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
          b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
          n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
          hash: hash_default().sha256,
          gRed: false,
          g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"],
        });

        defineCurve("p224", {
          type: "short",
          prime: "p224",
          p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
          a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
          b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
          n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
          hash: hash_default().sha256,
          gRed: false,
          g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"],
        });

        defineCurve("p256", {
          type: "short",
          prime: null,
          p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
          a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
          b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
          n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
          hash: hash_default().sha256,
          gRed: false,
          g: [
            "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
            "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5",
          ],
        });

        defineCurve("p384", {
          type: "short",
          prime: null,
          p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " + "fffffffe ffffffff 00000000 00000000 ffffffff",
          a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " + "fffffffe ffffffff 00000000 00000000 fffffffc",
          b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f " + "5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
          n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 " + "f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
          hash: hash_default().sha384,
          gRed: false,
          g: [
            "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 " + "5502f25d bf55296c 3a545e38 72760ab7",
            "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 " + "0a60b1ce 1d7e819d 7a431d7c 90ea0e5f",
          ],
        });

        defineCurve("p521", {
          type: "short",
          prime: null,
          p:
            "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff ffffffff ffffffff ffffffff",
          a:
            "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff ffffffff ffffffff fffffffc",
          b:
            "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b " +
            "99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd " +
            "3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
          n:
            "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
            "ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 " +
            "f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
          hash: hash_default().sha512,
          gRed: false,
          g: [
            "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 " +
              "053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 " +
              "a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
            "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 " +
              "579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 " +
              "3fad0761 353c7086 a272c240 88be9476 9fd16650",
          ],
        });

        defineCurve("curve25519", {
          type: "mont",
          prime: "p25519",
          p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
          a: "76d06",
          b: "1",
          n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
          hash: hash_default().sha256,
          gRed: false,
          g: ["9"],
        });

        defineCurve("ed25519", {
          type: "edwards",
          prime: "p25519",
          p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
          a: "-1",
          c: "1",
          // -121665 * (121666^(-1)) (mod P)
          d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
          n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
          hash: hash_default().sha256,
          gRed: false,
          g: [
            "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",

            // 4/5
            "6666666666666666666666666666666666666666666666666666666666666658",
          ],
        });

        var pre;
        try {
          pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/ null.crash();
        } catch (e) {
          pre = undefined;
        }

        defineCurve("secp256k1", {
          type: "short",
          prime: "k256",
          p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
          a: "0",
          b: "7",
          n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
          h: "1",
          hash: hash_default().sha256,

          // Precomputed endomorphism
          beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
          lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
          basis: [
            {
              a: "3086d221a7d46bcde86c90e49284eb15",
              b: "-e4437ed6010e88286f547fa90abfe4c3",
            },
            {
              a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
              b: "3086d221a7d46bcde86c90e49284eb15",
            },
          ],

          gRed: false,
          g: [
            "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
            "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
            pre,
          ],
        });
      });

      ("use strict");

      function HmacDRBG(options) {
        if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
        this.hash = options.hash;
        this.predResist = !!options.predResist;

        this.outLen = this.hash.outSize;
        this.minEntropy = options.minEntropy || this.hash.hmacStrength;

        this._reseed = null;
        this.reseedInterval = null;
        this.K = null;
        this.V = null;

        var entropy = utils_1.toArray(options.entropy, options.entropyEnc || "hex");
        var nonce = utils_1.toArray(options.nonce, options.nonceEnc || "hex");
        var pers = utils_1.toArray(options.pers, options.persEnc || "hex");
        minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
        this._init(entropy, nonce, pers);
      }
      var hmacDrbg = HmacDRBG;

      HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
        var seed = entropy.concat(nonce).concat(pers);

        this.K = new Array(this.outLen / 8);
        this.V = new Array(this.outLen / 8);
        for (var i = 0; i < this.V.length; i++) {
          this.K[i] = 0x00;
          this.V[i] = 0x01;
        }

        this._update(seed);
        this._reseed = 1;
        this.reseedInterval = 0x1000000000000; // 2^48
      };

      HmacDRBG.prototype._hmac = function hmac() {
        return new (hash_default().hmac)(this.hash, this.K);
      };

      HmacDRBG.prototype._update = function update(seed) {
        var kmac = this._hmac().update(this.V).update([0x00]);
        if (seed) kmac = kmac.update(seed);
        this.K = kmac.digest();
        this.V = this._hmac().update(this.V).digest();
        if (!seed) return;

        this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
        this.V = this._hmac().update(this.V).digest();
      };

      HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
        // Optional entropy enc
        if (typeof entropyEnc !== "string") {
          addEnc = add;
          add = entropyEnc;
          entropyEnc = null;
        }

        entropy = utils_1.toArray(entropy, entropyEnc);
        add = utils_1.toArray(add, addEnc);

        minimalisticAssert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");

        this._update(entropy.concat(add || []));
        this._reseed = 1;
      };

      HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
        if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");

        // Optional encoding
        if (typeof enc !== "string") {
          addEnc = add;
          add = enc;
          enc = null;
        }

        // Optional additional data
        if (add) {
          add = utils_1.toArray(add, addEnc || "hex");
          this._update(add);
        }

        var temp = [];
        while (temp.length < len) {
          this.V = this._hmac().update(this.V).digest();
          temp = temp.concat(this.V);
        }

        var res = temp.slice(0, len);
        this._update(add);
        this._reseed++;
        return utils_1.encode(res, enc);
      };

      ("use strict");

      var assert$3 = utils_1$1.assert;

      function KeyPair(ec, options) {
        this.ec = ec;
        this.priv = null;
        this.pub = null;

        // KeyPair(ec, { priv: ..., pub: ... })
        if (options.priv) this._importPrivate(options.priv, options.privEnc);
        if (options.pub) this._importPublic(options.pub, options.pubEnc);
      }
      var key = KeyPair;

      KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
        if (pub instanceof KeyPair) return pub;

        return new KeyPair(ec, {
          pub: pub,
          pubEnc: enc,
        });
      };

      KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
        if (priv instanceof KeyPair) return priv;

        return new KeyPair(ec, {
          priv: priv,
          privEnc: enc,
        });
      };

      KeyPair.prototype.validate = function validate() {
        var pub = this.getPublic();

        if (pub.isInfinity()) return { result: false, reason: "Invalid public key" };
        if (!pub.validate()) return { result: false, reason: "Public key is not a point" };
        if (!pub.mul(this.ec.curve.n).isInfinity()) return { result: false, reason: "Public key * N != O" };

        return { result: true, reason: null };
      };

      KeyPair.prototype.getPublic = function getPublic(compact, enc) {
        // compact is optional argument
        if (typeof compact === "string") {
          enc = compact;
          compact = null;
        }

        if (!this.pub) this.pub = this.ec.g.mul(this.priv);

        if (!enc) return this.pub;

        return this.pub.encode(enc, compact);
      };

      KeyPair.prototype.getPrivate = function getPrivate(enc) {
        if (enc === "hex") return this.priv.toString(16, 2);
        else return this.priv;
      };

      KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
        this.priv = new (bn_default())(key, enc || 16);

        // Ensure that the priv won't be bigger than n, otherwise we may fail
        // in fixed multiplication method
        this.priv = this.priv.umod(this.ec.curve.n);
      };

      KeyPair.prototype._importPublic = function _importPublic(key, enc) {
        if (key.x || key.y) {
          // Montgomery points only have an `x` coordinate.
          // Weierstrass/Edwards points on the other hand have both `x` and
          // `y` coordinates.
          if (this.ec.curve.type === "mont") {
            assert$3(key.x, "Need x coordinate");
          } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
            assert$3(key.x && key.y, "Need both x and y coordinate");
          }
          this.pub = this.ec.curve.point(key.x, key.y);
          return;
        }
        this.pub = this.ec.curve.decodePoint(key, enc);
      };

      // ECDH
      KeyPair.prototype.derive = function derive(pub) {
        if (!pub.validate()) {
          assert$3(pub.validate(), "public point not validated");
        }
        return pub.mul(this.priv).getX();
      };

      // ECDSA
      KeyPair.prototype.sign = function sign(msg, enc, options) {
        return this.ec.sign(msg, this, enc, options);
      };

      KeyPair.prototype.verify = function verify(msg, signature) {
        return this.ec.verify(msg, signature, this);
      };

      KeyPair.prototype.inspect = function inspect() {
        return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
      };

      ("use strict");

      var assert$4 = utils_1$1.assert;

      function Signature(options, enc) {
        if (options instanceof Signature) return options;

        if (this._importDER(options, enc)) return;

        assert$4(options.r && options.s, "Signature without r or s");
        this.r = new (bn_default())(options.r, 16);
        this.s = new (bn_default())(options.s, 16);
        if (options.recoveryParam === undefined) this.recoveryParam = null;
        else this.recoveryParam = options.recoveryParam;
      }
      var signature = Signature;

      function Position() {
        this.place = 0;
      }

      function getLength(buf, p) {
        var initial = buf[p.place++];
        if (!(initial & 0x80)) {
          return initial;
        }
        var octetLen = initial & 0xf;

        // Indefinite length or overflow
        if (octetLen === 0 || octetLen > 4) {
          return false;
        }

        var val = 0;
        for (var i = 0, off = p.place; i < octetLen; i++, off++) {
          val <<= 8;
          val |= buf[off];
          val >>>= 0;
        }

        // Leading zeroes
        if (val <= 0x7f) {
          return false;
        }

        p.place = off;
        return val;
      }

      function rmPadding(buf) {
        var i = 0;
        var len = buf.length - 1;
        while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
          i++;
        }
        if (i === 0) {
          return buf;
        }
        return buf.slice(i);
      }

      Signature.prototype._importDER = function _importDER(data, enc) {
        data = utils_1$1.toArray(data, enc);
        var p = new Position();
        if (data[p.place++] !== 0x30) {
          return false;
        }
        var len = getLength(data, p);
        if (len === false) {
          return false;
        }
        if (len + p.place !== data.length) {
          return false;
        }
        if (data[p.place++] !== 0x02) {
          return false;
        }
        var rlen = getLength(data, p);
        if (rlen === false) {
          return false;
        }
        var r = data.slice(p.place, rlen + p.place);
        p.place += rlen;
        if (data[p.place++] !== 0x02) {
          return false;
        }
        var slen = getLength(data, p);
        if (slen === false) {
          return false;
        }
        if (data.length !== slen + p.place) {
          return false;
        }
        var s = data.slice(p.place, slen + p.place);
        if (r[0] === 0) {
          if (r[1] & 0x80) {
            r = r.slice(1);
          } else {
            // Leading zeroes
            return false;
          }
        }
        if (s[0] === 0) {
          if (s[1] & 0x80) {
            s = s.slice(1);
          } else {
            // Leading zeroes
            return false;
          }
        }

        this.r = new (bn_default())(r);
        this.s = new (bn_default())(s);
        this.recoveryParam = null;

        return true;
      };

      function constructLength(arr, len) {
        if (len < 0x80) {
          arr.push(len);
          return;
        }
        var octets = 1 + ((Math.log(len) / Math.LN2) >>> 3);
        arr.push(octets | 0x80);
        while (--octets) {
          arr.push((len >>> (octets << 3)) & 0xff);
        }
        arr.push(len);
      }

      Signature.prototype.toDER = function toDER(enc) {
        var r = this.r.toArray();
        var s = this.s.toArray();

        // Pad values
        if (r[0] & 0x80) r = [0].concat(r);
        // Pad values
        if (s[0] & 0x80) s = [0].concat(s);

        r = rmPadding(r);
        s = rmPadding(s);

        while (!s[0] && !(s[1] & 0x80)) {
          s = s.slice(1);
        }
        var arr = [0x02];
        constructLength(arr, r.length);
        arr = arr.concat(r);
        arr.push(0x02);
        constructLength(arr, s.length);
        var backHalf = arr.concat(s);
        var res = [0x30];
        constructLength(res, backHalf.length);
        res = res.concat(backHalf);
        return utils_1$1.encode(res, enc);
      };

      ("use strict");

      var rand = /*RicMoo:ethers:require(brorand)*/ function () {
        throw new Error("unsupported");
      };
      var assert$5 = utils_1$1.assert;

      function EC(options) {
        if (!(this instanceof EC)) return new EC(options);

        // Shortcut `elliptic.ec(curve-name)`
        if (typeof options === "string") {
          assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), "Unknown curve " + options);

          options = curves_1[options];
        }

        // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
        if (options instanceof curves_1.PresetCurve) options = { curve: options };

        this.curve = options.curve.curve;
        this.n = this.curve.n;
        this.nh = this.n.ushrn(1);
        this.g = this.curve.g;

        // Point on curve
        this.g = options.curve.g;
        this.g.precompute(options.curve.n.bitLength() + 1);

        // Hash for function for DRBG
        this.hash = options.hash || options.curve.hash;
      }
      var ec = EC;

      EC.prototype.keyPair = function keyPair(options) {
        return new key(this, options);
      };

      EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
        return key.fromPrivate(this, priv, enc);
      };

      EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
        return key.fromPublic(this, pub, enc);
      };

      EC.prototype.genKeyPair = function genKeyPair(options) {
        if (!options) options = {};

        // Instantiate Hmac_DRBG
        var drbg = new hmacDrbg({
          hash: this.hash,
          pers: options.pers,
          persEnc: options.persEnc || "utf8",
          entropy: options.entropy || rand(this.hash.hmacStrength),
          entropyEnc: (options.entropy && options.entropyEnc) || "utf8",
          nonce: this.n.toArray(),
        });

        var bytes = this.n.byteLength();
        var ns2 = this.n.sub(new (bn_default())(2));
        for (;;) {
          var priv = new (bn_default())(drbg.generate(bytes));
          if (priv.cmp(ns2) > 0) continue;

          priv.iaddn(1);
          return this.keyFromPrivate(priv);
        }
      };

      EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
        var delta = msg.byteLength() * 8 - this.n.bitLength();
        if (delta > 0) msg = msg.ushrn(delta);
        if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
        else return msg;
      };

      EC.prototype.sign = function sign(msg, key, enc, options) {
        if (typeof enc === "object") {
          options = enc;
          enc = null;
        }
        if (!options) options = {};

        key = this.keyFromPrivate(key, enc);
        msg = this._truncateToN(new (bn_default())(msg, 16));

        // Zero-extend key to provide enough entropy
        var bytes = this.n.byteLength();
        var bkey = key.getPrivate().toArray("be", bytes);

        // Zero-extend nonce to have the same byte size as N
        var nonce = msg.toArray("be", bytes);

        // Instantiate Hmac_DRBG
        var drbg = new hmacDrbg({
          hash: this.hash,
          entropy: bkey,
          nonce: nonce,
          pers: options.pers,
          persEnc: options.persEnc || "utf8",
        });

        // Number of bytes to generate
        var ns1 = this.n.sub(new (bn_default())(1));

        for (var iter = 0; ; iter++) {
          var k = options.k ? options.k(iter) : new (bn_default())(drbg.generate(this.n.byteLength()));
          k = this._truncateToN(k, true);
          if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;

          var kp = this.g.mul(k);
          if (kp.isInfinity()) continue;

          var kpX = kp.getX();
          var r = kpX.umod(this.n);
          if (r.cmpn(0) === 0) continue;

          var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
          s = s.umod(this.n);
          if (s.cmpn(0) === 0) continue;

          var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);

          // Use complement of `s`, if it is > `n / 2`
          if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
          }

          return new signature({ r: r, s: s, recoveryParam: recoveryParam });
        }
      };

      EC.prototype.verify = function verify(msg, signature$1, key, enc) {
        msg = this._truncateToN(new (bn_default())(msg, 16));
        key = this.keyFromPublic(key, enc);
        signature$1 = new signature(signature$1, "hex");

        // Perform primitive values validation
        var r = signature$1.r;
        var s = signature$1.s;
        if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
        if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;

        // Validate signature
        var sinv = s.invm(this.n);
        var u1 = sinv.mul(msg).umod(this.n);
        var u2 = sinv.mul(r).umod(this.n);
        var p;

        if (!this.curve._maxwellTrick) {
          p = this.g.mulAdd(u1, key.getPublic(), u2);
          if (p.isInfinity()) return false;

          return p.getX().umod(this.n).cmp(r) === 0;
        }

        // NOTE: Greg Maxwell's trick, inspired by:
        // https://git.io/vad3K

        p = this.g.jmulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;

        // Compare `p.x` of Jacobian point with `r`,
        // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
        // inverse of `p.z^2`
        return p.eqXToP(r);
      };

      EC.prototype.recoverPubKey = function (msg, signature$1, j, enc) {
        assert$5((3 & j) === j, "The recovery param is more than two bits");
        signature$1 = new signature(signature$1, enc);

        var n = this.n;
        var e = new (bn_default())(msg);
        var r = signature$1.r;
        var s = signature$1.s;

        // A set LSB signifies that the y-coordinate is odd
        var isYOdd = j & 1;
        var isSecondKey = j >> 1;
        if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");

        // 1.1. Let x = r + jn.
        if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
        else r = this.curve.pointFromX(r, isYOdd);

        var rInv = signature$1.r.invm(n);
        var s1 = n.sub(e).mul(rInv).umod(n);
        var s2 = s.mul(rInv).umod(n);

        // 1.6.1 Compute Q = r^-1 (sR -  eG)
        //               Q = r^-1 (sR + -eG)
        return this.g.mulAdd(s1, r, s2);
      };

      EC.prototype.getKeyRecoveryParam = function (e, signature$1, Q, enc) {
        signature$1 = new signature(signature$1, enc);
        if (signature$1.recoveryParam !== null) return signature$1.recoveryParam;

        for (var i = 0; i < 4; i++) {
          var Qprime;
          try {
            Qprime = this.recoverPubKey(e, signature$1, i);
          } catch (e) {
            continue;
          }

          if (Qprime.eq(Q)) return i;
        }
        throw new Error("Unable to find valid recovery factor");
      };

      var elliptic_1 = createCommonjsModule(function (module, exports) {
        "use strict";

        var elliptic = exports;

        elliptic.version = /*RicMoo:ethers*/ { version: "6.5.4" }.version;
        elliptic.utils = utils_1$1;
        elliptic.rand = /*RicMoo:ethers:require(brorand)*/ function () {
          throw new Error("unsupported");
        };
        elliptic.curve = curve_1;
        elliptic.curves = curves_1;

        // Protocols
        elliptic.ec = ec;
        elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/ null;
      });

      var EC$1 = elliptic_1.ec; // CONCATENATED MODULE: ./node_modules/@ethersproject/signing-key/lib.esm/_version.js

      //# sourceMappingURL=elliptic.js.map

      const _version_version = "signing-key/5.7.0"; // CONCATENATED MODULE: ./node_modules/@ethersproject/signing-key/lib.esm/index.js
      //# sourceMappingURL=_version.js.map
      const lib_esm_logger = new logger_lib_esm /* Logger */.Yd(_version_version);
      let _curve = null;
      function getCurve() {
        if (!_curve) {
          _curve = new EC$1("secp256k1");
        }
        return _curve;
      }
      class SigningKey {
        constructor(privateKey) {
          (0, properties_lib_esm /* defineReadOnly */.zG)(this, "curve", "secp256k1");
          (0, properties_lib_esm /* defineReadOnly */.zG)(this, "privateKey", (0, bytes_lib_esm /* hexlify */.Dv)(privateKey));
          if ((0, bytes_lib_esm /* hexDataLength */.E1)(this.privateKey) !== 32) {
            lib_esm_logger.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
          }
          const keyPair = getCurve().keyFromPrivate((0, bytes_lib_esm /* arrayify */.lE)(this.privateKey));
          (0, properties_lib_esm /* defineReadOnly */.zG)(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
          (0, properties_lib_esm /* defineReadOnly */.zG)(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
          (0, properties_lib_esm /* defineReadOnly */.zG)(this, "_isSigningKey", true);
        }
        _addPoint(other) {
          const p0 = getCurve().keyFromPublic((0, bytes_lib_esm /* arrayify */.lE)(this.publicKey));
          const p1 = getCurve().keyFromPublic((0, bytes_lib_esm /* arrayify */.lE)(other));
          return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
        }
        signDigest(digest) {
          const keyPair = getCurve().keyFromPrivate((0, bytes_lib_esm /* arrayify */.lE)(this.privateKey));
          const digestBytes = (0, bytes_lib_esm /* arrayify */.lE)(digest);
          if (digestBytes.length !== 32) {
            lib_esm_logger.throwArgumentError("bad digest length", "digest", digest);
          }
          const signature = keyPair.sign(digestBytes, { canonical: true });
          return (0, bytes_lib_esm /* splitSignature */.N)({
            recoveryParam: signature.recoveryParam,
            r: (0, bytes_lib_esm /* hexZeroPad */.$m)("0x" + signature.r.toString(16), 32),
            s: (0, bytes_lib_esm /* hexZeroPad */.$m)("0x" + signature.s.toString(16), 32),
          });
        }
        computeSharedSecret(otherKey) {
          const keyPair = getCurve().keyFromPrivate((0, bytes_lib_esm /* arrayify */.lE)(this.privateKey));
          const otherKeyPair = getCurve().keyFromPublic((0, bytes_lib_esm /* arrayify */.lE)(computePublicKey(otherKey)));
          return (0, bytes_lib_esm /* hexZeroPad */.$m)("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
        }
        static isSigningKey(value) {
          return !!(value && value._isSigningKey);
        }
      }
      function recoverPublicKey(digest, signature) {
        const sig = (0, bytes_lib_esm /* splitSignature */.N)(signature);
        const rs = { r: (0, bytes_lib_esm /* arrayify */.lE)(sig.r), s: (0, bytes_lib_esm /* arrayify */.lE)(sig.s) };
        return (
          "0x" +
          getCurve()
            .recoverPubKey((0, bytes_lib_esm /* arrayify */.lE)(digest), rs, sig.recoveryParam)
            .encode("hex", false)
        );
      }
      function computePublicKey(key, compressed) {
        const bytes = (0, bytes_lib_esm /* arrayify */.lE)(key);
        if (bytes.length === 32) {
          const signingKey = new SigningKey(bytes);
          if (compressed) {
            return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
          }
          return signingKey.publicKey;
        } else if (bytes.length === 33) {
          if (compressed) {
            return (0, bytes_lib_esm /* hexlify */.Dv)(bytes);
          }
          return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
        } else if (bytes.length === 65) {
          if (!compressed) {
            return (0, bytes_lib_esm /* hexlify */.Dv)(bytes);
          }
          return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
        }
        return lib_esm_logger.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
      } // CONCATENATED MODULE: ./node_modules/@ethersproject/transactions/lib.esm/_version.js
      //# sourceMappingURL=index.js.map
      const lib_esm_version_version = "transactions/5.7.0"; // CONCATENATED MODULE: ./node_modules/@ethersproject/transactions/lib.esm/index.js
      //# sourceMappingURL=_version.js.map
      const transactions_lib_esm_logger = new logger_lib_esm /* Logger */.Yd(lib_esm_version_version);
      var TransactionTypes;
      (function (TransactionTypes) {
        TransactionTypes[(TransactionTypes["legacy"] = 0)] = "legacy";
        TransactionTypes[(TransactionTypes["eip2930"] = 1)] = "eip2930";
        TransactionTypes[(TransactionTypes["eip1559"] = 2)] = "eip1559";
      })(TransactionTypes || (TransactionTypes = {}));
      ///////////////////////////////
      function handleAddress(value) {
        if (value === "0x") {
          return null;
        }
        return (0, lib_esm /* getAddress */.Kn)(value);
      }
      function handleNumber(value) {
        if (value === "0x") {
          return bignumbers /* Zero */._Y;
        }
        return bignumber /* BigNumber.from */.O$.from(value);
      }
      // Legacy Transaction Fields
      const transactionFields = [
        { name: "nonce", maxLength: 32, numeric: true },
        { name: "gasPrice", maxLength: 32, numeric: true },
        { name: "gasLimit", maxLength: 32, numeric: true },
        { name: "to", length: 20 },
        { name: "value", maxLength: 32, numeric: true },
        { name: "data" },
      ];
      const allowedTransactionKeys = {
        chainId: true,
        data: true,
        gasLimit: true,
        gasPrice: true,
        nonce: true,
        to: true,
        type: true,
        value: true,
      };
      function computeAddress(key) {
        const publicKey = computePublicKey(key);
        return (0, lib_esm /* getAddress */.Kn)(
          (0, bytes_lib_esm /* hexDataSlice */.p3)(
            (0, keccak256_lib_esm /* keccak256 */.w)((0, bytes_lib_esm /* hexDataSlice */.p3)(publicKey, 1)),
            12
          )
        );
      }
      function recoverAddress(digest, signature) {
        return computeAddress(recoverPublicKey((0, bytes_lib_esm /* arrayify */.lE)(digest), signature));
      }
      function formatNumber(value, name) {
        const result = (0, bytes_lib_esm /* stripZeros */.G1)(
          bignumber /* BigNumber.from */.O$.from(value)
            .toHexString()
        );
        if (result.length > 32) {
          transactions_lib_esm_logger.throwArgumentError("invalid length for " + name, "transaction:" + name, value);
        }
        return result;
      }
      function accessSetify(addr, storageKeys) {
        return {
          address: (0, lib_esm /* getAddress */.Kn)(addr),
          storageKeys: (storageKeys || []).map((storageKey, index) => {
            if ((0, bytes_lib_esm /* hexDataLength */.E1)(storageKey) !== 32) {
              transactions_lib_esm_logger.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
            }
            return storageKey.toLowerCase();
          }),
        };
      }
      function accessListify(value) {
        if (Array.isArray(value)) {
          return value.map((set, index) => {
            if (Array.isArray(set)) {
              if (set.length > 2) {
                transactions_lib_esm_logger.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
              }
              return accessSetify(set[0], set[1]);
            }
            return accessSetify(set.address, set.storageKeys);
          });
        }
        const result = Object.keys(value).map((addr) => {
          const storageKeys = value[addr].reduce((accum, storageKey) => {
            accum[storageKey] = true;
            return accum;
          }, {});
          return accessSetify(addr, Object.keys(storageKeys).sort());
        });
        result.sort((a, b) => a.address.localeCompare(b.address));
        return result;
      }
      function formatAccessList(value) {
        return accessListify(value).map((set) => [set.address, set.storageKeys]);
      }
      function _serializeEip1559(transaction, signature) {
        // If there is an explicit gasPrice, make sure it matches the
        // EIP-1559 fees; otherwise they may not understand what they
        // think they are setting in terms of fee.
        if (transaction.gasPrice != null) {
          const gasPrice = bignumber /* BigNumber.from */.O$.from(transaction.gasPrice);
          const maxFeePerGas = bignumber /* BigNumber.from */.O$.from(transaction.maxFeePerGas || 0);
          if (!gasPrice.eq(maxFeePerGas)) {
            transactions_lib_esm_logger.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
              gasPrice,
              maxFeePerGas,
            });
          }
        }
        const fields = [
          formatNumber(transaction.chainId || 0, "chainId"),
          formatNumber(transaction.nonce || 0, "nonce"),
          formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
          formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
          formatNumber(transaction.gasLimit || 0, "gasLimit"),
          transaction.to != null ? (0, lib_esm /* getAddress */.Kn)(transaction.to) : "0x",
          formatNumber(transaction.value || 0, "value"),
          transaction.data || "0x",
          formatAccessList(transaction.accessList || []),
        ];
        if (signature) {
          const sig = (0, bytes_lib_esm /* splitSignature */.N)(signature);
          fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
          fields.push((0, bytes_lib_esm /* stripZeros */.G1)(sig.r));
          fields.push((0, bytes_lib_esm /* stripZeros */.G1)(sig.s));
        }
        return (0, bytes_lib_esm /* hexConcat */.xs)(["0x02", encode(fields)]);
      }
      function _serializeEip2930(transaction, signature) {
        const fields = [
          formatNumber(transaction.chainId || 0, "chainId"),
          formatNumber(transaction.nonce || 0, "nonce"),
          formatNumber(transaction.gasPrice || 0, "gasPrice"),
          formatNumber(transaction.gasLimit || 0, "gasLimit"),
          transaction.to != null ? (0, lib_esm /* getAddress */.Kn)(transaction.to) : "0x",
          formatNumber(transaction.value || 0, "value"),
          transaction.data || "0x",
          formatAccessList(transaction.accessList || []),
        ];
        if (signature) {
          const sig = (0, bytes_lib_esm /* splitSignature */.N)(signature);
          fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
          fields.push((0, bytes_lib_esm /* stripZeros */.G1)(sig.r));
          fields.push((0, bytes_lib_esm /* stripZeros */.G1)(sig.s));
        }
        return (0, bytes_lib_esm /* hexConcat */.xs)(["0x01", encode(fields)]);
      }
      // Legacy Transactions and EIP-155
      function _serialize(transaction, signature) {
        (0, properties_lib_esm /* checkProperties */.uj)(transaction, allowedTransactionKeys);
        const raw = [];
        transactionFields.forEach(function (fieldInfo) {
          let value = transaction[fieldInfo.name] || [];
          const options = {};
          if (fieldInfo.numeric) {
            options.hexPad = "left";
          }
          value = (0, bytes_lib_esm /* arrayify */.lE)((0, bytes_lib_esm /* hexlify */.Dv)(value, options));
          // Fixed-width field
          if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
            transactions_lib_esm_logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
          }
          // Variable-width (with a maximum)
          if (fieldInfo.maxLength) {
            value = (0, bytes_lib_esm /* stripZeros */.G1)(value);
            if (value.length > fieldInfo.maxLength) {
              transactions_lib_esm_logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
            }
          }
          raw.push((0, bytes_lib_esm /* hexlify */.Dv)(value));
        });
        let chainId = 0;
        if (transaction.chainId != null) {
          // A chainId was provided; if non-zero we'll use EIP-155
          chainId = transaction.chainId;
          if (typeof chainId !== "number") {
            transactions_lib_esm_logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
          }
        } else if (signature && !(0, bytes_lib_esm /* isBytesLike */.Zq)(signature) && signature.v > 28) {
          // No chainId provided, but the signature is signing with EIP-155; derive chainId
          chainId = Math.floor((signature.v - 35) / 2);
        }
        // We have an EIP-155 transaction (chainId was specified and non-zero)
        if (chainId !== 0) {
          raw.push((0, bytes_lib_esm /* hexlify */.Dv)(chainId)); // @TODO: hexValue?
          raw.push("0x");
          raw.push("0x");
        }
        // Requesting an unsigned transaction
        if (!signature) {
          return encode(raw);
        }
        // The splitSignature will ensure the transaction has a recoveryParam in the
        // case that the signTransaction function only adds a v.
        const sig = (0, bytes_lib_esm /* splitSignature */.N)(signature);
        // We pushed a chainId and null r, s on for hashing only; remove those
        let v = 27 + sig.recoveryParam;
        if (chainId !== 0) {
          raw.pop();
          raw.pop();
          raw.pop();
          v += chainId * 2 + 8;
          // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
          if (sig.v > 28 && sig.v !== v) {
            transactions_lib_esm_logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
          }
        } else if (sig.v !== v) {
          transactions_lib_esm_logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
        }
        raw.push((0, bytes_lib_esm /* hexlify */.Dv)(v));
        raw.push((0, bytes_lib_esm /* stripZeros */.G1)((0, bytes_lib_esm /* arrayify */.lE)(sig.r)));
        raw.push((0, bytes_lib_esm /* stripZeros */.G1)((0, bytes_lib_esm /* arrayify */.lE)(sig.s)));
        return encode(raw);
      }
      function serialize(transaction, signature) {
        // Legacy and EIP-155 Transactions
        if (transaction.type == null || transaction.type === 0) {
          if (transaction.accessList != null) {
            transactions_lib_esm_logger.throwArgumentError(
              "untyped transactions do not support accessList; include type: 1",
              "transaction",
              transaction
            );
          }
          return _serialize(transaction, signature);
        }
        // Typed Transactions (EIP-2718)
        switch (transaction.type) {
          case 1:
            return _serializeEip2930(transaction, signature);
          case 2:
            return _serializeEip1559(transaction, signature);
          default:
            break;
        }
        return transactions_lib_esm_logger.throwError(
          `unsupported transaction type: ${transaction.type}`,
          logger_lib_esm /* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION,
          {
            operation: "serializeTransaction",
            transactionType: transaction.type,
          }
        );
      }
      function _parseEipSignature(tx, fields, serialize) {
        try {
          const recid = handleNumber(fields[0]).toNumber();
          if (recid !== 0 && recid !== 1) {
            throw new Error("bad recid");
          }
          tx.v = recid;
        } catch (error) {
          transactions_lib_esm_logger.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
        }
        tx.r = (0, bytes_lib_esm /* hexZeroPad */.$m)(fields[1], 32);
        tx.s = (0, bytes_lib_esm /* hexZeroPad */.$m)(fields[2], 32);
        try {
          const digest = (0, keccak256_lib_esm /* keccak256 */.w)(serialize(tx));
          tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
        } catch (error) {}
      }
      function _parseEip1559(payload) {
        const transaction = decode(payload.slice(1));
        if (transaction.length !== 9 && transaction.length !== 12) {
          transactions_lib_esm_logger.throwArgumentError(
            "invalid component count for transaction type: 2",
            "payload",
            (0, bytes_lib_esm /* hexlify */.Dv)(payload)
          );
        }
        const maxPriorityFeePerGas = handleNumber(transaction[2]);
        const maxFeePerGas = handleNumber(transaction[3]);
        const tx = {
          type: 2,
          chainId: handleNumber(transaction[0]).toNumber(),
          nonce: handleNumber(transaction[1]).toNumber(),
          maxPriorityFeePerGas: maxPriorityFeePerGas,
          maxFeePerGas: maxFeePerGas,
          gasPrice: null,
          gasLimit: handleNumber(transaction[4]),
          to: handleAddress(transaction[5]),
          value: handleNumber(transaction[6]),
          data: transaction[7],
          accessList: accessListify(transaction[8]),
        };
        // Unsigned EIP-1559 Transaction
        if (transaction.length === 9) {
          return tx;
        }
        tx.hash = (0, keccak256_lib_esm /* keccak256 */.w)(payload);
        _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
        return tx;
      }
      function _parseEip2930(payload) {
        const transaction = decode(payload.slice(1));
        if (transaction.length !== 8 && transaction.length !== 11) {
          transactions_lib_esm_logger.throwArgumentError(
            "invalid component count for transaction type: 1",
            "payload",
            (0, bytes_lib_esm /* hexlify */.Dv)(payload)
          );
        }
        const tx = {
          type: 1,
          chainId: handleNumber(transaction[0]).toNumber(),
          nonce: handleNumber(transaction[1]).toNumber(),
          gasPrice: handleNumber(transaction[2]),
          gasLimit: handleNumber(transaction[3]),
          to: handleAddress(transaction[4]),
          value: handleNumber(transaction[5]),
          data: transaction[6],
          accessList: accessListify(transaction[7]),
        };
        // Unsigned EIP-2930 Transaction
        if (transaction.length === 8) {
          return tx;
        }
        tx.hash = (0, keccak256_lib_esm /* keccak256 */.w)(payload);
        _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
        return tx;
      }
      // Legacy Transactions and EIP-155
      function _parse(rawTransaction) {
        const transaction = decode(rawTransaction);
        if (transaction.length !== 9 && transaction.length !== 6) {
          transactions_lib_esm_logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
        }
        const tx = {
          nonce: handleNumber(transaction[0]).toNumber(),
          gasPrice: handleNumber(transaction[1]),
          gasLimit: handleNumber(transaction[2]),
          to: handleAddress(transaction[3]),
          value: handleNumber(transaction[4]),
          data: transaction[5],
          chainId: 0,
        };
        // Legacy unsigned transaction
        if (transaction.length === 6) {
          return tx;
        }
        try {
          tx.v = bignumber /* BigNumber.from */.O$.from(transaction[6])
            .toNumber();
        } catch (error) {
          // @TODO: What makes snese to do? The v is too big
          return tx;
        }
        tx.r = (0, bytes_lib_esm /* hexZeroPad */.$m)(transaction[7], 32);
        tx.s = (0, bytes_lib_esm /* hexZeroPad */.$m)(transaction[8], 32);
        if (
          bignumber /* BigNumber.from */.O$.from(tx.r)
            .isZero() &&
          bignumber /* BigNumber.from */.O$.from(tx.s)
            .isZero()
        ) {
          // EIP-155 unsigned transaction
          tx.chainId = tx.v;
          tx.v = 0;
        } else {
          // Signed Transaction
          tx.chainId = Math.floor((tx.v - 35) / 2);
          if (tx.chainId < 0) {
            tx.chainId = 0;
          }
          let recoveryParam = tx.v - 27;
          const raw = transaction.slice(0, 6);
          if (tx.chainId !== 0) {
            raw.push((0, bytes_lib_esm /* hexlify */.Dv)(tx.chainId));
            raw.push("0x");
            raw.push("0x");
            recoveryParam -= tx.chainId * 2 + 8;
          }
          const digest = (0, keccak256_lib_esm /* keccak256 */.w)(encode(raw));
          try {
            tx.from = recoverAddress(digest, {
              r: (0, bytes_lib_esm /* hexlify */.Dv)(tx.r),
              s: (0, bytes_lib_esm /* hexlify */.Dv)(tx.s),
              recoveryParam: recoveryParam,
            });
          } catch (error) {}
          tx.hash = (0, keccak256_lib_esm /* keccak256 */.w)(rawTransaction);
        }
        tx.type = null;
        return tx;
      }
      function parse(rawTransaction) {
        const payload = (0, bytes_lib_esm /* arrayify */.lE)(rawTransaction);
        // Legacy and EIP-155 Transactions
        if (payload[0] > 0x7f) {
          return _parse(payload);
        }
        // Typed Transaction (EIP-2718)
        switch (payload[0]) {
          case 1:
            return _parseEip2930(payload);
          case 2:
            return _parseEip1559(payload);
          default:
            break;
        }
        return transactions_lib_esm_logger.throwError(
          `unsupported transaction type: ${payload[0]}`,
          logger_lib_esm /* Logger.errors.UNSUPPORTED_OPERATION */.Yd.errors.UNSUPPORTED_OPERATION,
          {
            operation: "parseTransaction",
            transactionType: payload[0],
          }
        );
      }
      //# sourceMappingURL=index.js.map

      /***/
    },

    /***/ 3367: /***/ (module, exports, __webpack_require__) => {
      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;
      (function (factory) {
        true
          ? !((__WEBPACK_AMD_DEFINE_FACTORY__ = factory),
            (__WEBPACK_AMD_DEFINE_RESULT__ =
              typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function"
                ? __WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)
                : __WEBPACK_AMD_DEFINE_FACTORY__),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
          : 0;
      })(function () {
        "use strict";

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function");
          }

          subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
              value: subClass,
              writable: true,
              configurable: true,
            },
          });
          if (superClass) _setPrototypeOf(subClass, superClass);
        }

        function _getPrototypeOf(o) {
          _getPrototypeOf = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
          return _getPrototypeOf(o);
        }

        function _setPrototypeOf(o, p) {
          _setPrototypeOf =
            Object.setPrototypeOf ||
            function _setPrototypeOf(o, p) {
              o.__proto__ = p;
              return o;
            };

          return _setPrototypeOf(o, p);
        }

        function _isNativeReflectConstruct() {
          if (typeof Reflect === "undefined" || !Reflect.construct) return false;
          if (Reflect.construct.sham) return false;
          if (typeof Proxy === "function") return true;

          try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
            return true;
          } catch (e) {
            return false;
          }
        }

        function _assertThisInitialized(self) {
          if (self === void 0) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }

          return self;
        }

        function _possibleConstructorReturn(self, call) {
          if (call && (typeof call === "object" || typeof call === "function")) {
            return call;
          }

          return _assertThisInitialized(self);
        }

        function _createSuper(Derived) {
          var hasNativeReflectConstruct = _isNativeReflectConstruct();

          return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived),
              result;

            if (hasNativeReflectConstruct) {
              var NewTarget = _getPrototypeOf(this).constructor;

              result = Reflect.construct(Super, arguments, NewTarget);
            } else {
              result = Super.apply(this, arguments);
            }

            return _possibleConstructorReturn(this, result);
          };
        }

        function _superPropBase(object, property) {
          while (!Object.prototype.hasOwnProperty.call(object, property)) {
            object = _getPrototypeOf(object);
            if (object === null) break;
          }

          return object;
        }

        function _get(target, property, receiver) {
          if (typeof Reflect !== "undefined" && Reflect.get) {
            _get = Reflect.get;
          } else {
            _get = function _get(target, property, receiver) {
              var base = _superPropBase(target, property);

              if (!base) return;
              var desc = Object.getOwnPropertyDescriptor(base, property);

              if (desc.get) {
                return desc.get.call(receiver);
              }

              return desc.value;
            };
          }

          return _get(target, property, receiver || target);
        }

        var Emitter = /*#__PURE__*/ (function () {
          function Emitter() {
            _classCallCheck(this, Emitter);

            Object.defineProperty(this, "listeners", {
              value: {},
              writable: true,
              configurable: true,
            });
          }

          _createClass(Emitter, [
            {
              key: "addEventListener",
              value: function addEventListener(type, callback, options) {
                if (!(type in this.listeners)) {
                  this.listeners[type] = [];
                }

                this.listeners[type].push({
                  callback: callback,
                  options: options,
                });
              },
            },
            {
              key: "removeEventListener",
              value: function removeEventListener(type, callback) {
                if (!(type in this.listeners)) {
                  return;
                }

                var stack = this.listeners[type];

                for (var i = 0, l = stack.length; i < l; i++) {
                  if (stack[i].callback === callback) {
                    stack.splice(i, 1);
                    return;
                  }
                }
              },
            },
            {
              key: "dispatchEvent",
              value: function dispatchEvent(event) {
                if (!(event.type in this.listeners)) {
                  return;
                }

                var stack = this.listeners[event.type];
                var stackToCall = stack.slice();

                for (var i = 0, l = stackToCall.length; i < l; i++) {
                  var listener = stackToCall[i];

                  try {
                    listener.callback.call(this, event);
                  } catch (e) {
                    Promise.resolve().then(function () {
                      throw e;
                    });
                  }

                  if (listener.options && listener.options.once) {
                    this.removeEventListener(event.type, listener.callback);
                  }
                }

                return !event.defaultPrevented;
              },
            },
          ]);

          return Emitter;
        })();

        var AbortSignal = /*#__PURE__*/ (function (_Emitter) {
          _inherits(AbortSignal, _Emitter);

          var _super = _createSuper(AbortSignal);

          function AbortSignal() {
            var _this;

            _classCallCheck(this, AbortSignal);

            _this = _super.call(this); // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
            // constructor has failed to run, then "this.listeners" will still be undefined and then we call
            // the parent constructor directly instead as a workaround. For general details, see babel bug:
            // https://github.com/babel/babel/issues/3041
            // This hack was added as a fix for the issue described here:
            // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042

            if (!_this.listeners) {
              Emitter.call(_assertThisInitialized(_this));
            } // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
            // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl

            Object.defineProperty(_assertThisInitialized(_this), "aborted", {
              value: false,
              writable: true,
              configurable: true,
            });
            Object.defineProperty(_assertThisInitialized(_this), "onabort", {
              value: null,
              writable: true,
              configurable: true,
            });
            return _this;
          }

          _createClass(AbortSignal, [
            {
              key: "toString",
              value: function toString() {
                return "[object AbortSignal]";
              },
            },
            {
              key: "dispatchEvent",
              value: function dispatchEvent(event) {
                if (event.type === "abort") {
                  this.aborted = true;

                  if (typeof this.onabort === "function") {
                    this.onabort.call(this, event);
                  }
                }

                _get(_getPrototypeOf(AbortSignal.prototype), "dispatchEvent", this).call(this, event);
              },
            },
          ]);

          return AbortSignal;
        })(Emitter);
        var AbortController = /*#__PURE__*/ (function () {
          function AbortController() {
            _classCallCheck(this, AbortController);

            // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
            // we want Object.keys(new AbortController()) to be [] for compat with the native impl
            Object.defineProperty(this, "signal", {
              value: new AbortSignal(),
              writable: true,
              configurable: true,
            });
          }

          _createClass(AbortController, [
            {
              key: "abort",
              value: function abort() {
                var event;

                try {
                  event = new Event("abort");
                } catch (e) {
                  if (typeof document !== "undefined") {
                    if (!document.createEvent) {
                      // For Internet Explorer 8:
                      event = document.createEventObject();
                      event.type = "abort";
                    } else {
                      // For Internet Explorer 11:
                      event = document.createEvent("Event");
                      event.initEvent("abort", false, false);
                    }
                  } else {
                    // Fallback where document isn't available:
                    event = {
                      type: "abort",
                      bubbles: false,
                      cancelable: false,
                    };
                  }
                }

                this.signal.dispatchEvent(event);
              },
            },
            {
              key: "toString",
              value: function toString() {
                return "[object AbortController]";
              },
            },
          ]);

          return AbortController;
        })();

        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          // These are necessary to make sure that we get correct output for:
          // Object.prototype.toString.call(new AbortController())
          AbortController.prototype[Symbol.toStringTag] = "AbortController";
          AbortSignal.prototype[Symbol.toStringTag] = "AbortSignal";
        }

        function polyfillNeeded(self) {
          if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
            console.log("__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill");
            return true;
          } // Note that the "unfetch" minimal fetch polyfill defines fetch() without
          // defining window.Request, and this polyfill need to work on top of unfetch
          // so the below feature detection needs the !self.AbortController part.
          // The Request.prototype check is also needed because Safari versions 11.1.2
          // up to and including 12.1.x has a window.AbortController present but still
          // does NOT correctly implement abortable fetch:
          // https://bugs.webkit.org/show_bug.cgi?id=174980#c2

          return (typeof self.Request === "function" && !self.Request.prototype.hasOwnProperty("signal")) || !self.AbortController;
        }

        /**
         * Note: the "fetch.Request" default value is available for fetch imported from
         * the "node-fetch" package and not in browsers. This is OK since browsers
         * will be importing umd-polyfill.js from that path "self" is passed the
         * decorator so the default value will not be used (because browsers that define
         * fetch also has Request). One quirky setup where self.fetch exists but
         * self.Request does not is when the "unfetch" minimal fetch polyfill is used
         * on top of IE11; for this case the browser will try to use the fetch.Request
         * default value which in turn will be undefined but then then "if (Request)"
         * will ensure that you get a patched fetch but still no Request (as expected).
         * @param {fetch, Request = fetch.Request}
         * @returns {fetch: abortableFetch, Request: AbortableRequest}
         */

        function abortableFetchDecorator(patchTargets) {
          if ("function" === typeof patchTargets) {
            patchTargets = {
              fetch: patchTargets,
            };
          }

          var _patchTargets = patchTargets,
            fetch = _patchTargets.fetch,
            _patchTargets$Request = _patchTargets.Request,
            NativeRequest = _patchTargets$Request === void 0 ? fetch.Request : _patchTargets$Request,
            NativeAbortController = _patchTargets.AbortController,
            _patchTargets$__FORCE = _patchTargets.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL,
            __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL = _patchTargets$__FORCE === void 0 ? false : _patchTargets$__FORCE;

          if (
            !polyfillNeeded({
              fetch: fetch,
              Request: NativeRequest,
              AbortController: NativeAbortController,
              __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL: __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL,
            })
          ) {
            return {
              fetch: fetch,
              Request: Request,
            };
          }

          var Request = NativeRequest; // Note that the "unfetch" minimal fetch polyfill defines fetch() without
          // defining window.Request, and this polyfill need to work on top of unfetch
          // hence we only patch it if it's available. Also we don't patch it if signal
          // is already available on the Request prototype because in this case support
          // is present and the patching below can cause a crash since it assigns to
          // request.signal which is technically a read-only property. This latter error
          // happens when you run the main5.js node-fetch example in the repo
          // "abortcontroller-polyfill-examples". The exact error is:
          //   request.signal = init.signal;
          //   ^
          // TypeError: Cannot set property signal of #<Request> which has only a getter

          if ((Request && !Request.prototype.hasOwnProperty("signal")) || __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
            Request = function Request(input, init) {
              var signal;

              if (init && init.signal) {
                signal = init.signal; // Never pass init.signal to the native Request implementation when the polyfill has
                // been installed because if we're running on top of a browser with a
                // working native AbortController (i.e. the polyfill was installed due to
                // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
                // fake AbortSignal to the native fetch will trigger:
                // TypeError: Failed to construct 'Request': member signal is not of type AbortSignal.

                delete init.signal;
              }

              var request = new NativeRequest(input, init);

              if (signal) {
                Object.defineProperty(request, "signal", {
                  writable: false,
                  enumerable: false,
                  configurable: true,
                  value: signal,
                });
              }

              return request;
            };

            Request.prototype = NativeRequest.prototype;
          }

          var realFetch = fetch;

          var abortableFetch = function abortableFetch(input, init) {
            var signal = Request && Request.prototype.isPrototypeOf(input) ? input.signal : init ? init.signal : undefined;

            if (signal) {
              var abortError;

              try {
                abortError = new DOMException("Aborted", "AbortError");
              } catch (err) {
                // IE 11 does not support calling the DOMException constructor, use a
                // regular error object on it instead.
                abortError = new Error("Aborted");
                abortError.name = "AbortError";
              } // Return early if already aborted, thus avoiding making an HTTP request

              if (signal.aborted) {
                return Promise.reject(abortError);
              } // Turn an event into a promise, reject it once `abort` is dispatched

              var cancellation = new Promise(function (_, reject) {
                signal.addEventListener(
                  "abort",
                  function () {
                    return reject(abortError);
                  },
                  {
                    once: true,
                  }
                );
              });

              if (init && init.signal) {
                // Never pass .signal to the native implementation when the polyfill has
                // been installed because if we're running on top of a browser with a
                // working native AbortController (i.e. the polyfill was installed due to
                // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
                // fake AbortSignal to the native fetch will trigger:
                // TypeError: Failed to execute 'fetch' on 'Window': member signal is not of type AbortSignal.
                delete init.signal;
              } // Return the fastest promise (don't need to wait for request to finish)

              return Promise.race([cancellation, realFetch(input, init)]);
            }

            return realFetch(input, init);
          };

          return {
            fetch: abortableFetch,
            Request: Request,
          };
        }

        (function (self) {
          if (!polyfillNeeded(self)) {
            return;
          }

          if (!self.fetch) {
            console.warn("fetch() is not available, cannot install abortcontroller-polyfill");
            return;
          }

          var _abortableFetch = abortableFetchDecorator(self),
            fetch = _abortableFetch.fetch,
            Request = _abortableFetch.Request;

          self.fetch = fetch;
          self.Request = Request;
          Object.defineProperty(self, "AbortController", {
            writable: true,
            enumerable: false,
            configurable: true,
            value: AbortController,
          });
          Object.defineProperty(self, "AbortSignal", {
            writable: true,
            enumerable: false,
            configurable: true,
            value: AbortSignal,
          });
        })(typeof self !== "undefined" ? self : __webpack_require__.g);
      });

      /***/
    },

    /***/ 9742: /***/ (__unused_webpack_module, exports) => {
      "use strict";

      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;

      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;

      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      // Support decoding URL-safe base64 strings, as Node.js does.
      // See: https://en.wikipedia.org/wiki/Base64#URL_applications
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;

      function getLens(b64) {
        var len = b64.length;

        if (len % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }

        // Trim off extra bytes after placeholder bytes are found
        // See: https://github.com/beatgammit/base64-js/issues/42
        var validLen = b64.indexOf("=");
        if (validLen === -1) validLen = len;

        var placeHoldersLen = validLen === len ? 0 : 4 - (validLen % 4);

        return [validLen, placeHoldersLen];
      }

      // base64 is 4/3 + up to two characters of the original data
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
      }

      function _byteLength(b64, validLen, placeHoldersLen) {
        return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
      }

      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];

        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));

        var curByte = 0;

        // if there are placeholders, only get up to the last complete 4 chars
        var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

        var i;
        for (i = 0; i < len; i += 4) {
          tmp =
            (revLookup[b64.charCodeAt(i)] << 18) |
            (revLookup[b64.charCodeAt(i + 1)] << 12) |
            (revLookup[b64.charCodeAt(i + 2)] << 6) |
            revLookup[b64.charCodeAt(i + 3)];
          arr[curByte++] = (tmp >> 16) & 0xff;
          arr[curByte++] = (tmp >> 8) & 0xff;
          arr[curByte++] = tmp & 0xff;
        }

        if (placeHoldersLen === 2) {
          tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
          arr[curByte++] = tmp & 0xff;
        }

        if (placeHoldersLen === 1) {
          tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
          arr[curByte++] = (tmp >> 8) & 0xff;
          arr[curByte++] = tmp & 0xff;
        }

        return arr;
      }

      function tripletToBase64(num) {
        return lookup[(num >> 18) & 0x3f] + lookup[(num >> 12) & 0x3f] + lookup[(num >> 6) & 0x3f] + lookup[num & 0x3f];
      }

      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i = start; i < end; i += 3) {
          tmp = ((uint8[i] << 16) & 0xff0000) + ((uint8[i + 1] << 8) & 0xff00) + (uint8[i + 2] & 0xff);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }

      function fromByteArray(uint8) {
        var tmp;
        var len = uint8.length;
        var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
        var parts = [];
        var maxChunkLength = 16383; // must be multiple of 3

        // go through the array every three bytes, we'll deal with trailing stuff later
        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
          parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
        }

        // pad the end with zeros, but make sure to not forget the extra bytes
        if (extraBytes === 1) {
          tmp = uint8[len - 1];
          parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 0x3f] + "==");
        } else if (extraBytes === 2) {
          tmp = (uint8[len - 2] << 8) + uint8[len - 1];
          parts.push(lookup[tmp >> 10] + lookup[(tmp >> 4) & 0x3f] + lookup[(tmp << 2) & 0x3f] + "=");
        }

        return parts.join("");
      }

      /***/
    },

    /***/ 3550: /***/ function (module, __unused_webpack_exports, __webpack_require__) {
      /* module decorator */ module = __webpack_require__.nmd(module);
      (function (module, exports) {
        "use strict";

        // Utils
        function assert(val, msg) {
          if (!val) throw new Error(msg || "Assertion failed");
        }

        // Could use `inherits` module, but don't want to move from single file
        // architecture yet.
        function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }

        // BN

        function BN(number, base, endian) {
          if (BN.isBN(number)) {
            return number;
          }

          this.negative = 0;
          this.words = null;
          this.length = 0;

          // Reduction context
          this.red = null;

          if (number !== null) {
            if (base === "le" || base === "be") {
              endian = base;
              base = 10;
            }

            this._init(number || 0, base || 10, endian || "be");
          }
        }
        if (typeof module === "object") {
          module.exports = BN;
        } else {
          exports.BN = BN;
        }

        BN.BN = BN;
        BN.wordSize = 26;

        var Buffer;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer = window.Buffer;
          } else {
            Buffer = __webpack_require__(6601).Buffer;
          }
        } catch (e) {}

        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }

          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };

        BN.max = function max(left, right) {
          if (left.cmp(right) > 0) return left;
          return right;
        };

        BN.min = function min(left, right) {
          if (left.cmp(right) < 0) return left;
          return right;
        };

        BN.prototype._init = function init(number, base, endian) {
          if (typeof number === "number") {
            return this._initNumber(number, base, endian);
          }

          if (typeof number === "object") {
            return this._initArray(number, base, endian);
          }

          if (base === "hex") {
            base = 16;
          }
          assert(base === (base | 0) && base >= 2 && base <= 36);

          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
            start++;
            this.negative = 1;
          }

          if (start < number.length) {
            if (base === 16) {
              this._parseHex(number, start, endian);
            } else {
              this._parseBase(number, base, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base, endian);
              }
            }
          }
        };

        BN.prototype._initNumber = function _initNumber(number, base, endian) {
          if (number < 0) {
            this.negative = 1;
            number = -number;
          }
          if (number < 0x4000000) {
            this.words = [number & 0x3ffffff];
            this.length = 1;
          } else if (number < 0x10000000000000) {
            this.words = [number & 0x3ffffff, (number / 0x4000000) & 0x3ffffff];
            this.length = 2;
          } else {
            assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
            this.words = [number & 0x3ffffff, (number / 0x4000000) & 0x3ffffff, 1];
            this.length = 3;
          }

          if (endian !== "le") return;

          // Reverse the bytes
          this._initArray(this.toArray(), base, endian);
        };

        BN.prototype._initArray = function _initArray(number, base, endian) {
          // Perhaps a Uint8Array
          assert(typeof number.length === "number");
          if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }

          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }

          var j, w;
          var off = 0;
          if (endian === "be") {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
              w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
              this.words[j] |= (w << off) & 0x3ffffff;
              this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number.length; i += 3) {
              w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
              this.words[j] |= (w << off) & 0x3ffffff;
              this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          }
          return this._strip();
        };

        function parseHex4Bits(string, index) {
          var c = string.charCodeAt(index);
          // '0' - '9'
          if (c >= 48 && c <= 57) {
            return c - 48;
            // 'A' - 'F'
          } else if (c >= 65 && c <= 70) {
            return c - 55;
            // 'a' - 'f'
          } else if (c >= 97 && c <= 102) {
            return c - 87;
          } else {
            assert(false, "Invalid character in " + string);
          }
        }

        function parseHexByte(string, lowerBound, index) {
          var r = parseHex4Bits(string, index);
          if (index - 1 >= lowerBound) {
            r |= parseHex4Bits(string, index - 1) << 4;
          }
          return r;
        }

        BN.prototype._parseHex = function _parseHex(number, start, endian) {
          // Create possibly bigger array to ensure that it fits the number
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }

          // 24-bits chunks
          var off = 0;
          var j = 0;

          var w;
          if (endian === "be") {
            for (i = number.length - 1; i >= start; i -= 2) {
              w = parseHexByte(number, start, i) << off;
              this.words[j] |= w & 0x3ffffff;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          } else {
            var parseLength = number.length - start;
            for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
              w = parseHexByte(number, start, i) << off;
              this.words[j] |= w & 0x3ffffff;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          }

          this._strip();
        };

        function parseBase(str, start, end, mul) {
          var r = 0;
          var b = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;

            r *= mul;

            // 'a'
            if (c >= 49) {
              b = c - 49 + 0xa;

              // 'A'
            } else if (c >= 17) {
              b = c - 17 + 0xa;

              // '0' - '9'
            } else {
              b = c;
            }
            assert(c >= 0 && b < mul, "Invalid character");
            r += b;
          }
          return r;
        }

        BN.prototype._parseBase = function _parseBase(number, base, start) {
          // Initialize as zero
          this.words = [0];
          this.length = 1;

          // Find length of limb in base
          for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
            limbLen++;
          }
          limbLen--;
          limbPow = (limbPow / base) | 0;

          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;

          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base);

            this.imuln(limbPow);
            if (this.words[0] + word < 0x4000000) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }

          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);

            for (i = 0; i < mod; i++) {
              pow *= base;
            }

            this.imuln(pow);
            if (this.words[0] + word < 0x4000000) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }

          this._strip();
        };

        BN.prototype.copy = function copy(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };

        function move(dest, src) {
          dest.words = src.words;
          dest.length = src.length;
          dest.negative = src.negative;
          dest.red = src.red;
        }

        BN.prototype._move = function _move(dest) {
          move(dest, this);
        };

        BN.prototype.clone = function clone() {
          var r = new BN(null);
          this.copy(r);
          return r;
        };

        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };

        // Remove leading `0` from `this`
        BN.prototype._strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };

        BN.prototype._normSign = function _normSign() {
          // -0 = 0
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };

        // Check Symbol.for because not everywhere where Symbol defined
        // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
        if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
          try {
            BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
          } catch (e) {
            BN.prototype.inspect = inspect;
          }
        } else {
          BN.prototype.inspect = inspect;
        }

        function inspect() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        }

        /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000",
        ];

        var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];

        var groupBases = [
          0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536,
          11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368,
          20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176,
        ];

        BN.prototype.toString = function toString(base, padding) {
          base = base || 10;
          padding = padding | 0 || 1;

          var out;
          if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = (((w << off) | carry) & 0xffffff).toString(16);
              carry = (w >>> (24 - off)) & 0xffffff;
              off += 2;
              if (off >= 26) {
                off -= 26;
                i--;
              }
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }

          if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modrn(groupBase).toString(base);
              c = c.idivn(groupBase);

              if (!c.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }

          assert(false, "Base should be between 2 and 36");
        };

        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 0x4000000;
          } else if (this.length === 3 && this.words[2] === 0x01) {
            // NOTE: at this stage it is known that the top bit is set
            ret += 0x10000000000000 + this.words[1] * 0x4000000;
          } else if (this.length > 2) {
            assert(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };

        BN.prototype.toJSON = function toJSON() {
          return this.toString(16, 2);
        };

        if (Buffer) {
          BN.prototype.toBuffer = function toBuffer(endian, length) {
            return this.toArrayLike(Buffer, endian, length);
          };
        }

        BN.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };

        var allocate = function allocate(ArrayType, size) {
          if (ArrayType.allocUnsafe) {
            return ArrayType.allocUnsafe(size);
          }
          return new ArrayType(size);
        };

        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          this._strip();

          var byteLength = this.byteLength();
          var reqLength = length || Math.max(1, byteLength);
          assert(byteLength <= reqLength, "byte array longer than desired length");
          assert(reqLength > 0, "Requested array length <= 0");

          var res = allocate(ArrayType, reqLength);
          var postfix = endian === "le" ? "LE" : "BE";
          this["_toArrayLike" + postfix](res, byteLength);
          return res;
        };

        BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
          var position = 0;
          var carry = 0;

          for (var i = 0, shift = 0; i < this.length; i++) {
            var word = (this.words[i] << shift) | carry;

            res[position++] = word & 0xff;
            if (position < res.length) {
              res[position++] = (word >> 8) & 0xff;
            }
            if (position < res.length) {
              res[position++] = (word >> 16) & 0xff;
            }

            if (shift === 6) {
              if (position < res.length) {
                res[position++] = (word >> 24) & 0xff;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }

          if (position < res.length) {
            res[position++] = carry;

            while (position < res.length) {
              res[position++] = 0;
            }
          }
        };

        BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
          var position = res.length - 1;
          var carry = 0;

          for (var i = 0, shift = 0; i < this.length; i++) {
            var word = (this.words[i] << shift) | carry;

            res[position--] = word & 0xff;
            if (position >= 0) {
              res[position--] = (word >> 8) & 0xff;
            }
            if (position >= 0) {
              res[position--] = (word >> 16) & 0xff;
            }

            if (shift === 6) {
              if (position >= 0) {
                res[position--] = (word >> 24) & 0xff;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }

          if (position >= 0) {
            res[position--] = carry;

            while (position >= 0) {
              res[position--] = 0;
            }
          }
        };

        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 0x1000) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 0x40) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 0x8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 0x02) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }

        BN.prototype._zeroBits = function _zeroBits(w) {
          // Short-cut
          if (w === 0) return 26;

          var t = w;
          var r = 0;
          if ((t & 0x1fff) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 0x7f) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 0xf) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 0x3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 0x1) === 0) {
            r++;
          }
          return r;
        };

        // Return number of used bits in a BN
        BN.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };

        function toBitArray(num) {
          var w = new Array(num.bitLength());

          for (var bit = 0; bit < w.length; bit++) {
            var off = (bit / 26) | 0;
            var wbit = bit % 26;

            w[bit] = (num.words[off] >>> wbit) & 0x01;
          }

          return w;
        }

        // Number of trailing zero bits
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero()) return 0;

          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
          }
          return r;
        };

        BN.prototype.byteLength = function byteLength() {
          return Math.ceil(this.bitLength() / 8);
        };

        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };

        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };

        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };

        // Return negative clone of `this`
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };

        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }

          return this;
        };

        // Or `num` with `this` in-place
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }

          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }

          return this._strip();
        };

        BN.prototype.ior = function ior(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuor(num);
        };

        // Or `num` with `this`
        BN.prototype.or = function or(num) {
          if (this.length > num.length) return this.clone().ior(num);
          return num.clone().ior(this);
        };

        BN.prototype.uor = function uor(num) {
          if (this.length > num.length) return this.clone().iuor(num);
          return num.clone().iuor(this);
        };

        // And `num` with `this` in-place
        BN.prototype.iuand = function iuand(num) {
          // b = min-length(num, this)
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }

          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }

          this.length = b.length;

          return this._strip();
        };

        BN.prototype.iand = function iand(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuand(num);
        };

        // And `num` with `this`
        BN.prototype.and = function and(num) {
          if (this.length > num.length) return this.clone().iand(num);
          return num.clone().iand(this);
        };

        BN.prototype.uand = function uand(num) {
          if (this.length > num.length) return this.clone().iuand(num);
          return num.clone().iuand(this);
        };

        // Xor `num` with `this` in-place
        BN.prototype.iuxor = function iuxor(num) {
          // a.length > b.length
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }

          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }

          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }

          this.length = a.length;

          return this._strip();
        };

        BN.prototype.ixor = function ixor(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };

        // Xor `num` with `this`
        BN.prototype.xor = function xor(num) {
          if (this.length > num.length) return this.clone().ixor(num);
          return num.clone().ixor(this);
        };

        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length) return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };

        // Not ``this`` with ``width`` bitwidth
        BN.prototype.inotn = function inotn(width) {
          assert(typeof width === "number" && width >= 0);

          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;

          // Extend the buffer with leading zeroes
          this._expand(bytesNeeded);

          if (bitsLeft > 0) {
            bytesNeeded--;
          }

          // Handle complete words
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 0x3ffffff;
          }

          // Handle the residue
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
          }

          // And remove leading zeroes
          return this._strip();
        };

        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };

        // Set `bit` of `this`
        BN.prototype.setn = function setn(bit, val) {
          assert(typeof bit === "number" && bit >= 0);

          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          this._expand(off + 1);

          if (val) {
            this.words[off] = this.words[off] | (1 << wbit);
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }

          return this._strip();
        };

        // Add `num` to `this` in-place
        BN.prototype.iadd = function iadd(num) {
          var r;

          // negative + positive
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();

            // positive + negative
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }

          // a.length > b.length
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }

          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 0x3ffffff;
            carry = r >>> 26;
          }

          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
            // Copy the rest of the words
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }

          return this;
        };

        // Add `num` to `this`
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }

          if (this.length > num.length) return this.clone().iadd(num);

          return num.clone().iadd(this);
        };

        // Subtract `num` from `this` in-place
        BN.prototype.isub = function isub(num) {
          // this - (-num) = this + num
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();

            // -this - num = -(this + num)
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }

          // At this point both numbers are positive
          var cmp = this.cmp(num);

          // Optimization - zeroify
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }

          // a > b
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }

          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 0x3ffffff;
          }

          // Copy rest of the words
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }

          this.length = Math.max(this.length, i);

          if (a !== this) {
            this.negative = 1;
          }

          return this._strip();
        };

        // Subtract `num` from `this`
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };

        function smallMulTo(self, num, out) {
          out.negative = num.negative ^ self.negative;
          var len = (self.length + num.length) | 0;
          out.length = len;
          len = (len - 1) | 0;

          // Peel one iteration (compiler can't do it, because of code complexity)
          var a = self.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;

          var lo = r & 0x3ffffff;
          var carry = (r / 0x4000000) | 0;
          out.words[0] = lo;

          for (var k = 1; k < len; k++) {
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
              var i = (k - j) | 0;
              a = self.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += (r / 0x4000000) | 0;
              rword = r & 0x3ffffff;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }

          return out._strip();
        }

        // TODO(indutny): it may be reasonable to omit it for users who don't need
        // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
        // multiplication (like elliptic secp256k1).
        var comb10MulTo = function comb10MulTo(self, num, out) {
          var a = self.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 0x1fff;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 0x1fff;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 0x1fff;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 0x1fff;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 0x1fff;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 0x1fff;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 0x1fff;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 0x1fff;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 0x1fff;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 0x1fff;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 0x1fff;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 0x1fff;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 0x1fff;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 0x1fff;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 0x1fff;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 0x1fff;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 0x1fff;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 0x1fff;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 0x1fff;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 0x1fff;
          var bh9 = b9 >>> 13;

          out.negative = self.negative ^ num.negative;
          out.length = 19;
          /* k = 0 */
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = (mid + Math.imul(ah0, bl0)) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
          w0 &= 0x3ffffff;
          /* k = 1 */
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = (mid + Math.imul(ah1, bl0)) | 0;
          hi = Math.imul(ah1, bh0);
          lo = (lo + Math.imul(al0, bl1)) | 0;
          mid = (mid + Math.imul(al0, bh1)) | 0;
          mid = (mid + Math.imul(ah0, bl1)) | 0;
          hi = (hi + Math.imul(ah0, bh1)) | 0;
          var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
          w1 &= 0x3ffffff;
          /* k = 2 */
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = (mid + Math.imul(ah2, bl0)) | 0;
          hi = Math.imul(ah2, bh0);
          lo = (lo + Math.imul(al1, bl1)) | 0;
          mid = (mid + Math.imul(al1, bh1)) | 0;
          mid = (mid + Math.imul(ah1, bl1)) | 0;
          hi = (hi + Math.imul(ah1, bh1)) | 0;
          lo = (lo + Math.imul(al0, bl2)) | 0;
          mid = (mid + Math.imul(al0, bh2)) | 0;
          mid = (mid + Math.imul(ah0, bl2)) | 0;
          hi = (hi + Math.imul(ah0, bh2)) | 0;
          var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
          w2 &= 0x3ffffff;
          /* k = 3 */
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = (mid + Math.imul(ah3, bl0)) | 0;
          hi = Math.imul(ah3, bh0);
          lo = (lo + Math.imul(al2, bl1)) | 0;
          mid = (mid + Math.imul(al2, bh1)) | 0;
          mid = (mid + Math.imul(ah2, bl1)) | 0;
          hi = (hi + Math.imul(ah2, bh1)) | 0;
          lo = (lo + Math.imul(al1, bl2)) | 0;
          mid = (mid + Math.imul(al1, bh2)) | 0;
          mid = (mid + Math.imul(ah1, bl2)) | 0;
          hi = (hi + Math.imul(ah1, bh2)) | 0;
          lo = (lo + Math.imul(al0, bl3)) | 0;
          mid = (mid + Math.imul(al0, bh3)) | 0;
          mid = (mid + Math.imul(ah0, bl3)) | 0;
          hi = (hi + Math.imul(ah0, bh3)) | 0;
          var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
          w3 &= 0x3ffffff;
          /* k = 4 */
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = (mid + Math.imul(ah4, bl0)) | 0;
          hi = Math.imul(ah4, bh0);
          lo = (lo + Math.imul(al3, bl1)) | 0;
          mid = (mid + Math.imul(al3, bh1)) | 0;
          mid = (mid + Math.imul(ah3, bl1)) | 0;
          hi = (hi + Math.imul(ah3, bh1)) | 0;
          lo = (lo + Math.imul(al2, bl2)) | 0;
          mid = (mid + Math.imul(al2, bh2)) | 0;
          mid = (mid + Math.imul(ah2, bl2)) | 0;
          hi = (hi + Math.imul(ah2, bh2)) | 0;
          lo = (lo + Math.imul(al1, bl3)) | 0;
          mid = (mid + Math.imul(al1, bh3)) | 0;
          mid = (mid + Math.imul(ah1, bl3)) | 0;
          hi = (hi + Math.imul(ah1, bh3)) | 0;
          lo = (lo + Math.imul(al0, bl4)) | 0;
          mid = (mid + Math.imul(al0, bh4)) | 0;
          mid = (mid + Math.imul(ah0, bl4)) | 0;
          hi = (hi + Math.imul(ah0, bh4)) | 0;
          var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
          w4 &= 0x3ffffff;
          /* k = 5 */
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = (mid + Math.imul(ah5, bl0)) | 0;
          hi = Math.imul(ah5, bh0);
          lo = (lo + Math.imul(al4, bl1)) | 0;
          mid = (mid + Math.imul(al4, bh1)) | 0;
          mid = (mid + Math.imul(ah4, bl1)) | 0;
          hi = (hi + Math.imul(ah4, bh1)) | 0;
          lo = (lo + Math.imul(al3, bl2)) | 0;
          mid = (mid + Math.imul(al3, bh2)) | 0;
          mid = (mid + Math.imul(ah3, bl2)) | 0;
          hi = (hi + Math.imul(ah3, bh2)) | 0;
          lo = (lo + Math.imul(al2, bl3)) | 0;
          mid = (mid + Math.imul(al2, bh3)) | 0;
          mid = (mid + Math.imul(ah2, bl3)) | 0;
          hi = (hi + Math.imul(ah2, bh3)) | 0;
          lo = (lo + Math.imul(al1, bl4)) | 0;
          mid = (mid + Math.imul(al1, bh4)) | 0;
          mid = (mid + Math.imul(ah1, bl4)) | 0;
          hi = (hi + Math.imul(ah1, bh4)) | 0;
          lo = (lo + Math.imul(al0, bl5)) | 0;
          mid = (mid + Math.imul(al0, bh5)) | 0;
          mid = (mid + Math.imul(ah0, bl5)) | 0;
          hi = (hi + Math.imul(ah0, bh5)) | 0;
          var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
          w5 &= 0x3ffffff;
          /* k = 6 */
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = (mid + Math.imul(ah6, bl0)) | 0;
          hi = Math.imul(ah6, bh0);
          lo = (lo + Math.imul(al5, bl1)) | 0;
          mid = (mid + Math.imul(al5, bh1)) | 0;
          mid = (mid + Math.imul(ah5, bl1)) | 0;
          hi = (hi + Math.imul(ah5, bh1)) | 0;
          lo = (lo + Math.imul(al4, bl2)) | 0;
          mid = (mid + Math.imul(al4, bh2)) | 0;
          mid = (mid + Math.imul(ah4, bl2)) | 0;
          hi = (hi + Math.imul(ah4, bh2)) | 0;
          lo = (lo + Math.imul(al3, bl3)) | 0;
          mid = (mid + Math.imul(al3, bh3)) | 0;
          mid = (mid + Math.imul(ah3, bl3)) | 0;
          hi = (hi + Math.imul(ah3, bh3)) | 0;
          lo = (lo + Math.imul(al2, bl4)) | 0;
          mid = (mid + Math.imul(al2, bh4)) | 0;
          mid = (mid + Math.imul(ah2, bl4)) | 0;
          hi = (hi + Math.imul(ah2, bh4)) | 0;
          lo = (lo + Math.imul(al1, bl5)) | 0;
          mid = (mid + Math.imul(al1, bh5)) | 0;
          mid = (mid + Math.imul(ah1, bl5)) | 0;
          hi = (hi + Math.imul(ah1, bh5)) | 0;
          lo = (lo + Math.imul(al0, bl6)) | 0;
          mid = (mid + Math.imul(al0, bh6)) | 0;
          mid = (mid + Math.imul(ah0, bl6)) | 0;
          hi = (hi + Math.imul(ah0, bh6)) | 0;
          var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
          w6 &= 0x3ffffff;
          /* k = 7 */
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = (mid + Math.imul(ah7, bl0)) | 0;
          hi = Math.imul(ah7, bh0);
          lo = (lo + Math.imul(al6, bl1)) | 0;
          mid = (mid + Math.imul(al6, bh1)) | 0;
          mid = (mid + Math.imul(ah6, bl1)) | 0;
          hi = (hi + Math.imul(ah6, bh1)) | 0;
          lo = (lo + Math.imul(al5, bl2)) | 0;
          mid = (mid + Math.imul(al5, bh2)) | 0;
          mid = (mid + Math.imul(ah5, bl2)) | 0;
          hi = (hi + Math.imul(ah5, bh2)) | 0;
          lo = (lo + Math.imul(al4, bl3)) | 0;
          mid = (mid + Math.imul(al4, bh3)) | 0;
          mid = (mid + Math.imul(ah4, bl3)) | 0;
          hi = (hi + Math.imul(ah4, bh3)) | 0;
          lo = (lo + Math.imul(al3, bl4)) | 0;
          mid = (mid + Math.imul(al3, bh4)) | 0;
          mid = (mid + Math.imul(ah3, bl4)) | 0;
          hi = (hi + Math.imul(ah3, bh4)) | 0;
          lo = (lo + Math.imul(al2, bl5)) | 0;
          mid = (mid + Math.imul(al2, bh5)) | 0;
          mid = (mid + Math.imul(ah2, bl5)) | 0;
          hi = (hi + Math.imul(ah2, bh5)) | 0;
          lo = (lo + Math.imul(al1, bl6)) | 0;
          mid = (mid + Math.imul(al1, bh6)) | 0;
          mid = (mid + Math.imul(ah1, bl6)) | 0;
          hi = (hi + Math.imul(ah1, bh6)) | 0;
          lo = (lo + Math.imul(al0, bl7)) | 0;
          mid = (mid + Math.imul(al0, bh7)) | 0;
          mid = (mid + Math.imul(ah0, bl7)) | 0;
          hi = (hi + Math.imul(ah0, bh7)) | 0;
          var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
          w7 &= 0x3ffffff;
          /* k = 8 */
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = (mid + Math.imul(ah8, bl0)) | 0;
          hi = Math.imul(ah8, bh0);
          lo = (lo + Math.imul(al7, bl1)) | 0;
          mid = (mid + Math.imul(al7, bh1)) | 0;
          mid = (mid + Math.imul(ah7, bl1)) | 0;
          hi = (hi + Math.imul(ah7, bh1)) | 0;
          lo = (lo + Math.imul(al6, bl2)) | 0;
          mid = (mid + Math.imul(al6, bh2)) | 0;
          mid = (mid + Math.imul(ah6, bl2)) | 0;
          hi = (hi + Math.imul(ah6, bh2)) | 0;
          lo = (lo + Math.imul(al5, bl3)) | 0;
          mid = (mid + Math.imul(al5, bh3)) | 0;
          mid = (mid + Math.imul(ah5, bl3)) | 0;
          hi = (hi + Math.imul(ah5, bh3)) | 0;
          lo = (lo + Math.imul(al4, bl4)) | 0;
          mid = (mid + Math.imul(al4, bh4)) | 0;
          mid = (mid + Math.imul(ah4, bl4)) | 0;
          hi = (hi + Math.imul(ah4, bh4)) | 0;
          lo = (lo + Math.imul(al3, bl5)) | 0;
          mid = (mid + Math.imul(al3, bh5)) | 0;
          mid = (mid + Math.imul(ah3, bl5)) | 0;
          hi = (hi + Math.imul(ah3, bh5)) | 0;
          lo = (lo + Math.imul(al2, bl6)) | 0;
          mid = (mid + Math.imul(al2, bh6)) | 0;
          mid = (mid + Math.imul(ah2, bl6)) | 0;
          hi = (hi + Math.imul(ah2, bh6)) | 0;
          lo = (lo + Math.imul(al1, bl7)) | 0;
          mid = (mid + Math.imul(al1, bh7)) | 0;
          mid = (mid + Math.imul(ah1, bl7)) | 0;
          hi = (hi + Math.imul(ah1, bh7)) | 0;
          lo = (lo + Math.imul(al0, bl8)) | 0;
          mid = (mid + Math.imul(al0, bh8)) | 0;
          mid = (mid + Math.imul(ah0, bl8)) | 0;
          hi = (hi + Math.imul(ah0, bh8)) | 0;
          var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
          w8 &= 0x3ffffff;
          /* k = 9 */
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = (mid + Math.imul(ah9, bl0)) | 0;
          hi = Math.imul(ah9, bh0);
          lo = (lo + Math.imul(al8, bl1)) | 0;
          mid = (mid + Math.imul(al8, bh1)) | 0;
          mid = (mid + Math.imul(ah8, bl1)) | 0;
          hi = (hi + Math.imul(ah8, bh1)) | 0;
          lo = (lo + Math.imul(al7, bl2)) | 0;
          mid = (mid + Math.imul(al7, bh2)) | 0;
          mid = (mid + Math.imul(ah7, bl2)) | 0;
          hi = (hi + Math.imul(ah7, bh2)) | 0;
          lo = (lo + Math.imul(al6, bl3)) | 0;
          mid = (mid + Math.imul(al6, bh3)) | 0;
          mid = (mid + Math.imul(ah6, bl3)) | 0;
          hi = (hi + Math.imul(ah6, bh3)) | 0;
          lo = (lo + Math.imul(al5, bl4)) | 0;
          mid = (mid + Math.imul(al5, bh4)) | 0;
          mid = (mid + Math.imul(ah5, bl4)) | 0;
          hi = (hi + Math.imul(ah5, bh4)) | 0;
          lo = (lo + Math.imul(al4, bl5)) | 0;
          mid = (mid + Math.imul(al4, bh5)) | 0;
          mid = (mid + Math.imul(ah4, bl5)) | 0;
          hi = (hi + Math.imul(ah4, bh5)) | 0;
          lo = (lo + Math.imul(al3, bl6)) | 0;
          mid = (mid + Math.imul(al3, bh6)) | 0;
          mid = (mid + Math.imul(ah3, bl6)) | 0;
          hi = (hi + Math.imul(ah3, bh6)) | 0;
          lo = (lo + Math.imul(al2, bl7)) | 0;
          mid = (mid + Math.imul(al2, bh7)) | 0;
          mid = (mid + Math.imul(ah2, bl7)) | 0;
          hi = (hi + Math.imul(ah2, bh7)) | 0;
          lo = (lo + Math.imul(al1, bl8)) | 0;
          mid = (mid + Math.imul(al1, bh8)) | 0;
          mid = (mid + Math.imul(ah1, bl8)) | 0;
          hi = (hi + Math.imul(ah1, bh8)) | 0;
          lo = (lo + Math.imul(al0, bl9)) | 0;
          mid = (mid + Math.imul(al0, bh9)) | 0;
          mid = (mid + Math.imul(ah0, bl9)) | 0;
          hi = (hi + Math.imul(ah0, bh9)) | 0;
          var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
          w9 &= 0x3ffffff;
          /* k = 10 */
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = (mid + Math.imul(ah9, bl1)) | 0;
          hi = Math.imul(ah9, bh1);
          lo = (lo + Math.imul(al8, bl2)) | 0;
          mid = (mid + Math.imul(al8, bh2)) | 0;
          mid = (mid + Math.imul(ah8, bl2)) | 0;
          hi = (hi + Math.imul(ah8, bh2)) | 0;
          lo = (lo + Math.imul(al7, bl3)) | 0;
          mid = (mid + Math.imul(al7, bh3)) | 0;
          mid = (mid + Math.imul(ah7, bl3)) | 0;
          hi = (hi + Math.imul(ah7, bh3)) | 0;
          lo = (lo + Math.imul(al6, bl4)) | 0;
          mid = (mid + Math.imul(al6, bh4)) | 0;
          mid = (mid + Math.imul(ah6, bl4)) | 0;
          hi = (hi + Math.imul(ah6, bh4)) | 0;
          lo = (lo + Math.imul(al5, bl5)) | 0;
          mid = (mid + Math.imul(al5, bh5)) | 0;
          mid = (mid + Math.imul(ah5, bl5)) | 0;
          hi = (hi + Math.imul(ah5, bh5)) | 0;
          lo = (lo + Math.imul(al4, bl6)) | 0;
          mid = (mid + Math.imul(al4, bh6)) | 0;
          mid = (mid + Math.imul(ah4, bl6)) | 0;
          hi = (hi + Math.imul(ah4, bh6)) | 0;
          lo = (lo + Math.imul(al3, bl7)) | 0;
          mid = (mid + Math.imul(al3, bh7)) | 0;
          mid = (mid + Math.imul(ah3, bl7)) | 0;
          hi = (hi + Math.imul(ah3, bh7)) | 0;
          lo = (lo + Math.imul(al2, bl8)) | 0;
          mid = (mid + Math.imul(al2, bh8)) | 0;
          mid = (mid + Math.imul(ah2, bl8)) | 0;
          hi = (hi + Math.imul(ah2, bh8)) | 0;
          lo = (lo + Math.imul(al1, bl9)) | 0;
          mid = (mid + Math.imul(al1, bh9)) | 0;
          mid = (mid + Math.imul(ah1, bl9)) | 0;
          hi = (hi + Math.imul(ah1, bh9)) | 0;
          var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
          w10 &= 0x3ffffff;
          /* k = 11 */
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = (mid + Math.imul(ah9, bl2)) | 0;
          hi = Math.imul(ah9, bh2);
          lo = (lo + Math.imul(al8, bl3)) | 0;
          mid = (mid + Math.imul(al8, bh3)) | 0;
          mid = (mid + Math.imul(ah8, bl3)) | 0;
          hi = (hi + Math.imul(ah8, bh3)) | 0;
          lo = (lo + Math.imul(al7, bl4)) | 0;
          mid = (mid + Math.imul(al7, bh4)) | 0;
          mid = (mid + Math.imul(ah7, bl4)) | 0;
          hi = (hi + Math.imul(ah7, bh4)) | 0;
          lo = (lo + Math.imul(al6, bl5)) | 0;
          mid = (mid + Math.imul(al6, bh5)) | 0;
          mid = (mid + Math.imul(ah6, bl5)) | 0;
          hi = (hi + Math.imul(ah6, bh5)) | 0;
          lo = (lo + Math.imul(al5, bl6)) | 0;
          mid = (mid + Math.imul(al5, bh6)) | 0;
          mid = (mid + Math.imul(ah5, bl6)) | 0;
          hi = (hi + Math.imul(ah5, bh6)) | 0;
          lo = (lo + Math.imul(al4, bl7)) | 0;
          mid = (mid + Math.imul(al4, bh7)) | 0;
          mid = (mid + Math.imul(ah4, bl7)) | 0;
          hi = (hi + Math.imul(ah4, bh7)) | 0;
          lo = (lo + Math.imul(al3, bl8)) | 0;
          mid = (mid + Math.imul(al3, bh8)) | 0;
          mid = (mid + Math.imul(ah3, bl8)) | 0;
          hi = (hi + Math.imul(ah3, bh8)) | 0;
          lo = (lo + Math.imul(al2, bl9)) | 0;
          mid = (mid + Math.imul(al2, bh9)) | 0;
          mid = (mid + Math.imul(ah2, bl9)) | 0;
          hi = (hi + Math.imul(ah2, bh9)) | 0;
          var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
          w11 &= 0x3ffffff;
          /* k = 12 */
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = (mid + Math.imul(ah9, bl3)) | 0;
          hi = Math.imul(ah9, bh3);
          lo = (lo + Math.imul(al8, bl4)) | 0;
          mid = (mid + Math.imul(al8, bh4)) | 0;
          mid = (mid + Math.imul(ah8, bl4)) | 0;
          hi = (hi + Math.imul(ah8, bh4)) | 0;
          lo = (lo + Math.imul(al7, bl5)) | 0;
          mid = (mid + Math.imul(al7, bh5)) | 0;
          mid = (mid + Math.imul(ah7, bl5)) | 0;
          hi = (hi + Math.imul(ah7, bh5)) | 0;
          lo = (lo + Math.imul(al6, bl6)) | 0;
          mid = (mid + Math.imul(al6, bh6)) | 0;
          mid = (mid + Math.imul(ah6, bl6)) | 0;
          hi = (hi + Math.imul(ah6, bh6)) | 0;
          lo = (lo + Math.imul(al5, bl7)) | 0;
          mid = (mid + Math.imul(al5, bh7)) | 0;
          mid = (mid + Math.imul(ah5, bl7)) | 0;
          hi = (hi + Math.imul(ah5, bh7)) | 0;
          lo = (lo + Math.imul(al4, bl8)) | 0;
          mid = (mid + Math.imul(al4, bh8)) | 0;
          mid = (mid + Math.imul(ah4, bl8)) | 0;
          hi = (hi + Math.imul(ah4, bh8)) | 0;
          lo = (lo + Math.imul(al3, bl9)) | 0;
          mid = (mid + Math.imul(al3, bh9)) | 0;
          mid = (mid + Math.imul(ah3, bl9)) | 0;
          hi = (hi + Math.imul(ah3, bh9)) | 0;
          var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
          w12 &= 0x3ffffff;
          /* k = 13 */
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = (mid + Math.imul(ah9, bl4)) | 0;
          hi = Math.imul(ah9, bh4);
          lo = (lo + Math.imul(al8, bl5)) | 0;
          mid = (mid + Math.imul(al8, bh5)) | 0;
          mid = (mid + Math.imul(ah8, bl5)) | 0;
          hi = (hi + Math.imul(ah8, bh5)) | 0;
          lo = (lo + Math.imul(al7, bl6)) | 0;
          mid = (mid + Math.imul(al7, bh6)) | 0;
          mid = (mid + Math.imul(ah7, bl6)) | 0;
          hi = (hi + Math.imul(ah7, bh6)) | 0;
          lo = (lo + Math.imul(al6, bl7)) | 0;
          mid = (mid + Math.imul(al6, bh7)) | 0;
          mid = (mid + Math.imul(ah6, bl7)) | 0;
          hi = (hi + Math.imul(ah6, bh7)) | 0;
          lo = (lo + Math.imul(al5, bl8)) | 0;
          mid = (mid + Math.imul(al5, bh8)) | 0;
          mid = (mid + Math.imul(ah5, bl8)) | 0;
          hi = (hi + Math.imul(ah5, bh8)) | 0;
          lo = (lo + Math.imul(al4, bl9)) | 0;
          mid = (mid + Math.imul(al4, bh9)) | 0;
          mid = (mid + Math.imul(ah4, bl9)) | 0;
          hi = (hi + Math.imul(ah4, bh9)) | 0;
          var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
          w13 &= 0x3ffffff;
          /* k = 14 */
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = (mid + Math.imul(ah9, bl5)) | 0;
          hi = Math.imul(ah9, bh5);
          lo = (lo + Math.imul(al8, bl6)) | 0;
          mid = (mid + Math.imul(al8, bh6)) | 0;
          mid = (mid + Math.imul(ah8, bl6)) | 0;
          hi = (hi + Math.imul(ah8, bh6)) | 0;
          lo = (lo + Math.imul(al7, bl7)) | 0;
          mid = (mid + Math.imul(al7, bh7)) | 0;
          mid = (mid + Math.imul(ah7, bl7)) | 0;
          hi = (hi + Math.imul(ah7, bh7)) | 0;
          lo = (lo + Math.imul(al6, bl8)) | 0;
          mid = (mid + Math.imul(al6, bh8)) | 0;
          mid = (mid + Math.imul(ah6, bl8)) | 0;
          hi = (hi + Math.imul(ah6, bh8)) | 0;
          lo = (lo + Math.imul(al5, bl9)) | 0;
          mid = (mid + Math.imul(al5, bh9)) | 0;
          mid = (mid + Math.imul(ah5, bl9)) | 0;
          hi = (hi + Math.imul(ah5, bh9)) | 0;
          var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
          w14 &= 0x3ffffff;
          /* k = 15 */
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = (mid + Math.imul(ah9, bl6)) | 0;
          hi = Math.imul(ah9, bh6);
          lo = (lo + Math.imul(al8, bl7)) | 0;
          mid = (mid + Math.imul(al8, bh7)) | 0;
          mid = (mid + Math.imul(ah8, bl7)) | 0;
          hi = (hi + Math.imul(ah8, bh7)) | 0;
          lo = (lo + Math.imul(al7, bl8)) | 0;
          mid = (mid + Math.imul(al7, bh8)) | 0;
          mid = (mid + Math.imul(ah7, bl8)) | 0;
          hi = (hi + Math.imul(ah7, bh8)) | 0;
          lo = (lo + Math.imul(al6, bl9)) | 0;
          mid = (mid + Math.imul(al6, bh9)) | 0;
          mid = (mid + Math.imul(ah6, bl9)) | 0;
          hi = (hi + Math.imul(ah6, bh9)) | 0;
          var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
          w15 &= 0x3ffffff;
          /* k = 16 */
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = (mid + Math.imul(ah9, bl7)) | 0;
          hi = Math.imul(ah9, bh7);
          lo = (lo + Math.imul(al8, bl8)) | 0;
          mid = (mid + Math.imul(al8, bh8)) | 0;
          mid = (mid + Math.imul(ah8, bl8)) | 0;
          hi = (hi + Math.imul(ah8, bh8)) | 0;
          lo = (lo + Math.imul(al7, bl9)) | 0;
          mid = (mid + Math.imul(al7, bh9)) | 0;
          mid = (mid + Math.imul(ah7, bl9)) | 0;
          hi = (hi + Math.imul(ah7, bh9)) | 0;
          var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
          w16 &= 0x3ffffff;
          /* k = 17 */
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = (mid + Math.imul(ah9, bl8)) | 0;
          hi = Math.imul(ah9, bh8);
          lo = (lo + Math.imul(al8, bl9)) | 0;
          mid = (mid + Math.imul(al8, bh9)) | 0;
          mid = (mid + Math.imul(ah8, bl9)) | 0;
          hi = (hi + Math.imul(ah8, bh9)) | 0;
          var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
          w17 &= 0x3ffffff;
          /* k = 18 */
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = (mid + Math.imul(ah9, bl9)) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
          c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
          w18 &= 0x3ffffff;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };

        // Polyfill comb
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }

        function bigMulTo(self, num, out) {
          out.negative = num.negative ^ self.negative;
          out.length = self.length + num.length;

          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 0x3ffffff;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;

              var lo = r & 0x3ffffff;
              ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
              lo = (lo + rword) | 0;
              rword = lo & 0x3ffffff;
              ncarry = (ncarry + (lo >>> 26)) | 0;

              hncarry += ncarry >>> 26;
              ncarry &= 0x3ffffff;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }

          return out._strip();
        }

        function jumboMulTo(self, num, out) {
          // Temporary disable, see https://github.com/indutny/bn.js/issues/211
          // var fftm = new FFTM();
          // return fftm.mulp(self, num, out);
          return bigMulTo(self, num, out);
        }

        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }

          return res;
        };

        // Cooley-Tukey algorithm for FFT
        // slightly revisited to rely on looping instead of recursion

        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }

        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
          }

          return t;
        };

        // Returns binary-reversed representation of `x`
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1) return x;

          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << (l - i - 1);
            x >>= 1;
          }

          return rb;
        };

        // Performs "tweedling" phase, therefore 'emulating'
        // behaviour of the recursive algorithm
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };

        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);

          for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;

            var rtwdf = Math.cos((2 * Math.PI) / l);
            var itwdf = Math.sin((2 * Math.PI) / l);

            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;

              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];

                var ro = rtws[p + j + s];
                var io = itws[p + j + s];

                var rx = rtwdf_ * ro - itwdf_ * io;

                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;

                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;

                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;

                /* jshint maxdepth : false */
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;

                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };

        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = (N / 2) | 0; N; N = N >>> 1) {
            i++;
          }

          return 1 << (i + 1 + odd);
        };

        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1) return;

          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];

            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;

            t = iws[i];

            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };

        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;

            ws[i] = w & 0x3ffffff;

            if (w < 0x4000000) {
              carry = 0;
            } else {
              carry = (w / 0x4000000) | 0;
            }
          }

          return ws;
        };

        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);

            rws[2 * i] = carry & 0x1fff;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 0x1fff;
            carry = carry >>> 13;
          }

          // Pad with zeroes
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }

          assert(carry === 0);
          assert((carry & ~0x1fff) === 0);
        };

        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }

          return ph;
        };

        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);

          var rbt = this.makeRBT(N);

          var _ = this.stub(N);

          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);

          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);

          var rmws = out.words;
          rmws.length = N;

          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);

          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);

          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }

          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);

          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out._strip();
        };

        // Multiply `this` by `num`
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };

        // Multiply employing FFT
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };

        // In-place Multiplication
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };

        BN.prototype.imuln = function imuln(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;

          assert(typeof num === "number");
          assert(num < 0x4000000);

          // Carry
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
            carry >>= 26;
            carry += (w / 0x4000000) | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 0x3ffffff;
          }

          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }

          return isNegNum ? this.ineg() : this;
        };

        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };

        // `this` * `this`
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };

        // `this` * `this` in-place
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };

        // Math.pow(`this`, `num`)
        BN.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0) return new BN(1);

          // Skip leading zeroes
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0) break;
          }

          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0) continue;

              res = res.mul(q);
            }
          }

          return res;
        };

        // Shift-left in-place
        BN.prototype.iushln = function iushln(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
          var i;

          if (r !== 0) {
            var carry = 0;

            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = ((this.words[i] | 0) - newCarry) << r;
              this.words[i] = c | carry;
              carry = newCarry >>> (26 - r);
            }

            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }

          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }

            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }

            this.length += s;
          }

          return this._strip();
        };

        BN.prototype.ishln = function ishln(bits) {
          // TODO(indutny): implement me
          assert(this.negative === 0);
          return this.iushln(bits);
        };

        // Shift-right in-place
        // NOTE: `hint` is a lowest bit before trailing zeroes
        // NOTE: if `extended` is present - it will be filled with destroyed bits
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - (hint % 26)) / 26;
          } else {
            h = 0;
          }

          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          var maskedWords = extended;

          h -= s;
          h = Math.max(0, h);

          // Extended mode, copy masked part
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }

          if (s === 0) {
            // No-op, we should not move anything at all
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }

          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = (carry << (26 - r)) | (word >>> r);
            carry = word & mask;
          }

          // Push carried bits as a mask
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }

          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }

          return this._strip();
        };

        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          // TODO(indutny): implement me
          assert(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };

        // Shift-left
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };

        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };

        // Shift-right
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };

        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };

        // Test if n bit is set
        BN.prototype.testn = function testn(bit) {
          assert(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;

          // Fast case: bit is much higher than all existing words
          if (this.length <= s) return false;

          // Check bit and return
          var w = this.words[s];

          return !!(w & q);
        };

        // Return only lowers bits of number (in-place)
        BN.prototype.imaskn = function imaskn(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;

          assert(this.negative === 0, "imaskn works only with positive numbers");

          if (this.length <= s) {
            return this;
          }

          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);

          if (r !== 0) {
            var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
            this.words[this.length - 1] &= mask;
          }

          return this._strip();
        };

        // Return only lowers bits of number
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };

        // Add plain number `num` to `this`
        BN.prototype.iaddn = function iaddn(num) {
          assert(typeof num === "number");
          assert(num < 0x4000000);
          if (num < 0) return this.isubn(-num);

          // Possible sign change
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }

            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }

          // Add without checks
          return this._iaddn(num);
        };

        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;

          // Carry
          for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
            this.words[i] -= 0x4000000;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);

          return this;
        };

        // Subtract plain number `num` from `this`
        BN.prototype.isubn = function isubn(num) {
          assert(typeof num === "number");
          assert(num < 0x4000000);
          if (num < 0) return this.iaddn(-num);

          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }

          this.words[0] -= num;

          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            // Carry
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 0x4000000;
              this.words[i + 1] -= 1;
            }
          }

          return this._strip();
        };

        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };

        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };

        BN.prototype.iabs = function iabs() {
          this.negative = 0;

          return this;
        };

        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };

        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;

          this._expand(len);

          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 0x3ffffff;
            carry = (w >> 26) - ((right / 0x4000000) | 0);
            this.words[i + shift] = w & 0x3ffffff;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 0x3ffffff;
          }

          if (carry === 0) return this._strip();

          // Subtraction overflow
          assert(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 0x3ffffff;
          }
          this.negative = 1;

          return this._strip();
        };

        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;

          var a = this.clone();
          var b = num;

          // Normalize
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }

          // Initialize quotient
          var m = a.length - b.length;
          var q;

          if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }

          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }

          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0);

            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min((qj / bhi) | 0, 0x3ffffff);

            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q._strip();
          }
          a._strip();

          // Denormalize
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }

          return {
            div: q || null,
            mod: a,
          };
        };

        // NOTE: 1) `mode` can be set to `mod` to request mod only,
        //       to `div` to request div only, or be absent to
        //       request both div & mod
        //       2) `positive` is true if unsigned mod is requested
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert(!num.isZero());

          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0),
            };
          }

          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);

            if (mode !== "mod") {
              div = res.div.neg();
            }

            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }

            return {
              div: div,
              mod: mod,
            };
          }

          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);

            if (mode !== "mod") {
              div = res.div.neg();
            }

            return {
              div: div,
              mod: res.mod,
            };
          }

          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);

            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }

            return {
              div: res.div,
              mod: mod,
            };
          }

          // Both numbers are positive at this point

          // Strip both numbers to approximate shift value
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this,
            };
          }

          // Very short reduction
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null,
              };
            }

            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modrn(num.words[0])),
              };
            }

            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modrn(num.words[0])),
            };
          }

          return this._wordDiv(num, mode);
        };

        // Find `this` / `num`
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };

        // Find `this` % `num`
        BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };

        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };

        // Find Round(`this` / `num`)
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);

          // Fast case - exact division
          if (dm.mod.isZero()) return dm.div;

          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);

          // Round down
          if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

          // Round up
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };

        BN.prototype.modrn = function modrn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;

          assert(num <= 0x3ffffff);
          var p = (1 << 26) % num;

          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }

          return isNegNum ? -acc : acc;
        };

        // WARNING: DEPRECATED
        BN.prototype.modn = function modn(num) {
          return this.modrn(num);
        };

        // In-place division by number
        BN.prototype.idivn = function idivn(num) {
          var isNegNum = num < 0;
          if (isNegNum) num = -num;

          assert(num <= 0x3ffffff);

          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 0x4000000;
            this.words[i] = (w / num) | 0;
            carry = w % num;
          }

          this._strip();
          return isNegNum ? this.ineg() : this;
        };

        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };

        BN.prototype.egcd = function egcd(p) {
          assert(p.negative === 0);
          assert(!p.isZero());

          var x = this;
          var y = p.clone();

          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }

          // A * x + B * y = x
          var A = new BN(1);
          var B = new BN(0);

          // C * x + D * y = y
          var C = new BN(0);
          var D = new BN(1);

          var g = 0;

          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }

          var yp = y.clone();
          var xp = x.clone();

          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }

                A.iushrn(1);
                B.iushrn(1);
              }
            }

            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }

                C.iushrn(1);
                D.iushrn(1);
              }
            }

            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }

          return {
            a: C,
            b: D,
            gcd: y.iushln(g),
          };
        };

        // This is reduced incarnation of the binary EEA
        // above, designated to invert members of the
        // _prime_ fields F(p) at a maximal speed
        BN.prototype._invmp = function _invmp(p) {
          assert(p.negative === 0);
          assert(!p.isZero());

          var a = this;
          var b = p.clone();

          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }

          var x1 = new BN(1);
          var x2 = new BN(0);

          var delta = b.clone();

          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }

                x1.iushrn(1);
              }
            }

            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }

                x2.iushrn(1);
              }
            }

            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }

          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }

          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }

          return res;
        };

        BN.prototype.gcd = function gcd(num) {
          if (this.isZero()) return num.abs();
          if (num.isZero()) return this.abs();

          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;

          // Remove common factor of two
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }

          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }

            var r = a.cmp(b);
            if (r < 0) {
              // Swap `a` and `b` to make `a` always bigger than `b`
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }

            a.isub(b);
          } while (true);

          return b.iushln(shift);
        };

        // Invert number in the field F(num)
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };

        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };

        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };

        // And first word and num
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };

        // Increment at the bit position in-line
        BN.prototype.bincn = function bincn(bit) {
          assert(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;

          // Fast case: bit is much higher than all existing words
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }

          // Add bit and propagate, if needed
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 0x3ffffff;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };

        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };

        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;

          if (this.negative !== 0 && !negative) return -1;
          if (this.negative === 0 && negative) return 1;

          this._strip();

          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }

            assert(num <= 0x3ffffff, "Number is too big");

            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0) return -res | 0;
          return res;
        };

        // Compare two numbers and return:
        // 1 - if `this` > `num`
        // 0 - if `this` == `num`
        // -1 - if `this` < `num`
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0) return -1;
          if (this.negative === 0 && num.negative !== 0) return 1;

          var res = this.ucmp(num);
          if (this.negative !== 0) return -res | 0;
          return res;
        };

        // Unsigned comparison
        BN.prototype.ucmp = function ucmp(num) {
          // At this point both numbers have the same sign
          if (this.length > num.length) return 1;
          if (this.length < num.length) return -1;

          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;

            if (a === b) continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };

        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };

        BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };

        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };

        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };

        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };

        BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };

        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };

        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };

        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };

        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };

        //
        // A reduce context, could be using montgomery or something better, depending
        // on the `m` itself.
        //
        BN.red = function red(num) {
          return new Red(num);
        };

        BN.prototype.toRed = function toRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          assert(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };

        BN.prototype.fromRed = function fromRed() {
          assert(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };

        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };

        BN.prototype.forceRed = function forceRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };

        BN.prototype.redAdd = function redAdd(num) {
          assert(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };

        BN.prototype.redIAdd = function redIAdd(num) {
          assert(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };

        BN.prototype.redSub = function redSub(num) {
          assert(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };

        BN.prototype.redISub = function redISub(num) {
          assert(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };

        BN.prototype.redShl = function redShl(num) {
          assert(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };

        BN.prototype.redMul = function redMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };

        BN.prototype.redIMul = function redIMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };

        BN.prototype.redSqr = function redSqr() {
          assert(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };

        BN.prototype.redISqr = function redISqr() {
          assert(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };

        // Square root over p
        BN.prototype.redSqrt = function redSqrt() {
          assert(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };

        BN.prototype.redInvm = function redInvm() {
          assert(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };

        // Return negative clone of `this` % `red modulo`
        BN.prototype.redNeg = function redNeg() {
          assert(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };

        BN.prototype.redPow = function redPow(num) {
          assert(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };

        // Prime numbers with efficient reduction
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null,
        };

        // Pseudo-Mersenne prime
        function MPrime(name, p) {
          // P = 2 ^ N - K
          this.name = name;
          this.p = new BN(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);

          this.tmp = this._tmp();
        }

        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };

        MPrime.prototype.ireduce = function ireduce(num) {
          // Assumes that `num` is less than `P^2`
          // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
          var r = num;
          var rlen;

          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);

          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            if (r.strip !== undefined) {
              // r is a BN v4 instance
              r.strip();
            } else {
              // r is a BN v5 instance
              r._strip();
            }
          }

          return r;
        };

        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };

        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };

        function K256() {
          MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
        }
        inherits(K256, MPrime);

        K256.prototype.split = function split(input, output) {
          // 256 = 9 * 26 + 22
          var mask = 0x3fffff;

          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
          }
          output.length = outLen;

          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }

          // Shift by 9 limbs
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;

          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };

        K256.prototype.imulK = function imulK(num) {
          // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;

          // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 0x3d1;
            num.words[i] = lo & 0x3ffffff;
            lo = w * 0x40 + ((lo / 0x4000000) | 0);
          }

          // Fast length reduction
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };

        function P224() {
          MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
        }
        inherits(P224, MPrime);

        function P192() {
          MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
        }
        inherits(P192, MPrime);

        function P25519() {
          // 2 ^ 255 - 19
          MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
        }
        inherits(P25519, MPrime);

        P25519.prototype.imulK = function imulK(num) {
          // K = 0x13
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 0x13 + carry;
            var lo = hi & 0x3ffffff;
            hi >>>= 26;

            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };

        // Exported mostly for testing purposes, use plain name instead
        BN._prime = function prime(name) {
          // Cached version of prime
          if (primes[name]) return primes[name];

          var prime;
          if (name === "k256") {
            prime = new K256();
          } else if (name === "p224") {
            prime = new P224();
          } else if (name === "p192") {
            prime = new P192();
          } else if (name === "p25519") {
            prime = new P25519();
          } else {
            throw new Error("Unknown prime " + name);
          }
          primes[name] = prime;

          return prime;
        };

        //
        // Base reduction engine
        //
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }

        Red.prototype._verify1 = function _verify1(a) {
          assert(a.negative === 0, "red works only with positives");
          assert(a.red, "red works only with red numbers");
        };

        Red.prototype._verify2 = function _verify2(a, b) {
          assert((a.negative | b.negative) === 0, "red works only with positives");
          assert(a.red && a.red === b.red, "red works only with red numbers");
        };

        Red.prototype.imod = function imod(a) {
          if (this.prime) return this.prime.ireduce(a)._forceRed(this);

          move(a, a.umod(this.m)._forceRed(this));
          return a;
        };

        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }

          return this.m.sub(a)._forceRed(this);
        };

        Red.prototype.add = function add(a, b) {
          this._verify2(a, b);

          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };

        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);

          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };

        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);

          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };

        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);

          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };

        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };

        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };

        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };

        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };

        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };

        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero()) return a.clone();

          var mod3 = this.m.andln(3);
          assert(mod3 % 2 === 1);

          // Fast case
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
          }

          // Tonelli-Shanks algorithm (Totally unoptimized and slow)
          //
          // Find Q and S, that Q * 2 ^ S = (P - 1)
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert(!q.isZero());

          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();

          // Find quadratic non-residue
          // NOTE: Max is such because of generalized Riemann hypothesis.
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);

          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }

          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));

            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
          }

          return r;
        };

        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };

        Red.prototype.pow = function pow(a, num) {
          if (num.isZero()) return new BN(1).toRed(this);
          if (num.cmpn(1) === 0) return a.clone();

          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }

          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }

          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = (word >> j) & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }

              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }

              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }

          return res;
        };

        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);

          return r === num ? r.clone() : r;
        };

        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };

        //
        // Montgomery method engine
        //

        BN.mont = function mont(num) {
          return new Mont(num);
        };

        function Mont(m) {
          Red.call(this, m);

          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - (this.shift % 26);
          }

          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);

          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits(Mont, Red);

        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };

        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };

        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }

          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;

          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }

          return res._forceRed(this);
        };

        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }

          return res._forceRed(this);
        };

        Mont.prototype.invm = function invm(a) {
          // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(false || module, this);

      /***/
    },

    /***/ 9931: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      var r;

      module.exports = function rand(len) {
        if (!r) r = new Rand(null);

        return r.generate(len);
      };

      function Rand(rand) {
        this.rand = rand;
      }
      module.exports.Rand = Rand;

      Rand.prototype.generate = function generate(len) {
        return this._rand(len);
      };

      // Emulate crypto API using randy
      Rand.prototype._rand = function _rand(n) {
        if (this.rand.getBytes) return this.rand.getBytes(n);

        var res = new Uint8Array(n);
        for (var i = 0; i < res.length; i++) res[i] = this.rand.getByte();
        return res;
      };

      if (typeof self === "object") {
        if (self.crypto && self.crypto.getRandomValues) {
          // Modern browsers
          Rand.prototype._rand = function _rand(n) {
            var arr = new Uint8Array(n);
            self.crypto.getRandomValues(arr);
            return arr;
          };
        } else if (self.msCrypto && self.msCrypto.getRandomValues) {
          // IE
          Rand.prototype._rand = function _rand(n) {
            var arr = new Uint8Array(n);
            self.msCrypto.getRandomValues(arr);
            return arr;
          };

          // Safari's WebWorkers do not have `crypto`
        } else if (typeof window === "object") {
          // Old junk
          Rand.prototype._rand = function () {
            throw new Error("Not implemented yet");
          };
        }
      } else {
        // Node.js or Web worker with no crypto support
        try {
          var crypto = __webpack_require__(9214);
          if (typeof crypto.randomBytes !== "function") throw new Error("Not supported");

          Rand.prototype._rand = function _rand(n) {
            return crypto.randomBytes(n);
          };
        } catch (e) {}
      }

      /***/
    },

    /***/ 8764: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";
      /*!
       * The buffer module from node.js, for the browser.
       *
       * @author   Feross Aboukhadijeh <https://feross.org>
       * @license  MIT
       */
      /* eslint-disable no-proto */

      var base64 = __webpack_require__(9742);
      var ieee754 = __webpack_require__(645);
      var customInspectSymbol =
        typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
          ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
          : null;

      exports.Buffer = Buffer;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;

      var K_MAX_LENGTH = 0x7fffffff;
      exports.kMaxLength = K_MAX_LENGTH;

      /**
       * If `Buffer.TYPED_ARRAY_SUPPORT`:
       *   === true    Use Uint8Array implementation (fastest)
       *   === false   Print warning and recommend using `buffer` v4.x which has an Object
       *               implementation (most compatible, even IE6)
       *
       * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
       * Opera 11.6+, iOS 4.2+.
       *
       * We report that the browser does not support typed arrays if the are not subclassable
       * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
       * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
       * for __proto__ and has a buggy typed array implementation.
       */
      Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

      if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by " +
            "`buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }

      function typedArraySupport() {
        // Can typed array instances can be augmented?
        try {
          var arr = new Uint8Array(1);
          var proto = {
            foo: function () {
              return 42;
            },
          };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }

      Object.defineProperty(Buffer.prototype, "parent", {
        enumerable: true,
        get: function () {
          if (!Buffer.isBuffer(this)) return undefined;
          return this.buffer;
        },
      });

      Object.defineProperty(Buffer.prototype, "offset", {
        enumerable: true,
        get: function () {
          if (!Buffer.isBuffer(this)) return undefined;
          return this.byteOffset;
        },
      });

      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        // Return an augmented `Uint8Array` instance
        var buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer.prototype);
        return buf;
      }

      /**
       * The Buffer constructor returns instances of `Uint8Array` that have their
       * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
       * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
       * and the `Uint8Array` methods. Square bracket notation works as expected -- it
       * returns a single octet.
       *
       * The `Uint8Array` prototype remains unmodified.
       */

      function Buffer(arg, encodingOrOffset, length) {
        // Common case.
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError('The "string" argument must be of type string. Received type number');
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }

      Buffer.poolSize = 8192; // not used by this implementation

      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }

        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }

        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, " + "or Array-like Object. Received type " + typeof value
          );
        }

        if (isInstance(value, ArrayBuffer) || (value && isInstance(value.buffer, ArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }

        if (
          typeof SharedArrayBuffer !== "undefined" &&
          (isInstance(value, SharedArrayBuffer) || (value && isInstance(value.buffer, SharedArrayBuffer)))
        ) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }

        if (typeof value === "number") {
          throw new TypeError('The "value" argument must not be of type number. Received type number');
        }

        var valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer.from(valueOf, encodingOrOffset, length);
        }

        var b = fromObject(value);
        if (b) return b;

        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }

        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, " + "or Array-like Object. Received type " + typeof value
        );
      }

      /**
       * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
       * if value is a number.
       * Buffer.from(str[, encoding])
       * Buffer.from(array)
       * Buffer.from(buffer)
       * Buffer.from(arrayBuffer[, byteOffset[, length]])
       **/
      Buffer.from = function (value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };

      // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
      // https://github.com/feross/buffer/pull/148
      Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer, Uint8Array);

      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }

      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== undefined) {
          // Only pay attention to encoding if it's a string. This
          // prevents accidentally sending in a number that would
          // be interpreted as a start offset.
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }

      /**
       * Creates a new filled Buffer instance.
       * alloc(size[, fill[, encoding]])
       **/
      Buffer.alloc = function (size, fill, encoding) {
        return alloc(size, fill, encoding);
      };

      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }

      /**
       * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
       * */
      Buffer.allocUnsafe = function (size) {
        return allocUnsafe(size);
      };
      /**
       * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
       */
      Buffer.allocUnsafeSlow = function (size) {
        return allocUnsafe(size);
      };

      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }

        if (!Buffer.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }

        var length = byteLength(string, encoding) | 0;
        var buf = createBuffer(length);

        var actual = buf.write(string, encoding);

        if (actual !== length) {
          // Writing a hex string, for example, that contains invalid characters will
          // cause everything after the first invalid character to be ignored. (e.g.
          // 'abxxcd' will be treated as 'ab')
          buf = buf.slice(0, actual);
        }

        return buf;
      }

      function fromArrayLike(array) {
        var length = array.length < 0 ? 0 : checked(array.length) | 0;
        var buf = createBuffer(length);
        for (var i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }

      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          var copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }

      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }

        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }

        var buf;
        if (byteOffset === undefined && length === undefined) {
          buf = new Uint8Array(array);
        } else if (length === undefined) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }

        // Return an augmented `Uint8Array` instance
        Object.setPrototypeOf(buf, Buffer.prototype);

        return buf;
      }

      function fromObject(obj) {
        if (Buffer.isBuffer(obj)) {
          var len = checked(obj.length) | 0;
          var buf = createBuffer(len);

          if (buf.length === 0) {
            return buf;
          }

          obj.copy(buf, 0, 0, len);
          return buf;
        }

        if (obj.length !== undefined) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }

        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }

      function checked(length) {
        // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
        // length is NaN (which is otherwise coerced to zero.)
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum " + "size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }

      function SlowBuffer(length) {
        if (+length != length) {
          // eslint-disable-line eqeqeq
          length = 0;
        }
        return Buffer.alloc(+length);
      }

      Buffer.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
      };

      Buffer.compare = function compare(a, b) {
        if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
          throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
        }

        if (a === b) return 0;

        var x = a.length;
        var y = b.length;

        for (var i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }

        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };

      Buffer.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };

      Buffer.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }

        if (list.length === 0) {
          return Buffer.alloc(0);
        }

        var i;
        if (length === undefined) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }

        var buffer = Buffer.allocUnsafe(length);
        var pos = 0;
        for (i = 0; i < list.length; ++i) {
          var buf = list[i];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
              Buffer.from(buf).copy(buffer, pos);
            } else {
              Uint8Array.prototype.set.call(buffer, buf, pos);
            }
          } else if (!Buffer.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };

      function byteLength(string, encoding) {
        if (Buffer.isBuffer(string)) {
          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + "Received type " + typeof string);
        }

        var len = string.length;
        var mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0) return 0;

        // Use a for loop to avoid recursion
        var loweredCase = false;
        for (;;) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer.byteLength = byteLength;

      function slowToString(encoding, start, end) {
        var loweredCase = false;

        // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
        // property of a typed array.

        // This behaves neither like String nor Uint8Array in that we set start/end
        // to their upper/lower bounds if the value passed is out of range.
        // undefined is handled specially as per ECMA-262 6th Edition,
        // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
        if (start === undefined || start < 0) {
          start = 0;
        }
        // Return early if start > this.length. Done here to prevent potential uint32
        // coercion fail below.
        if (start > this.length) {
          return "";
        }

        if (end === undefined || end > this.length) {
          end = this.length;
        }

        if (end <= 0) {
          return "";
        }

        // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
        end >>>= 0;
        start >>>= 0;

        if (end <= start) {
          return "";
        }

        if (!encoding) encoding = "utf8";

        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);

            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);

            case "ascii":
              return asciiSlice(this, start, end);

            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);

            case "base64":
              return base64Slice(this, start, end);

            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);

            default:
              if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }

      // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
      // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
      // reliably in a browserify context because there could be multiple different
      // copies of the 'buffer' package in use. This method works even for Buffer
      // instances that were created from another copy of the `buffer` package.
      // See: https://github.com/feross/buffer/issues/154
      Buffer.prototype._isBuffer = true;

      function swap(b, n, m) {
        var i = b[n];
        b[n] = b[m];
        b[m] = i;
      }

      Buffer.prototype.swap16 = function swap16() {
        var len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (var i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };

      Buffer.prototype.swap32 = function swap32() {
        var len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (var i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };

      Buffer.prototype.swap64 = function swap64() {
        var len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (var i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };

      Buffer.prototype.toString = function toString() {
        var length = this.length;
        if (length === 0) return "";
        if (arguments.length === 0) return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };

      Buffer.prototype.toLocaleString = Buffer.prototype.toString;

      Buffer.prototype.equals = function equals(b) {
        if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
        if (this === b) return true;
        return Buffer.compare(this, b) === 0;
      };

      Buffer.prototype.inspect = function inspect() {
        var str = "";
        var max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max)
          .replace(/(.{2})/g, "$1 ")
          .trim();
        if (this.length > max) str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
      }

      Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer.from(target, target.offset, target.byteLength);
        }
        if (!Buffer.isBuffer(target)) {
          throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + "Received type " + typeof target);
        }

        if (start === undefined) {
          start = 0;
        }
        if (end === undefined) {
          end = target ? target.length : 0;
        }
        if (thisStart === undefined) {
          thisStart = 0;
        }
        if (thisEnd === undefined) {
          thisEnd = this.length;
        }

        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }

        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }

        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;

        if (this === target) return 0;

        var x = thisEnd - thisStart;
        var y = end - start;
        var len = Math.min(x, y);

        var thisCopy = this.slice(thisStart, thisEnd);
        var targetCopy = target.slice(start, end);

        for (var i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }

        if (x < y) return -1;
        if (y < x) return 1;
        return 0;
      };

      // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
      // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
      //
      // Arguments:
      // - buffer - a Buffer to search
      // - val - a string, Buffer, or number
      // - byteOffset - an index into `buffer`; will be clamped to an int32
      // - encoding - an optional encoding, relevant is val is a string
      // - dir - true for indexOf, false for lastIndexOf
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        // Empty buffer means no match
        if (buffer.length === 0) return -1;

        // Normalize byteOffset
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 0x7fffffff) {
          byteOffset = 0x7fffffff;
        } else if (byteOffset < -0x80000000) {
          byteOffset = -0x80000000;
        }
        byteOffset = +byteOffset; // Coerce to Number.
        if (numberIsNaN(byteOffset)) {
          // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
          byteOffset = dir ? 0 : buffer.length - 1;
        }

        // Normalize byteOffset: negative offsets start from the end of the buffer
        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir) return -1;
          else byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir) byteOffset = 0;
          else return -1;
        }

        // Normalize val
        if (typeof val === "string") {
          val = Buffer.from(val, encoding);
        }

        // Finally, search either indexOf (if dir is true) or lastIndexOf
        if (Buffer.isBuffer(val)) {
          // Special case: looking for empty string/buffer always fails
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 0xff; // Search for a byte value [0-255]
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }

        throw new TypeError("val must be string, number or Buffer");
      }

      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        var indexSize = 1;
        var arrLength = arr.length;
        var valLength = val.length;

        if (encoding !== undefined) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }

        function read(buf, i) {
          if (indexSize === 1) {
            return buf[i];
          } else {
            return buf.readUInt16BE(i * indexSize);
          }
        }

        var i;
        if (dir) {
          var foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1) foundIndex = i;
              if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1) i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            var found = true;
            for (var j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found) return i;
          }
        }

        return -1;
      }

      Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };

      Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };

      Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };

      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        var remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }

        var strLen = string.length;

        if (length > strLen / 2) {
          length = strLen / 2;
        }
        for (var i = 0; i < length; ++i) {
          var parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed)) return i;
          buf[offset + i] = parsed;
        }
        return i;
      }

      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }

      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }

      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }

      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }

      Buffer.prototype.write = function write(string, offset, length, encoding) {
        // Buffer#write(string)
        if (offset === undefined) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
          // Buffer#write(string, encoding)
        } else if (length === undefined && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
          // Buffer#write(string, offset[, length][, encoding])
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
          } else {
            encoding = length;
            length = undefined;
          }
        } else {
          throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
        }

        var remaining = this.length - offset;
        if (length === undefined || length > remaining) length = remaining;

        if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }

        if (!encoding) encoding = "utf8";

        var loweredCase = false;
        for (;;) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);

            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);

            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);

            case "base64":
              // Warning: maxLength not taken into account in base64Write
              return base64Write(this, string, offset, length);

            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);

            default:
              if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };

      Buffer.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0),
        };
      };

      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }

      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        var res = [];

        var i = start;
        while (i < end) {
          var firstByte = buf[i];
          var codePoint = null;
          var bytesPerSequence = firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;

          if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;

            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 0x80) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 0xc0) === 0x80) {
                  tempCodePoint = ((firstByte & 0x1f) << 0x6) | (secondByte & 0x3f);
                  if (tempCodePoint > 0x7f) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {
                  tempCodePoint = ((firstByte & 0xf) << 0xc) | ((secondByte & 0x3f) << 0x6) | (thirdByte & 0x3f);
                  if (tempCodePoint > 0x7ff && (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80 && (fourthByte & 0xc0) === 0x80) {
                  tempCodePoint = ((firstByte & 0xf) << 0x12) | ((secondByte & 0x3f) << 0xc) | ((thirdByte & 0x3f) << 0x6) | (fourthByte & 0x3f);
                  if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }

          if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xfffd;
            bytesPerSequence = 1;
          } else if (codePoint > 0xffff) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(((codePoint >>> 10) & 0x3ff) | 0xd800);
            codePoint = 0xdc00 | (codePoint & 0x3ff);
          }

          res.push(codePoint);
          i += bytesPerSequence;
        }

        return decodeCodePointsArray(res);
      }

      // Based on http://stackoverflow.com/a/22747272/680742, the browser with
      // the lowest limit is Chrome, with 0x10000 args.
      // We go 1 magnitude less, for safety
      var MAX_ARGUMENTS_LENGTH = 0x1000;

      function decodeCodePointsArray(codePoints) {
        var len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
        }

        // Decode in chunks to avoid "call stack size exceeded".
        var res = "";
        var i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(String, codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH)));
        }
        return res;
      }

      function asciiSlice(buf, start, end) {
        var ret = "";
        end = Math.min(buf.length, end);

        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 0x7f);
        }
        return ret;
      }

      function latin1Slice(buf, start, end) {
        var ret = "";
        end = Math.min(buf.length, end);

        for (var i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }

      function hexSlice(buf, start, end) {
        var len = buf.length;

        if (!start || start < 0) start = 0;
        if (!end || end < 0 || end > len) end = len;

        var out = "";
        for (var i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }

      function utf16leSlice(buf, start, end) {
        var bytes = buf.slice(start, end);
        var res = "";
        // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
        for (var i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }

      Buffer.prototype.slice = function slice(start, end) {
        var len = this.length;
        start = ~~start;
        end = end === undefined ? len : ~~end;

        if (start < 0) {
          start += len;
          if (start < 0) start = 0;
        } else if (start > len) {
          start = len;
        }

        if (end < 0) {
          end += len;
          if (end < 0) end = 0;
        } else if (end > len) {
          end = len;
        }

        if (end < start) end = start;

        var newBuf = this.subarray(start, end);
        // Return an augmented `Uint8Array` instance
        Object.setPrototypeOf(newBuf, Buffer.prototype);

        return newBuf;
      };

      /*
       * Need to make sure that buffer isn't trying to write out of bounds.
       */
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
        if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
      }

      Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);

        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 0x100)) {
          val += this[offset + i] * mul;
        }

        return val;
      };

      Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength, this.length);
        }

        var val = this[offset + --byteLength];
        var mul = 1;
        while (byteLength > 0 && (mul *= 0x100)) {
          val += this[offset + --byteLength] * mul;
        }

        return val;
      };

      Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 1, this.length);
        return this[offset];
      };

      Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        return this[offset] | (this[offset + 1] << 8);
      };

      Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        return (this[offset] << 8) | this[offset + 1];
      };

      Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);

        return (this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16)) + this[offset + 3] * 0x1000000;
      };

      Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);

        return this[offset] * 0x1000000 + ((this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3]);
      };

      Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);

        var val = this[offset];
        var mul = 1;
        var i = 0;
        while (++i < byteLength && (mul *= 0x100)) {
          val += this[offset + i] * mul;
        }
        mul *= 0x80;

        if (val >= mul) val -= Math.pow(2, 8 * byteLength);

        return val;
      };

      Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) checkOffset(offset, byteLength, this.length);

        var i = byteLength;
        var mul = 1;
        var val = this[offset + --i];
        while (i > 0 && (mul *= 0x100)) {
          val += this[offset + --i] * mul;
        }
        mul *= 0x80;

        if (val >= mul) val -= Math.pow(2, 8 * byteLength);

        return val;
      };

      Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 1, this.length);
        if (!(this[offset] & 0x80)) return this[offset];
        return (0xff - this[offset] + 1) * -1;
      };

      Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset] | (this[offset + 1] << 8);
        return val & 0x8000 ? val | 0xffff0000 : val;
      };

      Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 2, this.length);
        var val = this[offset + 1] | (this[offset] << 8);
        return val & 0x8000 ? val | 0xffff0000 : val;
      };

      Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);

        return this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16) | (this[offset + 3] << 24);
      };

      Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);

        return (this[offset] << 24) | (this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3];
      };

      Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };

      Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };

      Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };

      Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert) checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };

      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length) throw new RangeError("Index out of range");
      }

      Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }

        var mul = 1;
        var i = 0;
        this[offset] = value & 0xff;
        while (++i < byteLength && (mul *= 0x100)) {
          this[offset + i] = (value / mul) & 0xff;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength = byteLength >>> 0;
        if (!noAssert) {
          var maxBytes = Math.pow(2, 8 * byteLength) - 1;
          checkInt(this, value, offset, byteLength, maxBytes, 0);
        }

        var i = byteLength - 1;
        var mul = 1;
        this[offset + i] = value & 0xff;
        while (--i >= 0 && (mul *= 0x100)) {
          this[offset + i] = (value / mul) & 0xff;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
        this[offset] = value & 0xff;
        return offset + 1;
      };

      Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };

      Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
        return offset + 2;
      };

      Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 0xff;
        return offset + 4;
      };

      Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
        return offset + 4;
      };

      Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);

          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }

        var i = 0;
        var mul = 1;
        var sub = 0;
        this[offset] = value & 0xff;
        while (++i < byteLength && (mul *= 0x100)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          var limit = Math.pow(2, 8 * byteLength - 1);

          checkInt(this, value, offset, byteLength, limit - 1, -limit);
        }

        var i = byteLength - 1;
        var mul = 1;
        var sub = 0;
        this[offset + i] = value & 0xff;
        while (--i >= 0 && (mul *= 0x100)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (((value / mul) >> 0) - sub) & 0xff;
        }

        return offset + byteLength;
      };

      Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
        if (value < 0) value = 0xff + value + 1;
        this[offset] = value & 0xff;
        return offset + 1;
      };

      Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };

      Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
        return offset + 2;
      };

      Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };

      Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
        if (value < 0) value = 0xffffffff + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
        return offset + 4;
      };

      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length) throw new RangeError("Index out of range");
        if (offset < 0) throw new RangeError("Index out of range");
      }

      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 3.4028234663852886e38, -3.4028234663852886e38);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }

      Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };

      Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };

      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 1.7976931348623157e308, -1.7976931348623157e308);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }

      Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };

      Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };

      // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
      Buffer.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
        if (!start) start = 0;
        if (!end && end !== 0) end = this.length;
        if (targetStart >= target.length) targetStart = target.length;
        if (!targetStart) targetStart = 0;
        if (end > 0 && end < start) end = start;

        // Copy 0 bytes; we're done
        if (end === start) return 0;
        if (target.length === 0 || this.length === 0) return 0;

        // Fatal error conditions
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
        if (end < 0) throw new RangeError("sourceEnd out of bounds");

        // Are we oob?
        if (end > this.length) end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }

        var len = end - start;

        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          // Use built-in when available, missing from IE11
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
        }

        return len;
      };

      // Usage:
      //    buffer.fill(number[, offset[, end]])
      //    buffer.fill(buffer[, offset[, end]])
      //    buffer.fill(string[, offset[, end]][, encoding])
      Buffer.prototype.fill = function fill(val, start, end, encoding) {
        // Handle string cases:
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== undefined && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            var code = val.charCodeAt(0);
            if ((encoding === "utf8" && code < 128) || encoding === "latin1") {
              // Fast path: If `val` fits into a single byte, use that numeric value.
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }

        // Invalid ranges are not set to a default, so can range check early.
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }

        if (end <= start) {
          return this;
        }

        start = start >>> 0;
        end = end === undefined ? this.length : end >>> 0;

        if (!val) val = 0;

        var i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
          var len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }

        return this;
      };

      // HELPER FUNCTIONS
      // ================

      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

      function base64clean(str) {
        // Node takes equal signs as end of the Base64 encoding
        str = str.split("=")[0];
        // Node strips out invalid characters like \n and \t from the string, base64-js does not
        str = str.trim().replace(INVALID_BASE64_RE, "");
        // Node converts strings with length < 2 to ''
        if (str.length < 2) return "";
        // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }

      function utf8ToBytes(string, units) {
        units = units || Infinity;
        var codePoint;
        var length = string.length;
        var leadSurrogate = null;
        var bytes = [];

        for (var i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);

          // is surrogate component
          if (codePoint > 0xd7ff && codePoint < 0xe000) {
            // last char was a lead
            if (!leadSurrogate) {
              // no lead yet
              if (codePoint > 0xdbff) {
                // unexpected trail
                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                continue;
              } else if (i + 1 === length) {
                // unpaired lead
                if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
                continue;
              }

              // valid lead
              leadSurrogate = codePoint;

              continue;
            }

            // 2 leads in a row
            if (codePoint < 0xdc00) {
              if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
              leadSurrogate = codePoint;
              continue;
            }

            // valid surrogate pair
            codePoint = (((leadSurrogate - 0xd800) << 10) | (codePoint - 0xdc00)) + 0x10000;
          } else if (leadSurrogate) {
            // valid bmp char, but last char was a lead
            if ((units -= 3) > -1) bytes.push(0xef, 0xbf, 0xbd);
          }

          leadSurrogate = null;

          // encode utf8
          if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
          } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push((codePoint >> 0x6) | 0xc0, (codePoint & 0x3f) | 0x80);
          } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push((codePoint >> 0xc) | 0xe0, ((codePoint >> 0x6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
          } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push((codePoint >> 0x12) | 0xf0, ((codePoint >> 0xc) & 0x3f) | 0x80, ((codePoint >> 0x6) & 0x3f) | 0x80, (codePoint & 0x3f) | 0x80);
          } else {
            throw new Error("Invalid code point");
          }
        }

        return bytes;
      }

      function asciiToBytes(str) {
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          // Node's code seems to be doing this and not & 0x7F..
          byteArray.push(str.charCodeAt(i) & 0xff);
        }
        return byteArray;
      }

      function utf16leToBytes(str, units) {
        var c, hi, lo;
        var byteArray = [];
        for (var i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0) break;

          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }

        return byteArray;
      }

      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }

      function blitBuffer(src, dst, offset, length) {
        for (var i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length) break;
          dst[i + offset] = src[i];
        }
        return i;
      }

      // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
      // the `instanceof` check but they should be treated as of that type.
      // See: https://github.com/feross/buffer/issues/166
      function isInstance(obj, type) {
        return obj instanceof type || (obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name);
      }
      function numberIsNaN(obj) {
        // For IE11 support
        return obj !== obj; // eslint-disable-line no-self-compare
      }

      // Create lookup table for `toString('hex')`
      // See: https://github.com/feross/buffer/issues/219
      var hexSliceLookupTable = (function () {
        var alphabet = "0123456789abcdef";
        var table = new Array(256);
        for (var i = 0; i < 16; ++i) {
          var i16 = i * 16;
          for (var j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      })();

      /***/
    },

    /***/ 584: /***/ (module) => {
      module.exports = {
        100: "Continue",
        101: "Switching Protocols",
        102: "Processing",
        200: "OK",
        201: "Created",
        202: "Accepted",
        203: "Non-Authoritative Information",
        204: "No Content",
        205: "Reset Content",
        206: "Partial Content",
        207: "Multi-Status",
        208: "Already Reported",
        226: "IM Used",
        300: "Multiple Choices",
        301: "Moved Permanently",
        302: "Found",
        303: "See Other",
        304: "Not Modified",
        305: "Use Proxy",
        307: "Temporary Redirect",
        308: "Permanent Redirect",
        400: "Bad Request",
        401: "Unauthorized",
        402: "Payment Required",
        403: "Forbidden",
        404: "Not Found",
        405: "Method Not Allowed",
        406: "Not Acceptable",
        407: "Proxy Authentication Required",
        408: "Request Timeout",
        409: "Conflict",
        410: "Gone",
        411: "Length Required",
        412: "Precondition Failed",
        413: "Payload Too Large",
        414: "URI Too Long",
        415: "Unsupported Media Type",
        416: "Range Not Satisfiable",
        417: "Expectation Failed",
        418: "I'm a teapot",
        421: "Misdirected Request",
        422: "Unprocessable Entity",
        423: "Locked",
        424: "Failed Dependency",
        425: "Unordered Collection",
        426: "Upgrade Required",
        428: "Precondition Required",
        429: "Too Many Requests",
        431: "Request Header Fields Too Large",
        451: "Unavailable For Legal Reasons",
        500: "Internal Server Error",
        501: "Not Implemented",
        502: "Bad Gateway",
        503: "Service Unavailable",
        504: "Gateway Timeout",
        505: "HTTP Version Not Supported",
        506: "Variant Also Negotiates",
        507: "Insufficient Storage",
        508: "Loop Detected",
        509: "Bandwidth Limit Exceeded",
        510: "Not Extended",
        511: "Network Authentication Required",
      };

      /***/
    },

    /***/ 1924: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var GetIntrinsic = __webpack_require__(210);

      var callBind = __webpack_require__(5559);

      var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));

      module.exports = function callBoundIntrinsic(name, allowMissing) {
        var intrinsic = GetIntrinsic(name, !!allowMissing);
        if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
          return callBind(intrinsic);
        }
        return intrinsic;
      };

      /***/
    },

    /***/ 5559: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var bind = __webpack_require__(8612);
      var GetIntrinsic = __webpack_require__(210);

      var $apply = GetIntrinsic("%Function.prototype.apply%");
      var $call = GetIntrinsic("%Function.prototype.call%");
      var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);

      var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
      var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
      var $max = GetIntrinsic("%Math.max%");

      if ($defineProperty) {
        try {
          $defineProperty({}, "a", { value: 1 });
        } catch (e) {
          // IE 8 has a broken defineProperty
          $defineProperty = null;
        }
      }

      module.exports = function callBind(originalFunction) {
        var func = $reflectApply(bind, $call, arguments);
        if ($gOPD && $defineProperty) {
          var desc = $gOPD(func, "length");
          if (desc.configurable) {
            // original length, plus the receiver, minus any additional arguments (after the receiver)
            $defineProperty(func, "length", { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) });
          }
        }
        return func;
      };

      var applyBind = function applyBind() {
        return $reflectApply(bind, $apply, arguments);
      };

      if ($defineProperty) {
        $defineProperty(module.exports, "apply", { value: applyBind });
      } else {
        module.exports.apply = applyBind;
      }

      /***/
    },

    /***/ 1905: /***/ function () {
      (function (self) {
        var irrelevant = (function (exports) {
          var support = {
            searchParams: "URLSearchParams" in self,
            iterable: "Symbol" in self && "iterator" in Symbol,
            blob:
              "FileReader" in self &&
              "Blob" in self &&
              (function () {
                try {
                  new Blob();
                  return true;
                } catch (e) {
                  return false;
                }
              })(),
            formData: "FormData" in self,
            arrayBuffer: "ArrayBuffer" in self,
          };

          function isDataView(obj) {
            return obj && DataView.prototype.isPrototypeOf(obj);
          }

          if (support.arrayBuffer) {
            var viewClasses = [
              "[object Int8Array]",
              "[object Uint8Array]",
              "[object Uint8ClampedArray]",
              "[object Int16Array]",
              "[object Uint16Array]",
              "[object Int32Array]",
              "[object Uint32Array]",
              "[object Float32Array]",
              "[object Float64Array]",
            ];

            var isArrayBufferView =
              ArrayBuffer.isView ||
              function (obj) {
                return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
              };
          }

          function normalizeName(name) {
            if (typeof name !== "string") {
              name = String(name);
            }
            if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
              throw new TypeError("Invalid character in header field name");
            }
            return name.toLowerCase();
          }

          function normalizeValue(value) {
            if (typeof value !== "string") {
              value = String(value);
            }
            return value;
          }

          // Build a destructive iterator for the value list
          function iteratorFor(items) {
            var iterator = {
              next: function () {
                var value = items.shift();
                return { done: value === undefined, value: value };
              },
            };

            if (support.iterable) {
              iterator[Symbol.iterator] = function () {
                return iterator;
              };
            }

            return iterator;
          }

          function Headers(headers) {
            this.map = {};

            if (headers instanceof Headers) {
              headers.forEach(function (value, name) {
                this.append(name, value);
              }, this);
            } else if (Array.isArray(headers)) {
              headers.forEach(function (header) {
                this.append(header[0], header[1]);
              }, this);
            } else if (headers) {
              Object.getOwnPropertyNames(headers).forEach(function (name) {
                this.append(name, headers[name]);
              }, this);
            }
          }

          Headers.prototype.append = function (name, value) {
            name = normalizeName(name);
            value = normalizeValue(value);
            var oldValue = this.map[name];
            this.map[name] = oldValue ? oldValue + ", " + value : value;
          };

          Headers.prototype["delete"] = function (name) {
            delete this.map[normalizeName(name)];
          };

          Headers.prototype.get = function (name) {
            name = normalizeName(name);
            return this.has(name) ? this.map[name] : null;
          };

          Headers.prototype.has = function (name) {
            return this.map.hasOwnProperty(normalizeName(name));
          };

          Headers.prototype.set = function (name, value) {
            this.map[normalizeName(name)] = normalizeValue(value);
          };

          Headers.prototype.forEach = function (callback, thisArg) {
            for (var name in this.map) {
              if (this.map.hasOwnProperty(name)) {
                callback.call(thisArg, this.map[name], name, this);
              }
            }
          };

          Headers.prototype.keys = function () {
            var items = [];
            this.forEach(function (value, name) {
              items.push(name);
            });
            return iteratorFor(items);
          };

          Headers.prototype.values = function () {
            var items = [];
            this.forEach(function (value) {
              items.push(value);
            });
            return iteratorFor(items);
          };

          Headers.prototype.entries = function () {
            var items = [];
            this.forEach(function (value, name) {
              items.push([name, value]);
            });
            return iteratorFor(items);
          };

          if (support.iterable) {
            Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
          }

          function consumed(body) {
            if (body.bodyUsed) {
              return Promise.reject(new TypeError("Already read"));
            }
            body.bodyUsed = true;
          }

          function fileReaderReady(reader) {
            return new Promise(function (resolve, reject) {
              reader.onload = function () {
                resolve(reader.result);
              };
              reader.onerror = function () {
                reject(reader.error);
              };
            });
          }

          function readBlobAsArrayBuffer(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsArrayBuffer(blob);
            return promise;
          }

          function readBlobAsText(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsText(blob);
            return promise;
          }

          function readArrayBufferAsText(buf) {
            var view = new Uint8Array(buf);
            var chars = new Array(view.length);

            for (var i = 0; i < view.length; i++) {
              chars[i] = String.fromCharCode(view[i]);
            }
            return chars.join("");
          }

          function bufferClone(buf) {
            if (buf.slice) {
              return buf.slice(0);
            } else {
              var view = new Uint8Array(buf.byteLength);
              view.set(new Uint8Array(buf));
              return view.buffer;
            }
          }

          function Body() {
            this.bodyUsed = false;

            this._initBody = function (body) {
              this._bodyInit = body;
              if (!body) {
                this._bodyText = "";
              } else if (typeof body === "string") {
                this._bodyText = body;
              } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                this._bodyBlob = body;
              } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                this._bodyFormData = body;
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this._bodyText = body.toString();
              } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                this._bodyArrayBuffer = bufferClone(body.buffer);
                // IE 10-11 can't handle a DataView body.
                this._bodyInit = new Blob([this._bodyArrayBuffer]);
              } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                this._bodyArrayBuffer = bufferClone(body);
              } else {
                this._bodyText = body = Object.prototype.toString.call(body);
              }

              if (!this.headers.get("content-type")) {
                if (typeof body === "string") {
                  this.headers.set("content-type", "text/plain;charset=UTF-8");
                } else if (this._bodyBlob && this._bodyBlob.type) {
                  this.headers.set("content-type", this._bodyBlob.type);
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                  this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                }
              }
            };

            if (support.blob) {
              this.blob = function () {
                var rejected = consumed(this);
                if (rejected) {
                  return rejected;
                }

                if (this._bodyBlob) {
                  return Promise.resolve(this._bodyBlob);
                } else if (this._bodyArrayBuffer) {
                  return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                } else if (this._bodyFormData) {
                  throw new Error("could not read FormData body as blob");
                } else {
                  return Promise.resolve(new Blob([this._bodyText]));
                }
              };

              this.arrayBuffer = function () {
                if (this._bodyArrayBuffer) {
                  return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
                } else {
                  return this.blob().then(readBlobAsArrayBuffer);
                }
              };
            }

            this.text = function () {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }

              if (this._bodyBlob) {
                return readBlobAsText(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as text");
              } else {
                return Promise.resolve(this._bodyText);
              }
            };

            if (support.formData) {
              this.formData = function () {
                return this.text().then(decode);
              };
            }

            this.json = function () {
              return this.text().then(JSON.parse);
            };

            return this;
          }

          // HTTP methods whose capitalization should be normalized
          var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];

          function normalizeMethod(method) {
            var upcased = method.toUpperCase();
            return methods.indexOf(upcased) > -1 ? upcased : method;
          }

          function Request(input, options) {
            options = options || {};
            var body = options.body;

            if (input instanceof Request) {
              if (input.bodyUsed) {
                throw new TypeError("Already read");
              }
              this.url = input.url;
              this.credentials = input.credentials;
              if (!options.headers) {
                this.headers = new Headers(input.headers);
              }
              this.method = input.method;
              this.mode = input.mode;
              this.signal = input.signal;
              if (!body && input._bodyInit != null) {
                body = input._bodyInit;
                input.bodyUsed = true;
              }
            } else {
              this.url = String(input);
            }

            this.credentials = options.credentials || this.credentials || "same-origin";
            if (options.headers || !this.headers) {
              this.headers = new Headers(options.headers);
            }
            this.method = normalizeMethod(options.method || this.method || "GET");
            this.mode = options.mode || this.mode || null;
            this.signal = options.signal || this.signal;
            this.referrer = null;

            if ((this.method === "GET" || this.method === "HEAD") && body) {
              throw new TypeError("Body not allowed for GET or HEAD requests");
            }
            this._initBody(body);
          }

          Request.prototype.clone = function () {
            return new Request(this, { body: this._bodyInit });
          };

          function decode(body) {
            var form = new FormData();
            body
              .trim()
              .split("&")
              .forEach(function (bytes) {
                if (bytes) {
                  var split = bytes.split("=");
                  var name = split.shift().replace(/\+/g, " ");
                  var value = split.join("=").replace(/\+/g, " ");
                  form.append(decodeURIComponent(name), decodeURIComponent(value));
                }
              });
            return form;
          }

          function parseHeaders(rawHeaders) {
            var headers = new Headers();
            // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
            // https://tools.ietf.org/html/rfc7230#section-3.2
            var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
            preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
              var parts = line.split(":");
              var key = parts.shift().trim();
              if (key) {
                var value = parts.join(":").trim();
                headers.append(key, value);
              }
            });
            return headers;
          }

          Body.call(Request.prototype);

          function Response(bodyInit, options) {
            if (!options) {
              options = {};
            }

            this.type = "default";
            this.status = options.status === undefined ? 200 : options.status;
            this.ok = this.status >= 200 && this.status < 300;
            this.statusText = "statusText" in options ? options.statusText : "OK";
            this.headers = new Headers(options.headers);
            this.url = options.url || "";
            this._initBody(bodyInit);
          }

          Body.call(Response.prototype);

          Response.prototype.clone = function () {
            return new Response(this._bodyInit, {
              status: this.status,
              statusText: this.statusText,
              headers: new Headers(this.headers),
              url: this.url,
            });
          };

          Response.error = function () {
            var response = new Response(null, { status: 0, statusText: "" });
            response.type = "error";
            return response;
          };

          var redirectStatuses = [301, 302, 303, 307, 308];

          Response.redirect = function (url, status) {
            if (redirectStatuses.indexOf(status) === -1) {
              throw new RangeError("Invalid status code");
            }

            return new Response(null, { status: status, headers: { location: url } });
          };

          exports.DOMException = self.DOMException;
          try {
            new exports.DOMException();
          } catch (err) {
            exports.DOMException = function (message, name) {
              this.message = message;
              this.name = name;
              var error = Error(message);
              this.stack = error.stack;
            };
            exports.DOMException.prototype = Object.create(Error.prototype);
            exports.DOMException.prototype.constructor = exports.DOMException;
          }

          function fetch(input, init) {
            return new Promise(function (resolve, reject) {
              var request = new Request(input, init);

              if (request.signal && request.signal.aborted) {
                return reject(new exports.DOMException("Aborted", "AbortError"));
              }

              var xhr = new XMLHttpRequest();

              function abortXhr() {
                xhr.abort();
              }

              xhr.onload = function () {
                var options = {
                  status: xhr.status,
                  statusText: xhr.statusText,
                  headers: parseHeaders(xhr.getAllResponseHeaders() || ""),
                };
                options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
                var body = "response" in xhr ? xhr.response : xhr.responseText;
                resolve(new Response(body, options));
              };

              xhr.onerror = function () {
                reject(new TypeError("Network request failed"));
              };

              xhr.ontimeout = function () {
                reject(new TypeError("Network request failed"));
              };

              xhr.onabort = function () {
                reject(new exports.DOMException("Aborted", "AbortError"));
              };

              xhr.open(request.method, request.url, true);

              if (request.credentials === "include") {
                xhr.withCredentials = true;
              } else if (request.credentials === "omit") {
                xhr.withCredentials = false;
              }

              if ("responseType" in xhr && support.blob) {
                xhr.responseType = "blob";
              }

              request.headers.forEach(function (value, name) {
                xhr.setRequestHeader(name, value);
              });

              if (request.signal) {
                request.signal.addEventListener("abort", abortXhr);

                xhr.onreadystatechange = function () {
                  // DONE (success or failure)
                  if (xhr.readyState === 4) {
                    request.signal.removeEventListener("abort", abortXhr);
                  }
                };
              }

              xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
            });
          }

          fetch.polyfill = true;

          if (!self.fetch) {
            self.fetch = fetch;
            self.Headers = Headers;
            self.Request = Request;
            self.Response = Response;
          }

          exports.Headers = Headers;
          exports.Request = Request;
          exports.Response = Response;
          exports.fetch = fetch;

          Object.defineProperty(exports, "__esModule", { value: true });

          return exports;
        })({});
      })(typeof self !== "undefined" ? self : this);

      /***/
    },

    /***/ 6266: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";

      var elliptic = exports;

      elliptic.version = __webpack_require__(8597) /* .version */.i8;
      elliptic.utils = __webpack_require__(953);
      elliptic.rand = __webpack_require__(9931);
      elliptic.curve = __webpack_require__(8254);
      elliptic.curves = __webpack_require__(5427);

      // Protocols
      elliptic.ec = __webpack_require__(7954);
      elliptic.eddsa = __webpack_require__(5980);

      /***/
    },

    /***/ 4918: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var BN = __webpack_require__(3550);
      var utils = __webpack_require__(953);
      var getNAF = utils.getNAF;
      var getJSF = utils.getJSF;
      var assert = utils.assert;

      function BaseCurve(type, conf) {
        this.type = type;
        this.p = new BN(conf.p, 16);

        // Use Montgomery, when there is no fast reduction for the prime
        this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

        // Useful for many curves
        this.zero = new BN(0).toRed(this.red);
        this.one = new BN(1).toRed(this.red);
        this.two = new BN(2).toRed(this.red);

        // Curve configuration, optional
        this.n = conf.n && new BN(conf.n, 16);
        this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

        // Temporary arrays
        this._wnafT1 = new Array(4);
        this._wnafT2 = new Array(4);
        this._wnafT3 = new Array(4);
        this._wnafT4 = new Array(4);

        this._bitLength = this.n ? this.n.bitLength() : 0;

        // Generalized Greg Maxwell's trick
        var adjustCount = this.n && this.p.div(this.n);
        if (!adjustCount || adjustCount.cmpn(100) > 0) {
          this.redN = null;
        } else {
          this._maxwellTrick = true;
          this.redN = this.n.toRed(this.red);
        }
      }
      module.exports = BaseCurve;

      BaseCurve.prototype.point = function point() {
        throw new Error("Not implemented");
      };

      BaseCurve.prototype.validate = function validate() {
        throw new Error("Not implemented");
      };

      BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
        assert(p.precomputed);
        var doubles = p._getDoubles();

        var naf = getNAF(k, 1, this._bitLength);
        var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
        I /= 3;

        // Translate into more windowed form
        var repr = [];
        var j;
        var nafW;
        for (j = 0; j < naf.length; j += doubles.step) {
          nafW = 0;
          for (var l = j + doubles.step - 1; l >= j; l--) nafW = (nafW << 1) + naf[l];
          repr.push(nafW);
        }

        var a = this.jpoint(null, null, null);
        var b = this.jpoint(null, null, null);
        for (var i = I; i > 0; i--) {
          for (j = 0; j < repr.length; j++) {
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
          }
          a = a.add(b);
        }
        return a.toP();
      };

      BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
        var w = 4;

        // Precompute window
        var nafPoints = p._getNAFPoints(w);
        w = nafPoints.wnd;
        var wnd = nafPoints.points;

        // Get NAF form
        var naf = getNAF(k, w, this._bitLength);

        // Add `this`*(N+1) for every w-NAF index
        var acc = this.jpoint(null, null, null);
        for (var i = naf.length - 1; i >= 0; i--) {
          // Count zeroes
          for (var l = 0; i >= 0 && naf[i] === 0; i--) l++;
          if (i >= 0) l++;
          acc = acc.dblp(l);

          if (i < 0) break;
          var z = naf[i];
          assert(z !== 0);
          if (p.type === "affine") {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
            else acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
          } else {
            // J +- J
            if (z > 0) acc = acc.add(wnd[(z - 1) >> 1]);
            else acc = acc.add(wnd[(-z - 1) >> 1].neg());
          }
        }
        return p.type === "affine" ? acc.toP() : acc;
      };

      BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
        var wndWidth = this._wnafT1;
        var wnd = this._wnafT2;
        var naf = this._wnafT3;

        // Fill all arrays
        var max = 0;
        var i;
        var j;
        var p;
        for (i = 0; i < len; i++) {
          p = points[i];
          var nafPoints = p._getNAFPoints(defW);
          wndWidth[i] = nafPoints.wnd;
          wnd[i] = nafPoints.points;
        }

        // Comb small window NAFs
        for (i = len - 1; i >= 1; i -= 2) {
          var a = i - 1;
          var b = i;
          if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
          }

          var comb = [points[a] /* 1 */, null /* 3 */, null /* 5 */, points[b] /* 7 */];

          // Try to avoid Projective points, if possible
          if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
          } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
          } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
          }

          var index = [-3 /* -1 -1 */, -1 /* -1 0 */, -5 /* -1 1 */, -7 /* 0 -1 */, 0 /* 0 0 */, 7 /* 0 1 */, 5 /* 1 -1 */, 1 /* 1 0 */, 3 /* 1 1 */];

          var jsf = getJSF(coeffs[a], coeffs[b]);
          max = Math.max(jsf[0].length, max);
          naf[a] = new Array(max);
          naf[b] = new Array(max);
          for (j = 0; j < max; j++) {
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;

            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
          }
        }

        var acc = this.jpoint(null, null, null);
        var tmp = this._wnafT4;
        for (i = max; i >= 0; i--) {
          var k = 0;

          while (i >= 0) {
            var zero = true;
            for (j = 0; j < len; j++) {
              tmp[j] = naf[j][i] | 0;
              if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
          }
          if (i >= 0) k++;
          acc = acc.dblp(k);
          if (i < 0) break;

          for (j = 0; j < len; j++) {
            var z = tmp[j];
            p;
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][(z - 1) >> 1];
            else if (z < 0) p = wnd[j][(-z - 1) >> 1].neg();

            if (p.type === "affine") acc = acc.mixedAdd(p);
            else acc = acc.add(p);
          }
        }
        // Zeroify references
        for (i = 0; i < len; i++) wnd[i] = null;

        if (jacobianResult) return acc;
        else return acc.toP();
      };

      function BasePoint(curve, type) {
        this.curve = curve;
        this.type = type;
        this.precomputed = null;
      }
      BaseCurve.BasePoint = BasePoint;

      BasePoint.prototype.eq = function eq(/*other*/) {
        throw new Error("Not implemented");
      };

      BasePoint.prototype.validate = function validate() {
        return this.curve.validate(this);
      };

      BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
        bytes = utils.toArray(bytes, enc);

        var len = this.p.byteLength();

        // uncompressed, hybrid-odd, hybrid-even
        if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
          if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);
          else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);

          var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));

          return res;
        } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
          return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
        }
        throw new Error("Unknown point format");
      };

      BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
        return this.encode(enc, true);
      };

      BasePoint.prototype._encode = function _encode(compact) {
        var len = this.curve.p.byteLength();
        var x = this.getX().toArray("be", len);

        if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);

        return [0x04].concat(x, this.getY().toArray("be", len));
      };

      BasePoint.prototype.encode = function encode(enc, compact) {
        return utils.encode(this._encode(compact), enc);
      };

      BasePoint.prototype.precompute = function precompute(power) {
        if (this.precomputed) return this;

        var precomputed = {
          doubles: null,
          naf: null,
          beta: null,
        };
        precomputed.naf = this._getNAFPoints(8);
        precomputed.doubles = this._getDoubles(4, power);
        precomputed.beta = this._getBeta();
        this.precomputed = precomputed;

        return this;
      };

      BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
        if (!this.precomputed) return false;

        var doubles = this.precomputed.doubles;
        if (!doubles) return false;

        return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
      };

      BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
        if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;

        var doubles = [this];
        var acc = this;
        for (var i = 0; i < power; i += step) {
          for (var j = 0; j < step; j++) acc = acc.dbl();
          doubles.push(acc);
        }
        return {
          step: step,
          points: doubles,
        };
      };

      BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
        if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;

        var res = [this];
        var max = (1 << wnd) - 1;
        var dbl = max === 1 ? null : this.dbl();
        for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);
        return {
          wnd: wnd,
          points: res,
        };
      };

      BasePoint.prototype._getBeta = function _getBeta() {
        return null;
      };

      BasePoint.prototype.dblp = function dblp(k) {
        var r = this;
        for (var i = 0; i < k; i++) r = r.dbl();
        return r;
      };

      /***/
    },

    /***/ 1138: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var utils = __webpack_require__(953);
      var BN = __webpack_require__(3550);
      var inherits = __webpack_require__(5717);
      var Base = __webpack_require__(4918);

      var assert = utils.assert;

      function EdwardsCurve(conf) {
        // NOTE: Important as we are creating point in Base.call()
        this.twisted = (conf.a | 0) !== 1;
        this.mOneA = this.twisted && (conf.a | 0) === -1;
        this.extended = this.mOneA;

        Base.call(this, "edwards", conf);

        this.a = new BN(conf.a, 16).umod(this.red.m);
        this.a = this.a.toRed(this.red);
        this.c = new BN(conf.c, 16).toRed(this.red);
        this.c2 = this.c.redSqr();
        this.d = new BN(conf.d, 16).toRed(this.red);
        this.dd = this.d.redAdd(this.d);

        assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
        this.oneC = (conf.c | 0) === 1;
      }
      inherits(EdwardsCurve, Base);
      module.exports = EdwardsCurve;

      EdwardsCurve.prototype._mulA = function _mulA(num) {
        if (this.mOneA) return num.redNeg();
        else return this.a.redMul(num);
      };

      EdwardsCurve.prototype._mulC = function _mulC(num) {
        if (this.oneC) return num;
        else return this.c.redMul(num);
      };

      // Just for compatibility with Short curve
      EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
        return this.point(x, y, z, t);
      };

      EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
        x = new BN(x, 16);
        if (!x.red) x = x.toRed(this.red);

        var x2 = x.redSqr();
        var rhs = this.c2.redSub(this.a.redMul(x2));
        var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

        var y2 = rhs.redMul(lhs.redInvm());
        var y = y2.redSqrt();
        if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");

        var isOdd = y.fromRed().isOdd();
        if ((odd && !isOdd) || (!odd && isOdd)) y = y.redNeg();

        return this.point(x, y);
      };

      EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
        y = new BN(y, 16);
        if (!y.red) y = y.toRed(this.red);

        // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
        var y2 = y.redSqr();
        var lhs = y2.redSub(this.c2);
        var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
        var x2 = lhs.redMul(rhs.redInvm());

        if (x2.cmp(this.zero) === 0) {
          if (odd) throw new Error("invalid point");
          else return this.point(this.zero, y);
        }

        var x = x2.redSqrt();
        if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error("invalid point");

        if (x.fromRed().isOdd() !== odd) x = x.redNeg();

        return this.point(x, y);
      };

      EdwardsCurve.prototype.validate = function validate(point) {
        if (point.isInfinity()) return true;

        // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
        point.normalize();

        var x2 = point.x.redSqr();
        var y2 = point.y.redSqr();
        var lhs = x2.redMul(this.a).redAdd(y2);
        var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

        return lhs.cmp(rhs) === 0;
      };

      function Point(curve, x, y, z, t) {
        Base.BasePoint.call(this, curve, "projective");
        if (x === null && y === null && z === null) {
          this.x = this.curve.zero;
          this.y = this.curve.one;
          this.z = this.curve.one;
          this.t = this.curve.zero;
          this.zOne = true;
        } else {
          this.x = new BN(x, 16);
          this.y = new BN(y, 16);
          this.z = z ? new BN(z, 16) : this.curve.one;
          this.t = t && new BN(t, 16);
          if (!this.x.red) this.x = this.x.toRed(this.curve.red);
          if (!this.y.red) this.y = this.y.toRed(this.curve.red);
          if (!this.z.red) this.z = this.z.toRed(this.curve.red);
          if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
          this.zOne = this.z === this.curve.one;

          // Use extended coordinates
          if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
          }
        }
      }
      inherits(Point, Base.BasePoint);

      EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
        return Point.fromJSON(this, obj);
      };

      EdwardsCurve.prototype.point = function point(x, y, z, t) {
        return new Point(this, x, y, z, t);
      };

      Point.fromJSON = function fromJSON(curve, obj) {
        return new Point(curve, obj[0], obj[1], obj[2]);
      };

      Point.prototype.inspect = function inspect() {
        if (this.isInfinity()) return "<EC Point Infinity>";
        return (
          "<EC Point x: " +
          this.x.fromRed().toString(16, 2) +
          " y: " +
          this.y.fromRed().toString(16, 2) +
          " z: " +
          this.z.fromRed().toString(16, 2) +
          ">"
        );
      };

      Point.prototype.isInfinity = function isInfinity() {
        // XXX This code assumes that zero is always zero in red
        return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || (this.zOne && this.y.cmp(this.curve.c) === 0));
      };

      Point.prototype._extDbl = function _extDbl() {
        // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
        //     #doubling-dbl-2008-hwcd
        // 4M + 4S

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = 2 * Z1^2
        var c = this.z.redSqr();
        c = c.redIAdd(c);
        // D = a * A
        var d = this.curve._mulA(a);
        // E = (X1 + Y1)^2 - A - B
        var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
        // G = D + B
        var g = d.redAdd(b);
        // F = G - C
        var f = g.redSub(c);
        // H = D - B
        var h = d.redSub(b);
        // X3 = E * F
        var nx = e.redMul(f);
        // Y3 = G * H
        var ny = g.redMul(h);
        // T3 = E * H
        var nt = e.redMul(h);
        // Z3 = F * G
        var nz = f.redMul(g);
        return this.curve.point(nx, ny, nz, nt);
      };

      Point.prototype._projDbl = function _projDbl() {
        // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
        //     #doubling-dbl-2008-bbjlp
        //     #doubling-dbl-2007-bl
        // and others
        // Generally 3M + 4S or 2M + 4S

        // B = (X1 + Y1)^2
        var b = this.x.redAdd(this.y).redSqr();
        // C = X1^2
        var c = this.x.redSqr();
        // D = Y1^2
        var d = this.y.redSqr();

        var nx;
        var ny;
        var nz;
        var e;
        var h;
        var j;
        if (this.curve.twisted) {
          // E = a * C
          e = this.curve._mulA(c);
          // F = E + D
          var f = e.redAdd(d);
          if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
          } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
          }
        } else {
          // E = C + D
          e = c.redAdd(d);
          // H = (c * Z1)^2
          h = this.curve._mulC(this.z).redSqr();
          // J = E - 2 * H
          j = e.redSub(h).redSub(h);
          // X3 = c * (B - E) * J
          nx = this.curve._mulC(b.redISub(e)).redMul(j);
          // Y3 = c * E * (C - D)
          ny = this.curve._mulC(e).redMul(c.redISub(d));
          // Z3 = E * J
          nz = e.redMul(j);
        }
        return this.curve.point(nx, ny, nz);
      };

      Point.prototype.dbl = function dbl() {
        if (this.isInfinity()) return this;

        // Double in extended coordinates
        if (this.curve.extended) return this._extDbl();
        else return this._projDbl();
      };

      Point.prototype._extAdd = function _extAdd(p) {
        // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
        //     #addition-add-2008-hwcd-3
        // 8M

        // A = (Y1 - X1) * (Y2 - X2)
        var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
        // B = (Y1 + X1) * (Y2 + X2)
        var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
        // C = T1 * k * T2
        var c = this.t.redMul(this.curve.dd).redMul(p.t);
        // D = Z1 * 2 * Z2
        var d = this.z.redMul(p.z.redAdd(p.z));
        // E = B - A
        var e = b.redSub(a);
        // F = D - C
        var f = d.redSub(c);
        // G = D + C
        var g = d.redAdd(c);
        // H = B + A
        var h = b.redAdd(a);
        // X3 = E * F
        var nx = e.redMul(f);
        // Y3 = G * H
        var ny = g.redMul(h);
        // T3 = E * H
        var nt = e.redMul(h);
        // Z3 = F * G
        var nz = f.redMul(g);
        return this.curve.point(nx, ny, nz, nt);
      };

      Point.prototype._projAdd = function _projAdd(p) {
        // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
        //     #addition-add-2008-bbjlp
        //     #addition-add-2007-bl
        // 10M + 1S

        // A = Z1 * Z2
        var a = this.z.redMul(p.z);
        // B = A^2
        var b = a.redSqr();
        // C = X1 * X2
        var c = this.x.redMul(p.x);
        // D = Y1 * Y2
        var d = this.y.redMul(p.y);
        // E = d * C * D
        var e = this.curve.d.redMul(c).redMul(d);
        // F = B - E
        var f = b.redSub(e);
        // G = B + E
        var g = b.redAdd(e);
        // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
        var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
        var nx = a.redMul(f).redMul(tmp);
        var ny;
        var nz;
        if (this.curve.twisted) {
          // Y3 = A * G * (D - a * C)
          ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
          // Z3 = F * G
          nz = f.redMul(g);
        } else {
          // Y3 = A * G * (D - C)
          ny = a.redMul(g).redMul(d.redSub(c));
          // Z3 = c * F * G
          nz = this.curve._mulC(f).redMul(g);
        }
        return this.curve.point(nx, ny, nz);
      };

      Point.prototype.add = function add(p) {
        if (this.isInfinity()) return p;
        if (p.isInfinity()) return this;

        if (this.curve.extended) return this._extAdd(p);
        else return this._projAdd(p);
      };

      Point.prototype.mul = function mul(k) {
        if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
        else return this.curve._wnafMul(this, k);
      };

      Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
        return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
      };

      Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
        return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
      };

      Point.prototype.normalize = function normalize() {
        if (this.zOne) return this;

        // Normalize coordinates
        var zi = this.z.redInvm();
        this.x = this.x.redMul(zi);
        this.y = this.y.redMul(zi);
        if (this.t) this.t = this.t.redMul(zi);
        this.z = this.curve.one;
        this.zOne = true;
        return this;
      };

      Point.prototype.neg = function neg() {
        return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
      };

      Point.prototype.getX = function getX() {
        this.normalize();
        return this.x.fromRed();
      };

      Point.prototype.getY = function getY() {
        this.normalize();
        return this.y.fromRed();
      };

      Point.prototype.eq = function eq(other) {
        return this === other || (this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0);
      };

      Point.prototype.eqXToP = function eqXToP(x) {
        var rx = x.toRed(this.curve.red).redMul(this.z);
        if (this.x.cmp(rx) === 0) return true;

        var xc = x.clone();
        var t = this.curve.redN.redMul(this.z);
        for (;;) {
          xc.iadd(this.curve.n);
          if (xc.cmp(this.curve.p) >= 0) return false;

          rx.redIAdd(t);
          if (this.x.cmp(rx) === 0) return true;
        }
      };

      // Compatibility with BaseCurve
      Point.prototype.toP = Point.prototype.normalize;
      Point.prototype.mixedAdd = Point.prototype.add;

      /***/
    },

    /***/ 8254: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";

      var curve = exports;

      curve.base = __webpack_require__(4918);
      curve.short = __webpack_require__(6673);
      curve.mont = __webpack_require__(2881);
      curve.edwards = __webpack_require__(1138);

      /***/
    },

    /***/ 2881: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var BN = __webpack_require__(3550);
      var inherits = __webpack_require__(5717);
      var Base = __webpack_require__(4918);

      var utils = __webpack_require__(953);

      function MontCurve(conf) {
        Base.call(this, "mont", conf);

        this.a = new BN(conf.a, 16).toRed(this.red);
        this.b = new BN(conf.b, 16).toRed(this.red);
        this.i4 = new BN(4).toRed(this.red).redInvm();
        this.two = new BN(2).toRed(this.red);
        this.a24 = this.i4.redMul(this.a.redAdd(this.two));
      }
      inherits(MontCurve, Base);
      module.exports = MontCurve;

      MontCurve.prototype.validate = function validate(point) {
        var x = point.normalize().x;
        var x2 = x.redSqr();
        var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
        var y = rhs.redSqrt();

        return y.redSqr().cmp(rhs) === 0;
      };

      function Point(curve, x, z) {
        Base.BasePoint.call(this, curve, "projective");
        if (x === null && z === null) {
          this.x = this.curve.one;
          this.z = this.curve.zero;
        } else {
          this.x = new BN(x, 16);
          this.z = new BN(z, 16);
          if (!this.x.red) this.x = this.x.toRed(this.curve.red);
          if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        }
      }
      inherits(Point, Base.BasePoint);

      MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
        return this.point(utils.toArray(bytes, enc), 1);
      };

      MontCurve.prototype.point = function point(x, z) {
        return new Point(this, x, z);
      };

      MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
        return Point.fromJSON(this, obj);
      };

      Point.prototype.precompute = function precompute() {
        // No-op
      };

      Point.prototype._encode = function _encode() {
        return this.getX().toArray("be", this.curve.p.byteLength());
      };

      Point.fromJSON = function fromJSON(curve, obj) {
        return new Point(curve, obj[0], obj[1] || curve.one);
      };

      Point.prototype.inspect = function inspect() {
        if (this.isInfinity()) return "<EC Point Infinity>";
        return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " z: " + this.z.fromRed().toString(16, 2) + ">";
      };

      Point.prototype.isInfinity = function isInfinity() {
        // XXX This code assumes that zero is always zero in red
        return this.z.cmpn(0) === 0;
      };

      Point.prototype.dbl = function dbl() {
        // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
        // 2M + 2S + 4A

        // A = X1 + Z1
        var a = this.x.redAdd(this.z);
        // AA = A^2
        var aa = a.redSqr();
        // B = X1 - Z1
        var b = this.x.redSub(this.z);
        // BB = B^2
        var bb = b.redSqr();
        // C = AA - BB
        var c = aa.redSub(bb);
        // X3 = AA * BB
        var nx = aa.redMul(bb);
        // Z3 = C * (BB + A24 * C)
        var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
        return this.curve.point(nx, nz);
      };

      Point.prototype.add = function add() {
        throw new Error("Not supported on Montgomery curve");
      };

      Point.prototype.diffAdd = function diffAdd(p, diff) {
        // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
        // 4M + 2S + 6A

        // A = X2 + Z2
        var a = this.x.redAdd(this.z);
        // B = X2 - Z2
        var b = this.x.redSub(this.z);
        // C = X3 + Z3
        var c = p.x.redAdd(p.z);
        // D = X3 - Z3
        var d = p.x.redSub(p.z);
        // DA = D * A
        var da = d.redMul(a);
        // CB = C * B
        var cb = c.redMul(b);
        // X5 = Z1 * (DA + CB)^2
        var nx = diff.z.redMul(da.redAdd(cb).redSqr());
        // Z5 = X1 * (DA - CB)^2
        var nz = diff.x.redMul(da.redISub(cb).redSqr());
        return this.curve.point(nx, nz);
      };

      Point.prototype.mul = function mul(k) {
        var t = k.clone();
        var a = this; // (N / 2) * Q + Q
        var b = this.curve.point(null, null); // (N / 2) * Q
        var c = this; // Q

        for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) bits.push(t.andln(1));

        for (var i = bits.length - 1; i >= 0; i--) {
          if (bits[i] === 0) {
            // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
            a = a.diffAdd(b, c);
            // N * Q = 2 * ((N / 2) * Q + Q))
            b = b.dbl();
          } else {
            // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
            b = a.diffAdd(b, c);
            // N * Q + Q = 2 * ((N / 2) * Q + Q)
            a = a.dbl();
          }
        }
        return b;
      };

      Point.prototype.mulAdd = function mulAdd() {
        throw new Error("Not supported on Montgomery curve");
      };

      Point.prototype.jumlAdd = function jumlAdd() {
        throw new Error("Not supported on Montgomery curve");
      };

      Point.prototype.eq = function eq(other) {
        return this.getX().cmp(other.getX()) === 0;
      };

      Point.prototype.normalize = function normalize() {
        this.x = this.x.redMul(this.z.redInvm());
        this.z = this.curve.one;
        return this;
      };

      Point.prototype.getX = function getX() {
        // Normalize coordinates
        this.normalize();

        return this.x.fromRed();
      };

      /***/
    },

    /***/ 6673: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var utils = __webpack_require__(953);
      var BN = __webpack_require__(3550);
      var inherits = __webpack_require__(5717);
      var Base = __webpack_require__(4918);

      var assert = utils.assert;

      function ShortCurve(conf) {
        Base.call(this, "short", conf);

        this.a = new BN(conf.a, 16).toRed(this.red);
        this.b = new BN(conf.b, 16).toRed(this.red);
        this.tinv = this.two.redInvm();

        this.zeroA = this.a.fromRed().cmpn(0) === 0;
        this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

        // If the curve is endomorphic, precalculate beta and lambda
        this.endo = this._getEndomorphism(conf);
        this._endoWnafT1 = new Array(4);
        this._endoWnafT2 = new Array(4);
      }
      inherits(ShortCurve, Base);
      module.exports = ShortCurve;

      ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
        // No efficient endomorphism
        if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;

        // Compute beta and lambda, that lambda * P = (beta * Px; Py)
        var beta;
        var lambda;
        if (conf.beta) {
          beta = new BN(conf.beta, 16).toRed(this.red);
        } else {
          var betas = this._getEndoRoots(this.p);
          // Choose the smallest beta
          beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
          beta = beta.toRed(this.red);
        }
        if (conf.lambda) {
          lambda = new BN(conf.lambda, 16);
        } else {
          // Choose the lambda that is matching selected beta
          var lambdas = this._getEndoRoots(this.n);
          if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
            lambda = lambdas[0];
          } else {
            lambda = lambdas[1];
            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
          }
        }

        // Get basis vectors, used for balanced length-two representation
        var basis;
        if (conf.basis) {
          basis = conf.basis.map(function (vec) {
            return {
              a: new BN(vec.a, 16),
              b: new BN(vec.b, 16),
            };
          });
        } else {
          basis = this._getEndoBasis(lambda);
        }

        return {
          beta: beta,
          lambda: lambda,
          basis: basis,
        };
      };

      ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
        // Find roots of for x^2 + x + 1 in F
        // Root = (-1 +- Sqrt(-3)) / 2
        //
        var red = num === this.p ? this.red : BN.mont(num);
        var tinv = new BN(2).toRed(red).redInvm();
        var ntinv = tinv.redNeg();

        var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

        var l1 = ntinv.redAdd(s).fromRed();
        var l2 = ntinv.redSub(s).fromRed();
        return [l1, l2];
      };

      ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
        // aprxSqrt >= sqrt(this.n)
        var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

        // 3.74
        // Run EGCD, until r(L + 1) < aprxSqrt
        var u = lambda;
        var v = this.n.clone();
        var x1 = new BN(1);
        var y1 = new BN(0);
        var x2 = new BN(0);
        var y2 = new BN(1);

        // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
        var a0;
        var b0;
        // First vector
        var a1;
        var b1;
        // Second vector
        var a2;
        var b2;

        var prevR;
        var i = 0;
        var r;
        var x;
        while (u.cmpn(0) !== 0) {
          var q = v.div(u);
          r = v.sub(q.mul(u));
          x = x2.sub(q.mul(x1));
          var y = y2.sub(q.mul(y1));

          if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
          } else if (a1 && ++i === 2) {
            break;
          }
          prevR = r;

          v = u;
          u = r;
          x2 = x1;
          x1 = x;
          y2 = y1;
          y1 = y;
        }
        a2 = r.neg();
        b2 = x;

        var len1 = a1.sqr().add(b1.sqr());
        var len2 = a2.sqr().add(b2.sqr());
        if (len2.cmp(len1) >= 0) {
          a2 = a0;
          b2 = b0;
        }

        // Normalize signs
        if (a1.negative) {
          a1 = a1.neg();
          b1 = b1.neg();
        }
        if (a2.negative) {
          a2 = a2.neg();
          b2 = b2.neg();
        }

        return [
          { a: a1, b: b1 },
          { a: a2, b: b2 },
        ];
      };

      ShortCurve.prototype._endoSplit = function _endoSplit(k) {
        var basis = this.endo.basis;
        var v1 = basis[0];
        var v2 = basis[1];

        var c1 = v2.b.mul(k).divRound(this.n);
        var c2 = v1.b.neg().mul(k).divRound(this.n);

        var p1 = c1.mul(v1.a);
        var p2 = c2.mul(v2.a);
        var q1 = c1.mul(v1.b);
        var q2 = c2.mul(v2.b);

        // Calculate answer
        var k1 = k.sub(p1).sub(p2);
        var k2 = q1.add(q2).neg();
        return { k1: k1, k2: k2 };
      };

      ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
        x = new BN(x, 16);
        if (!x.red) x = x.toRed(this.red);

        var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
        var y = y2.redSqrt();
        if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error("invalid point");

        // XXX Is there any way to tell if the number is odd without converting it
        // to non-red form?
        var isOdd = y.fromRed().isOdd();
        if ((odd && !isOdd) || (!odd && isOdd)) y = y.redNeg();

        return this.point(x, y);
      };

      ShortCurve.prototype.validate = function validate(point) {
        if (point.inf) return true;

        var x = point.x;
        var y = point.y;

        var ax = this.a.redMul(x);
        var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
        return y.redSqr().redISub(rhs).cmpn(0) === 0;
      };

      ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
        var npoints = this._endoWnafT1;
        var ncoeffs = this._endoWnafT2;
        for (var i = 0; i < points.length; i++) {
          var split = this._endoSplit(coeffs[i]);
          var p = points[i];
          var beta = p._getBeta();

          if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
          }
          if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
          }

          npoints[i * 2] = p;
          npoints[i * 2 + 1] = beta;
          ncoeffs[i * 2] = split.k1;
          ncoeffs[i * 2 + 1] = split.k2;
        }
        var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

        // Clean-up references to points and coefficients
        for (var j = 0; j < i * 2; j++) {
          npoints[j] = null;
          ncoeffs[j] = null;
        }
        return res;
      };

      function Point(curve, x, y, isRed) {
        Base.BasePoint.call(this, curve, "affine");
        if (x === null && y === null) {
          this.x = null;
          this.y = null;
          this.inf = true;
        } else {
          this.x = new BN(x, 16);
          this.y = new BN(y, 16);
          // Force redgomery representation when loading from JSON
          if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
          }
          if (!this.x.red) this.x = this.x.toRed(this.curve.red);
          if (!this.y.red) this.y = this.y.toRed(this.curve.red);
          this.inf = false;
        }
      }
      inherits(Point, Base.BasePoint);

      ShortCurve.prototype.point = function point(x, y, isRed) {
        return new Point(this, x, y, isRed);
      };

      ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
        return Point.fromJSON(this, obj, red);
      };

      Point.prototype._getBeta = function _getBeta() {
        if (!this.curve.endo) return;

        var pre = this.precomputed;
        if (pre && pre.beta) return pre.beta;

        var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
        if (pre) {
          var curve = this.curve;
          var endoMul = function (p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
          };
          pre.beta = beta;
          beta.precomputed = {
            beta: null,
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(endoMul),
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(endoMul),
            },
          };
        }
        return beta;
      };

      Point.prototype.toJSON = function toJSON() {
        if (!this.precomputed) return [this.x, this.y];

        return [
          this.x,
          this.y,
          this.precomputed && {
            doubles: this.precomputed.doubles && {
              step: this.precomputed.doubles.step,
              points: this.precomputed.doubles.points.slice(1),
            },
            naf: this.precomputed.naf && {
              wnd: this.precomputed.naf.wnd,
              points: this.precomputed.naf.points.slice(1),
            },
          },
        ];
      };

      Point.fromJSON = function fromJSON(curve, obj, red) {
        if (typeof obj === "string") obj = JSON.parse(obj);
        var res = curve.point(obj[0], obj[1], red);
        if (!obj[2]) return res;

        function obj2point(obj) {
          return curve.point(obj[0], obj[1], red);
        }

        var pre = obj[2];
        res.precomputed = {
          beta: null,
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [res].concat(pre.doubles.points.map(obj2point)),
          },
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [res].concat(pre.naf.points.map(obj2point)),
          },
        };
        return res;
      };

      Point.prototype.inspect = function inspect() {
        if (this.isInfinity()) return "<EC Point Infinity>";
        return "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
      };

      Point.prototype.isInfinity = function isInfinity() {
        return this.inf;
      };

      Point.prototype.add = function add(p) {
        // O + P = P
        if (this.inf) return p;

        // P + O = P
        if (p.inf) return this;

        // P + P = 2P
        if (this.eq(p)) return this.dbl();

        // P + (-P) = O
        if (this.neg().eq(p)) return this.curve.point(null, null);

        // P + Q = O
        if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);

        var c = this.y.redSub(p.y);
        if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
        var nx = c.redSqr().redISub(this.x).redISub(p.x);
        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };

      Point.prototype.dbl = function dbl() {
        if (this.inf) return this;

        // 2P = O
        var ys1 = this.y.redAdd(this.y);
        if (ys1.cmpn(0) === 0) return this.curve.point(null, null);

        var a = this.curve.a;

        var x2 = this.x.redSqr();
        var dyinv = ys1.redInvm();
        var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

        var nx = c.redSqr().redISub(this.x.redAdd(this.x));
        var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
        return this.curve.point(nx, ny);
      };

      Point.prototype.getX = function getX() {
        return this.x.fromRed();
      };

      Point.prototype.getY = function getY() {
        return this.y.fromRed();
      };

      Point.prototype.mul = function mul(k) {
        k = new BN(k, 16);
        if (this.isInfinity()) return this;
        else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
        else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);
        else return this.curve._wnafMul(this, k);
      };

      Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
        else return this.curve._wnafMulAdd(1, points, coeffs, 2);
      };

      Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
        var points = [this, p2];
        var coeffs = [k1, k2];
        if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
        else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
      };

      Point.prototype.eq = function eq(p) {
        return this === p || (this.inf === p.inf && (this.inf || (this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0)));
      };

      Point.prototype.neg = function neg(_precompute) {
        if (this.inf) return this;

        var res = this.curve.point(this.x, this.y.redNeg());
        if (_precompute && this.precomputed) {
          var pre = this.precomputed;
          var negate = function (p) {
            return p.neg();
          };
          res.precomputed = {
            naf: pre.naf && {
              wnd: pre.naf.wnd,
              points: pre.naf.points.map(negate),
            },
            doubles: pre.doubles && {
              step: pre.doubles.step,
              points: pre.doubles.points.map(negate),
            },
          };
        }
        return res;
      };

      Point.prototype.toJ = function toJ() {
        if (this.inf) return this.curve.jpoint(null, null, null);

        var res = this.curve.jpoint(this.x, this.y, this.curve.one);
        return res;
      };

      function JPoint(curve, x, y, z) {
        Base.BasePoint.call(this, curve, "jacobian");
        if (x === null && y === null && z === null) {
          this.x = this.curve.one;
          this.y = this.curve.one;
          this.z = new BN(0);
        } else {
          this.x = new BN(x, 16);
          this.y = new BN(y, 16);
          this.z = new BN(z, 16);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);

        this.zOne = this.z === this.curve.one;
      }
      inherits(JPoint, Base.BasePoint);

      ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
        return new JPoint(this, x, y, z);
      };

      JPoint.prototype.toP = function toP() {
        if (this.isInfinity()) return this.curve.point(null, null);

        var zinv = this.z.redInvm();
        var zinv2 = zinv.redSqr();
        var ax = this.x.redMul(zinv2);
        var ay = this.y.redMul(zinv2).redMul(zinv);

        return this.curve.point(ax, ay);
      };

      JPoint.prototype.neg = function neg() {
        return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
      };

      JPoint.prototype.add = function add(p) {
        // O + P = P
        if (this.isInfinity()) return p;

        // P + O = P
        if (p.isInfinity()) return this;

        // 12M + 4S + 7A
        var pz2 = p.z.redSqr();
        var z2 = this.z.redSqr();
        var u1 = this.x.redMul(pz2);
        var u2 = p.x.redMul(z2);
        var s1 = this.y.redMul(pz2.redMul(p.z));
        var s2 = p.y.redMul(z2.redMul(this.z));

        var h = u1.redSub(u2);
        var r = s1.redSub(s2);
        if (h.cmpn(0) === 0) {
          if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
          else return this.dbl();
        }

        var h2 = h.redSqr();
        var h3 = h2.redMul(h);
        var v = u1.redMul(h2);

        var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
        var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(p.z).redMul(h);

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype.mixedAdd = function mixedAdd(p) {
        // O + P = P
        if (this.isInfinity()) return p.toJ();

        // P + O = P
        if (p.isInfinity()) return this;

        // 8M + 3S + 7A
        var z2 = this.z.redSqr();
        var u1 = this.x;
        var u2 = p.x.redMul(z2);
        var s1 = this.y;
        var s2 = p.y.redMul(z2).redMul(this.z);

        var h = u1.redSub(u2);
        var r = s1.redSub(s2);
        if (h.cmpn(0) === 0) {
          if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
          else return this.dbl();
        }

        var h2 = h.redSqr();
        var h3 = h2.redMul(h);
        var v = u1.redMul(h2);

        var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
        var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
        var nz = this.z.redMul(h);

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype.dblp = function dblp(pow) {
        if (pow === 0) return this;
        if (this.isInfinity()) return this;
        if (!pow) return this.dbl();

        var i;
        if (this.curve.zeroA || this.curve.threeA) {
          var r = this;
          for (i = 0; i < pow; i++) r = r.dbl();
          return r;
        }

        // 1M + 2S + 1A + N * (4S + 5M + 8A)
        // N = 1 => 6M + 6S + 9A
        var a = this.curve.a;
        var tinv = this.curve.tinv;

        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();

        // Reuse results
        var jyd = jy.redAdd(jy);
        for (i = 0; i < pow; i++) {
          var jx2 = jx.redSqr();
          var jyd2 = jyd.redSqr();
          var jyd4 = jyd2.redSqr();
          var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

          var t1 = jx.redMul(jyd2);
          var nx = c.redSqr().redISub(t1.redAdd(t1));
          var t2 = t1.redISub(nx);
          var dny = c.redMul(t2);
          dny = dny.redIAdd(dny).redISub(jyd4);
          var nz = jyd.redMul(jz);
          if (i + 1 < pow) jz4 = jz4.redMul(jyd4);

          jx = nx;
          jz = nz;
          jyd = dny;
        }

        return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
      };

      JPoint.prototype.dbl = function dbl() {
        if (this.isInfinity()) return this;

        if (this.curve.zeroA) return this._zeroDbl();
        else if (this.curve.threeA) return this._threeDbl();
        else return this._dbl();
      };

      JPoint.prototype._zeroDbl = function _zeroDbl() {
        var nx;
        var ny;
        var nz;
        // Z = 1
        if (this.zOne) {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
          //     #doubling-mdbl-2007-bl
          // 1M + 5S + 14A

          // XX = X1^2
          var xx = this.x.redSqr();
          // YY = Y1^2
          var yy = this.y.redSqr();
          // YYYY = YY^2
          var yyyy = yy.redSqr();
          // S = 2 * ((X1 + YY)^2 - XX - YYYY)
          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s = s.redIAdd(s);
          // M = 3 * XX + a; a = 0
          var m = xx.redAdd(xx).redIAdd(xx);
          // T = M ^ 2 - 2*S
          var t = m.redSqr().redISub(s).redISub(s);

          // 8 * YYYY
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);

          // X3 = T
          nx = t;
          // Y3 = M * (S - T) - 8 * YYYY
          ny = m.redMul(s.redISub(t)).redISub(yyyy8);
          // Z3 = 2*Y1
          nz = this.y.redAdd(this.y);
        } else {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
          //     #doubling-dbl-2009-l
          // 2M + 5S + 13A

          // A = X1^2
          var a = this.x.redSqr();
          // B = Y1^2
          var b = this.y.redSqr();
          // C = B^2
          var c = b.redSqr();
          // D = 2 * ((X1 + B)^2 - A - C)
          var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
          d = d.redIAdd(d);
          // E = 3 * A
          var e = a.redAdd(a).redIAdd(a);
          // F = E^2
          var f = e.redSqr();

          // 8 * C
          var c8 = c.redIAdd(c);
          c8 = c8.redIAdd(c8);
          c8 = c8.redIAdd(c8);

          // X3 = F - 2 * D
          nx = f.redISub(d).redISub(d);
          // Y3 = E * (D - X3) - 8 * C
          ny = e.redMul(d.redISub(nx)).redISub(c8);
          // Z3 = 2 * Y1 * Z1
          nz = this.y.redMul(this.z);
          nz = nz.redIAdd(nz);
        }

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype._threeDbl = function _threeDbl() {
        var nx;
        var ny;
        var nz;
        // Z = 1
        if (this.zOne) {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
          //     #doubling-mdbl-2007-bl
          // 1M + 5S + 15A

          // XX = X1^2
          var xx = this.x.redSqr();
          // YY = Y1^2
          var yy = this.y.redSqr();
          // YYYY = YY^2
          var yyyy = yy.redSqr();
          // S = 2 * ((X1 + YY)^2 - XX - YYYY)
          var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
          s = s.redIAdd(s);
          // M = 3 * XX + a
          var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
          // T = M^2 - 2 * S
          var t = m.redSqr().redISub(s).redISub(s);
          // X3 = T
          nx = t;
          // Y3 = M * (S - T) - 8 * YYYY
          var yyyy8 = yyyy.redIAdd(yyyy);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          yyyy8 = yyyy8.redIAdd(yyyy8);
          ny = m.redMul(s.redISub(t)).redISub(yyyy8);
          // Z3 = 2 * Y1
          nz = this.y.redAdd(this.y);
        } else {
          // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
          // 3M + 5S

          // delta = Z1^2
          var delta = this.z.redSqr();
          // gamma = Y1^2
          var gamma = this.y.redSqr();
          // beta = X1 * gamma
          var beta = this.x.redMul(gamma);
          // alpha = 3 * (X1 - delta) * (X1 + delta)
          var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
          alpha = alpha.redAdd(alpha).redIAdd(alpha);
          // X3 = alpha^2 - 8 * beta
          var beta4 = beta.redIAdd(beta);
          beta4 = beta4.redIAdd(beta4);
          var beta8 = beta4.redAdd(beta4);
          nx = alpha.redSqr().redISub(beta8);
          // Z3 = (Y1 + Z1)^2 - gamma - delta
          nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
          // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
          var ggamma8 = gamma.redSqr();
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ggamma8 = ggamma8.redIAdd(ggamma8);
          ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
        }

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype._dbl = function _dbl() {
        var a = this.curve.a;

        // 4M + 6S + 10A
        var jx = this.x;
        var jy = this.y;
        var jz = this.z;
        var jz4 = jz.redSqr().redSqr();

        var jx2 = jx.redSqr();
        var jy2 = jy.redSqr();

        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var jxd4 = jx.redAdd(jx);
        jxd4 = jxd4.redIAdd(jxd4);
        var t1 = jxd4.redMul(jy2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);

        var jyd8 = jy2.redSqr();
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        jyd8 = jyd8.redIAdd(jyd8);
        var ny = c.redMul(t2).redISub(jyd8);
        var nz = jy.redAdd(jy).redMul(jz);

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype.trpl = function trpl() {
        if (!this.curve.zeroA) return this.dbl().add(this);

        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
        // 5M + 10S + ...

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // ZZ = Z1^2
        var zz = this.z.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // M = 3 * XX + a * ZZ2; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // MM = M^2
        var mm = m.redSqr();
        // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
        var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        e = e.redIAdd(e);
        e = e.redAdd(e).redIAdd(e);
        e = e.redISub(mm);
        // EE = E^2
        var ee = e.redSqr();
        // T = 16*YYYY
        var t = yyyy.redIAdd(yyyy);
        t = t.redIAdd(t);
        t = t.redIAdd(t);
        t = t.redIAdd(t);
        // U = (M + E)^2 - MM - EE - T
        var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
        // X3 = 4 * (X1 * EE - 4 * YY * U)
        var yyu4 = yy.redMul(u);
        yyu4 = yyu4.redIAdd(yyu4);
        yyu4 = yyu4.redIAdd(yyu4);
        var nx = this.x.redMul(ee).redISub(yyu4);
        nx = nx.redIAdd(nx);
        nx = nx.redIAdd(nx);
        // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
        var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        ny = ny.redIAdd(ny);
        // Z3 = (Z1 + E)^2 - ZZ - EE
        var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

        return this.curve.jpoint(nx, ny, nz);
      };

      JPoint.prototype.mul = function mul(k, kbase) {
        k = new BN(k, kbase);

        return this.curve._wnafMul(this, k);
      };

      JPoint.prototype.eq = function eq(p) {
        if (p.type === "affine") return this.eq(p.toJ());

        if (this === p) return true;

        // x1 * z2^2 == x2 * z1^2
        var z2 = this.z.redSqr();
        var pz2 = p.z.redSqr();
        if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;

        // y1 * z2^3 == y2 * z1^3
        var z3 = z2.redMul(this.z);
        var pz3 = pz2.redMul(p.z);
        return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
      };

      JPoint.prototype.eqXToP = function eqXToP(x) {
        var zs = this.z.redSqr();
        var rx = x.toRed(this.curve.red).redMul(zs);
        if (this.x.cmp(rx) === 0) return true;

        var xc = x.clone();
        var t = this.curve.redN.redMul(zs);
        for (;;) {
          xc.iadd(this.curve.n);
          if (xc.cmp(this.curve.p) >= 0) return false;

          rx.redIAdd(t);
          if (this.x.cmp(rx) === 0) return true;
        }
      };

      JPoint.prototype.inspect = function inspect() {
        if (this.isInfinity()) return "<EC JPoint Infinity>";
        return "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
      };

      JPoint.prototype.isInfinity = function isInfinity() {
        // XXX This code assumes that zero is always zero in red
        return this.z.cmpn(0) === 0;
      };

      /***/
    },

    /***/ 5427: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";

      var curves = exports;

      var hash = __webpack_require__(3715);
      var curve = __webpack_require__(8254);
      var utils = __webpack_require__(953);

      var assert = utils.assert;

      function PresetCurve(options) {
        if (options.type === "short") this.curve = new curve.short(options);
        else if (options.type === "edwards") this.curve = new curve.edwards(options);
        else this.curve = new curve.mont(options);
        this.g = this.curve.g;
        this.n = this.curve.n;
        this.hash = options.hash;

        assert(this.g.validate(), "Invalid curve");
        assert(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
      }
      curves.PresetCurve = PresetCurve;

      function defineCurve(name, options) {
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          get: function () {
            var curve = new PresetCurve(options);
            Object.defineProperty(curves, name, {
              configurable: true,
              enumerable: true,
              value: curve,
            });
            return curve;
          },
        });
      }

      defineCurve("p192", {
        type: "short",
        prime: "p192",
        p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
        b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
        n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
        hash: hash.sha256,
        gRed: false,
        g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"],
      });

      defineCurve("p224", {
        type: "short",
        prime: "p224",
        p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
        a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
        b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
        n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
        hash: hash.sha256,
        gRed: false,
        g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"],
      });

      defineCurve("p256", {
        type: "short",
        prime: null,
        p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
        a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
        b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
        n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
        hash: hash.sha256,
        gRed: false,
        g: [
          "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
          "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5",
        ],
      });

      defineCurve("p384", {
        type: "short",
        prime: null,
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " + "fffffffe ffffffff 00000000 00000000 ffffffff",
        a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " + "fffffffe ffffffff 00000000 00000000 fffffffc",
        b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f " + "5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
        n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 " + "f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
        hash: hash.sha384,
        gRed: false,
        g: [
          "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 " + "5502f25d bf55296c 3a545e38 72760ab7",
          "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 " + "0a60b1ce 1d7e819d 7a431d7c 90ea0e5f",
        ],
      });

      defineCurve("p521", {
        type: "short",
        prime: null,
        p:
          "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
          "ffffffff ffffffff ffffffff ffffffff ffffffff",
        a:
          "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff " +
          "ffffffff ffffffff ffffffff ffffffff fffffffc",
        b:
          "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b " +
          "99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd " +
          "3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
        n:
          "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff " +
          "ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 " +
          "f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
        hash: hash.sha512,
        gRed: false,
        g: [
          "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 " +
            "053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 " +
            "a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
          "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 " +
            "579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 " +
            "3fad0761 353c7086 a272c240 88be9476 9fd16650",
        ],
      });

      defineCurve("curve25519", {
        type: "mont",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "76d06",
        b: "1",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash.sha256,
        gRed: false,
        g: ["9"],
      });

      defineCurve("ed25519", {
        type: "edwards",
        prime: "p25519",
        p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
        a: "-1",
        c: "1",
        // -121665 * (121666^(-1)) (mod P)
        d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
        n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
        hash: hash.sha256,
        gRed: false,
        g: [
          "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",

          // 4/5
          "6666666666666666666666666666666666666666666666666666666666666658",
        ],
      });

      var pre;
      try {
        pre = __webpack_require__(1037);
      } catch (e) {
        pre = undefined;
      }

      defineCurve("secp256k1", {
        type: "short",
        prime: "k256",
        p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
        a: "0",
        b: "7",
        n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
        h: "1",
        hash: hash.sha256,

        // Precomputed endomorphism
        beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
        lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
        basis: [
          {
            a: "3086d221a7d46bcde86c90e49284eb15",
            b: "-e4437ed6010e88286f547fa90abfe4c3",
          },
          {
            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
            b: "3086d221a7d46bcde86c90e49284eb15",
          },
        ],

        gRed: false,
        g: [
          "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
          "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
          pre,
        ],
      });

      /***/
    },

    /***/ 7954: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var BN = __webpack_require__(3550);
      var HmacDRBG = __webpack_require__(2156);
      var utils = __webpack_require__(953);
      var curves = __webpack_require__(5427);
      var rand = __webpack_require__(9931);
      var assert = utils.assert;

      var KeyPair = __webpack_require__(1251);
      var Signature = __webpack_require__(611);

      function EC(options) {
        if (!(this instanceof EC)) return new EC(options);

        // Shortcut `elliptic.ec(curve-name)`
        if (typeof options === "string") {
          assert(Object.prototype.hasOwnProperty.call(curves, options), "Unknown curve " + options);

          options = curves[options];
        }

        // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
        if (options instanceof curves.PresetCurve) options = { curve: options };

        this.curve = options.curve.curve;
        this.n = this.curve.n;
        this.nh = this.n.ushrn(1);
        this.g = this.curve.g;

        // Point on curve
        this.g = options.curve.g;
        this.g.precompute(options.curve.n.bitLength() + 1);

        // Hash for function for DRBG
        this.hash = options.hash || options.curve.hash;
      }
      module.exports = EC;

      EC.prototype.keyPair = function keyPair(options) {
        return new KeyPair(this, options);
      };

      EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
        return KeyPair.fromPrivate(this, priv, enc);
      };

      EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
        return KeyPair.fromPublic(this, pub, enc);
      };

      EC.prototype.genKeyPair = function genKeyPair(options) {
        if (!options) options = {};

        // Instantiate Hmac_DRBG
        var drbg = new HmacDRBG({
          hash: this.hash,
          pers: options.pers,
          persEnc: options.persEnc || "utf8",
          entropy: options.entropy || rand(this.hash.hmacStrength),
          entropyEnc: (options.entropy && options.entropyEnc) || "utf8",
          nonce: this.n.toArray(),
        });

        var bytes = this.n.byteLength();
        var ns2 = this.n.sub(new BN(2));
        for (;;) {
          var priv = new BN(drbg.generate(bytes));
          if (priv.cmp(ns2) > 0) continue;

          priv.iaddn(1);
          return this.keyFromPrivate(priv);
        }
      };

      EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
        var delta = msg.byteLength() * 8 - this.n.bitLength();
        if (delta > 0) msg = msg.ushrn(delta);
        if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
        else return msg;
      };

      EC.prototype.sign = function sign(msg, key, enc, options) {
        if (typeof enc === "object") {
          options = enc;
          enc = null;
        }
        if (!options) options = {};

        key = this.keyFromPrivate(key, enc);
        msg = this._truncateToN(new BN(msg, 16));

        // Zero-extend key to provide enough entropy
        var bytes = this.n.byteLength();
        var bkey = key.getPrivate().toArray("be", bytes);

        // Zero-extend nonce to have the same byte size as N
        var nonce = msg.toArray("be", bytes);

        // Instantiate Hmac_DRBG
        var drbg = new HmacDRBG({
          hash: this.hash,
          entropy: bkey,
          nonce: nonce,
          pers: options.pers,
          persEnc: options.persEnc || "utf8",
        });

        // Number of bytes to generate
        var ns1 = this.n.sub(new BN(1));

        for (var iter = 0; ; iter++) {
          var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
          k = this._truncateToN(k, true);
          if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;

          var kp = this.g.mul(k);
          if (kp.isInfinity()) continue;

          var kpX = kp.getX();
          var r = kpX.umod(this.n);
          if (r.cmpn(0) === 0) continue;

          var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
          s = s.umod(this.n);
          if (s.cmpn(0) === 0) continue;

          var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);

          // Use complement of `s`, if it is > `n / 2`
          if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
          }

          return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
        }
      };

      EC.prototype.verify = function verify(msg, signature, key, enc) {
        msg = this._truncateToN(new BN(msg, 16));
        key = this.keyFromPublic(key, enc);
        signature = new Signature(signature, "hex");

        // Perform primitive values validation
        var r = signature.r;
        var s = signature.s;
        if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
        if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;

        // Validate signature
        var sinv = s.invm(this.n);
        var u1 = sinv.mul(msg).umod(this.n);
        var u2 = sinv.mul(r).umod(this.n);
        var p;

        if (!this.curve._maxwellTrick) {
          p = this.g.mulAdd(u1, key.getPublic(), u2);
          if (p.isInfinity()) return false;

          return p.getX().umod(this.n).cmp(r) === 0;
        }

        // NOTE: Greg Maxwell's trick, inspired by:
        // https://git.io/vad3K

        p = this.g.jmulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;

        // Compare `p.x` of Jacobian point with `r`,
        // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
        // inverse of `p.z^2`
        return p.eqXToP(r);
      };

      EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
        assert((3 & j) === j, "The recovery param is more than two bits");
        signature = new Signature(signature, enc);

        var n = this.n;
        var e = new BN(msg);
        var r = signature.r;
        var s = signature.s;

        // A set LSB signifies that the y-coordinate is odd
        var isYOdd = j & 1;
        var isSecondKey = j >> 1;
        if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error("Unable to find sencond key candinate");

        // 1.1. Let x = r + jn.
        if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
        else r = this.curve.pointFromX(r, isYOdd);

        var rInv = signature.r.invm(n);
        var s1 = n.sub(e).mul(rInv).umod(n);
        var s2 = s.mul(rInv).umod(n);

        // 1.6.1 Compute Q = r^-1 (sR -  eG)
        //               Q = r^-1 (sR + -eG)
        return this.g.mulAdd(s1, r, s2);
      };

      EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
        signature = new Signature(signature, enc);
        if (signature.recoveryParam !== null) return signature.recoveryParam;

        for (var i = 0; i < 4; i++) {
          var Qprime;
          try {
            Qprime = this.recoverPubKey(e, signature, i);
          } catch (e) {
            continue;
          }

          if (Qprime.eq(Q)) return i;
        }
        throw new Error("Unable to find valid recovery factor");
      };

      /***/
    },

    /***/ 1251: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var BN = __webpack_require__(3550);
      var utils = __webpack_require__(953);
      var assert = utils.assert;

      function KeyPair(ec, options) {
        this.ec = ec;
        this.priv = null;
        this.pub = null;

        // KeyPair(ec, { priv: ..., pub: ... })
        if (options.priv) this._importPrivate(options.priv, options.privEnc);
        if (options.pub) this._importPublic(options.pub, options.pubEnc);
      }
      module.exports = KeyPair;

      KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
        if (pub instanceof KeyPair) return pub;

        return new KeyPair(ec, {
          pub: pub,
          pubEnc: enc,
        });
      };

      KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
        if (priv instanceof KeyPair) return priv;

        return new KeyPair(ec, {
          priv: priv,
          privEnc: enc,
        });
      };

      KeyPair.prototype.validate = function validate() {
        var pub = this.getPublic();

        if (pub.isInfinity()) return { result: false, reason: "Invalid public key" };
        if (!pub.validate()) return { result: false, reason: "Public key is not a point" };
        if (!pub.mul(this.ec.curve.n).isInfinity()) return { result: false, reason: "Public key * N != O" };

        return { result: true, reason: null };
      };

      KeyPair.prototype.getPublic = function getPublic(compact, enc) {
        // compact is optional argument
        if (typeof compact === "string") {
          enc = compact;
          compact = null;
        }

        if (!this.pub) this.pub = this.ec.g.mul(this.priv);

        if (!enc) return this.pub;

        return this.pub.encode(enc, compact);
      };

      KeyPair.prototype.getPrivate = function getPrivate(enc) {
        if (enc === "hex") return this.priv.toString(16, 2);
        else return this.priv;
      };

      KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
        this.priv = new BN(key, enc || 16);

        // Ensure that the priv won't be bigger than n, otherwise we may fail
        // in fixed multiplication method
        this.priv = this.priv.umod(this.ec.curve.n);
      };

      KeyPair.prototype._importPublic = function _importPublic(key, enc) {
        if (key.x || key.y) {
          // Montgomery points only have an `x` coordinate.
          // Weierstrass/Edwards points on the other hand have both `x` and
          // `y` coordinates.
          if (this.ec.curve.type === "mont") {
            assert(key.x, "Need x coordinate");
          } else if (this.ec.curve.type === "short" || this.ec.curve.type === "edwards") {
            assert(key.x && key.y, "Need both x and y coordinate");
          }
          this.pub = this.ec.curve.point(key.x, key.y);
          return;
        }
        this.pub = this.ec.curve.decodePoint(key, enc);
      };

      // ECDH
      KeyPair.prototype.derive = function derive(pub) {
        if (!pub.validate()) {
          assert(pub.validate(), "public point not validated");
        }
        return pub.mul(this.priv).getX();
      };

      // ECDSA
      KeyPair.prototype.sign = function sign(msg, enc, options) {
        return this.ec.sign(msg, this, enc, options);
      };

      KeyPair.prototype.verify = function verify(msg, signature) {
        return this.ec.verify(msg, signature, this);
      };

      KeyPair.prototype.inspect = function inspect() {
        return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
      };

      /***/
    },

    /***/ 611: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var BN = __webpack_require__(3550);

      var utils = __webpack_require__(953);
      var assert = utils.assert;

      function Signature(options, enc) {
        if (options instanceof Signature) return options;

        if (this._importDER(options, enc)) return;

        assert(options.r && options.s, "Signature without r or s");
        this.r = new BN(options.r, 16);
        this.s = new BN(options.s, 16);
        if (options.recoveryParam === undefined) this.recoveryParam = null;
        else this.recoveryParam = options.recoveryParam;
      }
      module.exports = Signature;

      function Position() {
        this.place = 0;
      }

      function getLength(buf, p) {
        var initial = buf[p.place++];
        if (!(initial & 0x80)) {
          return initial;
        }
        var octetLen = initial & 0xf;

        // Indefinite length or overflow
        if (octetLen === 0 || octetLen > 4) {
          return false;
        }

        var val = 0;
        for (var i = 0, off = p.place; i < octetLen; i++, off++) {
          val <<= 8;
          val |= buf[off];
          val >>>= 0;
        }

        // Leading zeroes
        if (val <= 0x7f) {
          return false;
        }

        p.place = off;
        return val;
      }

      function rmPadding(buf) {
        var i = 0;
        var len = buf.length - 1;
        while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
          i++;
        }
        if (i === 0) {
          return buf;
        }
        return buf.slice(i);
      }

      Signature.prototype._importDER = function _importDER(data, enc) {
        data = utils.toArray(data, enc);
        var p = new Position();
        if (data[p.place++] !== 0x30) {
          return false;
        }
        var len = getLength(data, p);
        if (len === false) {
          return false;
        }
        if (len + p.place !== data.length) {
          return false;
        }
        if (data[p.place++] !== 0x02) {
          return false;
        }
        var rlen = getLength(data, p);
        if (rlen === false) {
          return false;
        }
        var r = data.slice(p.place, rlen + p.place);
        p.place += rlen;
        if (data[p.place++] !== 0x02) {
          return false;
        }
        var slen = getLength(data, p);
        if (slen === false) {
          return false;
        }
        if (data.length !== slen + p.place) {
          return false;
        }
        var s = data.slice(p.place, slen + p.place);
        if (r[0] === 0) {
          if (r[1] & 0x80) {
            r = r.slice(1);
          } else {
            // Leading zeroes
            return false;
          }
        }
        if (s[0] === 0) {
          if (s[1] & 0x80) {
            s = s.slice(1);
          } else {
            // Leading zeroes
            return false;
          }
        }

        this.r = new BN(r);
        this.s = new BN(s);
        this.recoveryParam = null;

        return true;
      };

      function constructLength(arr, len) {
        if (len < 0x80) {
          arr.push(len);
          return;
        }
        var octets = 1 + ((Math.log(len) / Math.LN2) >>> 3);
        arr.push(octets | 0x80);
        while (--octets) {
          arr.push((len >>> (octets << 3)) & 0xff);
        }
        arr.push(len);
      }

      Signature.prototype.toDER = function toDER(enc) {
        var r = this.r.toArray();
        var s = this.s.toArray();

        // Pad values
        if (r[0] & 0x80) r = [0].concat(r);
        // Pad values
        if (s[0] & 0x80) s = [0].concat(s);

        r = rmPadding(r);
        s = rmPadding(s);

        while (!s[0] && !(s[1] & 0x80)) {
          s = s.slice(1);
        }
        var arr = [0x02];
        constructLength(arr, r.length);
        arr = arr.concat(r);
        arr.push(0x02);
        constructLength(arr, s.length);
        var backHalf = arr.concat(s);
        var res = [0x30];
        constructLength(res, backHalf.length);
        res = res.concat(backHalf);
        return utils.encode(res, enc);
      };

      /***/
    },

    /***/ 5980: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var hash = __webpack_require__(3715);
      var curves = __webpack_require__(5427);
      var utils = __webpack_require__(953);
      var assert = utils.assert;
      var parseBytes = utils.parseBytes;
      var KeyPair = __webpack_require__(9087);
      var Signature = __webpack_require__(3622);

      function EDDSA(curve) {
        assert(curve === "ed25519", "only tested with ed25519 so far");

        if (!(this instanceof EDDSA)) return new EDDSA(curve);

        curve = curves[curve].curve;
        this.curve = curve;
        this.g = curve.g;
        this.g.precompute(curve.n.bitLength() + 1);

        this.pointClass = curve.point().constructor;
        this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
        this.hash = hash.sha512;
      }

      module.exports = EDDSA;

      /**
       * @param {Array|String} message - message bytes
       * @param {Array|String|KeyPair} secret - secret bytes or a keypair
       * @returns {Signature} - signature
       */
      EDDSA.prototype.sign = function sign(message, secret) {
        message = parseBytes(message);
        var key = this.keyFromSecret(secret);
        var r = this.hashInt(key.messagePrefix(), message);
        var R = this.g.mul(r);
        var Rencoded = this.encodePoint(R);
        var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
        var S = r.add(s_).umod(this.curve.n);
        return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
      };

      /**
       * @param {Array} message - message bytes
       * @param {Array|String|Signature} sig - sig bytes
       * @param {Array|String|Point|KeyPair} pub - public key
       * @returns {Boolean} - true if public key matches sig of message
       */
      EDDSA.prototype.verify = function verify(message, sig, pub) {
        message = parseBytes(message);
        sig = this.makeSignature(sig);
        var key = this.keyFromPublic(pub);
        var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
        var SG = this.g.mul(sig.S());
        var RplusAh = sig.R().add(key.pub().mul(h));
        return RplusAh.eq(SG);
      };

      EDDSA.prototype.hashInt = function hashInt() {
        var hash = this.hash();
        for (var i = 0; i < arguments.length; i++) hash.update(arguments[i]);
        return utils.intFromLE(hash.digest()).umod(this.curve.n);
      };

      EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
        return KeyPair.fromPublic(this, pub);
      };

      EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
        return KeyPair.fromSecret(this, secret);
      };

      EDDSA.prototype.makeSignature = function makeSignature(sig) {
        if (sig instanceof Signature) return sig;
        return new Signature(this, sig);
      };

      /**
       * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
       *
       * EDDSA defines methods for encoding and decoding points and integers. These are
       * helper convenience methods, that pass along to utility functions implied
       * parameters.
       *
       */
      EDDSA.prototype.encodePoint = function encodePoint(point) {
        var enc = point.getY().toArray("le", this.encodingLength);
        enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
        return enc;
      };

      EDDSA.prototype.decodePoint = function decodePoint(bytes) {
        bytes = utils.parseBytes(bytes);

        var lastIx = bytes.length - 1;
        var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
        var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

        var y = utils.intFromLE(normed);
        return this.curve.pointFromY(y, xIsOdd);
      };

      EDDSA.prototype.encodeInt = function encodeInt(num) {
        return num.toArray("le", this.encodingLength);
      };

      EDDSA.prototype.decodeInt = function decodeInt(bytes) {
        return utils.intFromLE(bytes);
      };

      EDDSA.prototype.isPoint = function isPoint(val) {
        return val instanceof this.pointClass;
      };

      /***/
    },

    /***/ 9087: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var utils = __webpack_require__(953);
      var assert = utils.assert;
      var parseBytes = utils.parseBytes;
      var cachedProperty = utils.cachedProperty;

      /**
       * @param {EDDSA} eddsa - instance
       * @param {Object} params - public/private key parameters
       *
       * @param {Array<Byte>} [params.secret] - secret seed bytes
       * @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
       * @param {Array<Byte>} [params.pub] - public key point encoded as bytes
       *
       */
      function KeyPair(eddsa, params) {
        this.eddsa = eddsa;
        this._secret = parseBytes(params.secret);
        if (eddsa.isPoint(params.pub)) this._pub = params.pub;
        else this._pubBytes = parseBytes(params.pub);
      }

      KeyPair.fromPublic = function fromPublic(eddsa, pub) {
        if (pub instanceof KeyPair) return pub;
        return new KeyPair(eddsa, { pub: pub });
      };

      KeyPair.fromSecret = function fromSecret(eddsa, secret) {
        if (secret instanceof KeyPair) return secret;
        return new KeyPair(eddsa, { secret: secret });
      };

      KeyPair.prototype.secret = function secret() {
        return this._secret;
      };

      cachedProperty(KeyPair, "pubBytes", function pubBytes() {
        return this.eddsa.encodePoint(this.pub());
      });

      cachedProperty(KeyPair, "pub", function pub() {
        if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
        return this.eddsa.g.mul(this.priv());
      });

      cachedProperty(KeyPair, "privBytes", function privBytes() {
        var eddsa = this.eddsa;
        var hash = this.hash();
        var lastIx = eddsa.encodingLength - 1;

        var a = hash.slice(0, eddsa.encodingLength);
        a[0] &= 248;
        a[lastIx] &= 127;
        a[lastIx] |= 64;

        return a;
      });

      cachedProperty(KeyPair, "priv", function priv() {
        return this.eddsa.decodeInt(this.privBytes());
      });

      cachedProperty(KeyPair, "hash", function hash() {
        return this.eddsa.hash().update(this.secret()).digest();
      });

      cachedProperty(KeyPair, "messagePrefix", function messagePrefix() {
        return this.hash().slice(this.eddsa.encodingLength);
      });

      KeyPair.prototype.sign = function sign(message) {
        assert(this._secret, "KeyPair can only verify");
        return this.eddsa.sign(message, this);
      };

      KeyPair.prototype.verify = function verify(message, sig) {
        return this.eddsa.verify(message, sig, this);
      };

      KeyPair.prototype.getSecret = function getSecret(enc) {
        assert(this._secret, "KeyPair is public only");
        return utils.encode(this.secret(), enc);
      };

      KeyPair.prototype.getPublic = function getPublic(enc) {
        return utils.encode(this.pubBytes(), enc);
      };

      module.exports = KeyPair;

      /***/
    },

    /***/ 3622: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var BN = __webpack_require__(3550);
      var utils = __webpack_require__(953);
      var assert = utils.assert;
      var cachedProperty = utils.cachedProperty;
      var parseBytes = utils.parseBytes;

      /**
       * @param {EDDSA} eddsa - eddsa instance
       * @param {Array<Bytes>|Object} sig -
       * @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
       * @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
       * @param {Array<Bytes>} [sig.Rencoded] - R point encoded
       * @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
       */
      function Signature(eddsa, sig) {
        this.eddsa = eddsa;

        if (typeof sig !== "object") sig = parseBytes(sig);

        if (Array.isArray(sig)) {
          sig = {
            R: sig.slice(0, eddsa.encodingLength),
            S: sig.slice(eddsa.encodingLength),
          };
        }

        assert(sig.R && sig.S, "Signature without R or S");

        if (eddsa.isPoint(sig.R)) this._R = sig.R;
        if (sig.S instanceof BN) this._S = sig.S;

        this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
        this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
      }

      cachedProperty(Signature, "S", function S() {
        return this.eddsa.decodeInt(this.Sencoded());
      });

      cachedProperty(Signature, "R", function R() {
        return this.eddsa.decodePoint(this.Rencoded());
      });

      cachedProperty(Signature, "Rencoded", function Rencoded() {
        return this.eddsa.encodePoint(this.R());
      });

      cachedProperty(Signature, "Sencoded", function Sencoded() {
        return this.eddsa.encodeInt(this.S());
      });

      Signature.prototype.toBytes = function toBytes() {
        return this.Rencoded().concat(this.Sencoded());
      };

      Signature.prototype.toHex = function toHex() {
        return utils.encode(this.toBytes(), "hex").toUpperCase();
      };

      module.exports = Signature;

      /***/
    },

    /***/ 1037: /***/ (module) => {
      module.exports = {
        doubles: {
          step: 4,
          points: [
            ["e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a", "f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821"],
            ["8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508", "11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf"],
            ["175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739", "d3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695"],
            ["363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640", "4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9"],
            ["8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c", "4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36"],
            ["723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda", "96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f"],
            ["eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa", "5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999"],
            ["100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0", "cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09"],
            ["e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d", "9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d"],
            ["feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d", "e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088"],
            ["da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1", "9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d"],
            ["53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0", "5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8"],
            ["8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047", "10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a"],
            ["385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862", "283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453"],
            ["6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7", "7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160"],
            ["3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd", "56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0"],
            ["85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83", "7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6"],
            ["948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a", "53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589"],
            ["6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8", "bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17"],
            ["e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d", "4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda"],
            ["e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725", "7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd"],
            ["213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754", "4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2"],
            ["4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c", "17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6"],
            ["fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6", "6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f"],
            ["76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39", "c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01"],
            ["c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891", "893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3"],
            ["d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b", "febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f"],
            ["b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03", "2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7"],
            ["e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d", "eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78"],
            ["a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070", "7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1"],
            ["90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4", "e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150"],
            ["8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da", "662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82"],
            ["e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11", "1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc"],
            ["8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e", "efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b"],
            ["e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41", "2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51"],
            ["b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef", "67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45"],
            ["d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8", "db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120"],
            ["324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d", "648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84"],
            ["4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96", "35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d"],
            ["9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd", "ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d"],
            ["6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5", "9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8"],
            ["a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266", "40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8"],
            ["7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71", "34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac"],
            ["928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac", "c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f"],
            ["85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751", "1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962"],
            ["ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e", "493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907"],
            ["827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241", "c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec"],
            ["eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3", "be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d"],
            ["e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f", "4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414"],
            ["1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19", "aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd"],
            ["146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be", "b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0"],
            ["fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9", "6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811"],
            ["da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2", "8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1"],
            ["a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13", "7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c"],
            ["174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c", "ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73"],
            ["959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba", "2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd"],
            ["d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151", "e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405"],
            ["64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073", "d99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589"],
            ["8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458", "38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e"],
            ["13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b", "69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27"],
            ["bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366", "d3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1"],
            ["8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa", "40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482"],
            ["8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0", "620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945"],
            ["dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787", "7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573"],
            ["f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e", "ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82"],
          ],
        },
        naf: {
          wnd: 7,
          points: [
            ["f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9", "388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672"],
            ["2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4", "d8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6"],
            ["5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc", "6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da"],
            ["acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe", "cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37"],
            ["774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb", "d984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b"],
            ["f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8", "ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81"],
            ["d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e", "581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58"],
            ["defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34", "4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77"],
            ["2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c", "85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a"],
            ["352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5", "321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c"],
            ["2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f", "2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67"],
            ["9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714", "73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402"],
            ["daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729", "a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55"],
            ["c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db", "2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482"],
            ["6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4", "e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82"],
            ["1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5", "b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396"],
            ["605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479", "2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49"],
            ["62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d", "80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf"],
            ["80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f", "1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a"],
            ["7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb", "d0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7"],
            ["d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9", "eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933"],
            ["49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963", "758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a"],
            ["77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74", "958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6"],
            ["f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530", "e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37"],
            ["463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b", "5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e"],
            ["f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247", "cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6"],
            ["caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1", "cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476"],
            ["2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120", "4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40"],
            ["7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435", "91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61"],
            ["754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18", "673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683"],
            ["e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8", "59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5"],
            ["186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb", "3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b"],
            ["df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f", "55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417"],
            ["5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143", "efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868"],
            ["290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba", "e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a"],
            ["af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45", "f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6"],
            ["766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a", "744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996"],
            ["59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e", "c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e"],
            ["f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8", "e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d"],
            ["7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c", "30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2"],
            ["948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519", "e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e"],
            ["7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab", "100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437"],
            ["3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca", "ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311"],
            ["d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf", "8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4"],
            ["1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610", "68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575"],
            ["733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4", "f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d"],
            ["15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c", "d56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d"],
            ["a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940", "edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629"],
            ["e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980", "a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06"],
            ["311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3", "66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374"],
            ["34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf", "9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee"],
            ["f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63", "4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1"],
            ["d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448", "fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b"],
            ["32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf", "5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661"],
            ["7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5", "8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6"],
            ["ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6", "8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e"],
            ["16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5", "5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d"],
            ["eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99", "f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc"],
            ["78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51", "f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4"],
            ["494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5", "42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c"],
            ["a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5", "204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b"],
            ["c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997", "4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913"],
            ["841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881", "73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154"],
            ["5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5", "39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865"],
            ["36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66", "d2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc"],
            ["336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726", "ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224"],
            ["8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede", "6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e"],
            ["1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94", "60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6"],
            ["85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31", "3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511"],
            ["29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51", "b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b"],
            ["a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252", "ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2"],
            ["4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5", "cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c"],
            ["d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b", "6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3"],
            ["ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4", "322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d"],
            ["af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f", "6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700"],
            ["e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889", "2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4"],
            ["591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246", "b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196"],
            ["11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984", "998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4"],
            ["3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a", "b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257"],
            ["cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030", "bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13"],
            ["c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197", "6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096"],
            ["c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593", "c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38"],
            ["a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef", "21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f"],
            ["347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38", "60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448"],
            ["da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a", "49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a"],
            ["c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111", "5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4"],
            ["4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502", "7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437"],
            ["3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea", "be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7"],
            ["cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26", "8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d"],
            ["b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986", "39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a"],
            ["d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e", "62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54"],
            ["48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4", "25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77"],
            ["dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda", "ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517"],
            ["6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859", "cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10"],
            ["e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f", "f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125"],
            ["eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c", "6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e"],
            ["13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942", "fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1"],
            ["ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a", "1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2"],
            ["b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80", "5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423"],
            ["ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d", "438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8"],
            ["8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1", "cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758"],
            ["52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63", "c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375"],
            ["e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352", "6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d"],
            ["7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193", "ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec"],
            ["5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00", "9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0"],
            ["32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58", "ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c"],
            ["e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7", "d3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4"],
            ["8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8", "c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f"],
            ["4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e", "67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649"],
            ["3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d", "cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826"],
            ["674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b", "299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5"],
            ["d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f", "f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87"],
            ["30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6", "462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b"],
            ["be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297", "62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc"],
            ["93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a", "7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c"],
            ["b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c", "ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f"],
            ["d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52", "4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a"],
            ["d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb", "bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46"],
            ["463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065", "bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f"],
            ["7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917", "603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03"],
            ["74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9", "cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08"],
            ["30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3", "553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8"],
            ["9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57", "712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373"],
            ["176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66", "ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3"],
            ["75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8", "9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8"],
            ["809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721", "9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1"],
            ["1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180", "4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9"],
          ],
        },
      };

      /***/
    },

    /***/ 953: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";

      var utils = exports;
      var BN = __webpack_require__(3550);
      var minAssert = __webpack_require__(9746);
      var minUtils = __webpack_require__(4504);

      utils.assert = minAssert;
      utils.toArray = minUtils.toArray;
      utils.zero2 = minUtils.zero2;
      utils.toHex = minUtils.toHex;
      utils.encode = minUtils.encode;

      // Represent num in a w-NAF form
      function getNAF(num, w, bits) {
        var naf = new Array(Math.max(num.bitLength(), bits) + 1);
        naf.fill(0);

        var ws = 1 << (w + 1);
        var k = num.clone();

        for (var i = 0; i < naf.length; i++) {
          var z;
          var mod = k.andln(ws - 1);
          if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
          } else {
            z = 0;
          }

          naf[i] = z;
          k.iushrn(1);
        }

        return naf;
      }
      utils.getNAF = getNAF;

      // Represent k1, k2 in a Joint Sparse Form
      function getJSF(k1, k2) {
        var jsf = [[], []];

        k1 = k1.clone();
        k2 = k2.clone();
        var d1 = 0;
        var d2 = 0;
        var m8;
        while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
          // First phase
          var m14 = (k1.andln(3) + d1) & 3;
          var m24 = (k2.andln(3) + d2) & 3;
          if (m14 === 3) m14 = -1;
          if (m24 === 3) m24 = -1;
          var u1;
          if ((m14 & 1) === 0) {
            u1 = 0;
          } else {
            m8 = (k1.andln(7) + d1) & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
          }
          jsf[0].push(u1);

          var u2;
          if ((m24 & 1) === 0) {
            u2 = 0;
          } else {
            m8 = (k2.andln(7) + d2) & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
          }
          jsf[1].push(u2);

          // Second phase
          if (2 * d1 === u1 + 1) d1 = 1 - d1;
          if (2 * d2 === u2 + 1) d2 = 1 - d2;
          k1.iushrn(1);
          k2.iushrn(1);
        }

        return jsf;
      }
      utils.getJSF = getJSF;

      function cachedProperty(obj, name, computer) {
        var key = "_" + name;
        obj.prototype[name] = function cachedProperty() {
          return this[key] !== undefined ? this[key] : (this[key] = computer.call(this));
        };
      }
      utils.cachedProperty = cachedProperty;

      function parseBytes(bytes) {
        return typeof bytes === "string" ? utils.toArray(bytes, "hex") : bytes;
      }
      utils.parseBytes = parseBytes;

      function intFromLE(bytes) {
        return new BN(bytes, "hex", "le");
      }
      utils.intFromLE = intFromLE;

      /***/
    },

    /***/ 284: /***/ (module) => {
      var naiveFallback = function () {
        if (typeof self === "object" && self) return self;
        if (typeof window === "object" && window) return window;
        throw new Error("Unable to resolve global `this`");
      };

      module.exports = (function () {
        if (this) return this;

        // Unexpected strict mode (may happen if e.g. bundled into ESM module)

        // Fallback to standard globalThis if available
        if (typeof globalThis === "object" && globalThis) return globalThis;

        // Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis
        // In all ES5+ engines global object inherits from Object.prototype
        // (if you approached one that doesn't please report)
        try {
          Object.defineProperty(Object.prototype, "__global__", {
            get: function () {
              return this;
            },
            configurable: true,
          });
        } catch (error) {
          // Unfortunate case of updates to Object.prototype being restricted
          // via preventExtensions, seal or freeze
          return naiveFallback();
        }
        try {
          // Safari case (window.__global__ works, but __global__ does not)
          if (!__global__) return naiveFallback();
          return __global__;
        } finally {
          delete Object.prototype.__global__;
        }
      })();

      /***/
    },

    /***/ 2702: /***/ function (module, __unused_webpack_exports, __webpack_require__) {
      /* provided dependency */ var process = __webpack_require__(4155);
      /*!
       * @overview es6-promise - a tiny implementation of Promises/A+.
       * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
       * @license   Licensed under MIT license
       *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
       * @version   v4.2.8+1e68dce6
       */

      (function (global, factory) {
        true ? (module.exports = factory()) : 0;
      })(this, function () {
        "use strict";

        function objectOrFunction(x) {
          var type = typeof x;
          return x !== null && (type === "object" || type === "function");
        }

        function isFunction(x) {
          return typeof x === "function";
        }

        var _isArray = void 0;
        if (Array.isArray) {
          _isArray = Array.isArray;
        } else {
          _isArray = function (x) {
            return Object.prototype.toString.call(x) === "[object Array]";
          };
        }

        var isArray = _isArray;

        var len = 0;
        var vertxNext = void 0;
        var customSchedulerFn = void 0;

        var asap = function asap(callback, arg) {
          queue[len] = callback;
          queue[len + 1] = arg;
          len += 2;
          if (len === 2) {
            // If len is 2, that means that we need to schedule an async flush.
            // If additional callbacks are queued before the queue is flushed, they
            // will be processed by this flush that we are scheduling.
            if (customSchedulerFn) {
              customSchedulerFn(flush);
            } else {
              scheduleFlush();
            }
          }
        };

        function setScheduler(scheduleFn) {
          customSchedulerFn = scheduleFn;
        }

        function setAsap(asapFn) {
          asap = asapFn;
        }

        var browserWindow = typeof window !== "undefined" ? window : undefined;
        var browserGlobal = browserWindow || {};
        var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
        var isNode = typeof self === "undefined" && typeof process !== "undefined" && {}.toString.call(process) === "[object process]";

        // test for web worker but not in IE10
        var isWorker = typeof Uint8ClampedArray !== "undefined" && typeof importScripts !== "undefined" && typeof MessageChannel !== "undefined";

        // node
        function useNextTick() {
          // node version 0.10.x displays a deprecation warning when nextTick is used recursively
          // see https://github.com/cujojs/when/issues/410 for details
          return function () {
            return process.nextTick(flush);
          };
        }

        // vertx
        function useVertxTimer() {
          if (typeof vertxNext !== "undefined") {
            return function () {
              vertxNext(flush);
            };
          }

          return useSetTimeout();
        }

        function useMutationObserver() {
          var iterations = 0;
          var observer = new BrowserMutationObserver(flush);
          var node = document.createTextNode("");
          observer.observe(node, { characterData: true });

          return function () {
            node.data = iterations = ++iterations % 2;
          };
        }

        // web worker
        function useMessageChannel() {
          var channel = new MessageChannel();
          channel.port1.onmessage = flush;
          return function () {
            return channel.port2.postMessage(0);
          };
        }

        function useSetTimeout() {
          // Store setTimeout reference so es6-promise will be unaffected by
          // other code modifying setTimeout (like sinon.useFakeTimers())
          var globalSetTimeout = setTimeout;
          return function () {
            return globalSetTimeout(flush, 1);
          };
        }

        var queue = new Array(1000);
        function flush() {
          for (var i = 0; i < len; i += 2) {
            var callback = queue[i];
            var arg = queue[i + 1];

            callback(arg);

            queue[i] = undefined;
            queue[i + 1] = undefined;
          }

          len = 0;
        }

        function attemptVertx() {
          try {
            var vertx = Function("return this")().require("vertx");
            vertxNext = vertx.runOnLoop || vertx.runOnContext;
            return useVertxTimer();
          } catch (e) {
            return useSetTimeout();
          }
        }

        var scheduleFlush = void 0;
        // Decide what async method to use to triggering processing of queued callbacks:
        if (isNode) {
          scheduleFlush = useNextTick();
        } else if (BrowserMutationObserver) {
          scheduleFlush = useMutationObserver();
        } else if (isWorker) {
          scheduleFlush = useMessageChannel();
        } else if (browserWindow === undefined && "function" === "function") {
          scheduleFlush = attemptVertx();
        } else {
          scheduleFlush = useSetTimeout();
        }

        function then(onFulfillment, onRejection) {
          var parent = this;

          var child = new this.constructor(noop);

          if (child[PROMISE_ID] === undefined) {
            makePromise(child);
          }

          var _state = parent._state;

          if (_state) {
            var callback = arguments[_state - 1];
            asap(function () {
              return invokeCallback(_state, child, callback, parent._result);
            });
          } else {
            subscribe(parent, child, onFulfillment, onRejection);
          }

          return child;
        }

        /**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
        function resolve$1(object) {
          /*jshint validthis:true */
          var Constructor = this;

          if (object && typeof object === "object" && object.constructor === Constructor) {
            return object;
          }

          var promise = new Constructor(noop);
          resolve(promise, object);
          return promise;
        }

        var PROMISE_ID = Math.random().toString(36).substring(2);

        function noop() {}

        var PENDING = void 0;
        var FULFILLED = 1;
        var REJECTED = 2;

        function selfFulfillment() {
          return new TypeError("You cannot resolve a promise with itself");
        }

        function cannotReturnOwn() {
          return new TypeError("A promises callback cannot return that same promise.");
        }

        function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
          try {
            then$$1.call(value, fulfillmentHandler, rejectionHandler);
          } catch (e) {
            return e;
          }
        }

        function handleForeignThenable(promise, thenable, then$$1) {
          asap(function (promise) {
            var sealed = false;
            var error = tryThen(
              then$$1,
              thenable,
              function (value) {
                if (sealed) {
                  return;
                }
                sealed = true;
                if (thenable !== value) {
                  resolve(promise, value);
                } else {
                  fulfill(promise, value);
                }
              },
              function (reason) {
                if (sealed) {
                  return;
                }
                sealed = true;

                reject(promise, reason);
              },
              "Settle: " + (promise._label || " unknown promise")
            );

            if (!sealed && error) {
              sealed = true;
              reject(promise, error);
            }
          }, promise);
        }

        function handleOwnThenable(promise, thenable) {
          if (thenable._state === FULFILLED) {
            fulfill(promise, thenable._result);
          } else if (thenable._state === REJECTED) {
            reject(promise, thenable._result);
          } else {
            subscribe(
              thenable,
              undefined,
              function (value) {
                return resolve(promise, value);
              },
              function (reason) {
                return reject(promise, reason);
              }
            );
          }
        }

        function handleMaybeThenable(promise, maybeThenable, then$$1) {
          if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
            handleOwnThenable(promise, maybeThenable);
          } else {
            if (then$$1 === undefined) {
              fulfill(promise, maybeThenable);
            } else if (isFunction(then$$1)) {
              handleForeignThenable(promise, maybeThenable, then$$1);
            } else {
              fulfill(promise, maybeThenable);
            }
          }
        }

        function resolve(promise, value) {
          if (promise === value) {
            reject(promise, selfFulfillment());
          } else if (objectOrFunction(value)) {
            var then$$1 = void 0;
            try {
              then$$1 = value.then;
            } catch (error) {
              reject(promise, error);
              return;
            }
            handleMaybeThenable(promise, value, then$$1);
          } else {
            fulfill(promise, value);
          }
        }

        function publishRejection(promise) {
          if (promise._onerror) {
            promise._onerror(promise._result);
          }

          publish(promise);
        }

        function fulfill(promise, value) {
          if (promise._state !== PENDING) {
            return;
          }

          promise._result = value;
          promise._state = FULFILLED;

          if (promise._subscribers.length !== 0) {
            asap(publish, promise);
          }
        }

        function reject(promise, reason) {
          if (promise._state !== PENDING) {
            return;
          }
          promise._state = REJECTED;
          promise._result = reason;

          asap(publishRejection, promise);
        }

        function subscribe(parent, child, onFulfillment, onRejection) {
          var _subscribers = parent._subscribers;
          var length = _subscribers.length;

          parent._onerror = null;

          _subscribers[length] = child;
          _subscribers[length + FULFILLED] = onFulfillment;
          _subscribers[length + REJECTED] = onRejection;

          if (length === 0 && parent._state) {
            asap(publish, parent);
          }
        }

        function publish(promise) {
          var subscribers = promise._subscribers;
          var settled = promise._state;

          if (subscribers.length === 0) {
            return;
          }

          var child = void 0,
            callback = void 0,
            detail = promise._result;

          for (var i = 0; i < subscribers.length; i += 3) {
            child = subscribers[i];
            callback = subscribers[i + settled];

            if (child) {
              invokeCallback(settled, child, callback, detail);
            } else {
              callback(detail);
            }
          }

          promise._subscribers.length = 0;
        }

        function invokeCallback(settled, promise, callback, detail) {
          var hasCallback = isFunction(callback),
            value = void 0,
            error = void 0,
            succeeded = true;

          if (hasCallback) {
            try {
              value = callback(detail);
            } catch (e) {
              succeeded = false;
              error = e;
            }

            if (promise === value) {
              reject(promise, cannotReturnOwn());
              return;
            }
          } else {
            value = detail;
          }

          if (promise._state !== PENDING) {
            // noop
          } else if (hasCallback && succeeded) {
            resolve(promise, value);
          } else if (succeeded === false) {
            reject(promise, error);
          } else if (settled === FULFILLED) {
            fulfill(promise, value);
          } else if (settled === REJECTED) {
            reject(promise, value);
          }
        }

        function initializePromise(promise, resolver) {
          try {
            resolver(
              function resolvePromise(value) {
                resolve(promise, value);
              },
              function rejectPromise(reason) {
                reject(promise, reason);
              }
            );
          } catch (e) {
            reject(promise, e);
          }
        }

        var id = 0;
        function nextId() {
          return id++;
        }

        function makePromise(promise) {
          promise[PROMISE_ID] = id++;
          promise._state = undefined;
          promise._result = undefined;
          promise._subscribers = [];
        }

        function validationError() {
          return new Error("Array Methods must be provided an Array");
        }

        var Enumerator = (function () {
          function Enumerator(Constructor, input) {
            this._instanceConstructor = Constructor;
            this.promise = new Constructor(noop);

            if (!this.promise[PROMISE_ID]) {
              makePromise(this.promise);
            }

            if (isArray(input)) {
              this.length = input.length;
              this._remaining = input.length;

              this._result = new Array(this.length);

              if (this.length === 0) {
                fulfill(this.promise, this._result);
              } else {
                this.length = this.length || 0;
                this._enumerate(input);
                if (this._remaining === 0) {
                  fulfill(this.promise, this._result);
                }
              }
            } else {
              reject(this.promise, validationError());
            }
          }

          Enumerator.prototype._enumerate = function _enumerate(input) {
            for (var i = 0; this._state === PENDING && i < input.length; i++) {
              this._eachEntry(input[i], i);
            }
          };

          Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
            var c = this._instanceConstructor;
            var resolve$$1 = c.resolve;

            if (resolve$$1 === resolve$1) {
              var _then = void 0;
              var error = void 0;
              var didError = false;
              try {
                _then = entry.then;
              } catch (e) {
                didError = true;
                error = e;
              }

              if (_then === then && entry._state !== PENDING) {
                this._settledAt(entry._state, i, entry._result);
              } else if (typeof _then !== "function") {
                this._remaining--;
                this._result[i] = entry;
              } else if (c === Promise$1) {
                var promise = new c(noop);
                if (didError) {
                  reject(promise, error);
                } else {
                  handleMaybeThenable(promise, entry, _then);
                }
                this._willSettleAt(promise, i);
              } else {
                this._willSettleAt(
                  new c(function (resolve$$1) {
                    return resolve$$1(entry);
                  }),
                  i
                );
              }
            } else {
              this._willSettleAt(resolve$$1(entry), i);
            }
          };

          Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
            var promise = this.promise;

            if (promise._state === PENDING) {
              this._remaining--;

              if (state === REJECTED) {
                reject(promise, value);
              } else {
                this._result[i] = value;
              }
            }

            if (this._remaining === 0) {
              fulfill(promise, this._result);
            }
          };

          Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
            var enumerator = this;

            subscribe(
              promise,
              undefined,
              function (value) {
                return enumerator._settledAt(FULFILLED, i, value);
              },
              function (reason) {
                return enumerator._settledAt(REJECTED, i, reason);
              }
            );
          };

          return Enumerator;
        })();

        /**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
        function all(entries) {
          return new Enumerator(this, entries).promise;
        }

        /**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
        function race(entries) {
          /*jshint validthis:true */
          var Constructor = this;

          if (!isArray(entries)) {
            return new Constructor(function (_, reject) {
              return reject(new TypeError("You must pass an array to race."));
            });
          } else {
            return new Constructor(function (resolve, reject) {
              var length = entries.length;
              for (var i = 0; i < length; i++) {
                Constructor.resolve(entries[i]).then(resolve, reject);
              }
            });
          }
        }

        /**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
        function reject$1(reason) {
          /*jshint validthis:true */
          var Constructor = this;
          var promise = new Constructor(noop);
          reject(promise, reason);
          return promise;
        }

        function needsResolver() {
          throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
        }

        function needsNew() {
          throw new TypeError(
            "Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function."
          );
        }

        /**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {Function} resolver
  Useful for tooling.
  @constructor
*/

        var Promise$1 = (function () {
          function Promise(resolver) {
            this[PROMISE_ID] = nextId();
            this._result = this._state = undefined;
            this._subscribers = [];

            if (noop !== resolver) {
              typeof resolver !== "function" && needsResolver();
              this instanceof Promise ? initializePromise(this, resolver) : needsNew();
            }
          }

          /**
  The primary way of interacting with a promise is through its `then` method,
  which registers callbacks to receive either a promise's eventual value or the
  reason why the promise cannot be fulfilled.
   ```js
  findUser().then(function(user){
    // user is available
  }, function(reason){
    // user is unavailable, and you are given the reason why
  });
  ```
   Chaining
  --------
   The return value of `then` is itself a promise.  This second, 'downstream'
  promise is resolved with the return value of the first promise's fulfillment
  or rejection handler, or rejected if the handler throws an exception.
   ```js
  findUser().then(function (user) {
    return user.name;
  }, function (reason) {
    return 'default name';
  }).then(function (userName) {
    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
    // will be `'default name'`
  });
   findUser().then(function (user) {
    throw new Error('Found user, but still unhappy');
  }, function (reason) {
    throw new Error('`findUser` rejected and we're unhappy');
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
  });
  ```
  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
   ```js
  findUser().then(function (user) {
    throw new PedagogicalException('Upstream error');
  }).then(function (value) {
    // never reached
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // The `PedgagocialException` is propagated all the way down to here
  });
  ```
   Assimilation
  ------------
   Sometimes the value you want to propagate to a downstream promise can only be
  retrieved asynchronously. This can be achieved by returning a promise in the
  fulfillment or rejection handler. The downstream promise will then be pending
  until the returned promise is settled. This is called *assimilation*.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // The user's comments are now available
  });
  ```
   If the assimliated promise rejects, then the downstream promise will also reject.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // If `findCommentsByAuthor` fulfills, we'll have the value here
  }, function (reason) {
    // If `findCommentsByAuthor` rejects, we'll have the reason here
  });
  ```
   Simple Example
  --------------
   Synchronous Example
   ```javascript
  let result;
   try {
    result = findResult();
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
  findResult(function(result, err){
    if (err) {
      // failure
    } else {
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findResult().then(function(result){
    // success
  }, function(reason){
    // failure
  });
  ```
   Advanced Example
  --------------
   Synchronous Example
   ```javascript
  let author, books;
   try {
    author = findAuthor();
    books  = findBooksByAuthor(author);
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
   function foundBooks(books) {
   }
   function failure(reason) {
   }
   findAuthor(function(author, err){
    if (err) {
      failure(err);
      // failure
    } else {
      try {
        findBoooksByAuthor(author, function(books, err) {
          if (err) {
            failure(err);
          } else {
            try {
              foundBooks(books);
            } catch(reason) {
              failure(reason);
            }
          }
        });
      } catch(error) {
        failure(err);
      }
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findAuthor().
    then(findBooksByAuthor).
    then(function(books){
      // found books
  }).catch(function(reason){
    // something went wrong
  });
  ```
   @method then
  @param {Function} onFulfilled
  @param {Function} onRejected
  Useful for tooling.
  @return {Promise}
  */

          /**
  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
  as the catch block of a try/catch statement.
  ```js
  function findAuthor(){
  throw new Error('couldn't find that author');
  }
  // synchronous
  try {
  findAuthor();
  } catch(reason) {
  // something went wrong
  }
  // async with promises
  findAuthor().catch(function(reason){
  // something went wrong
  });
  ```
  @method catch
  @param {Function} onRejection
  Useful for tooling.
  @return {Promise}
  */

          Promise.prototype.catch = function _catch(onRejection) {
            return this.then(null, onRejection);
          };

          /**
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves
  
    Synchronous example:
  
    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }
  
    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuther();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```
  
    Asynchronous example:
  
    ```js
    findAuthor().catch(function(reason){
      return findOtherAuther();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  
    @method finally
    @param {Function} callback
    @return {Promise}
  */

          Promise.prototype.finally = function _finally(callback) {
            var promise = this;
            var constructor = promise.constructor;

            if (isFunction(callback)) {
              return promise.then(
                function (value) {
                  return constructor.resolve(callback()).then(function () {
                    return value;
                  });
                },
                function (reason) {
                  return constructor.resolve(callback()).then(function () {
                    throw reason;
                  });
                }
              );
            }

            return promise.then(callback, callback);
          };

          return Promise;
        })();

        Promise$1.prototype.then = then;
        Promise$1.all = all;
        Promise$1.race = race;
        Promise$1.resolve = resolve$1;
        Promise$1.reject = reject$1;
        Promise$1._setScheduler = setScheduler;
        Promise$1._setAsap = setAsap;
        Promise$1._asap = asap;

        /*global self*/
        function polyfill() {
          var local = void 0;

          if (typeof __webpack_require__.g !== "undefined") {
            local = __webpack_require__.g;
          } else if (typeof self !== "undefined") {
            local = self;
          } else {
            try {
              local = Function("return this")();
            } catch (e) {
              throw new Error("polyfill failed because global object is unavailable in this environment");
            }
          }

          var P = local.Promise;

          if (P) {
            var promiseToString = null;
            try {
              promiseToString = Object.prototype.toString.call(P.resolve());
            } catch (e) {
              // silently ignored
            }

            if (promiseToString === "[object Promise]" && !P.cast) {
              return;
            }
          }

          local.Promise = Promise$1;
        }

        // Strange compat..
        Promise$1.polyfill = polyfill;
        Promise$1.Promise = Promise$1;

        return Promise$1;
      });

      //# sourceMappingURL=es6-promise.map

      /***/
    },

    /***/ 6729: /***/ (module) => {
      "use strict";

      var has = Object.prototype.hasOwnProperty,
        prefix = "~";

      /**
       * Constructor to create a storage for our `EE` objects.
       * An `Events` instance is a plain object whose properties are event names.
       *
       * @constructor
       * @private
       */
      function Events() {}

      //
      // We try to not inherit from `Object.prototype`. In some engines creating an
      // instance in this way is faster than calling `Object.create(null)` directly.
      // If `Object.create(null)` is not supported we prefix the event names with a
      // character to make sure that the built-in object properties are not
      // overridden or used as an attack vector.
      //
      if (Object.create) {
        Events.prototype = Object.create(null);

        //
        // This hack is needed because the `__proto__` property is still inherited in
        // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
        //
        if (!new Events().__proto__) prefix = false;
      }

      /**
       * Representation of a single event listener.
       *
       * @param {Function} fn The listener function.
       * @param {*} context The context to invoke the listener with.
       * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
       * @constructor
       * @private
       */
      function EE(fn, context, once) {
        this.fn = fn;
        this.context = context;
        this.once = once || false;
      }

      /**
       * Add a listener for a given event.
       *
       * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
       * @param {(String|Symbol)} event The event name.
       * @param {Function} fn The listener function.
       * @param {*} context The context to invoke the listener with.
       * @param {Boolean} once Specify if the listener is a one-time listener.
       * @returns {EventEmitter}
       * @private
       */
      function addListener(emitter, event, fn, context, once) {
        if (typeof fn !== "function") {
          throw new TypeError("The listener must be a function");
        }

        var listener = new EE(fn, context || emitter, once),
          evt = prefix ? prefix + event : event;

        if (!emitter._events[evt]) (emitter._events[evt] = listener), emitter._eventsCount++;
        else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
        else emitter._events[evt] = [emitter._events[evt], listener];

        return emitter;
      }

      /**
       * Clear event by name.
       *
       * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
       * @param {(String|Symbol)} evt The Event name.
       * @private
       */
      function clearEvent(emitter, evt) {
        if (--emitter._eventsCount === 0) emitter._events = new Events();
        else delete emitter._events[evt];
      }

      /**
       * Minimal `EventEmitter` interface that is molded against the Node.js
       * `EventEmitter` interface.
       *
       * @constructor
       * @public
       */
      function EventEmitter() {
        this._events = new Events();
        this._eventsCount = 0;
      }

      /**
       * Return an array listing the events for which the emitter has registered
       * listeners.
       *
       * @returns {Array}
       * @public
       */
      EventEmitter.prototype.eventNames = function eventNames() {
        var names = [],
          events,
          name;

        if (this._eventsCount === 0) return names;

        for (name in (events = this._events)) {
          if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
        }

        if (Object.getOwnPropertySymbols) {
          return names.concat(Object.getOwnPropertySymbols(events));
        }

        return names;
      };

      /**
       * Return the listeners registered for a given event.
       *
       * @param {(String|Symbol)} event The event name.
       * @returns {Array} The registered listeners.
       * @public
       */
      EventEmitter.prototype.listeners = function listeners(event) {
        var evt = prefix ? prefix + event : event,
          handlers = this._events[evt];

        if (!handlers) return [];
        if (handlers.fn) return [handlers.fn];

        for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
          ee[i] = handlers[i].fn;
        }

        return ee;
      };

      /**
       * Return the number of listeners listening to a given event.
       *
       * @param {(String|Symbol)} event The event name.
       * @returns {Number} The number of listeners.
       * @public
       */
      EventEmitter.prototype.listenerCount = function listenerCount(event) {
        var evt = prefix ? prefix + event : event,
          listeners = this._events[evt];

        if (!listeners) return 0;
        if (listeners.fn) return 1;
        return listeners.length;
      };

      /**
       * Calls each of the listeners registered for a given event.
       *
       * @param {(String|Symbol)} event The event name.
       * @returns {Boolean} `true` if the event had listeners, else `false`.
       * @public
       */
      EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
        var evt = prefix ? prefix + event : event;

        if (!this._events[evt]) return false;

        var listeners = this._events[evt],
          len = arguments.length,
          args,
          i;

        if (listeners.fn) {
          if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

          switch (len) {
            case 1:
              return listeners.fn.call(listeners.context), true;
            case 2:
              return listeners.fn.call(listeners.context, a1), true;
            case 3:
              return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
              return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
          }

          for (i = 1, args = new Array(len - 1); i < len; i++) {
            args[i - 1] = arguments[i];
          }

          listeners.fn.apply(listeners.context, args);
        } else {
          var length = listeners.length,
            j;

          for (i = 0; i < length; i++) {
            if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

            switch (len) {
              case 1:
                listeners[i].fn.call(listeners[i].context);
                break;
              case 2:
                listeners[i].fn.call(listeners[i].context, a1);
                break;
              case 3:
                listeners[i].fn.call(listeners[i].context, a1, a2);
                break;
              case 4:
                listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                break;
              default:
                if (!args)
                  for (j = 1, args = new Array(len - 1); j < len; j++) {
                    args[j - 1] = arguments[j];
                  }

                listeners[i].fn.apply(listeners[i].context, args);
            }
          }
        }

        return true;
      };

      /**
       * Add a listener for a given event.
       *
       * @param {(String|Symbol)} event The event name.
       * @param {Function} fn The listener function.
       * @param {*} [context=this] The context to invoke the listener with.
       * @returns {EventEmitter} `this`.
       * @public
       */
      EventEmitter.prototype.on = function on(event, fn, context) {
        return addListener(this, event, fn, context, false);
      };

      /**
       * Add a one-time listener for a given event.
       *
       * @param {(String|Symbol)} event The event name.
       * @param {Function} fn The listener function.
       * @param {*} [context=this] The context to invoke the listener with.
       * @returns {EventEmitter} `this`.
       * @public
       */
      EventEmitter.prototype.once = function once(event, fn, context) {
        return addListener(this, event, fn, context, true);
      };

      /**
       * Remove the listeners of a given event.
       *
       * @param {(String|Symbol)} event The event name.
       * @param {Function} fn Only remove the listeners that match this function.
       * @param {*} context Only remove the listeners that have this context.
       * @param {Boolean} once Only remove one-time listeners.
       * @returns {EventEmitter} `this`.
       * @public
       */
      EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
        var evt = prefix ? prefix + event : event;

        if (!this._events[evt]) return this;
        if (!fn) {
          clearEvent(this, evt);
          return this;
        }

        var listeners = this._events[evt];

        if (listeners.fn) {
          if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
            clearEvent(this, evt);
          }
        } else {
          for (var i = 0, events = [], length = listeners.length; i < length; i++) {
            if (listeners[i].fn !== fn || (once && !listeners[i].once) || (context && listeners[i].context !== context)) {
              events.push(listeners[i]);
            }
          }

          //
          // Reset the array, or remove it completely if we have no more listeners.
          //
          if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
          else clearEvent(this, evt);
        }

        return this;
      };

      /**
       * Remove all listeners, or those of the specified event.
       *
       * @param {(String|Symbol)} [event] The event name.
       * @returns {EventEmitter} `this`.
       * @public
       */
      EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
        var evt;

        if (event) {
          evt = prefix ? prefix + event : event;
          if (this._events[evt]) clearEvent(this, evt);
        } else {
          this._events = new Events();
          this._eventsCount = 0;
        }

        return this;
      };

      //
      // Alias methods names because people roll like that.
      //
      EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
      EventEmitter.prototype.addListener = EventEmitter.prototype.on;

      //
      // Expose the prefix.
      //
      EventEmitter.prefixed = prefix;

      //
      // Allow `EventEmitter` to be imported as module namespace.
      //
      EventEmitter.EventEmitter = EventEmitter;

      //
      // Expose the module.
      //
      if (true) {
        module.exports = EventEmitter;
      }

      /***/
    },

    /***/ 4029: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var isCallable = __webpack_require__(5320);

      var toStr = Object.prototype.toString;
      var hasOwnProperty = Object.prototype.hasOwnProperty;

      var forEachArray = function forEachArray(array, iterator, receiver) {
        for (var i = 0, len = array.length; i < len; i++) {
          if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
              iterator(array[i], i, array);
            } else {
              iterator.call(receiver, array[i], i, array);
            }
          }
        }
      };

      var forEachString = function forEachString(string, iterator, receiver) {
        for (var i = 0, len = string.length; i < len; i++) {
          // no such thing as a sparse string.
          if (receiver == null) {
            iterator(string.charAt(i), i, string);
          } else {
            iterator.call(receiver, string.charAt(i), i, string);
          }
        }
      };

      var forEachObject = function forEachObject(object, iterator, receiver) {
        for (var k in object) {
          if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
              iterator(object[k], k, object);
            } else {
              iterator.call(receiver, object[k], k, object);
            }
          }
        }
      };

      var forEach = function forEach(list, iterator, thisArg) {
        if (!isCallable(iterator)) {
          throw new TypeError("iterator must be a function");
        }

        var receiver;
        if (arguments.length >= 3) {
          receiver = thisArg;
        }

        if (toStr.call(list) === "[object Array]") {
          forEachArray(list, iterator, receiver);
        } else if (typeof list === "string") {
          forEachString(list, iterator, receiver);
        } else {
          forEachObject(list, iterator, receiver);
        }
      };

      module.exports = forEach;

      /***/
    },

    /***/ 7648: /***/ (module) => {
      "use strict";

      /* eslint no-invalid-this: 1 */

      var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
      var slice = Array.prototype.slice;
      var toStr = Object.prototype.toString;
      var funcType = "[object Function]";

      module.exports = function bind(that) {
        var target = this;
        if (typeof target !== "function" || toStr.call(target) !== funcType) {
          throw new TypeError(ERROR_MESSAGE + target);
        }
        var args = slice.call(arguments, 1);

        var bound;
        var binder = function () {
          if (this instanceof bound) {
            var result = target.apply(this, args.concat(slice.call(arguments)));
            if (Object(result) === result) {
              return result;
            }
            return this;
          } else {
            return target.apply(that, args.concat(slice.call(arguments)));
          }
        };

        var boundLength = Math.max(0, target.length - args.length);
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
          boundArgs.push("$" + i);
        }

        bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);

        if (target.prototype) {
          var Empty = function Empty() {};
          Empty.prototype = target.prototype;
          bound.prototype = new Empty();
          Empty.prototype = null;
        }

        return bound;
      };

      /***/
    },

    /***/ 8612: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var implementation = __webpack_require__(7648);

      module.exports = Function.prototype.bind || implementation;

      /***/
    },

    /***/ 210: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var undefined;

      var $SyntaxError = SyntaxError;
      var $Function = Function;
      var $TypeError = TypeError;

      // eslint-disable-next-line consistent-return
      var getEvalledConstructor = function (expressionSyntax) {
        try {
          return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
        } catch (e) {}
      };

      var $gOPD = Object.getOwnPropertyDescriptor;
      if ($gOPD) {
        try {
          $gOPD({}, "");
        } catch (e) {
          $gOPD = null; // this is IE 8, which has a broken gOPD
        }
      }

      var throwTypeError = function () {
        throw new $TypeError();
      };
      var ThrowTypeError = $gOPD
        ? (function () {
            try {
              // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
              arguments.callee; // IE 8 does not throw here
              return throwTypeError;
            } catch (calleeThrows) {
              try {
                // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
                return $gOPD(arguments, "callee").get;
              } catch (gOPDthrows) {
                return throwTypeError;
              }
            }
          })()
        : throwTypeError;

      var hasSymbols = __webpack_require__(1405)();

      var getProto =
        Object.getPrototypeOf ||
        function (x) {
          return x.__proto__;
        }; // eslint-disable-line no-proto

      var needsEval = {};

      var TypedArray = typeof Uint8Array === "undefined" ? undefined : getProto(Uint8Array);

      var INTRINSICS = {
        "%AggregateError%": typeof AggregateError === "undefined" ? undefined : AggregateError,
        "%Array%": Array,
        "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined : ArrayBuffer,
        "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
        "%AsyncFromSyncIteratorPrototype%": undefined,
        "%AsyncFunction%": needsEval,
        "%AsyncGenerator%": needsEval,
        "%AsyncGeneratorFunction%": needsEval,
        "%AsyncIteratorPrototype%": needsEval,
        "%Atomics%": typeof Atomics === "undefined" ? undefined : Atomics,
        "%BigInt%": typeof BigInt === "undefined" ? undefined : BigInt,
        "%Boolean%": Boolean,
        "%DataView%": typeof DataView === "undefined" ? undefined : DataView,
        "%Date%": Date,
        "%decodeURI%": decodeURI,
        "%decodeURIComponent%": decodeURIComponent,
        "%encodeURI%": encodeURI,
        "%encodeURIComponent%": encodeURIComponent,
        "%Error%": Error,
        "%eval%": eval, // eslint-disable-line no-eval
        "%EvalError%": EvalError,
        "%Float32Array%": typeof Float32Array === "undefined" ? undefined : Float32Array,
        "%Float64Array%": typeof Float64Array === "undefined" ? undefined : Float64Array,
        "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined : FinalizationRegistry,
        "%Function%": $Function,
        "%GeneratorFunction%": needsEval,
        "%Int8Array%": typeof Int8Array === "undefined" ? undefined : Int8Array,
        "%Int16Array%": typeof Int16Array === "undefined" ? undefined : Int16Array,
        "%Int32Array%": typeof Int32Array === "undefined" ? undefined : Int32Array,
        "%isFinite%": isFinite,
        "%isNaN%": isNaN,
        "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
        "%JSON%": typeof JSON === "object" ? JSON : undefined,
        "%Map%": typeof Map === "undefined" ? undefined : Map,
        "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
        "%Math%": Math,
        "%Number%": Number,
        "%Object%": Object,
        "%parseFloat%": parseFloat,
        "%parseInt%": parseInt,
        "%Promise%": typeof Promise === "undefined" ? undefined : Promise,
        "%Proxy%": typeof Proxy === "undefined" ? undefined : Proxy,
        "%RangeError%": RangeError,
        "%ReferenceError%": ReferenceError,
        "%Reflect%": typeof Reflect === "undefined" ? undefined : Reflect,
        "%RegExp%": RegExp,
        "%Set%": typeof Set === "undefined" ? undefined : Set,
        "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
        "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined : SharedArrayBuffer,
        "%String%": String,
        "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined,
        "%Symbol%": hasSymbols ? Symbol : undefined,
        "%SyntaxError%": $SyntaxError,
        "%ThrowTypeError%": ThrowTypeError,
        "%TypedArray%": TypedArray,
        "%TypeError%": $TypeError,
        "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined : Uint8Array,
        "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined : Uint8ClampedArray,
        "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined : Uint16Array,
        "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined : Uint32Array,
        "%URIError%": URIError,
        "%WeakMap%": typeof WeakMap === "undefined" ? undefined : WeakMap,
        "%WeakRef%": typeof WeakRef === "undefined" ? undefined : WeakRef,
        "%WeakSet%": typeof WeakSet === "undefined" ? undefined : WeakSet,
      };

      var doEval = function doEval(name) {
        var value;
        if (name === "%AsyncFunction%") {
          value = getEvalledConstructor("async function () {}");
        } else if (name === "%GeneratorFunction%") {
          value = getEvalledConstructor("function* () {}");
        } else if (name === "%AsyncGeneratorFunction%") {
          value = getEvalledConstructor("async function* () {}");
        } else if (name === "%AsyncGenerator%") {
          var fn = doEval("%AsyncGeneratorFunction%");
          if (fn) {
            value = fn.prototype;
          }
        } else if (name === "%AsyncIteratorPrototype%") {
          var gen = doEval("%AsyncGenerator%");
          if (gen) {
            value = getProto(gen.prototype);
          }
        }

        INTRINSICS[name] = value;

        return value;
      };

      var LEGACY_ALIASES = {
        "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
        "%ArrayPrototype%": ["Array", "prototype"],
        "%ArrayProto_entries%": ["Array", "prototype", "entries"],
        "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
        "%ArrayProto_keys%": ["Array", "prototype", "keys"],
        "%ArrayProto_values%": ["Array", "prototype", "values"],
        "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
        "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
        "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
        "%BooleanPrototype%": ["Boolean", "prototype"],
        "%DataViewPrototype%": ["DataView", "prototype"],
        "%DatePrototype%": ["Date", "prototype"],
        "%ErrorPrototype%": ["Error", "prototype"],
        "%EvalErrorPrototype%": ["EvalError", "prototype"],
        "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
        "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
        "%FunctionPrototype%": ["Function", "prototype"],
        "%Generator%": ["GeneratorFunction", "prototype"],
        "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
        "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
        "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
        "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
        "%JSONParse%": ["JSON", "parse"],
        "%JSONStringify%": ["JSON", "stringify"],
        "%MapPrototype%": ["Map", "prototype"],
        "%NumberPrototype%": ["Number", "prototype"],
        "%ObjectPrototype%": ["Object", "prototype"],
        "%ObjProto_toString%": ["Object", "prototype", "toString"],
        "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
        "%PromisePrototype%": ["Promise", "prototype"],
        "%PromiseProto_then%": ["Promise", "prototype", "then"],
        "%Promise_all%": ["Promise", "all"],
        "%Promise_reject%": ["Promise", "reject"],
        "%Promise_resolve%": ["Promise", "resolve"],
        "%RangeErrorPrototype%": ["RangeError", "prototype"],
        "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
        "%RegExpPrototype%": ["RegExp", "prototype"],
        "%SetPrototype%": ["Set", "prototype"],
        "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
        "%StringPrototype%": ["String", "prototype"],
        "%SymbolPrototype%": ["Symbol", "prototype"],
        "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
        "%TypedArrayPrototype%": ["TypedArray", "prototype"],
        "%TypeErrorPrototype%": ["TypeError", "prototype"],
        "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
        "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
        "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
        "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
        "%URIErrorPrototype%": ["URIError", "prototype"],
        "%WeakMapPrototype%": ["WeakMap", "prototype"],
        "%WeakSetPrototype%": ["WeakSet", "prototype"],
      };

      var bind = __webpack_require__(8612);
      var hasOwn = __webpack_require__(7642);
      var $concat = bind.call(Function.call, Array.prototype.concat);
      var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
      var $replace = bind.call(Function.call, String.prototype.replace);
      var $strSlice = bind.call(Function.call, String.prototype.slice);

      /* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
      var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
      var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
      var stringToPath = function stringToPath(string) {
        var first = $strSlice(string, 0, 1);
        var last = $strSlice(string, -1);
        if (first === "%" && last !== "%") {
          throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
        } else if (last === "%" && first !== "%") {
          throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
        }
        var result = [];
        $replace(string, rePropName, function (match, number, quote, subString) {
          result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
        });
        return result;
      };
      /* end adaptation */

      var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
        var intrinsicName = name;
        var alias;
        if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
          alias = LEGACY_ALIASES[intrinsicName];
          intrinsicName = "%" + alias[0] + "%";
        }

        if (hasOwn(INTRINSICS, intrinsicName)) {
          var value = INTRINSICS[intrinsicName];
          if (value === needsEval) {
            value = doEval(intrinsicName);
          }
          if (typeof value === "undefined" && !allowMissing) {
            throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
          }

          return {
            alias: alias,
            name: intrinsicName,
            value: value,
          };
        }

        throw new $SyntaxError("intrinsic " + name + " does not exist!");
      };

      module.exports = function GetIntrinsic(name, allowMissing) {
        if (typeof name !== "string" || name.length === 0) {
          throw new $TypeError("intrinsic name must be a non-empty string");
        }
        if (arguments.length > 1 && typeof allowMissing !== "boolean") {
          throw new $TypeError('"allowMissing" argument must be a boolean');
        }

        var parts = stringToPath(name);
        var intrinsicBaseName = parts.length > 0 ? parts[0] : "";

        var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
        var intrinsicRealName = intrinsic.name;
        var value = intrinsic.value;
        var skipFurtherCaching = false;

        var alias = intrinsic.alias;
        if (alias) {
          intrinsicBaseName = alias[0];
          $spliceApply(parts, $concat([0, 1], alias));
        }

        for (var i = 1, isOwn = true; i < parts.length; i += 1) {
          var part = parts[i];
          var first = $strSlice(part, 0, 1);
          var last = $strSlice(part, -1);
          if ((first === '"' || first === "'" || first === "`" || last === '"' || last === "'" || last === "`") && first !== last) {
            throw new $SyntaxError("property names with quotes must have matching quotes");
          }
          if (part === "constructor" || !isOwn) {
            skipFurtherCaching = true;
          }

          intrinsicBaseName += "." + part;
          intrinsicRealName = "%" + intrinsicBaseName + "%";

          if (hasOwn(INTRINSICS, intrinsicRealName)) {
            value = INTRINSICS[intrinsicRealName];
          } else if (value != null) {
            if (!(part in value)) {
              if (!allowMissing) {
                throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
              }
              return void undefined;
            }
            if ($gOPD && i + 1 >= parts.length) {
              var desc = $gOPD(value, part);
              isOwn = !!desc;

              // By convention, when a data property is converted to an accessor
              // property to emulate a data property that does not suffer from
              // the override mistake, that accessor's getter is marked with
              // an `originalValue` property. Here, when we detect this, we
              // uphold the illusion by pretending to see that original data
              // property, i.e., returning the value rather than the getter
              // itself.
              if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
                value = desc.get;
              } else {
                value = value[part];
              }
            } else {
              isOwn = hasOwn(value, part);
              value = value[part];
            }

            if (isOwn && !skipFurtherCaching) {
              INTRINSICS[intrinsicRealName] = value;
            }
          }
        }
        return value;
      };

      /***/
    },

    /***/ 1405: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var origSymbol = typeof Symbol !== "undefined" && Symbol;
      var hasSymbolSham = __webpack_require__(5419);

      module.exports = function hasNativeSymbols() {
        if (typeof origSymbol !== "function") {
          return false;
        }
        if (typeof Symbol !== "function") {
          return false;
        }
        if (typeof origSymbol("foo") !== "symbol") {
          return false;
        }
        if (typeof Symbol("bar") !== "symbol") {
          return false;
        }

        return hasSymbolSham();
      };

      /***/
    },

    /***/ 5419: /***/ (module) => {
      "use strict";

      /* eslint complexity: [2, 18], max-statements: [2, 33] */
      module.exports = function hasSymbols() {
        if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
          return false;
        }
        if (typeof Symbol.iterator === "symbol") {
          return true;
        }

        var obj = {};
        var sym = Symbol("test");
        var symObj = Object(sym);
        if (typeof sym === "string") {
          return false;
        }

        if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
          return false;
        }
        if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
          return false;
        }

        // temp disabled per https://github.com/ljharb/object.assign/issues/17
        // if (sym instanceof Symbol) { return false; }
        // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
        // if (!(symObj instanceof Symbol)) { return false; }

        // if (typeof Symbol.prototype.toString !== 'function') { return false; }
        // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

        var symVal = 42;
        obj[sym] = symVal;
        for (sym in obj) {
          return false;
        } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
        if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
          return false;
        }

        if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
          return false;
        }

        var syms = Object.getOwnPropertySymbols(obj);
        if (syms.length !== 1 || syms[0] !== sym) {
          return false;
        }

        if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
          return false;
        }

        if (typeof Object.getOwnPropertyDescriptor === "function") {
          var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
          if (descriptor.value !== symVal || descriptor.enumerable !== true) {
            return false;
          }
        }

        return true;
      };

      /***/
    },

    /***/ 6410: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var hasSymbols = __webpack_require__(5419);

      module.exports = function hasToStringTagShams() {
        return hasSymbols() && !!Symbol.toStringTag;
      };

      /***/
    },

    /***/ 7642: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var bind = __webpack_require__(8612);

      module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);

      /***/
    },

    /***/ 3715: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      var hash = exports;

      hash.utils = __webpack_require__(6436);
      hash.common = __webpack_require__(5772);
      hash.sha = __webpack_require__(9041);
      hash.ripemd = __webpack_require__(2949);
      hash.hmac = __webpack_require__(2344);

      // Proxy hash functions to the main object
      hash.sha1 = hash.sha.sha1;
      hash.sha256 = hash.sha.sha256;
      hash.sha224 = hash.sha.sha224;
      hash.sha384 = hash.sha.sha384;
      hash.sha512 = hash.sha.sha512;
      hash.ripemd160 = hash.ripemd.ripemd160;

      /***/
    },

    /***/ 5772: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";

      var utils = __webpack_require__(6436);
      var assert = __webpack_require__(9746);

      function BlockHash() {
        this.pending = null;
        this.pendingTotal = 0;
        this.blockSize = this.constructor.blockSize;
        this.outSize = this.constructor.outSize;
        this.hmacStrength = this.constructor.hmacStrength;
        this.padLength = this.constructor.padLength / 8;
        this.endian = "big";

        this._delta8 = this.blockSize / 8;
        this._delta32 = this.blockSize / 32;
      }
      exports.BlockHash = BlockHash;

      BlockHash.prototype.update = function update(msg, enc) {
        // Convert message to array, pad it, and join into 32bit blocks
        msg = utils.toArray(msg, enc);
        if (!this.pending) this.pending = msg;
        else this.pending = this.pending.concat(msg);
        this.pendingTotal += msg.length;

        // Enough data, try updating
        if (this.pending.length >= this._delta8) {
          msg = this.pending;

          // Process pending data in blocks
          var r = msg.length % this._delta8;
          this.pending = msg.slice(msg.length - r, msg.length);
          if (this.pending.length === 0) this.pending = null;

          msg = utils.join32(msg, 0, msg.length - r, this.endian);
          for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);
        }

        return this;
      };

      BlockHash.prototype.digest = function digest(enc) {
        this.update(this._pad());
        assert(this.pending === null);

        return this._digest(enc);
      };

      BlockHash.prototype._pad = function pad() {
        var len = this.pendingTotal;
        var bytes = this._delta8;
        var k = bytes - ((len + this.padLength) % bytes);
        var res = new Array(k + this.padLength);
        res[0] = 0x80;
        for (var i = 1; i < k; i++) res[i] = 0;

        // Append length
        len <<= 3;
        if (this.endian === "big") {
          for (var t = 8; t < this.padLength; t++) res[i++] = 0;

          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = (len >>> 24) & 0xff;
          res[i++] = (len >>> 16) & 0xff;
          res[i++] = (len >>> 8) & 0xff;
          res[i++] = len & 0xff;
        } else {
          res[i++] = len & 0xff;
          res[i++] = (len >>> 8) & 0xff;
          res[i++] = (len >>> 16) & 0xff;
          res[i++] = (len >>> 24) & 0xff;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;
          res[i++] = 0;

          for (t = 8; t < this.padLength; t++) res[i++] = 0;
        }

        return res;
      };

      /***/
    },

    /***/ 2344: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var utils = __webpack_require__(6436);
      var assert = __webpack_require__(9746);

      function Hmac(hash, key, enc) {
        if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
        this.Hash = hash;
        this.blockSize = hash.blockSize / 8;
        this.outSize = hash.outSize / 8;
        this.inner = null;
        this.outer = null;

        this._init(utils.toArray(key, enc));
      }
      module.exports = Hmac;

      Hmac.prototype._init = function init(key) {
        // Shorten key, if needed
        if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
        assert(key.length <= this.blockSize);

        // Add padding to key
        for (var i = key.length; i < this.blockSize; i++) key.push(0);

        for (i = 0; i < key.length; i++) key[i] ^= 0x36;
        this.inner = new this.Hash().update(key);

        // 0x36 ^ 0x5c = 0x6a
        for (i = 0; i < key.length; i++) key[i] ^= 0x6a;
        this.outer = new this.Hash().update(key);
      };

      Hmac.prototype.update = function update(msg, enc) {
        this.inner.update(msg, enc);
        return this;
      };

      Hmac.prototype.digest = function digest(enc) {
        this.outer.update(this.inner.digest());
        return this.outer.digest(enc);
      };

      /***/
    },

    /***/ 2949: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";

      var utils = __webpack_require__(6436);
      var common = __webpack_require__(5772);

      var rotl32 = utils.rotl32;
      var sum32 = utils.sum32;
      var sum32_3 = utils.sum32_3;
      var sum32_4 = utils.sum32_4;
      var BlockHash = common.BlockHash;

      function RIPEMD160() {
        if (!(this instanceof RIPEMD160)) return new RIPEMD160();

        BlockHash.call(this);

        this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
        this.endian = "little";
      }
      utils.inherits(RIPEMD160, BlockHash);
      exports.ripemd160 = RIPEMD160;

      RIPEMD160.blockSize = 512;
      RIPEMD160.outSize = 160;
      RIPEMD160.hmacStrength = 192;
      RIPEMD160.padLength = 64;

      RIPEMD160.prototype._update = function update(msg, start) {
        var A = this.h[0];
        var B = this.h[1];
        var C = this.h[2];
        var D = this.h[3];
        var E = this.h[4];
        var Ah = A;
        var Bh = B;
        var Ch = C;
        var Dh = D;
        var Eh = E;
        for (var j = 0; j < 80; j++) {
          var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
          A = E;
          E = D;
          D = rotl32(C, 10);
          C = B;
          B = T;
          T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
          Ah = Eh;
          Eh = Dh;
          Dh = rotl32(Ch, 10);
          Ch = Bh;
          Bh = T;
        }
        T = sum32_3(this.h[1], C, Dh);
        this.h[1] = sum32_3(this.h[2], D, Eh);
        this.h[2] = sum32_3(this.h[3], E, Ah);
        this.h[3] = sum32_3(this.h[4], A, Bh);
        this.h[4] = sum32_3(this.h[0], B, Ch);
        this.h[0] = T;
      };

      RIPEMD160.prototype._digest = function digest(enc) {
        if (enc === "hex") return utils.toHex32(this.h, "little");
        else return utils.split32(this.h, "little");
      };

      function f(j, x, y, z) {
        if (j <= 15) return x ^ y ^ z;
        else if (j <= 31) return (x & y) | (~x & z);
        else if (j <= 47) return (x | ~y) ^ z;
        else if (j <= 63) return (x & z) | (y & ~z);
        else return x ^ (y | ~z);
      }

      function K(j) {
        if (j <= 15) return 0x00000000;
        else if (j <= 31) return 0x5a827999;
        else if (j <= 47) return 0x6ed9eba1;
        else if (j <= 63) return 0x8f1bbcdc;
        else return 0xa953fd4e;
      }

      function Kh(j) {
        if (j <= 15) return 0x50a28be6;
        else if (j <= 31) return 0x5c4dd124;
        else if (j <= 47) return 0x6d703ef3;
        else if (j <= 63) return 0x7a6d76e9;
        else return 0x00000000;
      }

      var r = [
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7,
        0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,
      ];

      var rh = [
        5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8,
        12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11,
      ];

      var s = [
        11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15,
        14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
      ];

      var sh = [
        8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12,
        13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11,
      ];

      /***/
    },

    /***/ 9041: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";

      exports.sha1 = __webpack_require__(4761);
      exports.sha224 = __webpack_require__(799);
      exports.sha256 = __webpack_require__(9344);
      exports.sha384 = __webpack_require__(772);
      exports.sha512 = __webpack_require__(5900);

      /***/
    },

    /***/ 4761: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var utils = __webpack_require__(6436);
      var common = __webpack_require__(5772);
      var shaCommon = __webpack_require__(7038);

      var rotl32 = utils.rotl32;
      var sum32 = utils.sum32;
      var sum32_5 = utils.sum32_5;
      var ft_1 = shaCommon.ft_1;
      var BlockHash = common.BlockHash;

      var sha1_K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];

      function SHA1() {
        if (!(this instanceof SHA1)) return new SHA1();

        BlockHash.call(this);
        this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
        this.W = new Array(80);
      }

      utils.inherits(SHA1, BlockHash);
      module.exports = SHA1;

      SHA1.blockSize = 512;
      SHA1.outSize = 160;
      SHA1.hmacStrength = 80;
      SHA1.padLength = 64;

      SHA1.prototype._update = function _update(msg, start) {
        var W = this.W;

        for (var i = 0; i < 16; i++) W[i] = msg[start + i];

        for (; i < W.length; i++) W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

        var a = this.h[0];
        var b = this.h[1];
        var c = this.h[2];
        var d = this.h[3];
        var e = this.h[4];

        for (i = 0; i < W.length; i++) {
          var s = ~~(i / 20);
          var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
          e = d;
          d = c;
          c = rotl32(b, 30);
          b = a;
          a = t;
        }

        this.h[0] = sum32(this.h[0], a);
        this.h[1] = sum32(this.h[1], b);
        this.h[2] = sum32(this.h[2], c);
        this.h[3] = sum32(this.h[3], d);
        this.h[4] = sum32(this.h[4], e);
      };

      SHA1.prototype._digest = function digest(enc) {
        if (enc === "hex") return utils.toHex32(this.h, "big");
        else return utils.split32(this.h, "big");
      };

      /***/
    },

    /***/ 799: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var utils = __webpack_require__(6436);
      var SHA256 = __webpack_require__(9344);

      function SHA224() {
        if (!(this instanceof SHA224)) return new SHA224();

        SHA256.call(this);
        this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
      }
      utils.inherits(SHA224, SHA256);
      module.exports = SHA224;

      SHA224.blockSize = 512;
      SHA224.outSize = 224;
      SHA224.hmacStrength = 192;
      SHA224.padLength = 64;

      SHA224.prototype._digest = function digest(enc) {
        // Just truncate output
        if (enc === "hex") return utils.toHex32(this.h.slice(0, 7), "big");
        else return utils.split32(this.h.slice(0, 7), "big");
      };

      /***/
    },

    /***/ 9344: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var utils = __webpack_require__(6436);
      var common = __webpack_require__(5772);
      var shaCommon = __webpack_require__(7038);
      var assert = __webpack_require__(9746);

      var sum32 = utils.sum32;
      var sum32_4 = utils.sum32_4;
      var sum32_5 = utils.sum32_5;
      var ch32 = shaCommon.ch32;
      var maj32 = shaCommon.maj32;
      var s0_256 = shaCommon.s0_256;
      var s1_256 = shaCommon.s1_256;
      var g0_256 = shaCommon.g0_256;
      var g1_256 = shaCommon.g1_256;

      var BlockHash = common.BlockHash;

      var sha256_K = [
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be,
        0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa,
        0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85,
        0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
        0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
        0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
      ];

      function SHA256() {
        if (!(this instanceof SHA256)) return new SHA256();

        BlockHash.call(this);
        this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
        this.k = sha256_K;
        this.W = new Array(64);
      }
      utils.inherits(SHA256, BlockHash);
      module.exports = SHA256;

      SHA256.blockSize = 512;
      SHA256.outSize = 256;
      SHA256.hmacStrength = 192;
      SHA256.padLength = 64;

      SHA256.prototype._update = function _update(msg, start) {
        var W = this.W;

        for (var i = 0; i < 16; i++) W[i] = msg[start + i];
        for (; i < W.length; i++) W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

        var a = this.h[0];
        var b = this.h[1];
        var c = this.h[2];
        var d = this.h[3];
        var e = this.h[4];
        var f = this.h[5];
        var g = this.h[6];
        var h = this.h[7];

        assert(this.k.length === W.length);
        for (i = 0; i < W.length; i++) {
          var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
          var T2 = sum32(s0_256(a), maj32(a, b, c));
          h = g;
          g = f;
          f = e;
          e = sum32(d, T1);
          d = c;
          c = b;
          b = a;
          a = sum32(T1, T2);
        }

        this.h[0] = sum32(this.h[0], a);
        this.h[1] = sum32(this.h[1], b);
        this.h[2] = sum32(this.h[2], c);
        this.h[3] = sum32(this.h[3], d);
        this.h[4] = sum32(this.h[4], e);
        this.h[5] = sum32(this.h[5], f);
        this.h[6] = sum32(this.h[6], g);
        this.h[7] = sum32(this.h[7], h);
      };

      SHA256.prototype._digest = function digest(enc) {
        if (enc === "hex") return utils.toHex32(this.h, "big");
        else return utils.split32(this.h, "big");
      };

      /***/
    },

    /***/ 772: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var utils = __webpack_require__(6436);

      var SHA512 = __webpack_require__(5900);

      function SHA384() {
        if (!(this instanceof SHA384)) return new SHA384();

        SHA512.call(this);
        this.h = [
          0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87,
          0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,
        ];
      }
      utils.inherits(SHA384, SHA512);
      module.exports = SHA384;

      SHA384.blockSize = 1024;
      SHA384.outSize = 384;
      SHA384.hmacStrength = 192;
      SHA384.padLength = 128;

      SHA384.prototype._digest = function digest(enc) {
        if (enc === "hex") return utils.toHex32(this.h.slice(0, 12), "big");
        else return utils.split32(this.h.slice(0, 12), "big");
      };

      /***/
    },

    /***/ 5900: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var utils = __webpack_require__(6436);
      var common = __webpack_require__(5772);
      var assert = __webpack_require__(9746);

      var rotr64_hi = utils.rotr64_hi;
      var rotr64_lo = utils.rotr64_lo;
      var shr64_hi = utils.shr64_hi;
      var shr64_lo = utils.shr64_lo;
      var sum64 = utils.sum64;
      var sum64_hi = utils.sum64_hi;
      var sum64_lo = utils.sum64_lo;
      var sum64_4_hi = utils.sum64_4_hi;
      var sum64_4_lo = utils.sum64_4_lo;
      var sum64_5_hi = utils.sum64_5_hi;
      var sum64_5_lo = utils.sum64_5_lo;

      var BlockHash = common.BlockHash;

      var sha512_K = [
        0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1,
        0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c,
        0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1,
        0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
        0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7,
        0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc,
        0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e,
        0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
        0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08,
        0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373,
        0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa,
        0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
        0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35,
        0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6,
        0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817,
      ];

      function SHA512() {
        if (!(this instanceof SHA512)) return new SHA512();

        BlockHash.call(this);
        this.h = [
          0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c,
          0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,
        ];
        this.k = sha512_K;
        this.W = new Array(160);
      }
      utils.inherits(SHA512, BlockHash);
      module.exports = SHA512;

      SHA512.blockSize = 1024;
      SHA512.outSize = 512;
      SHA512.hmacStrength = 192;
      SHA512.padLength = 128;

      SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
        var W = this.W;

        // 32 x 32bit words
        for (var i = 0; i < 32; i++) W[i] = msg[start + i];
        for (; i < W.length; i += 2) {
          var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
          var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
          var c1_hi = W[i - 14]; // i - 7
          var c1_lo = W[i - 13];
          var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
          var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
          var c3_hi = W[i - 32]; // i - 16
          var c3_lo = W[i - 31];

          W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
          W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        }
      };

      SHA512.prototype._update = function _update(msg, start) {
        this._prepareBlock(msg, start);

        var W = this.W;

        var ah = this.h[0];
        var al = this.h[1];
        var bh = this.h[2];
        var bl = this.h[3];
        var ch = this.h[4];
        var cl = this.h[5];
        var dh = this.h[6];
        var dl = this.h[7];
        var eh = this.h[8];
        var el = this.h[9];
        var fh = this.h[10];
        var fl = this.h[11];
        var gh = this.h[12];
        var gl = this.h[13];
        var hh = this.h[14];
        var hl = this.h[15];

        assert(this.k.length === W.length);
        for (var i = 0; i < W.length; i += 2) {
          var c0_hi = hh;
          var c0_lo = hl;
          var c1_hi = s1_512_hi(eh, el);
          var c1_lo = s1_512_lo(eh, el);
          var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
          var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
          var c3_hi = this.k[i];
          var c3_lo = this.k[i + 1];
          var c4_hi = W[i];
          var c4_lo = W[i + 1];

          var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
          var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);

          c0_hi = s0_512_hi(ah, al);
          c0_lo = s0_512_lo(ah, al);
          c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
          c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

          var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
          var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

          hh = gh;
          hl = gl;

          gh = fh;
          gl = fl;

          fh = eh;
          fl = el;

          eh = sum64_hi(dh, dl, T1_hi, T1_lo);
          el = sum64_lo(dl, dl, T1_hi, T1_lo);

          dh = ch;
          dl = cl;

          ch = bh;
          cl = bl;

          bh = ah;
          bl = al;

          ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
          al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
        }

        sum64(this.h, 0, ah, al);
        sum64(this.h, 2, bh, bl);
        sum64(this.h, 4, ch, cl);
        sum64(this.h, 6, dh, dl);
        sum64(this.h, 8, eh, el);
        sum64(this.h, 10, fh, fl);
        sum64(this.h, 12, gh, gl);
        sum64(this.h, 14, hh, hl);
      };

      SHA512.prototype._digest = function digest(enc) {
        if (enc === "hex") return utils.toHex32(this.h, "big");
        else return utils.split32(this.h, "big");
      };

      function ch64_hi(xh, xl, yh, yl, zh) {
        var r = (xh & yh) ^ (~xh & zh);
        if (r < 0) r += 0x100000000;
        return r;
      }

      function ch64_lo(xh, xl, yh, yl, zh, zl) {
        var r = (xl & yl) ^ (~xl & zl);
        if (r < 0) r += 0x100000000;
        return r;
      }

      function maj64_hi(xh, xl, yh, yl, zh) {
        var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
        if (r < 0) r += 0x100000000;
        return r;
      }

      function maj64_lo(xh, xl, yh, yl, zh, zl) {
        var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
        if (r < 0) r += 0x100000000;
        return r;
      }

      function s0_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 28);
        var c1_hi = rotr64_hi(xl, xh, 2); // 34
        var c2_hi = rotr64_hi(xl, xh, 7); // 39

        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0) r += 0x100000000;
        return r;
      }

      function s0_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 28);
        var c1_lo = rotr64_lo(xl, xh, 2); // 34
        var c2_lo = rotr64_lo(xl, xh, 7); // 39

        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0) r += 0x100000000;
        return r;
      }

      function s1_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 14);
        var c1_hi = rotr64_hi(xh, xl, 18);
        var c2_hi = rotr64_hi(xl, xh, 9); // 41

        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0) r += 0x100000000;
        return r;
      }

      function s1_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 14);
        var c1_lo = rotr64_lo(xh, xl, 18);
        var c2_lo = rotr64_lo(xl, xh, 9); // 41

        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0) r += 0x100000000;
        return r;
      }

      function g0_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 1);
        var c1_hi = rotr64_hi(xh, xl, 8);
        var c2_hi = shr64_hi(xh, xl, 7);

        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0) r += 0x100000000;
        return r;
      }

      function g0_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 1);
        var c1_lo = rotr64_lo(xh, xl, 8);
        var c2_lo = shr64_lo(xh, xl, 7);

        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0) r += 0x100000000;
        return r;
      }

      function g1_512_hi(xh, xl) {
        var c0_hi = rotr64_hi(xh, xl, 19);
        var c1_hi = rotr64_hi(xl, xh, 29); // 61
        var c2_hi = shr64_hi(xh, xl, 6);

        var r = c0_hi ^ c1_hi ^ c2_hi;
        if (r < 0) r += 0x100000000;
        return r;
      }

      function g1_512_lo(xh, xl) {
        var c0_lo = rotr64_lo(xh, xl, 19);
        var c1_lo = rotr64_lo(xl, xh, 29); // 61
        var c2_lo = shr64_lo(xh, xl, 6);

        var r = c0_lo ^ c1_lo ^ c2_lo;
        if (r < 0) r += 0x100000000;
        return r;
      }

      /***/
    },

    /***/ 7038: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";

      var utils = __webpack_require__(6436);
      var rotr32 = utils.rotr32;

      function ft_1(s, x, y, z) {
        if (s === 0) return ch32(x, y, z);
        if (s === 1 || s === 3) return p32(x, y, z);
        if (s === 2) return maj32(x, y, z);
      }
      exports.ft_1 = ft_1;

      function ch32(x, y, z) {
        return (x & y) ^ (~x & z);
      }
      exports.ch32 = ch32;

      function maj32(x, y, z) {
        return (x & y) ^ (x & z) ^ (y & z);
      }
      exports.maj32 = maj32;

      function p32(x, y, z) {
        return x ^ y ^ z;
      }
      exports.p32 = p32;

      function s0_256(x) {
        return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
      }
      exports.s0_256 = s0_256;

      function s1_256(x) {
        return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
      }
      exports.s1_256 = s1_256;

      function g0_256(x) {
        return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
      }
      exports.g0_256 = g0_256;

      function g1_256(x) {
        return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
      }
      exports.g1_256 = g1_256;

      /***/
    },

    /***/ 6436: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";

      var assert = __webpack_require__(9746);
      var inherits = __webpack_require__(5717);

      exports.inherits = inherits;

      function isSurrogatePair(msg, i) {
        if ((msg.charCodeAt(i) & 0xfc00) !== 0xd800) {
          return false;
        }
        if (i < 0 || i + 1 >= msg.length) {
          return false;
        }
        return (msg.charCodeAt(i + 1) & 0xfc00) === 0xdc00;
      }

      function toArray(msg, enc) {
        if (Array.isArray(msg)) return msg.slice();
        if (!msg) return [];
        var res = [];
        if (typeof msg === "string") {
          if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for (var i = 0; i < msg.length; i++) {
              var c = msg.charCodeAt(i);
              if (c < 128) {
                res[p++] = c;
              } else if (c < 2048) {
                res[p++] = (c >> 6) | 192;
                res[p++] = (c & 63) | 128;
              } else if (isSurrogatePair(msg, i)) {
                c = 0x10000 + ((c & 0x03ff) << 10) + (msg.charCodeAt(++i) & 0x03ff);
                res[p++] = (c >> 18) | 240;
                res[p++] = ((c >> 12) & 63) | 128;
                res[p++] = ((c >> 6) & 63) | 128;
                res[p++] = (c & 63) | 128;
              } else {
                res[p++] = (c >> 12) | 224;
                res[p++] = ((c >> 6) & 63) | 128;
                res[p++] = (c & 63) | 128;
              }
            }
          } else if (enc === "hex") {
            msg = msg.replace(/[^a-z0-9]+/gi, "");
            if (msg.length % 2 !== 0) msg = "0" + msg;
            for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
          }
        } else {
          for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
        }
        return res;
      }
      exports.toArray = toArray;

      function toHex(msg) {
        var res = "";
        for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
        return res;
      }
      exports.toHex = toHex;

      function htonl(w) {
        var res = (w >>> 24) | ((w >>> 8) & 0xff00) | ((w << 8) & 0xff0000) | ((w & 0xff) << 24);
        return res >>> 0;
      }
      exports.htonl = htonl;

      function toHex32(msg, endian) {
        var res = "";
        for (var i = 0; i < msg.length; i++) {
          var w = msg[i];
          if (endian === "little") w = htonl(w);
          res += zero8(w.toString(16));
        }
        return res;
      }
      exports.toHex32 = toHex32;

      function zero2(word) {
        if (word.length === 1) return "0" + word;
        else return word;
      }
      exports.zero2 = zero2;

      function zero8(word) {
        if (word.length === 7) return "0" + word;
        else if (word.length === 6) return "00" + word;
        else if (word.length === 5) return "000" + word;
        else if (word.length === 4) return "0000" + word;
        else if (word.length === 3) return "00000" + word;
        else if (word.length === 2) return "000000" + word;
        else if (word.length === 1) return "0000000" + word;
        else return word;
      }
      exports.zero8 = zero8;

      function join32(msg, start, end, endian) {
        var len = end - start;
        assert(len % 4 === 0);
        var res = new Array(len / 4);
        for (var i = 0, k = start; i < res.length; i++, k += 4) {
          var w;
          if (endian === "big") w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
          else w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
          res[i] = w >>> 0;
        }
        return res;
      }
      exports.join32 = join32;

      function split32(msg, endian) {
        var res = new Array(msg.length * 4);
        for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
          var m = msg[i];
          if (endian === "big") {
            res[k] = m >>> 24;
            res[k + 1] = (m >>> 16) & 0xff;
            res[k + 2] = (m >>> 8) & 0xff;
            res[k + 3] = m & 0xff;
          } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = (m >>> 16) & 0xff;
            res[k + 1] = (m >>> 8) & 0xff;
            res[k] = m & 0xff;
          }
        }
        return res;
      }
      exports.split32 = split32;

      function rotr32(w, b) {
        return (w >>> b) | (w << (32 - b));
      }
      exports.rotr32 = rotr32;

      function rotl32(w, b) {
        return (w << b) | (w >>> (32 - b));
      }
      exports.rotl32 = rotl32;

      function sum32(a, b) {
        return (a + b) >>> 0;
      }
      exports.sum32 = sum32;

      function sum32_3(a, b, c) {
        return (a + b + c) >>> 0;
      }
      exports.sum32_3 = sum32_3;

      function sum32_4(a, b, c, d) {
        return (a + b + c + d) >>> 0;
      }
      exports.sum32_4 = sum32_4;

      function sum32_5(a, b, c, d, e) {
        return (a + b + c + d + e) >>> 0;
      }
      exports.sum32_5 = sum32_5;

      function sum64(buf, pos, ah, al) {
        var bh = buf[pos];
        var bl = buf[pos + 1];

        var lo = (al + bl) >>> 0;
        var hi = (lo < al ? 1 : 0) + ah + bh;
        buf[pos] = hi >>> 0;
        buf[pos + 1] = lo;
      }
      exports.sum64 = sum64;

      function sum64_hi(ah, al, bh, bl) {
        var lo = (al + bl) >>> 0;
        var hi = (lo < al ? 1 : 0) + ah + bh;
        return hi >>> 0;
      }
      exports.sum64_hi = sum64_hi;

      function sum64_lo(ah, al, bh, bl) {
        var lo = al + bl;
        return lo >>> 0;
      }
      exports.sum64_lo = sum64_lo;

      function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
        var carry = 0;
        var lo = al;
        lo = (lo + bl) >>> 0;
        carry += lo < al ? 1 : 0;
        lo = (lo + cl) >>> 0;
        carry += lo < cl ? 1 : 0;
        lo = (lo + dl) >>> 0;
        carry += lo < dl ? 1 : 0;

        var hi = ah + bh + ch + dh + carry;
        return hi >>> 0;
      }
      exports.sum64_4_hi = sum64_4_hi;

      function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
        var lo = al + bl + cl + dl;
        return lo >>> 0;
      }
      exports.sum64_4_lo = sum64_4_lo;

      function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
        var carry = 0;
        var lo = al;
        lo = (lo + bl) >>> 0;
        carry += lo < al ? 1 : 0;
        lo = (lo + cl) >>> 0;
        carry += lo < cl ? 1 : 0;
        lo = (lo + dl) >>> 0;
        carry += lo < dl ? 1 : 0;
        lo = (lo + el) >>> 0;
        carry += lo < el ? 1 : 0;

        var hi = ah + bh + ch + dh + eh + carry;
        return hi >>> 0;
      }
      exports.sum64_5_hi = sum64_5_hi;

      function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
        var lo = al + bl + cl + dl + el;

        return lo >>> 0;
      }
      exports.sum64_5_lo = sum64_5_lo;

      function rotr64_hi(ah, al, num) {
        var r = (al << (32 - num)) | (ah >>> num);
        return r >>> 0;
      }
      exports.rotr64_hi = rotr64_hi;

      function rotr64_lo(ah, al, num) {
        var r = (ah << (32 - num)) | (al >>> num);
        return r >>> 0;
      }
      exports.rotr64_lo = rotr64_lo;

      function shr64_hi(ah, al, num) {
        return ah >>> num;
      }
      exports.shr64_hi = shr64_hi;

      function shr64_lo(ah, al, num) {
        var r = (ah << (32 - num)) | (al >>> num);
        return r >>> 0;
      }
      exports.shr64_lo = shr64_lo;

      /***/
    },

    /***/ 2156: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var hash = __webpack_require__(3715);
      var utils = __webpack_require__(4504);
      var assert = __webpack_require__(9746);

      function HmacDRBG(options) {
        if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
        this.hash = options.hash;
        this.predResist = !!options.predResist;

        this.outLen = this.hash.outSize;
        this.minEntropy = options.minEntropy || this.hash.hmacStrength;

        this._reseed = null;
        this.reseedInterval = null;
        this.K = null;
        this.V = null;

        var entropy = utils.toArray(options.entropy, options.entropyEnc || "hex");
        var nonce = utils.toArray(options.nonce, options.nonceEnc || "hex");
        var pers = utils.toArray(options.pers, options.persEnc || "hex");
        assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");
        this._init(entropy, nonce, pers);
      }
      module.exports = HmacDRBG;

      HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
        var seed = entropy.concat(nonce).concat(pers);

        this.K = new Array(this.outLen / 8);
        this.V = new Array(this.outLen / 8);
        for (var i = 0; i < this.V.length; i++) {
          this.K[i] = 0x00;
          this.V[i] = 0x01;
        }

        this._update(seed);
        this._reseed = 1;
        this.reseedInterval = 0x1000000000000; // 2^48
      };

      HmacDRBG.prototype._hmac = function hmac() {
        return new hash.hmac(this.hash, this.K);
      };

      HmacDRBG.prototype._update = function update(seed) {
        var kmac = this._hmac().update(this.V).update([0x00]);
        if (seed) kmac = kmac.update(seed);
        this.K = kmac.digest();
        this.V = this._hmac().update(this.V).digest();
        if (!seed) return;

        this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
        this.V = this._hmac().update(this.V).digest();
      };

      HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
        // Optional entropy enc
        if (typeof entropyEnc !== "string") {
          addEnc = add;
          add = entropyEnc;
          entropyEnc = null;
        }

        entropy = utils.toArray(entropy, entropyEnc);
        add = utils.toArray(add, addEnc);

        assert(entropy.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits");

        this._update(entropy.concat(add || []));
        this._reseed = 1;
      };

      HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
        if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");

        // Optional encoding
        if (typeof enc !== "string") {
          addEnc = add;
          add = enc;
          enc = null;
        }

        // Optional additional data
        if (add) {
          add = utils.toArray(add, addEnc || "hex");
          this._update(add);
        }

        var temp = [];
        while (temp.length < len) {
          this.V = this._hmac().update(this.V).digest();
          temp = temp.concat(this.V);
        }

        var res = temp.slice(0, len);
        this._update(add);
        this._reseed++;
        return utils.encode(res, enc);
      };

      /***/
    },

    /***/ 9267: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      var http = __webpack_require__(8501);
      var url = __webpack_require__(8575);

      var https = module.exports;

      for (var key in http) {
        if (http.hasOwnProperty(key)) https[key] = http[key];
      }

      https.request = function (params, cb) {
        params = validateParams(params);
        return http.request.call(this, params, cb);
      };

      https.get = function (params, cb) {
        params = validateParams(params);
        return http.get.call(this, params, cb);
      };

      function validateParams(params) {
        if (typeof params === "string") {
          params = url.parse(params);
        }
        if (!params.protocol) {
          params.protocol = "https:";
        }
        if (params.protocol !== "https:") {
          throw new Error('Protocol "' + params.protocol + '" not supported. Expected "https:"');
        }
        return params;
      }

      /***/
    },

    /***/ 645: /***/ (__unused_webpack_module, exports) => {
      /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
      exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];

        i += d;

        e = s & ((1 << -nBits) - 1);
        s >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        m = e & ((1 << -nBits) - 1);
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };

      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

        value = Math.abs(value);

        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }

          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }

        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

        e = (e << mLen) | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

        buffer[offset + i - d] |= s * 128;
      };

      /***/
    },

    /***/ 5717: /***/ (module) => {
      if (typeof Object.create === "function") {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            ctor.prototype = Object.create(superCtor.prototype, {
              constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true,
              },
            });
          }
        };
      } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
          if (superCtor) {
            ctor.super_ = superCtor;
            var TempCtor = function () {};
            TempCtor.prototype = superCtor.prototype;
            ctor.prototype = new TempCtor();
            ctor.prototype.constructor = ctor;
          }
        };
      }

      /***/
    },

    /***/ 2584: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var hasToStringTag = __webpack_require__(6410)();
      var callBound = __webpack_require__(1924);

      var $toString = callBound("Object.prototype.toString");

      var isStandardArguments = function isArguments(value) {
        if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
          return false;
        }
        return $toString(value) === "[object Arguments]";
      };

      var isLegacyArguments = function isArguments(value) {
        if (isStandardArguments(value)) {
          return true;
        }
        return (
          value !== null &&
          typeof value === "object" &&
          typeof value.length === "number" &&
          value.length >= 0 &&
          $toString(value) !== "[object Array]" &&
          $toString(value.callee) === "[object Function]"
        );
      };

      var supportsStandardArguments = (function () {
        return isStandardArguments(arguments);
      })();

      isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

      module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;

      /***/
    },

    /***/ 5320: /***/ (module) => {
      "use strict";

      var fnToStr = Function.prototype.toString;
      var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
      var badArrayLike;
      var isCallableMarker;
      if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
        try {
          badArrayLike = Object.defineProperty({}, "length", {
            get: function () {
              throw isCallableMarker;
            },
          });
          isCallableMarker = {};
          // eslint-disable-next-line no-throw-literal
          reflectApply(
            function () {
              throw 42;
            },
            null,
            badArrayLike
          );
        } catch (_) {
          if (_ !== isCallableMarker) {
            reflectApply = null;
          }
        }
      } else {
        reflectApply = null;
      }

      var constructorRegex = /^\s*class\b/;
      var isES6ClassFn = function isES6ClassFunction(value) {
        try {
          var fnStr = fnToStr.call(value);
          return constructorRegex.test(fnStr);
        } catch (e) {
          return false; // not a function
        }
      };

      var tryFunctionObject = function tryFunctionToStr(value) {
        try {
          if (isES6ClassFn(value)) {
            return false;
          }
          fnToStr.call(value);
          return true;
        } catch (e) {
          return false;
        }
      };
      var toStr = Object.prototype.toString;
      var fnClass = "[object Function]";
      var genClass = "[object GeneratorFunction]";
      var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag; // better: use `has-tostringtag`
      /* globals document: false */
      var documentDotAll = typeof document === "object" && typeof document.all === "undefined" && document.all !== undefined ? document.all : {};

      module.exports = reflectApply
        ? function isCallable(value) {
            if (value === documentDotAll) {
              return true;
            }
            if (!value) {
              return false;
            }
            if (typeof value !== "function" && typeof value !== "object") {
              return false;
            }
            if (typeof value === "function" && !value.prototype) {
              return true;
            }
            try {
              reflectApply(value, null, badArrayLike);
            } catch (e) {
              if (e !== isCallableMarker) {
                return false;
              }
            }
            return !isES6ClassFn(value);
          }
        : function isCallable(value) {
            if (value === documentDotAll) {
              return true;
            }
            if (!value) {
              return false;
            }
            if (typeof value !== "function" && typeof value !== "object") {
              return false;
            }
            if (typeof value === "function" && !value.prototype) {
              return true;
            }
            if (hasToStringTag) {
              return tryFunctionObject(value);
            }
            if (isES6ClassFn(value)) {
              return false;
            }
            var strClass = toStr.call(value);
            return strClass === fnClass || strClass === genClass;
          };

      /***/
    },

    /***/ 8662: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var toStr = Object.prototype.toString;
      var fnToStr = Function.prototype.toString;
      var isFnRegex = /^\s*(?:function)?\*/;
      var hasToStringTag = __webpack_require__(6410)();
      var getProto = Object.getPrototypeOf;
      var getGeneratorFunc = function () {
        // eslint-disable-line consistent-return
        if (!hasToStringTag) {
          return false;
        }
        try {
          return Function("return function*() {}")();
        } catch (e) {}
      };
      var GeneratorFunction;

      module.exports = function isGeneratorFunction(fn) {
        if (typeof fn !== "function") {
          return false;
        }
        if (isFnRegex.test(fnToStr.call(fn))) {
          return true;
        }
        if (!hasToStringTag) {
          var str = toStr.call(fn);
          return str === "[object GeneratorFunction]";
        }
        if (!getProto) {
          return false;
        }
        if (typeof GeneratorFunction === "undefined") {
          var generatorFunc = getGeneratorFunc();
          GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
        }
        return getProto(fn) === GeneratorFunction;
      };

      /***/
    },

    /***/ 5692: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var forEach = __webpack_require__(4029);
      var availableTypedArrays = __webpack_require__(3083);
      var callBound = __webpack_require__(1924);

      var $toString = callBound("Object.prototype.toString");
      var hasToStringTag = __webpack_require__(6410)();

      var g = typeof globalThis === "undefined" ? __webpack_require__.g : globalThis;
      var typedArrays = availableTypedArrays();

      var $indexOf =
        callBound("Array.prototype.indexOf", true) ||
        function indexOf(array, value) {
          for (var i = 0; i < array.length; i += 1) {
            if (array[i] === value) {
              return i;
            }
          }
          return -1;
        };
      var $slice = callBound("String.prototype.slice");
      var toStrTags = {};
      var gOPD = __webpack_require__(882);
      var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
      if (hasToStringTag && gOPD && getPrototypeOf) {
        forEach(typedArrays, function (typedArray) {
          var arr = new g[typedArray]();
          if (Symbol.toStringTag in arr) {
            var proto = getPrototypeOf(arr);
            var descriptor = gOPD(proto, Symbol.toStringTag);
            if (!descriptor) {
              var superProto = getPrototypeOf(proto);
              descriptor = gOPD(superProto, Symbol.toStringTag);
            }
            toStrTags[typedArray] = descriptor.get;
          }
        });
      }

      var tryTypedArrays = function tryAllTypedArrays(value) {
        var anyTrue = false;
        forEach(toStrTags, function (getter, typedArray) {
          if (!anyTrue) {
            try {
              anyTrue = getter.call(value) === typedArray;
            } catch (e) {
              /**/
            }
          }
        });
        return anyTrue;
      };

      module.exports = function isTypedArray(value) {
        if (!value || typeof value !== "object") {
          return false;
        }
        if (!hasToStringTag || !(Symbol.toStringTag in value)) {
          var tag = $slice($toString(value), 8, -1);
          return $indexOf(typedArrays, tag) > -1;
        }
        if (!gOPD) {
          return false;
        }
        return tryTypedArrays(value);
      };

      /***/
    },

    /***/ 1094: /***/ (module, exports, __webpack_require__) => {
      /* provided dependency */ var process = __webpack_require__(4155);
      var __WEBPACK_AMD_DEFINE_RESULT__;
      /**
       * [js-sha3]{@link https://github.com/emn178/js-sha3}
       *
       * @version 0.8.0
       * @author Chen, Yi-Cyuan [emn178@gmail.com]
       * @copyright Chen, Yi-Cyuan 2015-2018
       * @license MIT
       */
      /*jslint bitwise: true */
      (function () {
        "use strict";

        var INPUT_ERROR = "input is invalid type";
        var FINALIZE_ERROR = "finalize already called";
        var WINDOW = typeof window === "object";
        var root = WINDOW ? window : {};
        if (root.JS_SHA3_NO_WINDOW) {
          WINDOW = false;
        }
        var WEB_WORKER = !WINDOW && typeof self === "object";
        var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
        if (NODE_JS) {
          root = __webpack_require__.g;
        } else if (WEB_WORKER) {
          root = self;
        }
        var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && "object" === "object" && module.exports;
        var AMD = true && __webpack_require__.amdO;
        var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
        var HEX_CHARS = "0123456789abcdef".split("");
        var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
        var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
        var KECCAK_PADDING = [1, 256, 65536, 16777216];
        var PADDING = [6, 1536, 393216, 100663296];
        var SHIFT = [0, 8, 16, 24];
        var RC = [
          1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136,
          0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648,
          32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648,
        ];
        var BITS = [224, 256, 384, 512];
        var SHAKE_BITS = [128, 256];
        var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
        var CSHAKE_BYTEPAD = {
          128: 168,
          256: 136,
        };

        if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
          Array.isArray = function (obj) {
            return Object.prototype.toString.call(obj) === "[object Array]";
          };
        }

        if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
          ArrayBuffer.isView = function (obj) {
            return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
          };
        }

        var createOutputMethod = function (bits, padding, outputType) {
          return function (message) {
            return new Keccak(bits, padding, bits).update(message)[outputType]();
          };
        };

        var createShakeOutputMethod = function (bits, padding, outputType) {
          return function (message, outputBits) {
            return new Keccak(bits, padding, outputBits).update(message)[outputType]();
          };
        };

        var createCshakeOutputMethod = function (bits, padding, outputType) {
          return function (message, outputBits, n, s) {
            return methods["cshake" + bits].update(message, outputBits, n, s)[outputType]();
          };
        };

        var createKmacOutputMethod = function (bits, padding, outputType) {
          return function (key, message, outputBits, s) {
            return methods["kmac" + bits].update(key, message, outputBits, s)[outputType]();
          };
        };

        var createOutputMethods = function (method, createMethod, bits, padding) {
          for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
            var type = OUTPUT_TYPES[i];
            method[type] = createMethod(bits, padding, type);
          }
          return method;
        };

        var createMethod = function (bits, padding) {
          var method = createOutputMethod(bits, padding, "hex");
          method.create = function () {
            return new Keccak(bits, padding, bits);
          };
          method.update = function (message) {
            return method.create().update(message);
          };
          return createOutputMethods(method, createOutputMethod, bits, padding);
        };

        var createShakeMethod = function (bits, padding) {
          var method = createShakeOutputMethod(bits, padding, "hex");
          method.create = function (outputBits) {
            return new Keccak(bits, padding, outputBits);
          };
          method.update = function (message, outputBits) {
            return method.create(outputBits).update(message);
          };
          return createOutputMethods(method, createShakeOutputMethod, bits, padding);
        };

        var createCshakeMethod = function (bits, padding) {
          var w = CSHAKE_BYTEPAD[bits];
          var method = createCshakeOutputMethod(bits, padding, "hex");
          method.create = function (outputBits, n, s) {
            if (!n && !s) {
              return methods["shake" + bits].create(outputBits);
            } else {
              return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
            }
          };
          method.update = function (message, outputBits, n, s) {
            return method.create(outputBits, n, s).update(message);
          };
          return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
        };

        var createKmacMethod = function (bits, padding) {
          var w = CSHAKE_BYTEPAD[bits];
          var method = createKmacOutputMethod(bits, padding, "hex");
          method.create = function (key, outputBits, s) {
            return new Kmac(bits, padding, outputBits).bytepad(["KMAC", s], w).bytepad([key], w);
          };
          method.update = function (key, message, outputBits, s) {
            return method.create(key, outputBits, s).update(message);
          };
          return createOutputMethods(method, createKmacOutputMethod, bits, padding);
        };

        var algorithms = [
          { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
          { name: "sha3", padding: PADDING, bits: BITS, createMethod: createMethod },
          { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
          { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
          { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod },
        ];

        var methods = {},
          methodNames = [];

        for (var i = 0; i < algorithms.length; ++i) {
          var algorithm = algorithms[i];
          var bits = algorithm.bits;
          for (var j = 0; j < bits.length; ++j) {
            var methodName = algorithm.name + "_" + bits[j];
            methodNames.push(methodName);
            methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
            if (algorithm.name !== "sha3") {
              var newMethodName = algorithm.name + bits[j];
              methodNames.push(newMethodName);
              methods[newMethodName] = methods[methodName];
            }
          }
        }

        function Keccak(bits, padding, outputBits) {
          this.blocks = [];
          this.s = [];
          this.padding = padding;
          this.outputBits = outputBits;
          this.reset = true;
          this.finalized = false;
          this.block = 0;
          this.start = 0;
          this.blockCount = (1600 - (bits << 1)) >> 5;
          this.byteCount = this.blockCount << 2;
          this.outputBlocks = outputBits >> 5;
          this.extraBytes = (outputBits & 31) >> 3;

          for (var i = 0; i < 50; ++i) {
            this.s[i] = 0;
          }
        }

        Keccak.prototype.update = function (message) {
          if (this.finalized) {
            throw new Error(FINALIZE_ERROR);
          }
          var notString,
            type = typeof message;
          if (type !== "string") {
            if (type === "object") {
              if (message === null) {
                throw new Error(INPUT_ERROR);
              } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
                message = new Uint8Array(message);
              } else if (!Array.isArray(message)) {
                if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                  throw new Error(INPUT_ERROR);
                }
              }
            } else {
              throw new Error(INPUT_ERROR);
            }
            notString = true;
          }
          var blocks = this.blocks,
            byteCount = this.byteCount,
            length = message.length,
            blockCount = this.blockCount,
            index = 0,
            s = this.s,
            i,
            code;

          while (index < length) {
            if (this.reset) {
              this.reset = false;
              blocks[0] = this.block;
              for (i = 1; i < blockCount + 1; ++i) {
                blocks[i] = 0;
              }
            }
            if (notString) {
              for (i = this.start; index < length && i < byteCount; ++index) {
                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
              }
            } else {
              for (i = this.start; index < length && i < byteCount; ++index) {
                code = message.charCodeAt(index);
                if (code < 0x80) {
                  blocks[i >> 2] |= code << SHIFT[i++ & 3];
                } else if (code < 0x800) {
                  blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                } else if (code < 0xd800 || code >= 0xe000) {
                  blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                } else {
                  code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                  blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                  blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
                }
              }
            }
            this.lastByteIndex = i;
            if (i >= byteCount) {
              this.start = i - byteCount;
              this.block = blocks[blockCount];
              for (i = 0; i < blockCount; ++i) {
                s[i] ^= blocks[i];
              }
              f(s);
              this.reset = true;
            } else {
              this.start = i;
            }
          }
          return this;
        };

        Keccak.prototype.encode = function (x, right) {
          var o = x & 255,
            n = 1;
          var bytes = [o];
          x = x >> 8;
          o = x & 255;
          while (o > 0) {
            bytes.unshift(o);
            x = x >> 8;
            o = x & 255;
            ++n;
          }
          if (right) {
            bytes.push(n);
          } else {
            bytes.unshift(n);
          }
          this.update(bytes);
          return bytes.length;
        };

        Keccak.prototype.encodeString = function (str) {
          var notString,
            type = typeof str;
          if (type !== "string") {
            if (type === "object") {
              if (str === null) {
                throw new Error(INPUT_ERROR);
              } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
                str = new Uint8Array(str);
              } else if (!Array.isArray(str)) {
                if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                  throw new Error(INPUT_ERROR);
                }
              }
            } else {
              throw new Error(INPUT_ERROR);
            }
            notString = true;
          }
          var bytes = 0,
            length = str.length;
          if (notString) {
            bytes = length;
          } else {
            for (var i = 0; i < str.length; ++i) {
              var code = str.charCodeAt(i);
              if (code < 0x80) {
                bytes += 1;
              } else if (code < 0x800) {
                bytes += 2;
              } else if (code < 0xd800 || code >= 0xe000) {
                bytes += 3;
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
                bytes += 4;
              }
            }
          }
          bytes += this.encode(bytes * 8);
          this.update(str);
          return bytes;
        };

        Keccak.prototype.bytepad = function (strs, w) {
          var bytes = this.encode(w);
          for (var i = 0; i < strs.length; ++i) {
            bytes += this.encodeString(strs[i]);
          }
          var paddingBytes = w - (bytes % w);
          var zeros = [];
          zeros.length = paddingBytes;
          this.update(zeros);
          return this;
        };

        Keccak.prototype.finalize = function () {
          if (this.finalized) {
            return;
          }
          this.finalized = true;
          var blocks = this.blocks,
            i = this.lastByteIndex,
            blockCount = this.blockCount,
            s = this.s;
          blocks[i >> 2] |= this.padding[i & 3];
          if (this.lastByteIndex === this.byteCount) {
            blocks[0] = blocks[blockCount];
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          blocks[blockCount - 1] |= 0x80000000;
          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }
          f(s);
        };

        Keccak.prototype.toString = Keccak.prototype.hex = function () {
          this.finalize();

          var blockCount = this.blockCount,
            s = this.s,
            outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes,
            i = 0,
            j = 0;
          var hex = "",
            block;
          while (j < outputBlocks) {
            for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
              block = s[i];
              hex +=
                HEX_CHARS[(block >> 4) & 0x0f] +
                HEX_CHARS[block & 0x0f] +
                HEX_CHARS[(block >> 12) & 0x0f] +
                HEX_CHARS[(block >> 8) & 0x0f] +
                HEX_CHARS[(block >> 20) & 0x0f] +
                HEX_CHARS[(block >> 16) & 0x0f] +
                HEX_CHARS[(block >> 28) & 0x0f] +
                HEX_CHARS[(block >> 24) & 0x0f];
            }
            if (j % blockCount === 0) {
              f(s);
              i = 0;
            }
          }
          if (extraBytes) {
            block = s[i];
            hex += HEX_CHARS[(block >> 4) & 0x0f] + HEX_CHARS[block & 0x0f];
            if (extraBytes > 1) {
              hex += HEX_CHARS[(block >> 12) & 0x0f] + HEX_CHARS[(block >> 8) & 0x0f];
            }
            if (extraBytes > 2) {
              hex += HEX_CHARS[(block >> 20) & 0x0f] + HEX_CHARS[(block >> 16) & 0x0f];
            }
          }
          return hex;
        };

        Keccak.prototype.arrayBuffer = function () {
          this.finalize();

          var blockCount = this.blockCount,
            s = this.s,
            outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes,
            i = 0,
            j = 0;
          var bytes = this.outputBits >> 3;
          var buffer;
          if (extraBytes) {
            buffer = new ArrayBuffer((outputBlocks + 1) << 2);
          } else {
            buffer = new ArrayBuffer(bytes);
          }
          var array = new Uint32Array(buffer);
          while (j < outputBlocks) {
            for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
              array[j] = s[i];
            }
            if (j % blockCount === 0) {
              f(s);
            }
          }
          if (extraBytes) {
            array[i] = s[i];
            buffer = buffer.slice(0, bytes);
          }
          return buffer;
        };

        Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

        Keccak.prototype.digest = Keccak.prototype.array = function () {
          this.finalize();

          var blockCount = this.blockCount,
            s = this.s,
            outputBlocks = this.outputBlocks,
            extraBytes = this.extraBytes,
            i = 0,
            j = 0;
          var array = [],
            offset,
            block;
          while (j < outputBlocks) {
            for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
              offset = j << 2;
              block = s[i];
              array[offset] = block & 0xff;
              array[offset + 1] = (block >> 8) & 0xff;
              array[offset + 2] = (block >> 16) & 0xff;
              array[offset + 3] = (block >> 24) & 0xff;
            }
            if (j % blockCount === 0) {
              f(s);
            }
          }
          if (extraBytes) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xff;
            if (extraBytes > 1) {
              array[offset + 1] = (block >> 8) & 0xff;
            }
            if (extraBytes > 2) {
              array[offset + 2] = (block >> 16) & 0xff;
            }
          }
          return array;
        };

        function Kmac(bits, padding, outputBits) {
          Keccak.call(this, bits, padding, outputBits);
        }

        Kmac.prototype = new Keccak();

        Kmac.prototype.finalize = function () {
          this.encode(this.outputBits, true);
          return Keccak.prototype.finalize.call(this);
        };

        var f = function (s) {
          var h,
            l,
            n,
            c0,
            c1,
            c2,
            c3,
            c4,
            c5,
            c6,
            c7,
            c8,
            c9,
            b0,
            b1,
            b2,
            b3,
            b4,
            b5,
            b6,
            b7,
            b8,
            b9,
            b10,
            b11,
            b12,
            b13,
            b14,
            b15,
            b16,
            b17,
            b18,
            b19,
            b20,
            b21,
            b22,
            b23,
            b24,
            b25,
            b26,
            b27,
            b28,
            b29,
            b30,
            b31,
            b32,
            b33,
            b34,
            b35,
            b36,
            b37,
            b38,
            b39,
            b40,
            b41,
            b42,
            b43,
            b44,
            b45,
            b46,
            b47,
            b48,
            b49;
          for (n = 0; n < 48; n += 2) {
            c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
            c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
            c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
            c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
            c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
            c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
            c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
            c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
            c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
            c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

            h = c8 ^ ((c2 << 1) | (c3 >>> 31));
            l = c9 ^ ((c3 << 1) | (c2 >>> 31));
            s[0] ^= h;
            s[1] ^= l;
            s[10] ^= h;
            s[11] ^= l;
            s[20] ^= h;
            s[21] ^= l;
            s[30] ^= h;
            s[31] ^= l;
            s[40] ^= h;
            s[41] ^= l;
            h = c0 ^ ((c4 << 1) | (c5 >>> 31));
            l = c1 ^ ((c5 << 1) | (c4 >>> 31));
            s[2] ^= h;
            s[3] ^= l;
            s[12] ^= h;
            s[13] ^= l;
            s[22] ^= h;
            s[23] ^= l;
            s[32] ^= h;
            s[33] ^= l;
            s[42] ^= h;
            s[43] ^= l;
            h = c2 ^ ((c6 << 1) | (c7 >>> 31));
            l = c3 ^ ((c7 << 1) | (c6 >>> 31));
            s[4] ^= h;
            s[5] ^= l;
            s[14] ^= h;
            s[15] ^= l;
            s[24] ^= h;
            s[25] ^= l;
            s[34] ^= h;
            s[35] ^= l;
            s[44] ^= h;
            s[45] ^= l;
            h = c4 ^ ((c8 << 1) | (c9 >>> 31));
            l = c5 ^ ((c9 << 1) | (c8 >>> 31));
            s[6] ^= h;
            s[7] ^= l;
            s[16] ^= h;
            s[17] ^= l;
            s[26] ^= h;
            s[27] ^= l;
            s[36] ^= h;
            s[37] ^= l;
            s[46] ^= h;
            s[47] ^= l;
            h = c6 ^ ((c0 << 1) | (c1 >>> 31));
            l = c7 ^ ((c1 << 1) | (c0 >>> 31));
            s[8] ^= h;
            s[9] ^= l;
            s[18] ^= h;
            s[19] ^= l;
            s[28] ^= h;
            s[29] ^= l;
            s[38] ^= h;
            s[39] ^= l;
            s[48] ^= h;
            s[49] ^= l;

            b0 = s[0];
            b1 = s[1];
            b32 = (s[11] << 4) | (s[10] >>> 28);
            b33 = (s[10] << 4) | (s[11] >>> 28);
            b14 = (s[20] << 3) | (s[21] >>> 29);
            b15 = (s[21] << 3) | (s[20] >>> 29);
            b46 = (s[31] << 9) | (s[30] >>> 23);
            b47 = (s[30] << 9) | (s[31] >>> 23);
            b28 = (s[40] << 18) | (s[41] >>> 14);
            b29 = (s[41] << 18) | (s[40] >>> 14);
            b20 = (s[2] << 1) | (s[3] >>> 31);
            b21 = (s[3] << 1) | (s[2] >>> 31);
            b2 = (s[13] << 12) | (s[12] >>> 20);
            b3 = (s[12] << 12) | (s[13] >>> 20);
            b34 = (s[22] << 10) | (s[23] >>> 22);
            b35 = (s[23] << 10) | (s[22] >>> 22);
            b16 = (s[33] << 13) | (s[32] >>> 19);
            b17 = (s[32] << 13) | (s[33] >>> 19);
            b48 = (s[42] << 2) | (s[43] >>> 30);
            b49 = (s[43] << 2) | (s[42] >>> 30);
            b40 = (s[5] << 30) | (s[4] >>> 2);
            b41 = (s[4] << 30) | (s[5] >>> 2);
            b22 = (s[14] << 6) | (s[15] >>> 26);
            b23 = (s[15] << 6) | (s[14] >>> 26);
            b4 = (s[25] << 11) | (s[24] >>> 21);
            b5 = (s[24] << 11) | (s[25] >>> 21);
            b36 = (s[34] << 15) | (s[35] >>> 17);
            b37 = (s[35] << 15) | (s[34] >>> 17);
            b18 = (s[45] << 29) | (s[44] >>> 3);
            b19 = (s[44] << 29) | (s[45] >>> 3);
            b10 = (s[6] << 28) | (s[7] >>> 4);
            b11 = (s[7] << 28) | (s[6] >>> 4);
            b42 = (s[17] << 23) | (s[16] >>> 9);
            b43 = (s[16] << 23) | (s[17] >>> 9);
            b24 = (s[26] << 25) | (s[27] >>> 7);
            b25 = (s[27] << 25) | (s[26] >>> 7);
            b6 = (s[36] << 21) | (s[37] >>> 11);
            b7 = (s[37] << 21) | (s[36] >>> 11);
            b38 = (s[47] << 24) | (s[46] >>> 8);
            b39 = (s[46] << 24) | (s[47] >>> 8);
            b30 = (s[8] << 27) | (s[9] >>> 5);
            b31 = (s[9] << 27) | (s[8] >>> 5);
            b12 = (s[18] << 20) | (s[19] >>> 12);
            b13 = (s[19] << 20) | (s[18] >>> 12);
            b44 = (s[29] << 7) | (s[28] >>> 25);
            b45 = (s[28] << 7) | (s[29] >>> 25);
            b26 = (s[38] << 8) | (s[39] >>> 24);
            b27 = (s[39] << 8) | (s[38] >>> 24);
            b8 = (s[48] << 14) | (s[49] >>> 18);
            b9 = (s[49] << 14) | (s[48] >>> 18);

            s[0] = b0 ^ (~b2 & b4);
            s[1] = b1 ^ (~b3 & b5);
            s[10] = b10 ^ (~b12 & b14);
            s[11] = b11 ^ (~b13 & b15);
            s[20] = b20 ^ (~b22 & b24);
            s[21] = b21 ^ (~b23 & b25);
            s[30] = b30 ^ (~b32 & b34);
            s[31] = b31 ^ (~b33 & b35);
            s[40] = b40 ^ (~b42 & b44);
            s[41] = b41 ^ (~b43 & b45);
            s[2] = b2 ^ (~b4 & b6);
            s[3] = b3 ^ (~b5 & b7);
            s[12] = b12 ^ (~b14 & b16);
            s[13] = b13 ^ (~b15 & b17);
            s[22] = b22 ^ (~b24 & b26);
            s[23] = b23 ^ (~b25 & b27);
            s[32] = b32 ^ (~b34 & b36);
            s[33] = b33 ^ (~b35 & b37);
            s[42] = b42 ^ (~b44 & b46);
            s[43] = b43 ^ (~b45 & b47);
            s[4] = b4 ^ (~b6 & b8);
            s[5] = b5 ^ (~b7 & b9);
            s[14] = b14 ^ (~b16 & b18);
            s[15] = b15 ^ (~b17 & b19);
            s[24] = b24 ^ (~b26 & b28);
            s[25] = b25 ^ (~b27 & b29);
            s[34] = b34 ^ (~b36 & b38);
            s[35] = b35 ^ (~b37 & b39);
            s[44] = b44 ^ (~b46 & b48);
            s[45] = b45 ^ (~b47 & b49);
            s[6] = b6 ^ (~b8 & b0);
            s[7] = b7 ^ (~b9 & b1);
            s[16] = b16 ^ (~b18 & b10);
            s[17] = b17 ^ (~b19 & b11);
            s[26] = b26 ^ (~b28 & b20);
            s[27] = b27 ^ (~b29 & b21);
            s[36] = b36 ^ (~b38 & b30);
            s[37] = b37 ^ (~b39 & b31);
            s[46] = b46 ^ (~b48 & b40);
            s[47] = b47 ^ (~b49 & b41);
            s[8] = b8 ^ (~b0 & b2);
            s[9] = b9 ^ (~b1 & b3);
            s[18] = b18 ^ (~b10 & b12);
            s[19] = b19 ^ (~b11 & b13);
            s[28] = b28 ^ (~b20 & b22);
            s[29] = b29 ^ (~b21 & b23);
            s[38] = b38 ^ (~b30 & b32);
            s[39] = b39 ^ (~b31 & b33);
            s[48] = b48 ^ (~b40 & b42);
            s[49] = b49 ^ (~b41 & b43);

            s[0] ^= RC[n];
            s[1] ^= RC[n + 1];
          }
        };

        if (COMMON_JS) {
          module.exports = methods;
        } else {
          for (i = 0; i < methodNames.length; ++i) {
            root[methodNames[i]] = methods[methodNames[i]];
          }
          if (AMD) {
            !((__WEBPACK_AMD_DEFINE_RESULT__ = function () {
              return methods;
            }.call(exports, __webpack_require__, exports, module)),
            __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          }
        }
      })();

      /***/
    },

    /***/ 7266: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      var json = typeof JSON !== "undefined" ? JSON : __webpack_require__(8418);

      module.exports = function (obj, opts) {
        if (!opts) opts = {};
        if (typeof opts === "function") opts = { cmp: opts };
        var space = opts.space || "";
        if (typeof space === "number") space = Array(space + 1).join(" ");
        var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
        var replacer =
          opts.replacer ||
          function (key, value) {
            return value;
          };

        var cmp =
          opts.cmp &&
          (function (f) {
            return function (node) {
              return function (a, b) {
                var aobj = { key: a, value: node[a] };
                var bobj = { key: b, value: node[b] };
                return f(aobj, bobj);
              };
            };
          })(opts.cmp);

        var seen = [];
        return (function stringify(parent, key, node, level) {
          var indent = space ? "\n" + new Array(level + 1).join(space) : "";
          var colonSeparator = space ? ": " : ":";

          if (node && node.toJSON && typeof node.toJSON === "function") {
            node = node.toJSON();
          }

          node = replacer.call(parent, key, node);

          if (node === undefined) {
            return;
          }
          if (typeof node !== "object" || node === null) {
            return json.stringify(node);
          }
          if (isArray(node)) {
            var out = [];
            for (var i = 0; i < node.length; i++) {
              var item = stringify(node, i, node[i], level + 1) || json.stringify(null);
              out.push(indent + space + item);
            }
            return "[" + out.join(",") + indent + "]";
          } else {
            if (seen.indexOf(node) !== -1) {
              if (cycles) return json.stringify("__cycle__");
              throw new TypeError("Converting circular structure to JSON");
            } else seen.push(node);

            var keys = objectKeys(node).sort(cmp && cmp(node));
            var out = [];
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              var value = stringify(node, key, node[key], level + 1);

              if (!value) continue;

              var keyValue = json.stringify(key) + colonSeparator + value;
              out.push(indent + space + keyValue);
            }
            seen.splice(seen.indexOf(node), 1);
            return "{" + out.join(",") + indent + "}";
          }
        })({ "": obj }, "", obj, 0);
      };

      var isArray =
        Array.isArray ||
        function (x) {
          return {}.toString.call(x) === "[object Array]";
        };

      var objectKeys =
        Object.keys ||
        function (obj) {
          var has =
            Object.prototype.hasOwnProperty ||
            function () {
              return true;
            };
          var keys = [];
          for (var key in obj) {
            if (has.call(obj, key)) keys.push(key);
          }
          return keys;
        };

      /***/
    },

    /***/ 8418: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      exports.parse = __webpack_require__(1396);
      exports.stringify = __webpack_require__(6177);

      /***/
    },

    /***/ 1396: /***/ (module) => {
      var at, // The index of the current character
        ch, // The current character
        escapee = {
          '"': '"',
          "\\": "\\",
          "/": "/",
          b: "\b",
          f: "\f",
          n: "\n",
          r: "\r",
          t: "\t",
        },
        text,
        error = function (m) {
          // Call error when something is wrong.
          throw {
            name: "SyntaxError",
            message: m,
            at: at,
            text: text,
          };
        },
        next = function (c) {
          // If a c parameter is provided, verify that it matches the current character.
          if (c && c !== ch) {
            error("Expected '" + c + "' instead of '" + ch + "'");
          }

          // Get the next character. When there are no more characters,
          // return the empty string.

          ch = text.charAt(at);
          at += 1;
          return ch;
        },
        number = function () {
          // Parse a number value.
          var number,
            string = "";

          if (ch === "-") {
            string = "-";
            next("-");
          }
          while (ch >= "0" && ch <= "9") {
            string += ch;
            next();
          }
          if (ch === ".") {
            string += ".";
            while (next() && ch >= "0" && ch <= "9") {
              string += ch;
            }
          }
          if (ch === "e" || ch === "E") {
            string += ch;
            next();
            if (ch === "-" || ch === "+") {
              string += ch;
              next();
            }
            while (ch >= "0" && ch <= "9") {
              string += ch;
              next();
            }
          }
          number = +string;
          if (!isFinite(number)) {
            error("Bad number");
          } else {
            return number;
          }
        },
        string = function () {
          // Parse a string value.
          var hex,
            i,
            string = "",
            uffff;

          // When parsing for string values, we must look for " and \ characters.
          if (ch === '"') {
            while (next()) {
              if (ch === '"') {
                next();
                return string;
              } else if (ch === "\\") {
                next();
                if (ch === "u") {
                  uffff = 0;
                  for (i = 0; i < 4; i += 1) {
                    hex = parseInt(next(), 16);
                    if (!isFinite(hex)) {
                      break;
                    }
                    uffff = uffff * 16 + hex;
                  }
                  string += String.fromCharCode(uffff);
                } else if (typeof escapee[ch] === "string") {
                  string += escapee[ch];
                } else {
                  break;
                }
              } else {
                string += ch;
              }
            }
          }
          error("Bad string");
        },
        white = function () {
          // Skip whitespace.

          while (ch && ch <= " ") {
            next();
          }
        },
        word = function () {
          // true, false, or null.

          switch (ch) {
            case "t":
              next("t");
              next("r");
              next("u");
              next("e");
              return true;
            case "f":
              next("f");
              next("a");
              next("l");
              next("s");
              next("e");
              return false;
            case "n":
              next("n");
              next("u");
              next("l");
              next("l");
              return null;
          }
          error("Unexpected '" + ch + "'");
        },
        value, // Place holder for the value function.
        array = function () {
          // Parse an array value.

          var array = [];

          if (ch === "[") {
            next("[");
            white();
            if (ch === "]") {
              next("]");
              return array; // empty array
            }
            while (ch) {
              array.push(value());
              white();
              if (ch === "]") {
                next("]");
                return array;
              }
              next(",");
              white();
            }
          }
          error("Bad array");
        },
        object = function () {
          // Parse an object value.

          var key,
            object = {};

          if (ch === "{") {
            next("{");
            white();
            if (ch === "}") {
              next("}");
              return object; // empty object
            }
            while (ch) {
              key = string();
              white();
              next(":");
              if (Object.hasOwnProperty.call(object, key)) {
                error('Duplicate key "' + key + '"');
              }
              object[key] = value();
              white();
              if (ch === "}") {
                next("}");
                return object;
              }
              next(",");
              white();
            }
          }
          error("Bad object");
        };

      value = function () {
        // Parse a JSON value. It could be an object, an array, a string, a number,
        // or a word.

        white();
        switch (ch) {
          case "{":
            return object();
          case "[":
            return array();
          case '"':
            return string();
          case "-":
            return number();
          default:
            return ch >= "0" && ch <= "9" ? number() : word();
        }
      };

      // Return the json_parse function. It will have access to all of the above
      // functions and variables.

      module.exports = function (source, reviver) {
        var result;

        text = source;
        at = 0;
        ch = " ";
        result = value();
        white();
        if (ch) {
          error("Syntax error");
        }

        // If there is a reviver function, we recursively walk the new structure,
        // passing each name/value pair to the reviver function for possible
        // transformation, starting with a temporary root object that holds the result
        // in an empty key. If there is not a reviver function, we simply return the
        // result.

        return typeof reviver === "function"
          ? (function walk(holder, key) {
              var k,
                v,
                value = holder[key];
              if (value && typeof value === "object") {
                for (k in value) {
                  if (Object.prototype.hasOwnProperty.call(value, k)) {
                    v = walk(value, k);
                    if (v !== undefined) {
                      value[k] = v;
                    } else {
                      delete value[k];
                    }
                  }
                }
              }
              return reviver.call(holder, key, value);
            })({ "": result }, "")
          : result;
      };

      /***/
    },

    /***/ 6177: /***/ (module) => {
      var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {
          // table of character substitutions
          "\b": "\\b",
          "\t": "\\t",
          "\n": "\\n",
          "\f": "\\f",
          "\r": "\\r",
          '"': '\\"',
          "\\": "\\\\",
        },
        rep;

      function quote(string) {
        // If the string contains no control characters, no quote characters, and no
        // backslash characters, then we can safely slap some quotes around it.
        // Otherwise we must also replace the offending characters with safe escape
        // sequences.

        escapable.lastIndex = 0;
        return escapable.test(string)
          ? '"' +
              string.replace(escapable, function (a) {
                var c = meta[a];
                return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
              }) +
              '"'
          : '"' + string + '"';
      }

      function str(key, holder) {
        // Produce a string from holder[key].
        var i, // The loop counter.
          k, // The member key.
          v, // The member value.
          length,
          mind = gap,
          partial,
          value = holder[key];

        // If the value has a toJSON method, call it to obtain a replacement value.
        if (value && typeof value === "object" && typeof value.toJSON === "function") {
          value = value.toJSON(key);
        }

        // If we were called with a replacer function, then call the replacer to
        // obtain a replacement value.
        if (typeof rep === "function") {
          value = rep.call(holder, key, value);
        }

        // What happens next depends on the value's type.
        switch (typeof value) {
          case "string":
            return quote(value);

          case "number":
            // JSON numbers must be finite. Encode non-finite numbers as null.
            return isFinite(value) ? String(value) : "null";

          case "boolean":
          case "null":
            // If the value is a boolean or null, convert it to a string. Note:
            // typeof null does not produce 'null'. The case is included here in
            // the remote chance that this gets fixed someday.
            return String(value);

          case "object":
            if (!value) return "null";
            gap += indent;
            partial = [];

            // Array.isArray
            if (Object.prototype.toString.apply(value) === "[object Array]") {
              length = value.length;
              for (i = 0; i < length; i += 1) {
                partial[i] = str(i, value) || "null";
              }

              // Join all of the elements together, separated with commas, and
              // wrap them in brackets.
              v = partial.length === 0 ? "[]" : gap ? "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" : "[" + partial.join(",") + "]";
              gap = mind;
              return v;
            }

            // If the replacer is an array, use it to select the members to be
            // stringified.
            if (rep && typeof rep === "object") {
              length = rep.length;
              for (i = 0; i < length; i += 1) {
                k = rep[i];
                if (typeof k === "string") {
                  v = str(k, value);
                  if (v) {
                    partial.push(quote(k) + (gap ? ": " : ":") + v);
                  }
                }
              }
            } else {
              // Otherwise, iterate through all of the keys in the object.
              for (k in value) {
                if (Object.prototype.hasOwnProperty.call(value, k)) {
                  v = str(k, value);
                  if (v) {
                    partial.push(quote(k) + (gap ? ": " : ":") + v);
                  }
                }
              }
            }

            // Join all of the member texts together, separated with commas,
            // and wrap them in braces.

            v = partial.length === 0 ? "{}" : gap ? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" : "{" + partial.join(",") + "}";
            gap = mind;
            return v;
        }
      }

      module.exports = function (value, replacer, space) {
        var i;
        gap = "";
        indent = "";

        // If the space parameter is a number, make an indent string containing that
        // many spaces.
        if (typeof space === "number") {
          for (i = 0; i < space; i += 1) {
            indent += " ";
          }
        }
        // If the space parameter is a string, it will be used as the indent string.
        else if (typeof space === "string") {
          indent = space;
        }

        // If there is a replacer, it must be a function or an array.
        // Otherwise, throw an error.
        rep = replacer;
        if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
          throw new Error("JSON.stringify");
        }

        // Make a fake root object containing our value under the key of ''.
        // Return the result of stringifying the value.
        return str("", { "": value });
      };

      /***/
    },

    /***/ 5811: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      module.exports = __webpack_require__(6066)(__webpack_require__(9653));

      /***/
    },

    /***/ 6066: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      const createKeccak = __webpack_require__(7016);
      const createShake = __webpack_require__(5675);

      module.exports = function (KeccakState) {
        const Keccak = createKeccak(KeccakState);
        const Shake = createShake(KeccakState);

        return function (algorithm, options) {
          const hash = typeof algorithm === "string" ? algorithm.toLowerCase() : algorithm;
          switch (hash) {
            case "keccak224":
              return new Keccak(1152, 448, null, 224, options);
            case "keccak256":
              return new Keccak(1088, 512, null, 256, options);
            case "keccak384":
              return new Keccak(832, 768, null, 384, options);
            case "keccak512":
              return new Keccak(576, 1024, null, 512, options);

            case "sha3-224":
              return new Keccak(1152, 448, 0x06, 224, options);
            case "sha3-256":
              return new Keccak(1088, 512, 0x06, 256, options);
            case "sha3-384":
              return new Keccak(832, 768, 0x06, 384, options);
            case "sha3-512":
              return new Keccak(576, 1024, 0x06, 512, options);

            case "shake128":
              return new Shake(1344, 256, 0x1f, options);
            case "shake256":
              return new Shake(1088, 512, 0x1f, options);

            default:
              throw new Error("Invald algorithm: " + algorithm);
          }
        };
      };

      /***/
    },

    /***/ 7016: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      /* provided dependency */ var Buffer = __webpack_require__(8764)["Buffer"];
      const { Transform } = __webpack_require__(8473);

      module.exports = (KeccakState) =>
        class Keccak extends Transform {
          constructor(rate, capacity, delimitedSuffix, hashBitLength, options) {
            super(options);

            this._rate = rate;
            this._capacity = capacity;
            this._delimitedSuffix = delimitedSuffix;
            this._hashBitLength = hashBitLength;
            this._options = options;

            this._state = new KeccakState();
            this._state.initialize(rate, capacity);
            this._finalized = false;
          }

          _transform(chunk, encoding, callback) {
            let error = null;
            try {
              this.update(chunk, encoding);
            } catch (err) {
              error = err;
            }

            callback(error);
          }

          _flush(callback) {
            let error = null;
            try {
              this.push(this.digest());
            } catch (err) {
              error = err;
            }

            callback(error);
          }

          update(data, encoding) {
            if (!Buffer.isBuffer(data) && typeof data !== "string") throw new TypeError("Data must be a string or a buffer");
            if (this._finalized) throw new Error("Digest already called");
            if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);

            this._state.absorb(data);

            return this;
          }

          digest(encoding) {
            if (this._finalized) throw new Error("Digest already called");
            this._finalized = true;

            if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);
            let digest = this._state.squeeze(this._hashBitLength / 8);
            if (encoding !== undefined) digest = digest.toString(encoding);

            this._resetState();

            return digest;
          }

          // remove result from memory
          _resetState() {
            this._state.initialize(this._rate, this._capacity);
            return this;
          }

          // because sometimes we need hash right now and little later
          _clone() {
            const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
            this._state.copy(clone._state);
            clone._finalized = this._finalized;

            return clone;
          }
        };

      /***/
    },

    /***/ 5675: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      /* provided dependency */ var Buffer = __webpack_require__(8764)["Buffer"];
      const { Transform } = __webpack_require__(8473);

      module.exports = (KeccakState) =>
        class Shake extends Transform {
          constructor(rate, capacity, delimitedSuffix, options) {
            super(options);

            this._rate = rate;
            this._capacity = capacity;
            this._delimitedSuffix = delimitedSuffix;
            this._options = options;

            this._state = new KeccakState();
            this._state.initialize(rate, capacity);
            this._finalized = false;
          }

          _transform(chunk, encoding, callback) {
            let error = null;
            try {
              this.update(chunk, encoding);
            } catch (err) {
              error = err;
            }

            callback(error);
          }

          _flush() {}

          _read(size) {
            this.push(this.squeeze(size));
          }

          update(data, encoding) {
            if (!Buffer.isBuffer(data) && typeof data !== "string") throw new TypeError("Data must be a string or a buffer");
            if (this._finalized) throw new Error("Squeeze already called");
            if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);

            this._state.absorb(data);

            return this;
          }

          squeeze(dataByteLength, encoding) {
            if (!this._finalized) {
              this._finalized = true;
              this._state.absorbLastFewBits(this._delimitedSuffix);
            }

            let data = this._state.squeeze(dataByteLength);
            if (encoding !== undefined) data = data.toString(encoding);

            return data;
          }

          _resetState() {
            this._state.initialize(this._rate, this._capacity);
            return this;
          }

          _clone() {
            const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
            this._state.copy(clone._state);
            clone._finalized = this._finalized;

            return clone;
          }
        };

      /***/
    },

    /***/ 4040: /***/ (__unused_webpack_module, exports) => {
      const P1600_ROUND_CONSTANTS = [
        1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0,
        2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778,
        0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648,
      ];

      exports.p1600 = function (s) {
        for (let round = 0; round < 24; ++round) {
          // theta
          const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

          let lo = lo4 ^ ((lo1 << 1) | (hi1 >>> 31));
          let hi = hi4 ^ ((hi1 << 1) | (lo1 >>> 31));
          const t1slo0 = s[0] ^ lo;
          const t1shi0 = s[1] ^ hi;
          const t1slo5 = s[10] ^ lo;
          const t1shi5 = s[11] ^ hi;
          const t1slo10 = s[20] ^ lo;
          const t1shi10 = s[21] ^ hi;
          const t1slo15 = s[30] ^ lo;
          const t1shi15 = s[31] ^ hi;
          const t1slo20 = s[40] ^ lo;
          const t1shi20 = s[41] ^ hi;
          lo = lo0 ^ ((lo2 << 1) | (hi2 >>> 31));
          hi = hi0 ^ ((hi2 << 1) | (lo2 >>> 31));
          const t1slo1 = s[2] ^ lo;
          const t1shi1 = s[3] ^ hi;
          const t1slo6 = s[12] ^ lo;
          const t1shi6 = s[13] ^ hi;
          const t1slo11 = s[22] ^ lo;
          const t1shi11 = s[23] ^ hi;
          const t1slo16 = s[32] ^ lo;
          const t1shi16 = s[33] ^ hi;
          const t1slo21 = s[42] ^ lo;
          const t1shi21 = s[43] ^ hi;
          lo = lo1 ^ ((lo3 << 1) | (hi3 >>> 31));
          hi = hi1 ^ ((hi3 << 1) | (lo3 >>> 31));
          const t1slo2 = s[4] ^ lo;
          const t1shi2 = s[5] ^ hi;
          const t1slo7 = s[14] ^ lo;
          const t1shi7 = s[15] ^ hi;
          const t1slo12 = s[24] ^ lo;
          const t1shi12 = s[25] ^ hi;
          const t1slo17 = s[34] ^ lo;
          const t1shi17 = s[35] ^ hi;
          const t1slo22 = s[44] ^ lo;
          const t1shi22 = s[45] ^ hi;
          lo = lo2 ^ ((lo4 << 1) | (hi4 >>> 31));
          hi = hi2 ^ ((hi4 << 1) | (lo4 >>> 31));
          const t1slo3 = s[6] ^ lo;
          const t1shi3 = s[7] ^ hi;
          const t1slo8 = s[16] ^ lo;
          const t1shi8 = s[17] ^ hi;
          const t1slo13 = s[26] ^ lo;
          const t1shi13 = s[27] ^ hi;
          const t1slo18 = s[36] ^ lo;
          const t1shi18 = s[37] ^ hi;
          const t1slo23 = s[46] ^ lo;
          const t1shi23 = s[47] ^ hi;
          lo = lo3 ^ ((lo0 << 1) | (hi0 >>> 31));
          hi = hi3 ^ ((hi0 << 1) | (lo0 >>> 31));
          const t1slo4 = s[8] ^ lo;
          const t1shi4 = s[9] ^ hi;
          const t1slo9 = s[18] ^ lo;
          const t1shi9 = s[19] ^ hi;
          const t1slo14 = s[28] ^ lo;
          const t1shi14 = s[29] ^ hi;
          const t1slo19 = s[38] ^ lo;
          const t1shi19 = s[39] ^ hi;
          const t1slo24 = s[48] ^ lo;
          const t1shi24 = s[49] ^ hi;

          // rho & pi
          const t2slo0 = t1slo0;
          const t2shi0 = t1shi0;
          const t2slo16 = (t1shi5 << 4) | (t1slo5 >>> 28);
          const t2shi16 = (t1slo5 << 4) | (t1shi5 >>> 28);
          const t2slo7 = (t1slo10 << 3) | (t1shi10 >>> 29);
          const t2shi7 = (t1shi10 << 3) | (t1slo10 >>> 29);
          const t2slo23 = (t1shi15 << 9) | (t1slo15 >>> 23);
          const t2shi23 = (t1slo15 << 9) | (t1shi15 >>> 23);
          const t2slo14 = (t1slo20 << 18) | (t1shi20 >>> 14);
          const t2shi14 = (t1shi20 << 18) | (t1slo20 >>> 14);
          const t2slo10 = (t1slo1 << 1) | (t1shi1 >>> 31);
          const t2shi10 = (t1shi1 << 1) | (t1slo1 >>> 31);
          const t2slo1 = (t1shi6 << 12) | (t1slo6 >>> 20);
          const t2shi1 = (t1slo6 << 12) | (t1shi6 >>> 20);
          const t2slo17 = (t1slo11 << 10) | (t1shi11 >>> 22);
          const t2shi17 = (t1shi11 << 10) | (t1slo11 >>> 22);
          const t2slo8 = (t1shi16 << 13) | (t1slo16 >>> 19);
          const t2shi8 = (t1slo16 << 13) | (t1shi16 >>> 19);
          const t2slo24 = (t1slo21 << 2) | (t1shi21 >>> 30);
          const t2shi24 = (t1shi21 << 2) | (t1slo21 >>> 30);
          const t2slo20 = (t1shi2 << 30) | (t1slo2 >>> 2);
          const t2shi20 = (t1slo2 << 30) | (t1shi2 >>> 2);
          const t2slo11 = (t1slo7 << 6) | (t1shi7 >>> 26);
          const t2shi11 = (t1shi7 << 6) | (t1slo7 >>> 26);
          const t2slo2 = (t1shi12 << 11) | (t1slo12 >>> 21);
          const t2shi2 = (t1slo12 << 11) | (t1shi12 >>> 21);
          const t2slo18 = (t1slo17 << 15) | (t1shi17 >>> 17);
          const t2shi18 = (t1shi17 << 15) | (t1slo17 >>> 17);
          const t2slo9 = (t1shi22 << 29) | (t1slo22 >>> 3);
          const t2shi9 = (t1slo22 << 29) | (t1shi22 >>> 3);
          const t2slo5 = (t1slo3 << 28) | (t1shi3 >>> 4);
          const t2shi5 = (t1shi3 << 28) | (t1slo3 >>> 4);
          const t2slo21 = (t1shi8 << 23) | (t1slo8 >>> 9);
          const t2shi21 = (t1slo8 << 23) | (t1shi8 >>> 9);
          const t2slo12 = (t1slo13 << 25) | (t1shi13 >>> 7);
          const t2shi12 = (t1shi13 << 25) | (t1slo13 >>> 7);
          const t2slo3 = (t1slo18 << 21) | (t1shi18 >>> 11);
          const t2shi3 = (t1shi18 << 21) | (t1slo18 >>> 11);
          const t2slo19 = (t1shi23 << 24) | (t1slo23 >>> 8);
          const t2shi19 = (t1slo23 << 24) | (t1shi23 >>> 8);
          const t2slo15 = (t1slo4 << 27) | (t1shi4 >>> 5);
          const t2shi15 = (t1shi4 << 27) | (t1slo4 >>> 5);
          const t2slo6 = (t1slo9 << 20) | (t1shi9 >>> 12);
          const t2shi6 = (t1shi9 << 20) | (t1slo9 >>> 12);
          const t2slo22 = (t1shi14 << 7) | (t1slo14 >>> 25);
          const t2shi22 = (t1slo14 << 7) | (t1shi14 >>> 25);
          const t2slo13 = (t1slo19 << 8) | (t1shi19 >>> 24);
          const t2shi13 = (t1shi19 << 8) | (t1slo19 >>> 24);
          const t2slo4 = (t1slo24 << 14) | (t1shi24 >>> 18);
          const t2shi4 = (t1shi24 << 14) | (t1slo24 >>> 18);

          // chi
          s[0] = t2slo0 ^ (~t2slo1 & t2slo2);
          s[1] = t2shi0 ^ (~t2shi1 & t2shi2);
          s[10] = t2slo5 ^ (~t2slo6 & t2slo7);
          s[11] = t2shi5 ^ (~t2shi6 & t2shi7);
          s[20] = t2slo10 ^ (~t2slo11 & t2slo12);
          s[21] = t2shi10 ^ (~t2shi11 & t2shi12);
          s[30] = t2slo15 ^ (~t2slo16 & t2slo17);
          s[31] = t2shi15 ^ (~t2shi16 & t2shi17);
          s[40] = t2slo20 ^ (~t2slo21 & t2slo22);
          s[41] = t2shi20 ^ (~t2shi21 & t2shi22);
          s[2] = t2slo1 ^ (~t2slo2 & t2slo3);
          s[3] = t2shi1 ^ (~t2shi2 & t2shi3);
          s[12] = t2slo6 ^ (~t2slo7 & t2slo8);
          s[13] = t2shi6 ^ (~t2shi7 & t2shi8);
          s[22] = t2slo11 ^ (~t2slo12 & t2slo13);
          s[23] = t2shi11 ^ (~t2shi12 & t2shi13);
          s[32] = t2slo16 ^ (~t2slo17 & t2slo18);
          s[33] = t2shi16 ^ (~t2shi17 & t2shi18);
          s[42] = t2slo21 ^ (~t2slo22 & t2slo23);
          s[43] = t2shi21 ^ (~t2shi22 & t2shi23);
          s[4] = t2slo2 ^ (~t2slo3 & t2slo4);
          s[5] = t2shi2 ^ (~t2shi3 & t2shi4);
          s[14] = t2slo7 ^ (~t2slo8 & t2slo9);
          s[15] = t2shi7 ^ (~t2shi8 & t2shi9);
          s[24] = t2slo12 ^ (~t2slo13 & t2slo14);
          s[25] = t2shi12 ^ (~t2shi13 & t2shi14);
          s[34] = t2slo17 ^ (~t2slo18 & t2slo19);
          s[35] = t2shi17 ^ (~t2shi18 & t2shi19);
          s[44] = t2slo22 ^ (~t2slo23 & t2slo24);
          s[45] = t2shi22 ^ (~t2shi23 & t2shi24);
          s[6] = t2slo3 ^ (~t2slo4 & t2slo0);
          s[7] = t2shi3 ^ (~t2shi4 & t2shi0);
          s[16] = t2slo8 ^ (~t2slo9 & t2slo5);
          s[17] = t2shi8 ^ (~t2shi9 & t2shi5);
          s[26] = t2slo13 ^ (~t2slo14 & t2slo10);
          s[27] = t2shi13 ^ (~t2shi14 & t2shi10);
          s[36] = t2slo18 ^ (~t2slo19 & t2slo15);
          s[37] = t2shi18 ^ (~t2shi19 & t2shi15);
          s[46] = t2slo23 ^ (~t2slo24 & t2slo20);
          s[47] = t2shi23 ^ (~t2shi24 & t2shi20);
          s[8] = t2slo4 ^ (~t2slo0 & t2slo1);
          s[9] = t2shi4 ^ (~t2shi0 & t2shi1);
          s[18] = t2slo9 ^ (~t2slo5 & t2slo6);
          s[19] = t2shi9 ^ (~t2shi5 & t2shi6);
          s[28] = t2slo14 ^ (~t2slo10 & t2slo11);
          s[29] = t2shi14 ^ (~t2shi10 & t2shi11);
          s[38] = t2slo19 ^ (~t2slo15 & t2slo16);
          s[39] = t2shi19 ^ (~t2shi15 & t2shi16);
          s[48] = t2slo24 ^ (~t2slo20 & t2slo21);
          s[49] = t2shi24 ^ (~t2shi20 & t2shi21);

          // iota
          s[0] ^= P1600_ROUND_CONSTANTS[round * 2];
          s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1];
        }
      };

      /***/
    },

    /***/ 9653: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      /* provided dependency */ var Buffer = __webpack_require__(8764)["Buffer"];
      const keccakState = __webpack_require__(4040);

      function Keccak() {
        // much faster than `new Array(50)`
        this.state = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

        this.blockSize = null;
        this.count = 0;
        this.squeezing = false;
      }

      Keccak.prototype.initialize = function (rate, capacity) {
        for (let i = 0; i < 50; ++i) this.state[i] = 0;
        this.blockSize = rate / 8;
        this.count = 0;
        this.squeezing = false;
      };

      Keccak.prototype.absorb = function (data) {
        for (let i = 0; i < data.length; ++i) {
          this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4));
          this.count += 1;
          if (this.count === this.blockSize) {
            keccakState.p1600(this.state);
            this.count = 0;
          }
        }
      };

      Keccak.prototype.absorbLastFewBits = function (bits) {
        this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4));
        if ((bits & 0x80) !== 0 && this.count === this.blockSize - 1) keccakState.p1600(this.state);
        this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4));
        keccakState.p1600(this.state);
        this.count = 0;
        this.squeezing = true;
      };

      Keccak.prototype.squeeze = function (length) {
        if (!this.squeezing) this.absorbLastFewBits(0x01);

        const output = Buffer.alloc(length);
        for (let i = 0; i < length; ++i) {
          output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff;
          this.count += 1;
          if (this.count === this.blockSize) {
            keccakState.p1600(this.state);
            this.count = 0;
          }
        }

        return output;
      };

      Keccak.prototype.copy = function (dest) {
        for (let i = 0; i < 50; ++i) dest.state[i] = this.state[i];
        dest.blockSize = this.blockSize;
        dest.count = this.count;
        dest.squeezing = this.squeezing;
      };

      module.exports = Keccak;

      /***/
    },

    /***/ 9746: /***/ (module) => {
      module.exports = assert;

      function assert(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }

      assert.equal = function assertEqual(l, r, msg) {
        if (l != r) throw new Error(msg || "Assertion failed: " + l + " != " + r);
      };

      /***/
    },

    /***/ 4504: /***/ (__unused_webpack_module, exports) => {
      "use strict";

      var utils = exports;

      function toArray(msg, enc) {
        if (Array.isArray(msg)) return msg.slice();
        if (!msg) return [];
        var res = [];
        if (typeof msg !== "string") {
          for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
          return res;
        }
        if (enc === "hex") {
          msg = msg.replace(/[^a-z0-9]+/gi, "");
          if (msg.length % 2 !== 0) msg = "0" + msg;
          for (var i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
        } else {
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            var hi = c >> 8;
            var lo = c & 0xff;
            if (hi) res.push(hi, lo);
            else res.push(lo);
          }
        }
        return res;
      }
      utils.toArray = toArray;

      function zero2(word) {
        if (word.length === 1) return "0" + word;
        else return word;
      }
      utils.zero2 = zero2;

      function toHex(msg) {
        var res = "";
        for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
        return res;
      }
      utils.toHex = toHex;

      utils.encode = function encode(arr, enc) {
        if (enc === "hex") return toHex(arr);
        else return arr;
      };

      /***/
    },

    /***/ 3455: /***/ function (module) {
      /*!
       * v2.1.4-104-gc868b3a
       *
       */
      (function webpackUniversalModuleDefinition(root, factory) {
        if (true) module.exports = factory();
        else {
        }
      })(typeof self !== "undefined" ? self : this, function () {
        return /******/ (function (modules) {
          // webpackBootstrap
          /******/ // The module cache
          /******/ var installedModules = {};
          /******/
          /******/ // The require function
          /******/ function __nested_webpack_require_611__(moduleId) {
            /******/
            /******/ // Check if module is in cache
            /******/ if (installedModules[moduleId]) {
              /******/ return installedModules[moduleId].exports;
              /******/
            }
            /******/ // Create a new module (and put it into the cache)
            /******/ var module = (installedModules[moduleId] = {
              /******/ i: moduleId,
              /******/ l: false,
              /******/ exports: {},
              /******/
            });
            /******/
            /******/ // Execute the module function
            /******/ modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_611__);
            /******/
            /******/ // Flag the module as loaded
            /******/ module.l = true;
            /******/
            /******/ // Return the exports of the module
            /******/ return module.exports;
            /******/
          }
          /******/
          /******/
          /******/ // expose the modules object (__webpack_modules__)
          /******/ __nested_webpack_require_611__.m = modules;
          /******/
          /******/ // expose the module cache
          /******/ __nested_webpack_require_611__.c = installedModules;
          /******/
          /******/ // define getter function for harmony exports
          /******/ __nested_webpack_require_611__.d = function (exports, name, getter) {
            /******/ if (!__nested_webpack_require_611__.o(exports, name)) {
              /******/ Object.defineProperty(exports, name, {
                /******/ configurable: false,
                /******/ enumerable: true,
                /******/ get: getter,
                /******/
              });
              /******/
            }
            /******/
          };
          /******/
          /******/ // getDefaultExport function for compatibility with non-harmony modules
          /******/ __nested_webpack_require_611__.n = function (module) {
            /******/ var getter =
              module && module.__esModule
                ? /******/ function getDefault() {
                    return module["default"];
                  }
                : /******/ function getModuleExports() {
                    return module;
                  };
            /******/ __nested_webpack_require_611__.d(getter, "a", getter);
            /******/ return getter;
            /******/
          };
          /******/
          /******/ // Object.prototype.hasOwnProperty.call
          /******/ __nested_webpack_require_611__.o = function (object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          /******/
          /******/ // __webpack_public_path__
          /******/ __nested_webpack_require_611__.p = "";
          /******/
          /******/ // Load entry module and return exports
          /******/ return __nested_webpack_require_611__((__nested_webpack_require_611__.s = 7));
          /******/
        })(
          /************************************************************************/
          /******/ [
            /* 0 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_2900__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_2900__.d(__webpack_exports__, "j", function () {
                return partialComplete;
              });
              /* unused harmony export compose */
              /* harmony export (binding) */ __nested_webpack_require_2900__.d(__webpack_exports__, "d", function () {
                return compose2;
              });
              /* harmony export (binding) */ __nested_webpack_require_2900__.d(__webpack_exports__, "c", function () {
                return attr;
              });
              /* harmony export (binding) */ __nested_webpack_require_2900__.d(__webpack_exports__, "h", function () {
                return lazyUnion;
              });
              /* harmony export (binding) */ __nested_webpack_require_2900__.d(__webpack_exports__, "b", function () {
                return apply;
              });
              /* harmony export (binding) */ __nested_webpack_require_2900__.d(__webpack_exports__, "k", function () {
                return varArgs;
              });
              /* harmony export (binding) */ __nested_webpack_require_2900__.d(__webpack_exports__, "e", function () {
                return flip;
              });
              /* harmony export (binding) */ __nested_webpack_require_2900__.d(__webpack_exports__, "g", function () {
                return lazyIntersection;
              });
              /* harmony export (binding) */ __nested_webpack_require_2900__.d(__webpack_exports__, "i", function () {
                return noop;
              });
              /* harmony export (binding) */ __nested_webpack_require_2900__.d(__webpack_exports__, "a", function () {
                return always;
              });
              /* harmony export (binding) */ __nested_webpack_require_2900__.d(__webpack_exports__, "f", function () {
                return functor;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lists__ = __nested_webpack_require_2900__(1);

              /**
               * Partially complete a function.
               *
               *  var add3 = partialComplete( function add(a,b){return a+b}, 3 );
               *
               *  add3(4) // gives 7
               *
               *  function wrap(left, right, cen){return left + " " + cen + " " + right;}
               *
               *  var pirateGreeting = partialComplete( wrap , "I'm", ", a mighty pirate!" );
               *
               *  pirateGreeting("Guybrush Threepwood");
               *  // gives "I'm Guybrush Threepwood, a mighty pirate!"
               */
              var partialComplete = varArgs(function (fn, args) {
                // this isn't the shortest way to write this but it does
                // avoid creating a new array each time to pass to fn.apply,
                // otherwise could just call boundArgs.concat(callArgs)

                var numBoundArgs = args.length;

                return varArgs(function (callArgs) {
                  for (var i = 0; i < callArgs.length; i++) {
                    args[numBoundArgs + i] = callArgs[i];
                  }

                  args.length = numBoundArgs + callArgs.length;

                  return fn.apply(this, args);
                });
              });

              /**
               * Compose zero or more functions:
               *
               *    compose(f1, f2, f3)(x) = f1(f2(f3(x))))
               *
               * The last (inner-most) function may take more than one parameter:
               *
               *    compose(f1, f2, f3)(x,y) = f1(f2(f3(x,y))))
               */
              var compose = varArgs(function (fns) {
                var fnsList = Object(__WEBPACK_IMPORTED_MODULE_0__lists__["c" /* arrayAsList */])(fns);

                function next(params, curFn) {
                  return [apply(params, curFn)];
                }

                return varArgs(function (startParams) {
                  return Object(__WEBPACK_IMPORTED_MODULE_0__lists__["f" /* foldR */])(next, startParams, fnsList)[0];
                });
              });

              /**
               * A more optimised version of compose that takes exactly two functions
               * @param f1
               * @param f2
               */
              function compose2(f1, f2) {
                return function () {
                  return f1.call(this, f2.apply(this, arguments));
                };
              }

              /**
               * Generic form for a function to get a property from an object
               *
               *    var o = {
               *       foo:'bar'
               *    }
               *
               *    var getFoo = attr('foo')
               *
               *    fetFoo(o) // returns 'bar'
               *
               * @param {String} key the property name
               */
              function attr(key) {
                return function (o) {
                  return o[key];
                };
              }

              /**
               * Call a list of functions with the same args until one returns a
               * truthy result. Similar to the || operator.
               *
               * So:
               *      lazyUnion([f1,f2,f3 ... fn])( p1, p2 ... pn )
               *
               * Is equivalent to:
               *      apply([p1, p2 ... pn], f1) ||
               *      apply([p1, p2 ... pn], f2) ||
               *      apply([p1, p2 ... pn], f3) ... apply(fn, [p1, p2 ... pn])
               *
               * @returns the first return value that is given that is truthy.
               */
              var lazyUnion = varArgs(function (fns) {
                return varArgs(function (params) {
                  var maybeValue;

                  for (var i = 0; i < attr("length")(fns); i++) {
                    maybeValue = apply(params, fns[i]);

                    if (maybeValue) {
                      return maybeValue;
                    }
                  }
                });
              });

              /**
               * This file declares various pieces of functional programming.
               *
               * This isn't a general purpose functional library, to keep things small it
               * has just the parts useful for Oboe.js.
               */

              /**
               * Call a single function with the given arguments array.
               * Basically, a functional-style version of the OO-style Function#apply for
               * when we don't care about the context ('this') of the call.
               *
               * The order of arguments allows partial completion of the arguments array
               */
              function apply(args, fn) {
                return fn.apply(undefined, args);
              }

              /**
               * Define variable argument functions but cut out all that tedious messing about
               * with the arguments object. Delivers the variable-length part of the arguments
               * list as an array.
               *
               * Eg:
               *
               * var myFunction = varArgs(
               *    function( fixedArgument, otherFixedArgument, variableNumberOfArguments ){
               *       console.log( variableNumberOfArguments );
               *    }
               * )
               *
               * myFunction('a', 'b', 1, 2, 3); // logs [1,2,3]
               *
               * var myOtherFunction = varArgs(function( variableNumberOfArguments ){
               *    console.log( variableNumberOfArguments );
               * })
               *
               * myFunction(1, 2, 3); // logs [1,2,3]
               *
               */
              function varArgs(fn) {
                var numberOfFixedArguments = fn.length - 1;
                var slice = Array.prototype.slice;

                if (numberOfFixedArguments === 0) {
                  // an optimised case for when there are no fixed args:

                  return function () {
                    return fn.call(this, slice.call(arguments));
                  };
                } else if (numberOfFixedArguments === 1) {
                  // an optimised case for when there are is one fixed args:

                  return function () {
                    return fn.call(this, arguments[0], slice.call(arguments, 1));
                  };
                }

                // general case

                // we know how many arguments fn will always take. Create a
                // fixed-size array to hold that many, to be re-used on
                // every call to the returned function
                var argsHolder = Array(fn.length);

                return function () {
                  for (var i = 0; i < numberOfFixedArguments; i++) {
                    argsHolder[i] = arguments[i];
                  }

                  argsHolder[numberOfFixedArguments] = slice.call(arguments, numberOfFixedArguments);

                  return fn.apply(this, argsHolder);
                };
              }

              /**
               * Swap the order of parameters to a binary function
               *
               * A bit like this flip: http://zvon.org/other/haskell/Outputprelude/flip_f.html
               */
              function flip(fn) {
                return function (a, b) {
                  return fn(b, a);
                };
              }

              /**
               * Create a function which is the intersection of two other functions.
               *
               * Like the && operator, if the first is truthy, the second is never called,
               * otherwise the return value from the second is returned.
               */
              function lazyIntersection(fn1, fn2) {
                return function (param) {
                  return fn1(param) && fn2(param);
                };
              }

              /**
               * A function which does nothing
               */
              function noop() {}

              /**
               * A function which is always happy
               */
              function always() {
                return true;
              }

              /**
               * Create a function which always returns the same
               * value
               *
               * var return3 = functor(3);
               *
               * return3() // gives 3
               * return3() // still gives 3
               * return3() // will always give 3
               */
              function functor(val) {
                return function () {
                  return val;
                };
              }

              /***/
            },
            /* 1 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_10022__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_10022__.d(__webpack_exports__, "d", function () {
                return cons;
              });
              /* unused harmony export emptyList */
              /* harmony export (binding) */ __nested_webpack_require_10022__.d(__webpack_exports__, "g", function () {
                return head;
              });
              /* harmony export (binding) */ __nested_webpack_require_10022__.d(__webpack_exports__, "l", function () {
                return tail;
              });
              /* harmony export (binding) */ __nested_webpack_require_10022__.d(__webpack_exports__, "c", function () {
                return arrayAsList;
              });
              /* harmony export (binding) */ __nested_webpack_require_10022__.d(__webpack_exports__, "h", function () {
                return list;
              });
              /* harmony export (binding) */ __nested_webpack_require_10022__.d(__webpack_exports__, "i", function () {
                return listAsArray;
              });
              /* harmony export (binding) */ __nested_webpack_require_10022__.d(__webpack_exports__, "j", function () {
                return map;
              });
              /* harmony export (binding) */ __nested_webpack_require_10022__.d(__webpack_exports__, "f", function () {
                return foldR;
              });
              /* unused harmony export foldR1 */
              /* harmony export (binding) */ __nested_webpack_require_10022__.d(__webpack_exports__, "m", function () {
                return without;
              });
              /* harmony export (binding) */ __nested_webpack_require_10022__.d(__webpack_exports__, "a", function () {
                return all;
              });
              /* harmony export (binding) */ __nested_webpack_require_10022__.d(__webpack_exports__, "b", function () {
                return applyEach;
              });
              /* harmony export (binding) */ __nested_webpack_require_10022__.d(__webpack_exports__, "k", function () {
                return reverseList;
              });
              /* harmony export (binding) */ __nested_webpack_require_10022__.d(__webpack_exports__, "e", function () {
                return first;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__functional__ = __nested_webpack_require_10022__(0);

              /**
               * Like cons in Lisp
               */
              function cons(x, xs) {
                /* Internally lists are linked 2-element Javascript arrays.

      Ideally the return here would be Object.freeze([x,xs])
      so that bugs related to mutation are found fast.
      However, cons is right on the critical path for
      performance and this slows oboe-mark down by
      ~25%. Under theoretical future JS engines that freeze more
      efficiently (possibly even use immutability to
      run faster) this should be considered for
      restoration.
   */

                return [x, xs];
              }

              /**
               * The empty list
               */
              var emptyList = null;

              /**
               * Get the head of a list.
               *
               * Ie, head(cons(a,b)) = a
               */
              var head = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["c" /* attr */])(0);

              /**
               * Get the tail of a list.
               *
               * Ie, tail(cons(a,b)) = b
               */
              var tail = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["c" /* attr */])(1);

              /**
               * Converts an array to a list
               *
               *    asList([a,b,c])
               *
               * is equivalent to:
               *
               *    cons(a, cons(b, cons(c, emptyList)))
               **/
              function arrayAsList(inputArray) {
                return reverseList(inputArray.reduce(Object(__WEBPACK_IMPORTED_MODULE_0__functional__["e" /* flip */])(cons), emptyList));
              }

              /**
               * A varargs version of arrayAsList. Works a bit like list
               * in LISP.
               *
               *    list(a,b,c)
               *
               * is equivalent to:
               *
               *    cons(a, cons(b, cons(c, emptyList)))
               */
              var list = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["k" /* varArgs */])(arrayAsList);

              /**
               * Convert a list back to a js native array
               */
              function listAsArray(list) {
                return foldR(
                  function (arraySoFar, listItem) {
                    arraySoFar.unshift(listItem);
                    return arraySoFar;
                  },
                  [],
                  list
                );
              }

              /**
               * Map a function over a list
               */
              function map(fn, list) {
                return list ? cons(fn(head(list)), map(fn, tail(list))) : emptyList;
              }

              /**
               * foldR implementation. Reduce a list down to a single value.
               *
               * @pram {Function} fn     (rightEval, curVal) -> result
               */
              function foldR(fn, startValue, list) {
                return list ? fn(foldR(fn, startValue, tail(list)), head(list)) : startValue;
              }

              /**
               * foldR implementation. Reduce a list down to a single value.
               *
               * @pram {Function} fn     (rightEval, curVal) -> result
               */
              function foldR1(fn, list) {
                return tail(list) ? fn(foldR1(fn, tail(list)), head(list)) : head(list);
              }

              /**
               * Return a list like the one given but with the first instance equal
               * to item removed
               */
              function without(list, test, removedFn) {
                return withoutInner(list, removedFn || __WEBPACK_IMPORTED_MODULE_0__functional__["i" /* noop */]);

                function withoutInner(subList, removedFn) {
                  return subList
                    ? test(head(subList))
                      ? (removedFn(head(subList)), tail(subList))
                      : cons(head(subList), withoutInner(tail(subList), removedFn))
                    : emptyList;
                }
              }

              /**
               * Returns true if the given function holds for every item in
               * the list, false otherwise
               */
              function all(fn, list) {
                return !list || (fn(head(list)) && all(fn, tail(list)));
              }

              /**
               * Call every function in a list of functions with the same arguments
               *
               * This doesn't make any sense if we're doing pure functional because
               * it doesn't return anything. Hence, this is only really useful if the
               * functions being called have side-effects.
               */
              function applyEach(fnList, args) {
                if (fnList) {
                  head(fnList).apply(null, args);

                  applyEach(tail(fnList), args);
                }
              }

              /**
               * Reverse the order of a list
               */
              function reverseList(list) {
                // js re-implementation of 3rd solution from:
                //    http://www.haskell.org/haskellwiki/99_questions/Solutions/5
                function reverseInner(list, reversedAlready) {
                  if (!list) {
                    return reversedAlready;
                  }

                  return reverseInner(tail(list), cons(head(list), reversedAlready));
                }

                return reverseInner(list, emptyList);
              }

              function first(test, list) {
                return list && (test(head(list)) ? head(list) : first(test, tail(list)));
              }

              /***/
            },
            /* 2 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_15680__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_15680__.d(__webpack_exports__, "c", function () {
                return isOfType;
              });
              /* harmony export (binding) */ __nested_webpack_require_15680__.d(__webpack_exports__, "e", function () {
                return len;
              });
              /* harmony export (binding) */ __nested_webpack_require_15680__.d(__webpack_exports__, "d", function () {
                return isString;
              });
              /* harmony export (binding) */ __nested_webpack_require_15680__.d(__webpack_exports__, "a", function () {
                return defined;
              });
              /* harmony export (binding) */ __nested_webpack_require_15680__.d(__webpack_exports__, "b", function () {
                return hasAllProperties;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lists__ = __nested_webpack_require_15680__(1);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__functional__ = __nested_webpack_require_15680__(0);

              /**
               * This file defines some loosely associated syntactic sugar for
               * Javascript programming
               */

              /**
               * Returns true if the given candidate is of type T
               */
              function isOfType(T, maybeSomething) {
                return maybeSomething && maybeSomething.constructor === T;
              }

              var len = Object(__WEBPACK_IMPORTED_MODULE_1__functional__["c" /* attr */])("length");
              var isString = Object(__WEBPACK_IMPORTED_MODULE_1__functional__["j" /* partialComplete */])(isOfType, String);

              /**
               * I don't like saying this:
               *
               *    foo !=== undefined
               *
               * because of the double-negative. I find this:
               *
               *    defined(foo)
               *
               * easier to read.
               */
              function defined(value) {
                return value !== undefined;
              }

              /**
               * Returns true if object o has a key named like every property in
               * the properties array. Will give false if any are missing, or if o
               * is not an object.
               */
              function hasAllProperties(fieldList, o) {
                return (
                  o instanceof Object &&
                  Object(__WEBPACK_IMPORTED_MODULE_0__lists__["a" /* all */])(function (field) {
                    return field in o;
                  }, fieldList)
                );
              }

              /***/
            },
            /* 3 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_17586__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "f", function () {
                return NODE_OPENED;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "d", function () {
                return NODE_CLOSED;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "g", function () {
                return NODE_SWAP;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "e", function () {
                return NODE_DROP;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "b", function () {
                return FAIL_EVENT;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "h", function () {
                return ROOT_NODE_FOUND;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "i", function () {
                return ROOT_PATH_FOUND;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "c", function () {
                return HTTP_START;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "m", function () {
                return STREAM_DATA;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "n", function () {
                return STREAM_END;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "a", function () {
                return ABORTING;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "j", function () {
                return SAX_KEY;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "l", function () {
                return SAX_VALUE_OPEN;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "k", function () {
                return SAX_VALUE_CLOSE;
              });
              /* harmony export (binding) */ __nested_webpack_require_17586__.d(__webpack_exports__, "o", function () {
                return errorReport;
              });
              /**
               * This file declares some constants to use as names for event types.
               */

              // the events which are never exported are kept as
              // the smallest possible representation, in numbers:
              var _S = 1;

              // fired whenever a new node starts in the JSON stream:
              var NODE_OPENED = _S++;

              // fired whenever a node closes in the JSON stream:
              var NODE_CLOSED = _S++;

              // called if a .node callback returns a value -
              var NODE_SWAP = _S++;
              var NODE_DROP = _S++;

              var FAIL_EVENT = "fail";

              var ROOT_NODE_FOUND = _S++;
              var ROOT_PATH_FOUND = _S++;

              var HTTP_START = "start";
              var STREAM_DATA = "data";
              var STREAM_END = "end";
              var ABORTING = _S++;

              // SAX events butchered from Clarinet
              var SAX_KEY = _S++;
              var SAX_VALUE_OPEN = _S++;
              var SAX_VALUE_CLOSE = _S++;

              function errorReport(statusCode, body, error) {
                try {
                  var jsonBody = JSON.parse(body);
                } catch (e) {}

                return {
                  statusCode: statusCode,
                  body: body,
                  jsonBody: jsonBody,
                  thrown: error,
                };
              }

              /***/
            },
            /* 4 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_20374__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_20374__.d(__webpack_exports__, "b", function () {
                return namedNode;
              });
              /* harmony export (binding) */ __nested_webpack_require_20374__.d(__webpack_exports__, "a", function () {
                return keyOf;
              });
              /* harmony export (binding) */ __nested_webpack_require_20374__.d(__webpack_exports__, "c", function () {
                return nodeOf;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__functional__ = __nested_webpack_require_20374__(0);

              /**
               * Get a new key->node mapping
               *
               * @param {String|Number} key
               * @param {Object|Array|String|Number|null} node a value found in the json
               */
              function namedNode(key, node) {
                return { key: key, node: node };
              }

              /** get the key of a namedNode */
              var keyOf = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["c" /* attr */])("key");

              /** get the node from a namedNode */
              var nodeOf = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["c" /* attr */])("node");

              /***/
            },
            /* 5 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_21368__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_21368__.d(__webpack_exports__, "a", function () {
                return oboe;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lists__ = __nested_webpack_require_21368__(1);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__functional__ = __nested_webpack_require_21368__(0);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __nested_webpack_require_21368__(2);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__defaults__ = __nested_webpack_require_21368__(8);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__wire__ = __nested_webpack_require_21368__(9);

              // export public API
              function oboe(arg1) {
                // We use duck-typing to detect if the parameter given is a stream, with the
                // below list of parameters.
                // Unpipe and unshift would normally be present on a stream but this breaks
                // compatibility with Request streams.
                // See https://github.com/jimhigson/oboe.js/issues/65

                var nodeStreamMethodNames = Object(__WEBPACK_IMPORTED_MODULE_0__lists__["h" /* list */])("resume", "pause", "pipe");
                var isStream = Object(__WEBPACK_IMPORTED_MODULE_1__functional__["j" /* partialComplete */])(
                  __WEBPACK_IMPORTED_MODULE_2__util__["b" /* hasAllProperties */],
                  nodeStreamMethodNames
                );

                if (arg1) {
                  if (isStream(arg1) || Object(__WEBPACK_IMPORTED_MODULE_2__util__["d" /* isString */])(arg1)) {
                    //  simple version for GETs. Signature is:
                    //    oboe( url )
                    //  or, under node:
                    //    oboe( readableStream )
                    return Object(__WEBPACK_IMPORTED_MODULE_3__defaults__["a" /* applyDefaults */])(
                      __WEBPACK_IMPORTED_MODULE_4__wire__["a" /* wire */],
                      arg1 // url
                    );
                  } else {
                    // method signature is:
                    //    oboe({method:m, url:u, body:b, headers:{...}})

                    return Object(__WEBPACK_IMPORTED_MODULE_3__defaults__["a" /* applyDefaults */])(
                      __WEBPACK_IMPORTED_MODULE_4__wire__["a" /* wire */],
                      arg1.url,
                      arg1.method,
                      arg1.body,
                      arg1.headers,
                      arg1.withCredentials,
                      arg1.cached
                    );
                  }
                } else {
                  // wire up a no-AJAX, no-stream Oboe. Will have to have content
                  // fed in externally and using .emit.
                  return Object(__WEBPACK_IMPORTED_MODULE_4__wire__["a" /* wire */])();
                }
              }

              /* oboe.drop is a special value. If a node callback returns this value the
   parsed node is deleted from the JSON
 */
              oboe.drop = function () {
                return oboe.drop;
              };

              /***/
            },
            /* 6 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_23862__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_23862__.d(__webpack_exports__, "b", function () {
                return incrementalContentBuilder;
              });
              /* harmony export (binding) */ __nested_webpack_require_23862__.d(__webpack_exports__, "a", function () {
                return ROOT_PATH;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__events__ = __nested_webpack_require_23862__(3);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ascent__ = __nested_webpack_require_23862__(4);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __nested_webpack_require_23862__(2);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__lists__ = __nested_webpack_require_23862__(1);

              /**
               * This file provides various listeners which can be used to build up
               * a changing ascent based on the callbacks provided by Clarinet. It listens
               * to the low-level events from Clarinet and emits higher-level ones.
               *
               * The building up is stateless so to track a JSON file
               * ascentManager.js is required to store the ascent state
               * between calls.
               */

              /**
               * A special value to use in the path list to represent the path 'to' a root
               * object (which doesn't really have any path). This prevents the need for
               * special-casing detection of the root object and allows it to be treated
               * like any other object. We might think of this as being similar to the
               * 'unnamed root' domain ".", eg if I go to
               * http://en.wikipedia.org./wiki/En/Main_page the dot after 'org' deliminates
               * the unnamed root of the DNS.
               *
               * This is kept as an object to take advantage that in Javascript's OO objects
               * are guaranteed to be distinct, therefore no other object can possibly clash
               * with this one. Strings, numbers etc provide no such guarantee.
               **/
              var ROOT_PATH = {};

              /**
               * Create a new set of handlers for clarinet's events, bound to the emit
               * function given.
               */
              function incrementalContentBuilder(oboeBus) {
                var emitNodeOpened = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["f" /* NODE_OPENED */]).emit;
                var emitNodeClosed = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["d" /* NODE_CLOSED */]).emit;
                var emitRootOpened = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["i" /* ROOT_PATH_FOUND */]).emit;
                var emitRootClosed = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["h" /* ROOT_NODE_FOUND */]).emit;

                function arrayIndicesAreKeys(possiblyInconsistentAscent, newDeepestNode) {
                  /* for values in arrays we aren't pre-warned of the coming paths
         (Clarinet gives no call to onkey like it does for values in objects)
         so if we are in an array we need to create this path ourselves. The
         key will be len(parentNode) because array keys are always sequential
         numbers. */

                  var parentNode = Object(__WEBPACK_IMPORTED_MODULE_1__ascent__["c" /* nodeOf */])(
                    Object(__WEBPACK_IMPORTED_MODULE_3__lists__["g" /* head */])(possiblyInconsistentAscent)
                  );

                  return Object(__WEBPACK_IMPORTED_MODULE_2__util__["c" /* isOfType */])(Array, parentNode)
                    ? keyFound(possiblyInconsistentAscent, Object(__WEBPACK_IMPORTED_MODULE_2__util__["e" /* len */])(parentNode), newDeepestNode)
                    : // nothing needed, return unchanged
                      possiblyInconsistentAscent;
                }

                function nodeOpened(ascent, newDeepestNode) {
                  if (!ascent) {
                    // we discovered the root node,
                    emitRootOpened(newDeepestNode);

                    return keyFound(ascent, ROOT_PATH, newDeepestNode);
                  }

                  // we discovered a non-root node

                  var arrayConsistentAscent = arrayIndicesAreKeys(ascent, newDeepestNode);
                  var ancestorBranches = Object(__WEBPACK_IMPORTED_MODULE_3__lists__["l" /* tail */])(arrayConsistentAscent);
                  var previouslyUnmappedName = Object(__WEBPACK_IMPORTED_MODULE_1__ascent__["a" /* keyOf */])(
                    Object(__WEBPACK_IMPORTED_MODULE_3__lists__["g" /* head */])(arrayConsistentAscent)
                  );

                  appendBuiltContent(ancestorBranches, previouslyUnmappedName, newDeepestNode);

                  return Object(__WEBPACK_IMPORTED_MODULE_3__lists__["d" /* cons */])(
                    Object(__WEBPACK_IMPORTED_MODULE_1__ascent__["b" /* namedNode */])(previouslyUnmappedName, newDeepestNode),
                    ancestorBranches
                  );
                }

                /**
                 * Add a new value to the object we are building up to represent the
                 * parsed JSON
                 */
                function appendBuiltContent(ancestorBranches, key, node) {
                  Object(__WEBPACK_IMPORTED_MODULE_1__ascent__["c" /* nodeOf */])(
                    Object(__WEBPACK_IMPORTED_MODULE_3__lists__["g" /* head */])(ancestorBranches)
                  )[key] = node;
                }

                /**
                 * For when we find a new key in the json.
                 *
                 * @param {String|Number|Object} newDeepestName the key. If we are in an
                 *    array will be a number, otherwise a string. May take the special
                 *    value ROOT_PATH if the root node has just been found
                 *
                 * @param {String|Number|Object|Array|Null|undefined} [maybeNewDeepestNode]
                 *    usually this won't be known so can be undefined. Can't use null
                 *    to represent unknown because null is a valid value in JSON
                 **/
                function keyFound(ascent, newDeepestName, maybeNewDeepestNode) {
                  if (ascent) {
                    // if not root
                    // If we have the key but (unless adding to an array) no known value
                    // yet. Put that key in the output but against no defined value:
                    appendBuiltContent(ascent, newDeepestName, maybeNewDeepestNode);
                  }

                  var ascentWithNewPath = Object(__WEBPACK_IMPORTED_MODULE_3__lists__["d" /* cons */])(
                    Object(__WEBPACK_IMPORTED_MODULE_1__ascent__["b" /* namedNode */])(newDeepestName, maybeNewDeepestNode),
                    ascent
                  );

                  emitNodeOpened(ascentWithNewPath);

                  return ascentWithNewPath;
                }

                /**
                 * For when the current node ends.
                 */
                function nodeClosed(ascent) {
                  emitNodeClosed(ascent);

                  return (
                    Object(__WEBPACK_IMPORTED_MODULE_3__lists__["l" /* tail */])(ascent) ||
                    // If there are no nodes left in the ascent the root node
                    // just closed. Emit a special event for this:
                    emitRootClosed(
                      Object(__WEBPACK_IMPORTED_MODULE_1__ascent__["c" /* nodeOf */])(
                        Object(__WEBPACK_IMPORTED_MODULE_3__lists__["g" /* head */])(ascent)
                      )
                    )
                  );
                }

                var contentBuilderHandlers = {};
                contentBuilderHandlers[__WEBPACK_IMPORTED_MODULE_0__events__["l" /* SAX_VALUE_OPEN */]] = nodeOpened;
                contentBuilderHandlers[__WEBPACK_IMPORTED_MODULE_0__events__["k" /* SAX_VALUE_CLOSE */]] = nodeClosed;
                contentBuilderHandlers[__WEBPACK_IMPORTED_MODULE_0__events__["j" /* SAX_KEY */]] = keyFound;
                return contentBuilderHandlers;
              }

              /***/
            },
            /* 7 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_30342__) {
              "use strict";
              Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__publicApi__ = __nested_webpack_require_30342__(5);

              /* harmony default export */ __webpack_exports__["default"] = __WEBPACK_IMPORTED_MODULE_0__publicApi__["a" /* oboe */];

              /***/
            },
            /* 8 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_30736__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_30736__.d(__webpack_exports__, "a", function () {
                return applyDefaults;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __nested_webpack_require_30736__(2);

              function applyDefaults(passthrough, url, httpMethodName, body, headers, withCredentials, cached) {
                headers = headers
                  ? // Shallow-clone the headers array. This allows it to be
                    // modified without side effects to the caller. We don't
                    // want to change objects that the user passes in.
                    JSON.parse(JSON.stringify(headers))
                  : {};

                if (body) {
                  if (!Object(__WEBPACK_IMPORTED_MODULE_0__util__["d" /* isString */])(body)) {
                    // If the body is not a string, stringify it. This allows objects to
                    // be given which will be sent as JSON.
                    body = JSON.stringify(body);

                    // Default Content-Type to JSON unless given otherwise.
                    headers["Content-Type"] = headers["Content-Type"] || "application/json";
                  }
                  headers["Content-Length"] = headers["Content-Length"] || body.length;
                } else {
                  body = null;
                }

                // support cache busting like jQuery.ajax({cache:false})
                function modifiedUrl(baseUrl, cached) {
                  if (cached === false) {
                    if (baseUrl.indexOf("?") === -1) {
                      baseUrl += "?";
                    } else {
                      baseUrl += "&";
                    }

                    baseUrl += "_=" + new Date().getTime();
                  }
                  return baseUrl;
                }

                return passthrough(httpMethodName || "GET", modifiedUrl(url, cached), body, headers, withCredentials || false);
              }

              /***/
            },
            /* 9 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_32331__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_32331__.d(__webpack_exports__, "a", function () {
                return wire;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__pubSub__ = __nested_webpack_require_32331__(10);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__ascentManager__ = __nested_webpack_require_32331__(12);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__incrementalContentBuilder__ = __nested_webpack_require_32331__(6);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__patternAdapter__ = __nested_webpack_require_32331__(13);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__jsonPath__ = __nested_webpack_require_32331__(14);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__instanceApi__ = __nested_webpack_require_32331__(16);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__libs_clarinet__ = __nested_webpack_require_32331__(17);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__streamingHttp_node__ = __nested_webpack_require_32331__(18);

              /**
               * This file sits just behind the API which is used to attain a new
               * Oboe instance. It creates the new components that are required
               * and introduces them to each other.
               */

              function wire(httpMethodName, contentSource, body, headers, withCredentials) {
                var oboeBus = Object(__WEBPACK_IMPORTED_MODULE_0__pubSub__["a" /* pubSub */])();

                // Wire the input stream in if we are given a content source.
                // This will usually be the case. If not, the instance created
                // will have to be passed content from an external source.

                if (contentSource) {
                  Object(__WEBPACK_IMPORTED_MODULE_7__streamingHttp_node__["b" /* streamingHttp */])(
                    oboeBus,
                    Object(__WEBPACK_IMPORTED_MODULE_7__streamingHttp_node__["a" /* httpTransport */])(),
                    httpMethodName,
                    contentSource,
                    body,
                    headers,
                    withCredentials
                  );
                }

                Object(__WEBPACK_IMPORTED_MODULE_6__libs_clarinet__["a" /* clarinet */])(oboeBus);

                Object(__WEBPACK_IMPORTED_MODULE_1__ascentManager__["a" /* ascentManager */])(
                  oboeBus,
                  Object(__WEBPACK_IMPORTED_MODULE_2__incrementalContentBuilder__["b" /* incrementalContentBuilder */])(oboeBus)
                );

                Object(__WEBPACK_IMPORTED_MODULE_3__patternAdapter__["a" /* patternAdapter */])(
                  oboeBus,
                  __WEBPACK_IMPORTED_MODULE_4__jsonPath__["a" /* jsonPathCompiler */]
                );

                return Object(__WEBPACK_IMPORTED_MODULE_5__instanceApi__["a" /* instanceApi */])(oboeBus, contentSource);
              }

              /***/
            },
            /* 10 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_34741__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_34741__.d(__webpack_exports__, "a", function () {
                return pubSub;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__singleEventPubSub__ = __nested_webpack_require_34741__(11);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__functional__ = __nested_webpack_require_34741__(0);

              /**
               * pubSub is a curried interface for listening to and emitting
               * events.
               *
               * If we get a bus:
               *
               *    var bus = pubSub();
               *
               * We can listen to event 'foo' like:
               *
               *    bus('foo').on(myCallback)
               *
               * And emit event foo like:
               *
               *    bus('foo').emit()
               *
               * or, with a parameter:
               *
               *    bus('foo').emit('bar')
               *
               * All functions can be cached and don't need to be
               * bound. Ie:
               *
               *    var fooEmitter = bus('foo').emit
               *    fooEmitter('bar');  // emit an event
               *    fooEmitter('baz');  // emit another
               *
               * There's also an uncurried[1] shortcut for .emit and .on:
               *
               *    bus.on('foo', callback)
               *    bus.emit('foo', 'bar')
               *
               * [1]: http://zvon.org/other/haskell/Outputprelude/uncurry_f.html
               */
              function pubSub() {
                var singles = {};
                var newListener = newSingle("newListener");
                var removeListener = newSingle("removeListener");

                function newSingle(eventName) {
                  singles[eventName] = Object(__WEBPACK_IMPORTED_MODULE_0__singleEventPubSub__["a" /* singleEventPubSub */])(
                    eventName,
                    newListener,
                    removeListener
                  );
                  return singles[eventName];
                }

                /** pubSub instances are functions */
                function pubSubInstance(eventName) {
                  return singles[eventName] || newSingle(eventName);
                }

                // add convenience EventEmitter-style uncurried form of 'emit' and 'on'
                ["emit", "on", "un"].forEach(function (methodName) {
                  pubSubInstance[methodName] = Object(__WEBPACK_IMPORTED_MODULE_1__functional__["k" /* varArgs */])(function (eventName, parameters) {
                    Object(__WEBPACK_IMPORTED_MODULE_1__functional__["b" /* apply */])(parameters, pubSubInstance(eventName)[methodName]);
                  });
                });

                return pubSubInstance;
              }

              /***/
            },
            /* 11 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_36824__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_36824__.d(__webpack_exports__, "a", function () {
                return singleEventPubSub;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lists__ = __nested_webpack_require_36824__(1);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__util__ = __nested_webpack_require_36824__(2);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__functional__ = __nested_webpack_require_36824__(0);

              /**
               * A pub/sub which is responsible for a single event type. A
               * multi-event type event bus is created by pubSub by collecting
               * several of these.
               *
               * @param {String} eventType
               *    the name of the events managed by this singleEventPubSub
               * @param {singleEventPubSub} [newListener]
               *    place to notify of new listeners
               * @param {singleEventPubSub} [removeListener]
               *    place to notify of when listeners are removed
               */
              function singleEventPubSub(eventType, newListener, removeListener) {
                /** we are optimised for emitting events over firing them.
                 *  As well as the tuple list which stores event ids and
                 *  listeners there is a list with just the listeners which
                 *  can be iterated more quickly when we are emitting
                 */
                var listenerTupleList, listenerList;

                function hasId(id) {
                  return function (tuple) {
                    return tuple.id === id;
                  };
                }

                return {
                  /**
                   * @param {Function} listener
                   * @param {*} listenerId
                   *    an id that this listener can later by removed by.
                   *    Can be of any type, to be compared to other ids using ==
                   */
                  on: function (listener, listenerId) {
                    var tuple = {
                      listener: listener,
                      id: listenerId || listener, // when no id is given use the
                      // listener function as the id
                    };

                    if (newListener) {
                      newListener.emit(eventType, listener, tuple.id);
                    }

                    listenerTupleList = Object(__WEBPACK_IMPORTED_MODULE_0__lists__["d" /* cons */])(tuple, listenerTupleList);
                    listenerList = Object(__WEBPACK_IMPORTED_MODULE_0__lists__["d" /* cons */])(listener, listenerList);

                    return this; // chaining
                  },

                  emit: function () {
                    Object(__WEBPACK_IMPORTED_MODULE_0__lists__["b" /* applyEach */])(listenerList, arguments);
                  },

                  un: function (listenerId) {
                    var removed;

                    listenerTupleList = Object(__WEBPACK_IMPORTED_MODULE_0__lists__["m" /* without */])(
                      listenerTupleList,
                      hasId(listenerId),
                      function (tuple) {
                        removed = tuple;
                      }
                    );

                    if (removed) {
                      listenerList = Object(__WEBPACK_IMPORTED_MODULE_0__lists__["m" /* without */])(listenerList, function (listener) {
                        return listener === removed.listener;
                      });

                      if (removeListener) {
                        removeListener.emit(eventType, removed.listener, removed.id);
                      }
                    }
                  },

                  listeners: function () {
                    // differs from Node EventEmitter: returns list, not array
                    return listenerList;
                  },

                  hasListener: function (listenerId) {
                    var test = listenerId ? hasId(listenerId) : __WEBPACK_IMPORTED_MODULE_2__functional__["a" /* always */];

                    return Object(__WEBPACK_IMPORTED_MODULE_1__util__["a" /* defined */])(
                      Object(__WEBPACK_IMPORTED_MODULE_0__lists__["e" /* first */])(test, listenerTupleList)
                    );
                  },
                };
              }

              /***/
            },
            /* 12 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_40160__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_40160__.d(__webpack_exports__, "a", function () {
                return ascentManager;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ascent__ = __nested_webpack_require_40160__(4);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__events__ = __nested_webpack_require_40160__(3);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__lists__ = __nested_webpack_require_40160__(1);

              /**
               * A bridge used to assign stateless functions to listen to clarinet.
               *
               * As well as the parameter from clarinet, each callback will also be passed
               * the result of the last callback.
               *
               * This may also be used to clear all listeners by assigning zero handlers:
               *
               *    ascentManager( clarinet, {} )
               */
              function ascentManager(oboeBus, handlers) {
                "use strict";

                var listenerId = {};
                var ascent;

                function stateAfter(handler) {
                  return function (param) {
                    ascent = handler(ascent, param);
                  };
                }

                for (var eventName in handlers) {
                  oboeBus(eventName).on(stateAfter(handlers[eventName]), listenerId);
                }

                oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["g" /* NODE_SWAP */]).on(function (newNode) {
                  var oldHead = Object(__WEBPACK_IMPORTED_MODULE_2__lists__["g" /* head */])(ascent);
                  var key = Object(__WEBPACK_IMPORTED_MODULE_0__ascent__["a" /* keyOf */])(oldHead);
                  var ancestors = Object(__WEBPACK_IMPORTED_MODULE_2__lists__["l" /* tail */])(ascent);
                  var parentNode;

                  if (ancestors) {
                    parentNode = Object(__WEBPACK_IMPORTED_MODULE_0__ascent__["c" /* nodeOf */])(
                      Object(__WEBPACK_IMPORTED_MODULE_2__lists__["g" /* head */])(ancestors)
                    );
                    parentNode[key] = newNode;
                  }
                });

                oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["e" /* NODE_DROP */]).on(function () {
                  var oldHead = Object(__WEBPACK_IMPORTED_MODULE_2__lists__["g" /* head */])(ascent);
                  var key = Object(__WEBPACK_IMPORTED_MODULE_0__ascent__["a" /* keyOf */])(oldHead);
                  var ancestors = Object(__WEBPACK_IMPORTED_MODULE_2__lists__["l" /* tail */])(ascent);
                  var parentNode;

                  if (ancestors) {
                    parentNode = Object(__WEBPACK_IMPORTED_MODULE_0__ascent__["c" /* nodeOf */])(
                      Object(__WEBPACK_IMPORTED_MODULE_2__lists__["g" /* head */])(ancestors)
                    );

                    delete parentNode[key];
                  }
                });

                oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["a" /* ABORTING */]).on(function () {
                  for (var eventName in handlers) {
                    oboeBus(eventName).un(listenerId);
                  }
                });
              }

              /***/
            },
            /* 13 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_42649__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_42649__.d(__webpack_exports__, "a", function () {
                return patternAdapter;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__events__ = __nested_webpack_require_42649__(3);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lists__ = __nested_webpack_require_42649__(1);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ascent__ = __nested_webpack_require_42649__(4);

              /**
               *  The pattern adaptor listens for newListener and removeListener
               *  events. When patterns are added or removed it compiles the JSONPath
               *  and wires them up.
               *
               *  When nodes and paths are found it emits the fully-qualified match
               *  events with parameters ready to ship to the outside world
               */

              function patternAdapter(oboeBus, jsonPathCompiler) {
                var predicateEventMap = {
                  node: oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["d" /* NODE_CLOSED */]),
                  path: oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["f" /* NODE_OPENED */]),
                };

                function emitMatchingNode(emitMatch, node, ascent) {
                  /*
         We're now calling to the outside world where Lisp-style
         lists will not be familiar. Convert to standard arrays.

         Also, reverse the order because it is more common to
         list paths "root to leaf" than "leaf to root"  */
                  var descent = Object(__WEBPACK_IMPORTED_MODULE_1__lists__["k" /* reverseList */])(ascent);

                  emitMatch(
                    node,

                    // To make a path, strip off the last item which is the special
                    // ROOT_PATH token for the 'path' to the root node
                    Object(__WEBPACK_IMPORTED_MODULE_1__lists__["i" /* listAsArray */])(
                      Object(__WEBPACK_IMPORTED_MODULE_1__lists__["l" /* tail */])(
                        Object(__WEBPACK_IMPORTED_MODULE_1__lists__["j" /* map */])(__WEBPACK_IMPORTED_MODULE_2__ascent__["a" /* keyOf */], descent)
                      )
                    ), // path
                    Object(__WEBPACK_IMPORTED_MODULE_1__lists__["i" /* listAsArray */])(
                      Object(__WEBPACK_IMPORTED_MODULE_1__lists__["j" /* map */])(__WEBPACK_IMPORTED_MODULE_2__ascent__["c" /* nodeOf */], descent)
                    ) // ancestors
                  );
                }

                /*
                 * Set up the catching of events such as NODE_CLOSED and NODE_OPENED and, if
                 * matching the specified pattern, propagate to pattern-match events such as
                 * oboeBus('node:!')
                 *
                 *
                 *
                 * @param {Function} predicateEvent
                 *          either oboeBus(NODE_CLOSED) or oboeBus(NODE_OPENED).
                 * @param {Function} compiledJsonPath
                 */
                function addUnderlyingListener(fullEventName, predicateEvent, compiledJsonPath) {
                  var emitMatch = oboeBus(fullEventName).emit;

                  predicateEvent.on(function (ascent) {
                    var maybeMatchingMapping = compiledJsonPath(ascent);

                    /* Possible values for maybeMatchingMapping are now:

          false:
          we did not match

          an object/array/string/number/null:
          we matched and have the node that matched.
          Because nulls are valid json values this can be null.

          undefined:
          we matched but don't have the matching node yet.
          ie, we know there is an upcoming node that matches but we
          can't say anything else about it.
          */
                    if (maybeMatchingMapping !== false) {
                      emitMatchingNode(emitMatch, Object(__WEBPACK_IMPORTED_MODULE_2__ascent__["c" /* nodeOf */])(maybeMatchingMapping), ascent);
                    }
                  }, fullEventName);

                  oboeBus("removeListener").on(function (removedEventName) {
                    // if the fully qualified match event listener is later removed, clean up
                    // by removing the underlying listener if it was the last using that pattern:

                    if (removedEventName === fullEventName) {
                      if (!oboeBus(removedEventName).listeners()) {
                        predicateEvent.un(fullEventName);
                      }
                    }
                  });
                }

                oboeBus("newListener").on(function (fullEventName) {
                  var match = /(node|path):(.*)/.exec(fullEventName);

                  if (match) {
                    var predicateEvent = predicateEventMap[match[1]];

                    if (!predicateEvent.hasListener(fullEventName)) {
                      addUnderlyingListener(fullEventName, predicateEvent, jsonPathCompiler(match[2]));
                    }
                  }
                });
              }

              /***/
            },
            /* 14 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_46869__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_46869__.d(__webpack_exports__, "a", function () {
                return jsonPathCompiler;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__functional__ = __nested_webpack_require_46869__(0);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lists__ = __nested_webpack_require_46869__(1);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__ascent__ = __nested_webpack_require_46869__(4);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__util__ = __nested_webpack_require_46869__(2);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__incrementalContentBuilder__ = __nested_webpack_require_46869__(6);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__jsonPathSyntax__ = __nested_webpack_require_46869__(15);

              /**
               * The jsonPath evaluator compiler used for Oboe.js.
               *
               * One function is exposed. This function takes a String JSONPath spec and
               * returns a function to test candidate ascents for matches.
               *
               *  String jsonPath -> (List ascent) -> Boolean|Object
               *
               * This file is coded in a pure functional style. That is, no function has
               * side effects, every function evaluates to the same value for the same
               * arguments and no variables are reassigned.
               */
              // the call to jsonPathSyntax injects the token syntaxes that are needed
              // inside the compiler
              var jsonPathCompiler = Object(__WEBPACK_IMPORTED_MODULE_5__jsonPathSyntax__["a" /* jsonPathSyntax */])(function (
                pathNodeSyntax,
                doubleDotSyntax,
                dotSyntax,
                bangSyntax,
                emptySyntax
              ) {
                var CAPTURING_INDEX = 1;
                var NAME_INDEX = 2;
                var FIELD_LIST_INDEX = 3;

                var headKey = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["d" /* compose2 */])(
                  __WEBPACK_IMPORTED_MODULE_2__ascent__["a" /* keyOf */],
                  __WEBPACK_IMPORTED_MODULE_1__lists__["g" /* head */]
                );
                var headNode = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["d" /* compose2 */])(
                  __WEBPACK_IMPORTED_MODULE_2__ascent__["c" /* nodeOf */],
                  __WEBPACK_IMPORTED_MODULE_1__lists__["g" /* head */]
                );

                /**
                 * Create an evaluator function for a named path node, expressed in the
                 * JSONPath like:
                 *    foo
                 *    ["bar"]
                 *    [2]
                 */
                function nameClause(previousExpr, detection) {
                  var name = detection[NAME_INDEX];

                  var matchesName =
                    !name || name === "*"
                      ? __WEBPACK_IMPORTED_MODULE_0__functional__["a" /* always */]
                      : function (ascent) {
                          return String(headKey(ascent)) === name;
                        };

                  return Object(__WEBPACK_IMPORTED_MODULE_0__functional__["g" /* lazyIntersection */])(matchesName, previousExpr);
                }

                /**
                 * Create an evaluator function for a a duck-typed node, expressed like:
                 *
                 *    {spin, taste, colour}
                 *    .particle{spin, taste, colour}
                 *    *{spin, taste, colour}
                 */
                function duckTypeClause(previousExpr, detection) {
                  var fieldListStr = detection[FIELD_LIST_INDEX];

                  if (!fieldListStr) {
                    return previousExpr;
                  } // don't wrap at all, return given expr as-is

                  var hasAllrequiredFields = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["j" /* partialComplete */])(
                    __WEBPACK_IMPORTED_MODULE_3__util__["b" /* hasAllProperties */],
                    Object(__WEBPACK_IMPORTED_MODULE_1__lists__["c" /* arrayAsList */])(fieldListStr.split(/\W+/))
                  );

                  var isMatch = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["d" /* compose2 */])(hasAllrequiredFields, headNode);

                  return Object(__WEBPACK_IMPORTED_MODULE_0__functional__["g" /* lazyIntersection */])(isMatch, previousExpr);
                }

                /**
                 * Expression for $, returns the evaluator function
                 */
                function capture(previousExpr, detection) {
                  // extract meaning from the detection
                  var capturing = !!detection[CAPTURING_INDEX];

                  if (!capturing) {
                    return previousExpr;
                  } // don't wrap at all, return given expr as-is

                  return Object(__WEBPACK_IMPORTED_MODULE_0__functional__["g" /* lazyIntersection */])(
                    previousExpr,
                    __WEBPACK_IMPORTED_MODULE_1__lists__["g" /* head */]
                  );
                }

                /**
                 * Create an evaluator function that moves onto the next item on the
                 * lists. This function is the place where the logic to move up a
                 * level in the ascent exists.
                 *
                 * Eg, for JSONPath ".foo" we need skip1(nameClause(always, [,'foo']))
                 */
                function skip1(previousExpr) {
                  if (previousExpr === __WEBPACK_IMPORTED_MODULE_0__functional__["a" /* always */]) {
                    /* If there is no previous expression this consume command
            is at the start of the jsonPath.
            Since JSONPath specifies what we'd like to find but not
            necessarily everything leading down to it, when running
            out of JSONPath to check against we default to true */
                    return __WEBPACK_IMPORTED_MODULE_0__functional__["a" /* always */];
                  }

                  /** return true if the ascent we have contains only the JSON root,
                   *  false otherwise
                   */
                  function notAtRoot(ascent) {
                    return headKey(ascent) !== __WEBPACK_IMPORTED_MODULE_4__incrementalContentBuilder__["a" /* ROOT_PATH */];
                  }

                  return Object(__WEBPACK_IMPORTED_MODULE_0__functional__["g" /* lazyIntersection */])(
                    /* If we're already at the root but there are more
                  expressions to satisfy, can't consume any more. No match.

                  This check is why none of the other exprs have to be able
                  to handle empty lists; skip1 is the only evaluator that
                  moves onto the next token and it refuses to do so once it
                  reaches the last item in the list. */
                    notAtRoot,

                    /* We are not at the root of the ascent yet.
                  Move to the next level of the ascent by handing only
                  the tail to the previous expression */
                    Object(__WEBPACK_IMPORTED_MODULE_0__functional__["d" /* compose2 */])(
                      previousExpr,
                      __WEBPACK_IMPORTED_MODULE_1__lists__["l" /* tail */]
                    )
                  );
                }

                /**
                 * Create an evaluator function for the .. (double dot) token. Consumes
                 * zero or more levels of the ascent, the fewest that are required to find
                 * a match when given to previousExpr.
                 */
                function skipMany(previousExpr) {
                  if (previousExpr === __WEBPACK_IMPORTED_MODULE_0__functional__["a" /* always */]) {
                    /* If there is no previous expression this consume command
            is at the start of the jsonPath.
            Since JSONPath specifies what we'd like to find but not
            necessarily everything leading down to it, when running
            out of JSONPath to check against we default to true */
                    return __WEBPACK_IMPORTED_MODULE_0__functional__["a" /* always */];
                  }

                  // In JSONPath .. is equivalent to !.. so if .. reaches the root
                  // the match has succeeded. Ie, we might write ..foo or !..foo
                  // and both should match identically.
                  var terminalCaseWhenArrivingAtRoot = rootExpr();
                  var terminalCaseWhenPreviousExpressionIsSatisfied = previousExpr;
                  var recursiveCase = skip1(function (ascent) {
                    return cases(ascent);
                  });

                  var cases = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["h" /* lazyUnion */])(
                    terminalCaseWhenArrivingAtRoot,
                    terminalCaseWhenPreviousExpressionIsSatisfied,
                    recursiveCase
                  );

                  return cases;
                }

                /**
                 * Generate an evaluator for ! - matches only the root element of the json
                 * and ignores any previous expressions since nothing may precede !.
                 */
                function rootExpr() {
                  return function (ascent) {
                    return headKey(ascent) === __WEBPACK_IMPORTED_MODULE_4__incrementalContentBuilder__["a" /* ROOT_PATH */];
                  };
                }

                /**
                 * Generate a statement wrapper to sit around the outermost
                 * clause evaluator.
                 *
                 * Handles the case where the capturing is implicit because the JSONPath
                 * did not contain a '$' by returning the last node.
                 */
                function statementExpr(lastClause) {
                  return function (ascent) {
                    // kick off the evaluation by passing through to the last clause
                    var exprMatch = lastClause(ascent);

                    return exprMatch === true ? Object(__WEBPACK_IMPORTED_MODULE_1__lists__["g" /* head */])(ascent) : exprMatch;
                  };
                }

                /**
                 * For when a token has been found in the JSONPath input.
                 * Compiles the parser for that token and returns in combination with the
                 * parser already generated.
                 *
                 * @param {Function} exprs  a list of the clause evaluator generators for
                 *                          the token that was found
                 * @param {Function} parserGeneratedSoFar the parser already found
                 * @param {Array} detection the match given by the regex engine when
                 *                          the feature was found
                 */
                function expressionsReader(exprs, parserGeneratedSoFar, detection) {
                  // if exprs is zero-length foldR will pass back the
                  // parserGeneratedSoFar as-is so we don't need to treat
                  // this as a special case

                  return Object(__WEBPACK_IMPORTED_MODULE_1__lists__["f" /* foldR */])(
                    function (parserGeneratedSoFar, expr) {
                      return expr(parserGeneratedSoFar, detection);
                    },
                    parserGeneratedSoFar,
                    exprs
                  );
                }

                /**
                 *  If jsonPath matches the given detector function, creates a function which
                 *  evaluates against every clause in the clauseEvaluatorGenerators. The
                 *  created function is propagated to the onSuccess function, along with
                 *  the remaining unparsed JSONPath substring.
                 *
                 *  The intended use is to create a clauseMatcher by filling in
                 *  the first two arguments, thus providing a function that knows
                 *  some syntax to match and what kind of generator to create if it
                 *  finds it. The parameter list once completed is:
                 *
                 *    (jsonPath, parserGeneratedSoFar, onSuccess)
                 *
                 *  onSuccess may be compileJsonPathToFunction, to recursively continue
                 *  parsing after finding a match or returnFoundParser to stop here.
                 */
                function generateClauseReaderIfTokenFound(
                  tokenDetector,
                  clauseEvaluatorGenerators,

                  jsonPath,
                  parserGeneratedSoFar,
                  onSuccess
                ) {
                  var detected = tokenDetector(jsonPath);

                  if (detected) {
                    var compiledParser = expressionsReader(clauseEvaluatorGenerators, parserGeneratedSoFar, detected);

                    var remainingUnparsedJsonPath = jsonPath.substr(Object(__WEBPACK_IMPORTED_MODULE_3__util__["e" /* len */])(detected[0]));

                    return onSuccess(remainingUnparsedJsonPath, compiledParser);
                  }
                }

                /**
                 * Partially completes generateClauseReaderIfTokenFound above.
                 */
                function clauseMatcher(tokenDetector, exprs) {
                  return Object(__WEBPACK_IMPORTED_MODULE_0__functional__["j" /* partialComplete */])(
                    generateClauseReaderIfTokenFound,
                    tokenDetector,
                    exprs
                  );
                }

                /**
                 * clauseForJsonPath is a function which attempts to match against
                 * several clause matchers in order until one matches. If non match the
                 * jsonPath expression is invalid and an error is thrown.
                 *
                 * The parameter list is the same as a single clauseMatcher:
                 *
                 *    (jsonPath, parserGeneratedSoFar, onSuccess)
                 */
                var clauseForJsonPath = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["h" /* lazyUnion */])(
                  clauseMatcher(
                    pathNodeSyntax,
                    Object(__WEBPACK_IMPORTED_MODULE_1__lists__["h" /* list */])(capture, duckTypeClause, nameClause, skip1)
                  ),

                  clauseMatcher(doubleDotSyntax, Object(__WEBPACK_IMPORTED_MODULE_1__lists__["h" /* list */])(skipMany)),

                  // dot is a separator only (like whitespace in other languages) but
                  // rather than make it a special case, use an empty list of
                  // expressions when this token is found
                  clauseMatcher(dotSyntax, Object(__WEBPACK_IMPORTED_MODULE_1__lists__["h" /* list */])()),

                  clauseMatcher(bangSyntax, Object(__WEBPACK_IMPORTED_MODULE_1__lists__["h" /* list */])(capture, rootExpr)),

                  clauseMatcher(emptySyntax, Object(__WEBPACK_IMPORTED_MODULE_1__lists__["h" /* list */])(statementExpr)),

                  function (jsonPath) {
                    throw Error('"' + jsonPath + '" could not be tokenised');
                  }
                );

                /**
                 * One of two possible values for the onSuccess argument of
                 * generateClauseReaderIfTokenFound.
                 *
                 * When this function is used, generateClauseReaderIfTokenFound simply
                 * returns the compiledParser that it made, regardless of if there is
                 * any remaining jsonPath to be compiled.
                 */
                function returnFoundParser(_remainingJsonPath, compiledParser) {
                  return compiledParser;
                }

                /**
                 * Recursively compile a JSONPath expression.
                 *
                 * This function serves as one of two possible values for the onSuccess
                 * argument of generateClauseReaderIfTokenFound, meaning continue to
                 * recursively compile. Otherwise, returnFoundParser is given and
                 * compilation terminates.
                 */
                function compileJsonPathToFunction(uncompiledJsonPath, parserGeneratedSoFar) {
                  /**
                   * On finding a match, if there is remaining text to be compiled
                   * we want to either continue parsing using a recursive call to
                   * compileJsonPathToFunction. Otherwise, we want to stop and return
                   * the parser that we have found so far.
                   */
                  var onFind = uncompiledJsonPath ? compileJsonPathToFunction : returnFoundParser;

                  return clauseForJsonPath(uncompiledJsonPath, parserGeneratedSoFar, onFind);
                }

                /**
                 * This is the function that we expose to the rest of the library.
                 */
                return function (jsonPath) {
                  try {
                    // Kick off the recursive parsing of the jsonPath
                    return compileJsonPathToFunction(jsonPath, __WEBPACK_IMPORTED_MODULE_0__functional__["a" /* always */]);
                  } catch (e) {
                    throw Error('Could not compile "' + jsonPath + '" because ' + e.message);
                  }
                };
              });

              /***/
            },
            /* 15 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_60590__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_60590__.d(__webpack_exports__, "a", function () {
                return jsonPathSyntax;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__functional__ = __nested_webpack_require_60590__(0);

              var jsonPathSyntax = (function () {
                /**
                 * Export a regular expression as a simple function by exposing just
                 * the Regex#exec. This allows regex tests to be used under the same
                 * interface as differently implemented tests, or for a user of the
                 * tests to not concern themselves with their implementation as regular
                 * expressions.
                 *
                 * This could also be expressed point-free as:
                 *   Function.prototype.bind.bind(RegExp.prototype.exec),
                 *
                 * But that's far too confusing! (and not even smaller once minified
                 * and gzipped)
                 */
                var regexDescriptor = function regexDescriptor(regex) {
                  return regex.exec.bind(regex);
                };

                /**
                 * Join several regular expressions and express as a function.
                 * This allows the token patterns to reuse component regular expressions
                 * instead of being expressed in full using huge and confusing regular
                 * expressions.
                 */
                var jsonPathClause = Object(__WEBPACK_IMPORTED_MODULE_0__functional__["k" /* varArgs */])(function (componentRegexes) {
                  // The regular expressions all start with ^ because we
                  // only want to find matches at the start of the
                  // JSONPath fragment we are inspecting
                  componentRegexes.unshift(/^/);

                  return regexDescriptor(
                    RegExp(componentRegexes.map(Object(__WEBPACK_IMPORTED_MODULE_0__functional__["c" /* attr */])("source")).join(""))
                  );
                });

                var possiblyCapturing = /(\$?)/;
                var namedNode = /([\w-_]+|\*)/;
                var namePlaceholder = /()/;
                var nodeInArrayNotation = /\["([^"]+)"\]/;
                var numberedNodeInArrayNotation = /\[(\d+|\*)\]/;
                var fieldList = /{([\w ]*?)}/;
                var optionalFieldList = /(?:{([\w ]*?)})?/;

                //   foo or *
                var jsonPathNamedNodeInObjectNotation = jsonPathClause(possiblyCapturing, namedNode, optionalFieldList);

                //   ["foo"]
                var jsonPathNamedNodeInArrayNotation = jsonPathClause(possiblyCapturing, nodeInArrayNotation, optionalFieldList);

                //   [2] or [*]
                var jsonPathNumberedNodeInArrayNotation = jsonPathClause(possiblyCapturing, numberedNodeInArrayNotation, optionalFieldList);

                //   {a b c}
                var jsonPathPureDuckTyping = jsonPathClause(possiblyCapturing, namePlaceholder, fieldList);

                //   ..
                var jsonPathDoubleDot = jsonPathClause(/\.\./);

                //   .
                var jsonPathDot = jsonPathClause(/\./);

                //   !
                var jsonPathBang = jsonPathClause(possiblyCapturing, /!/);

                //   nada!
                var emptyString = jsonPathClause(/$/);

                /* We export only a single function. When called, this function injects
      into another function the descriptors from above.
    */
                return function (fn) {
                  return fn(
                    Object(__WEBPACK_IMPORTED_MODULE_0__functional__["h" /* lazyUnion */])(
                      jsonPathNamedNodeInObjectNotation,
                      jsonPathNamedNodeInArrayNotation,
                      jsonPathNumberedNodeInArrayNotation,
                      jsonPathPureDuckTyping
                    ),
                    jsonPathDoubleDot,
                    jsonPathDot,
                    jsonPathBang,
                    emptyString
                  );
                };
              })();

              /***/
            },
            /* 16 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_63900__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_63900__.d(__webpack_exports__, "a", function () {
                return instanceApi;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__events__ = __nested_webpack_require_63900__(3);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__functional__ = __nested_webpack_require_63900__(0);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __nested_webpack_require_63900__(2);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__publicApi__ = __nested_webpack_require_63900__(5);

              /**
               * The instance API is the thing that is returned when oboe() is called.
               * it allows:
               *
               *    - listeners for various events to be added and removed
               *    - the http response header/headers to be read
               */
              function instanceApi(oboeBus, contentSource) {
                var oboeApi;
                var fullyQualifiedNamePattern = /^(node|path):./;
                var rootNodeFinishedEvent = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["h" /* ROOT_NODE_FOUND */]);
                var emitNodeDrop = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["e" /* NODE_DROP */]).emit;
                var emitNodeSwap = oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["g" /* NODE_SWAP */]).emit;

                /**
                 * Add any kind of listener that the instance api exposes
                 */
                var addListener = Object(__WEBPACK_IMPORTED_MODULE_1__functional__["k" /* varArgs */])(function (eventId, parameters) {
                  if (oboeApi[eventId]) {
                    // for events added as .on(event, callback), if there is a
                    // .event() equivalent with special behaviour , pass through
                    // to that:
                    Object(__WEBPACK_IMPORTED_MODULE_1__functional__["b" /* apply */])(parameters, oboeApi[eventId]);
                  } else {
                    // we have a standard Node.js EventEmitter 2-argument call.
                    // The first parameter is the listener.
                    var event = oboeBus(eventId);
                    var listener = parameters[0];

                    if (fullyQualifiedNamePattern.test(eventId)) {
                      // allow fully-qualified node/path listeners
                      // to be added
                      addForgettableCallback(event, wrapCallbackToSwapNodeIfSomethingReturned(listener));
                    } else {
                      // the event has no special handling, pass through
                      // directly onto the event bus:
                      event.on(listener);
                    }
                  }

                  return oboeApi; // chaining
                });

                /**
                 * Remove any kind of listener that the instance api exposes
                 */
                var removeListener = function (eventId, p2, p3) {
                  if (eventId === "done") {
                    rootNodeFinishedEvent.un(p2);
                  } else if (eventId === "node" || eventId === "path") {
                    // allow removal of node and path
                    oboeBus.un(eventId + ":" + p2, p3);
                  } else {
                    // we have a standard Node.js EventEmitter 2-argument call.
                    // The second parameter is the listener. This may be a call
                    // to remove a fully-qualified node/path listener but requires
                    // no special handling
                    var listener = p2;

                    oboeBus(eventId).un(listener);
                  }

                  return oboeApi; // chaining
                };

                /**
                 * Add a callback, wrapped in a try/catch so as to not break the
                 * execution of Oboe if an exception is thrown (fail events are
                 * fired instead)
                 *
                 * The callback is used as the listener id so that it can later be
                 * removed using .un(callback)
                 */
                function addProtectedCallback(eventName, callback) {
                  oboeBus(eventName).on(protectedCallback(callback), callback);
                  return oboeApi; // chaining
                }

                /**
                 * Add a callback where, if .forget() is called during the callback's
                 * execution, the callback will be de-registered
                 */
                function addForgettableCallback(event, callback, listenerId) {
                  // listenerId is optional and if not given, the original
                  // callback will be used
                  listenerId = listenerId || callback;

                  var safeCallback = protectedCallback(callback);

                  event.on(function () {
                    var discard = false;

                    oboeApi.forget = function () {
                      discard = true;
                    };

                    Object(__WEBPACK_IMPORTED_MODULE_1__functional__["b" /* apply */])(arguments, safeCallback);

                    delete oboeApi.forget;

                    if (discard) {
                      event.un(listenerId);
                    }
                  }, listenerId);

                  return oboeApi; // chaining
                }

                /**
                 *  wrap a callback so that if it throws, Oboe.js doesn't crash but instead
                 *  throw the error in another event loop
                 */
                function protectedCallback(callback) {
                  return function () {
                    try {
                      return callback.apply(oboeApi, arguments);
                    } catch (e) {
                      setTimeout(function () {
                        throw new Error(e.message);
                      });
                    }
                  };
                }

                /**
                 * Return the fully qualified event for when a pattern matches
                 * either a node or a path
                 *
                 * @param type {String} either 'node' or 'path'
                 */
                function fullyQualifiedPatternMatchEvent(type, pattern) {
                  return oboeBus(type + ":" + pattern);
                }

                function wrapCallbackToSwapNodeIfSomethingReturned(callback) {
                  return function () {
                    var returnValueFromCallback = callback.apply(this, arguments);

                    if (Object(__WEBPACK_IMPORTED_MODULE_2__util__["a" /* defined */])(returnValueFromCallback)) {
                      if (returnValueFromCallback === __WEBPACK_IMPORTED_MODULE_3__publicApi__["a" /* oboe */].drop) {
                        emitNodeDrop();
                      } else {
                        emitNodeSwap(returnValueFromCallback);
                      }
                    }
                  };
                }

                function addSingleNodeOrPathListener(eventId, pattern, callback) {
                  var effectiveCallback;

                  if (eventId === "node") {
                    effectiveCallback = wrapCallbackToSwapNodeIfSomethingReturned(callback);
                  } else {
                    effectiveCallback = callback;
                  }

                  addForgettableCallback(fullyQualifiedPatternMatchEvent(eventId, pattern), effectiveCallback, callback);
                }

                /**
                 * Add several listeners at a time, from a map
                 */
                function addMultipleNodeOrPathListeners(eventId, listenerMap) {
                  for (var pattern in listenerMap) {
                    addSingleNodeOrPathListener(eventId, pattern, listenerMap[pattern]);
                  }
                }

                /**
                 * implementation behind .onPath() and .onNode()
                 */
                function addNodeOrPathListenerApi(eventId, jsonPathOrListenerMap, callback) {
                  if (Object(__WEBPACK_IMPORTED_MODULE_2__util__["d" /* isString */])(jsonPathOrListenerMap)) {
                    addSingleNodeOrPathListener(eventId, jsonPathOrListenerMap, callback);
                  } else {
                    addMultipleNodeOrPathListeners(eventId, jsonPathOrListenerMap);
                  }

                  return oboeApi; // chaining
                }

                // some interface methods are only filled in after we receive
                // values and are noops before that:
                oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["i" /* ROOT_PATH_FOUND */]).on(function (rootNode) {
                  oboeApi.root = Object(__WEBPACK_IMPORTED_MODULE_1__functional__["f" /* functor */])(rootNode);
                });

                /**
                 * When content starts make the headers readable through the
                 * instance API
                 */
                oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["c" /* HTTP_START */]).on(function (_statusCode, headers) {
                  oboeApi.header = function (name) {
                    return name ? headers[name] : headers;
                  };
                });

                /**
                 * Construct and return the public API of the Oboe instance to be
                 * returned to the calling application
                 */
                oboeApi = {
                  on: addListener,
                  addListener: addListener,
                  removeListener: removeListener,
                  emit: oboeBus.emit,

                  node: Object(__WEBPACK_IMPORTED_MODULE_1__functional__["j" /* partialComplete */])(addNodeOrPathListenerApi, "node"),
                  path: Object(__WEBPACK_IMPORTED_MODULE_1__functional__["j" /* partialComplete */])(addNodeOrPathListenerApi, "path"),

                  done: Object(__WEBPACK_IMPORTED_MODULE_1__functional__["j" /* partialComplete */])(addForgettableCallback, rootNodeFinishedEvent),
                  start: Object(__WEBPACK_IMPORTED_MODULE_1__functional__["j" /* partialComplete */])(
                    addProtectedCallback,
                    __WEBPACK_IMPORTED_MODULE_0__events__["c" /* HTTP_START */]
                  ),

                  // fail doesn't use protectedCallback because
                  // could lead to non-terminating loops
                  fail: oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["b" /* FAIL_EVENT */]).on,

                  // public api calling abort fires the ABORTING event
                  abort: oboeBus(__WEBPACK_IMPORTED_MODULE_0__events__["a" /* ABORTING */]).emit,

                  // initially return nothing for header and root
                  header: __WEBPACK_IMPORTED_MODULE_1__functional__["i" /* noop */],
                  root: __WEBPACK_IMPORTED_MODULE_1__functional__["i" /* noop */],

                  source: contentSource,
                };

                return oboeApi;
              }

              /***/
            },
            /* 17 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_72263__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_72263__.d(__webpack_exports__, "a", function () {
                return clarinet;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__events__ = __nested_webpack_require_72263__(3);

              /*
   This is a slightly hacked-up browser only version of clarinet

      *  some features removed to help keep browser Oboe under
         the 5k micro-library limit
      *  plug directly into event bus

   For the original go here:
      https://github.com/dscape/clarinet

   We receive the events:
      STREAM_DATA
      STREAM_END

   We emit the events:
      SAX_KEY
      SAX_VALUE_OPEN
      SAX_VALUE_CLOSE
      FAIL_EVENT
 */

              function clarinet(eventBus) {
                "use strict";

                // shortcut some events on the bus
                var emitSaxKey = eventBus(__WEBPACK_IMPORTED_MODULE_0__events__["j" /* SAX_KEY */]).emit;
                var emitValueOpen = eventBus(__WEBPACK_IMPORTED_MODULE_0__events__["l" /* SAX_VALUE_OPEN */]).emit;
                var emitValueClose = eventBus(__WEBPACK_IMPORTED_MODULE_0__events__["k" /* SAX_VALUE_CLOSE */]).emit;
                var emitFail = eventBus(__WEBPACK_IMPORTED_MODULE_0__events__["b" /* FAIL_EVENT */]).emit;

                var MAX_BUFFER_LENGTH = 64 * 1024;
                var stringTokenPattern = /[\\"\n]/g;
                var _n = 0;

                // states
                var BEGIN = _n++;
                var VALUE = _n++; // general stuff
                var OPEN_OBJECT = _n++; // {
                var CLOSE_OBJECT = _n++; // }
                var OPEN_ARRAY = _n++; // [
                var CLOSE_ARRAY = _n++; // ]
                var STRING = _n++; // ""
                var OPEN_KEY = _n++; // , "a"
                var CLOSE_KEY = _n++; // :
                var TRUE = _n++; // r
                var TRUE2 = _n++; // u
                var TRUE3 = _n++; // e
                var FALSE = _n++; // a
                var FALSE2 = _n++; // l
                var FALSE3 = _n++; // s
                var FALSE4 = _n++; // e
                var NULL = _n++; // u
                var NULL2 = _n++; // l
                var NULL3 = _n++; // l
                var NUMBER_DECIMAL_POINT = _n++; // .
                var NUMBER_DIGIT = _n; // [0-9]

                // setup initial parser values
                var bufferCheckPosition = MAX_BUFFER_LENGTH;
                var latestError;
                var c;
                var p;
                var textNode;
                var numberNode = "";
                var slashed = false;
                var closed = false;
                var state = BEGIN;
                var stack = [];
                var unicodeS = null;
                var unicodeI = 0;
                var depth = 0;
                var position = 0;
                var column = 0; // mostly for error reporting
                var line = 1;

                function checkBufferLength() {
                  var maxActual = 0;

                  if (textNode !== undefined && textNode.length > MAX_BUFFER_LENGTH) {
                    emitError("Max buffer length exceeded: textNode");
                    maxActual = Math.max(maxActual, textNode.length);
                  }
                  if (numberNode.length > MAX_BUFFER_LENGTH) {
                    emitError("Max buffer length exceeded: numberNode");
                    maxActual = Math.max(maxActual, numberNode.length);
                  }

                  bufferCheckPosition = MAX_BUFFER_LENGTH - maxActual + position;
                }

                eventBus(__WEBPACK_IMPORTED_MODULE_0__events__["m" /* STREAM_DATA */]).on(handleData);

                /* At the end of the http content close the clarinet
    This will provide an error if the total content provided was not
    valid json, ie if not all arrays, objects and Strings closed properly */
                eventBus(__WEBPACK_IMPORTED_MODULE_0__events__["n" /* STREAM_END */]).on(handleStreamEnd);

                function emitError(errorString) {
                  if (textNode !== undefined) {
                    emitValueOpen(textNode);
                    emitValueClose();
                    textNode = undefined;
                  }

                  latestError = Error(errorString + "\nLn: " + line + "\nCol: " + column + "\nChr: " + c);

                  emitFail(Object(__WEBPACK_IMPORTED_MODULE_0__events__["o" /* errorReport */])(undefined, undefined, latestError));
                }

                function handleStreamEnd() {
                  if (state === BEGIN) {
                    // Handle the case where the stream closes without ever receiving
                    // any input. This isn't an error - response bodies can be blank,
                    // particularly for 204 http responses

                    // Because of how Oboe is currently implemented, we parse a
                    // completely empty stream as containing an empty object.
                    // This is because Oboe's done event is only fired when the
                    // root object of the JSON stream closes.

                    // This should be decoupled and attached instead to the input stream
                    // from the http (or whatever) resource ending.
                    // If this decoupling could happen the SAX parser could simply emit
                    // zero events on a completely empty input.
                    emitValueOpen({});
                    emitValueClose();

                    closed = true;
                    return;
                  }

                  if (state !== VALUE || depth !== 0) {
                    emitError("Unexpected end");
                  }

                  if (textNode !== undefined) {
                    emitValueOpen(textNode);
                    emitValueClose();
                    textNode = undefined;
                  }

                  closed = true;
                }

                function whitespace(c) {
                  return c === "\r" || c === "\n" || c === " " || c === "\t";
                }

                function handleData(chunk) {
                  // this used to throw the error but inside Oboe we will have already
                  // gotten the error when it was emitted. The important thing is to
                  // not continue with the parse.
                  if (latestError) {
                    return;
                  }

                  if (closed) {
                    return emitError("Cannot write after close");
                  }

                  var i = 0;
                  c = chunk[0];

                  while (c) {
                    if (i > 0) {
                      p = c;
                    }
                    c = chunk[i++];
                    if (!c) break;

                    position++;
                    if (c === "\n") {
                      line++;
                      column = 0;
                    } else column++;
                    switch (state) {
                      case BEGIN:
                        if (c === "{") state = OPEN_OBJECT;
                        else if (c === "[") state = OPEN_ARRAY;
                        else if (!whitespace(c)) {
                          return emitError("Non-whitespace before {[.");
                        }
                        continue;

                      case OPEN_KEY:
                      case OPEN_OBJECT:
                        if (whitespace(c)) continue;
                        if (state === OPEN_KEY) stack.push(CLOSE_KEY);
                        else {
                          if (c === "}") {
                            emitValueOpen({});
                            emitValueClose();
                            state = stack.pop() || VALUE;
                            continue;
                          } else stack.push(CLOSE_OBJECT);
                        }
                        if (c === '"') {
                          state = STRING;
                        } else {
                          return emitError('Malformed object key should start with " ');
                        }
                        continue;

                      case CLOSE_KEY:
                      case CLOSE_OBJECT:
                        if (whitespace(c)) continue;

                        if (c === ":") {
                          if (state === CLOSE_OBJECT) {
                            stack.push(CLOSE_OBJECT);

                            if (textNode !== undefined) {
                              // was previously (in upstream Clarinet) one event
                              //  - object open came with the text of the first
                              emitValueOpen({});
                              emitSaxKey(textNode);
                              textNode = undefined;
                            }
                            depth++;
                          } else {
                            if (textNode !== undefined) {
                              emitSaxKey(textNode);
                              textNode = undefined;
                            }
                          }
                          state = VALUE;
                        } else if (c === "}") {
                          if (textNode !== undefined) {
                            emitValueOpen(textNode);
                            emitValueClose();
                            textNode = undefined;
                          }
                          emitValueClose();
                          depth--;
                          state = stack.pop() || VALUE;
                        } else if (c === ",") {
                          if (state === CLOSE_OBJECT) {
                            stack.push(CLOSE_OBJECT);
                          }
                          if (textNode !== undefined) {
                            emitValueOpen(textNode);
                            emitValueClose();
                            textNode = undefined;
                          }
                          state = OPEN_KEY;
                        } else {
                          return emitError("Bad object");
                        }
                        continue;

                      case OPEN_ARRAY: // after an array there always a value
                      case VALUE:
                        if (whitespace(c)) continue;
                        if (state === OPEN_ARRAY) {
                          emitValueOpen([]);
                          depth++;
                          state = VALUE;
                          if (c === "]") {
                            emitValueClose();
                            depth--;
                            state = stack.pop() || VALUE;
                            continue;
                          } else {
                            stack.push(CLOSE_ARRAY);
                          }
                        }
                        if (c === '"') state = STRING;
                        else if (c === "{") state = OPEN_OBJECT;
                        else if (c === "[") state = OPEN_ARRAY;
                        else if (c === "t") state = TRUE;
                        else if (c === "f") state = FALSE;
                        else if (c === "n") state = NULL;
                        else if (c === "-") {
                          // keep and continue
                          numberNode += c;
                        } else if (c === "0") {
                          numberNode += c;
                          state = NUMBER_DIGIT;
                        } else if ("123456789".indexOf(c) !== -1) {
                          numberNode += c;
                          state = NUMBER_DIGIT;
                        } else {
                          return emitError("Bad value");
                        }
                        continue;

                      case CLOSE_ARRAY:
                        if (c === ",") {
                          stack.push(CLOSE_ARRAY);
                          if (textNode !== undefined) {
                            emitValueOpen(textNode);
                            emitValueClose();
                            textNode = undefined;
                          }
                          state = VALUE;
                        } else if (c === "]") {
                          if (textNode !== undefined) {
                            emitValueOpen(textNode);
                            emitValueClose();
                            textNode = undefined;
                          }
                          emitValueClose();
                          depth--;
                          state = stack.pop() || VALUE;
                        } else if (whitespace(c)) {
                          continue;
                        } else {
                          return emitError("Bad array");
                        }
                        continue;

                      case STRING:
                        if (textNode === undefined) {
                          textNode = "";
                        }

                        // thanks thejh, this is an about 50% performance improvement.
                        var starti = i - 1;

                        // eslint-disable-next-line no-labels
                        STRING_BIGLOOP: while (true) {
                          // zero means "no unicode active". 1-4 mean "parse some more". end after 4.
                          while (unicodeI > 0) {
                            unicodeS += c;
                            c = chunk.charAt(i++);
                            if (unicodeI === 4) {
                              // TODO this might be slow? well, probably not used too often anyway
                              textNode += String.fromCharCode(parseInt(unicodeS, 16));
                              unicodeI = 0;
                              starti = i - 1;
                            } else {
                              unicodeI++;
                            }
                            // we can just break here: no stuff we skipped that still has to be sliced out or so
                            // eslint-disable-next-line no-labels
                            if (!c) break STRING_BIGLOOP;
                          }
                          if (c === '"' && !slashed) {
                            state = stack.pop() || VALUE;
                            textNode += chunk.substring(starti, i - 1);
                            break;
                          }
                          if (c === "\\" && !slashed) {
                            slashed = true;
                            textNode += chunk.substring(starti, i - 1);
                            c = chunk.charAt(i++);
                            if (!c) break;
                          }
                          if (slashed) {
                            slashed = false;
                            if (c === "n") {
                              textNode += "\n";
                            } else if (c === "r") {
                              textNode += "\r";
                            } else if (c === "t") {
                              textNode += "\t";
                            } else if (c === "f") {
                              textNode += "\f";
                            } else if (c === "b") {
                              textNode += "\b";
                            } else if (c === "u") {
                              // \uxxxx. meh!
                              unicodeI = 1;
                              unicodeS = "";
                            } else {
                              textNode += c;
                            }
                            c = chunk.charAt(i++);
                            starti = i - 1;
                            if (!c) break;
                            else continue;
                          }

                          stringTokenPattern.lastIndex = i;
                          var reResult = stringTokenPattern.exec(chunk);
                          if (!reResult) {
                            i = chunk.length + 1;
                            textNode += chunk.substring(starti, i - 1);
                            break;
                          }
                          i = reResult.index + 1;
                          c = chunk.charAt(reResult.index);
                          if (!c) {
                            textNode += chunk.substring(starti, i - 1);
                            break;
                          }
                        }
                        continue;

                      case TRUE:
                        if (!c) continue; // strange buffers
                        if (c === "r") state = TRUE2;
                        else {
                          return emitError("Invalid true started with t" + c);
                        }
                        continue;

                      case TRUE2:
                        if (!c) continue;
                        if (c === "u") state = TRUE3;
                        else {
                          return emitError("Invalid true started with tr" + c);
                        }
                        continue;

                      case TRUE3:
                        if (!c) continue;
                        if (c === "e") {
                          emitValueOpen(true);
                          emitValueClose();
                          state = stack.pop() || VALUE;
                        } else {
                          return emitError("Invalid true started with tru" + c);
                        }
                        continue;

                      case FALSE:
                        if (!c) continue;
                        if (c === "a") state = FALSE2;
                        else {
                          return emitError("Invalid false started with f" + c);
                        }
                        continue;

                      case FALSE2:
                        if (!c) continue;
                        if (c === "l") state = FALSE3;
                        else {
                          return emitError("Invalid false started with fa" + c);
                        }
                        continue;

                      case FALSE3:
                        if (!c) continue;
                        if (c === "s") state = FALSE4;
                        else {
                          return emitError("Invalid false started with fal" + c);
                        }
                        continue;

                      case FALSE4:
                        if (!c) continue;
                        if (c === "e") {
                          emitValueOpen(false);
                          emitValueClose();
                          state = stack.pop() || VALUE;
                        } else {
                          return emitError("Invalid false started with fals" + c);
                        }
                        continue;

                      case NULL:
                        if (!c) continue;
                        if (c === "u") state = NULL2;
                        else {
                          return emitError("Invalid null started with n" + c);
                        }
                        continue;

                      case NULL2:
                        if (!c) continue;
                        if (c === "l") state = NULL3;
                        else {
                          return emitError("Invalid null started with nu" + c);
                        }
                        continue;

                      case NULL3:
                        if (!c) continue;
                        if (c === "l") {
                          emitValueOpen(null);
                          emitValueClose();
                          state = stack.pop() || VALUE;
                        } else {
                          return emitError("Invalid null started with nul" + c);
                        }
                        continue;

                      case NUMBER_DECIMAL_POINT:
                        if (c === ".") {
                          numberNode += c;
                          state = NUMBER_DIGIT;
                        } else {
                          return emitError("Leading zero not followed by .");
                        }
                        continue;

                      case NUMBER_DIGIT:
                        if ("0123456789".indexOf(c) !== -1) numberNode += c;
                        else if (c === ".") {
                          if (numberNode.indexOf(".") !== -1) {
                            return emitError("Invalid number has two dots");
                          }
                          numberNode += c;
                        } else if (c === "e" || c === "E") {
                          if (numberNode.indexOf("e") !== -1 || numberNode.indexOf("E") !== -1) {
                            return emitError("Invalid number has two exponential");
                          }
                          numberNode += c;
                        } else if (c === "+" || c === "-") {
                          if (!(p === "e" || p === "E")) {
                            return emitError("Invalid symbol in number");
                          }
                          numberNode += c;
                        } else {
                          if (numberNode) {
                            emitValueOpen(parseFloat(numberNode));
                            emitValueClose();
                            numberNode = "";
                          }
                          i--; // go back one
                          state = stack.pop() || VALUE;
                        }
                        continue;

                      default:
                        return emitError("Unknown state: " + state);
                    }
                  }
                  if (position >= bufferCheckPosition) {
                    checkBufferLength();
                  }
                }
              }

              /***/
            },
            /* 18 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_87219__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_87219__.d(__webpack_exports__, "a", function () {
                return httpTransport;
              });
              /* harmony export (binding) */ __nested_webpack_require_87219__.d(__webpack_exports__, "b", function () {
                return streamingHttp;
              });
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__detectCrossOrigin_browser__ = __nested_webpack_require_87219__(19);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__events__ = __nested_webpack_require_87219__(3);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__util__ = __nested_webpack_require_87219__(2);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__parseResponseHeaders_browser__ = __nested_webpack_require_87219__(20);
              /* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__functional__ = __nested_webpack_require_87219__(0);

              function httpTransport() {
                return new XMLHttpRequest();
              }

              /**
               * A wrapper around the browser XmlHttpRequest object that raises an
               * event whenever a new part of the response is available.
               *
               * In older browsers progressive reading is impossible so all the
               * content is given in a single call. For newer ones several events
               * should be raised, allowing progressive interpretation of the response.
               *
               * @param {Function} oboeBus an event bus local to this Oboe instance
               * @param {XMLHttpRequest} xhr the xhr to use as the transport. Under normal
               *          operation, will have been created using httpTransport() above
               *          but for tests a stub can be provided instead.
               * @param {String} method one of 'GET' 'POST' 'PUT' 'PATCH' 'DELETE'
               * @param {String} url the url to make a request to
               * @param {String|Null} data some content to be sent with the request.
               *                      Only valid if method is POST or PUT.
               * @param {Object} [headers] the http request headers to send
               * @param {boolean} withCredentials the XHR withCredentials property will be
               *    set to this value
               */
              function streamingHttp(oboeBus, xhr, method, url, data, headers, withCredentials) {
                "use strict";

                var emitStreamData = oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["m" /* STREAM_DATA */]).emit;
                var emitFail = oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["b" /* FAIL_EVENT */]).emit;
                var numberOfCharsAlreadyGivenToCallback = 0;
                var stillToSendStartEvent = true;

                // When an ABORTING message is put on the event bus abort
                // the ajax request
                oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["a" /* ABORTING */]).on(function () {
                  // if we keep the onreadystatechange while aborting the XHR gives
                  // a callback like a successful call so first remove this listener
                  // by assigning null:
                  xhr.onreadystatechange = null;

                  xhr.abort();
                });

                /**
                 * Handle input from the underlying xhr: either a state change,
                 * the progress event or the request being complete.
                 */
                function handleProgress() {
                  if (String(xhr.status)[0] === "2") {
                    var textSoFar = xhr.responseText;
                    var newText = (" " + textSoFar.substr(numberOfCharsAlreadyGivenToCallback)).substr(1);

                    /* Raise the event for new text.

       On older browsers, the new text is the whole response.
       On newer/better ones, the fragment part that we got since
       last progress. */

                    if (newText) {
                      emitStreamData(newText);
                    }

                    numberOfCharsAlreadyGivenToCallback = Object(__WEBPACK_IMPORTED_MODULE_2__util__["e" /* len */])(textSoFar);
                  }
                }

                if ("onprogress" in xhr) {
                  // detect browser support for progressive delivery
                  xhr.onprogress = handleProgress;
                }

                function sendStartIfNotAlready(xhr) {
                  // Internet Explorer is very unreliable as to when xhr.status etc can
                  // be read so has to be protected with try/catch and tried again on
                  // the next readyState if it fails
                  try {
                    stillToSendStartEvent &&
                      oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["c" /* HTTP_START */]).emit(
                        xhr.status,
                        Object(__WEBPACK_IMPORTED_MODULE_3__parseResponseHeaders_browser__["a" /* parseResponseHeaders */])(
                          xhr.getAllResponseHeaders()
                        )
                      );
                    stillToSendStartEvent = false;
                  } catch (e) {
                    /* do nothing, will try again on next readyState */
                  }
                }

                xhr.onreadystatechange = function () {
                  switch (xhr.readyState) {
                    case 2: // HEADERS_RECEIVED
                    case 3: // LOADING
                      return sendStartIfNotAlready(xhr);

                    case 4: // DONE
                      sendStartIfNotAlready(xhr); // if xhr.status hasn't been available yet, it must be NOW, huh IE?

                      // is this a 2xx http code?
                      var successful = String(xhr.status)[0] === "2";

                      if (successful) {
                        // In Chrome 29 (not 28) no onprogress is emitted when a response
                        // is complete before the onload. We need to always do handleInput
                        // in case we get the load but have not had a final progress event.
                        // This looks like a bug and may change in future but let's take
                        // the safest approach and assume we might not have received a
                        // progress event for each part of the response
                        handleProgress();

                        oboeBus(__WEBPACK_IMPORTED_MODULE_1__events__["n" /* STREAM_END */]).emit();
                      } else {
                        emitFail(Object(__WEBPACK_IMPORTED_MODULE_1__events__["o" /* errorReport */])(xhr.status, xhr.responseText));
                      }
                  }
                };

                try {
                  xhr.open(method, url, true);

                  for (var headerName in headers) {
                    xhr.setRequestHeader(headerName, headers[headerName]);
                  }

                  if (
                    !Object(__WEBPACK_IMPORTED_MODULE_0__detectCrossOrigin_browser__["a" /* isCrossOrigin */])(
                      window.location,
                      Object(__WEBPACK_IMPORTED_MODULE_0__detectCrossOrigin_browser__["b" /* parseUrlOrigin */])(url)
                    )
                  ) {
                    xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                  }

                  xhr.withCredentials = withCredentials;

                  xhr.send(data);
                } catch (e) {
                  // To keep a consistent interface with Node, we can't emit an event here.
                  // Node's streaming http adaptor receives the error as an asynchronous
                  // event rather than as an exception. If we emitted now, the Oboe user
                  // has had no chance to add a .fail listener so there is no way
                  // the event could be useful. For both these reasons defer the
                  // firing to the next JS frame.
                  window.setTimeout(
                    Object(__WEBPACK_IMPORTED_MODULE_4__functional__["j" /* partialComplete */])(
                      emitFail,
                      Object(__WEBPACK_IMPORTED_MODULE_1__events__["o" /* errorReport */])(undefined, undefined, e)
                    ),
                    0
                  );
                }
              }

              /***/
            },
            /* 19 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_93686__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_93686__.d(__webpack_exports__, "a", function () {
                return isCrossOrigin;
              });
              /* harmony export (binding) */ __nested_webpack_require_93686__.d(__webpack_exports__, "b", function () {
                return parseUrlOrigin;
              });
              /**
               * Detect if a given URL is cross-origin in the scope of the
               * current page.
               *
               * Browser only (since cross-origin has no meaning in Node.js)
               *
               * @param {Object} pageLocation - as in window.location
               * @param {Object} ajaxHost - an object like window.location describing the
               *    origin of the url that we want to ajax in
               */
              function isCrossOrigin(pageLocation, ajaxHost) {
                /*
                 * NB: defaultPort only knows http and https.
                 * Returns undefined otherwise.
                 */
                function defaultPort(protocol) {
                  return { "http:": 80, "https:": 443 }[protocol];
                }

                function portOf(location) {
                  // pageLocation should always have a protocol. ajaxHost if no port or
                  // protocol is specified, should use the port of the containing page

                  return String(location.port || defaultPort(location.protocol || pageLocation.protocol));
                }

                // if ajaxHost doesn't give a domain, port is the same as pageLocation
                // it can't give a protocol but not a domain
                // it can't give a port but not a domain

                return !!(
                  (ajaxHost.protocol && ajaxHost.protocol !== pageLocation.protocol) ||
                  (ajaxHost.host && ajaxHost.host !== pageLocation.host) ||
                  (ajaxHost.host && portOf(ajaxHost) !== portOf(pageLocation))
                );
              }

              /* turn any url into an object like window.location */
              function parseUrlOrigin(url) {
                // url could be domain-relative
                // url could give a domain

                // cross origin means:
                //    same domain
                //    same port
                //    some protocol
                // so, same everything up to the first (single) slash
                // if such is given
                //
                // can ignore everything after that

                var URL_HOST_PATTERN = /(\w+:)?(?:\/\/)([\w.-]+)?(?::(\d+))?\/?/;

                // if no match, use an empty array so that
                // subexpressions 1,2,3 are all undefined
                // and will ultimately return all empty
                // strings as the parse result:
                var urlHostMatch = URL_HOST_PATTERN.exec(url) || [];

                return {
                  protocol: urlHostMatch[1] || "",
                  host: urlHostMatch[2] || "",
                  port: urlHostMatch[3] || "",
                };
              }

              /***/
            },
            /* 20 */
            /***/ function (module, __webpack_exports__, __nested_webpack_require_96030__) {
              "use strict";
              /* harmony export (binding) */ __nested_webpack_require_96030__.d(__webpack_exports__, "a", function () {
                return parseResponseHeaders;
              });
              // based on gist https://gist.github.com/monsur/706839

              /**
               * XmlHttpRequest's getAllResponseHeaders() method returns a string of response
               * headers according to the format described here:
               * http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method
               * This method parses that string into a user-friendly key/value pair object.
               */
              function parseResponseHeaders(headerStr) {
                var headers = {};

                headerStr &&
                  headerStr.split("\u000d\u000a").forEach(function (headerPair) {
                    // Can't use split() here because it does the wrong thing
                    // if the header value has the string ": " in it.
                    var index = headerPair.indexOf("\u003a\u0020");

                    headers[headerPair.substring(0, index)] = headerPair.substring(index + 2);
                  });

                return headers;
              }

              /***/
            },
            /******/
          ]
        )["default"];
      });

      /***/
    },

    /***/ 4155: /***/ (module) => {
      // shim for using process in browser
      var process = (module.exports = {});

      // cached from whatever global is present so that test runners that stub it
      // don't break things.  But we need to wrap it in a try catch in case it is
      // wrapped in strict mode code which doesn't define any globals.  It's inside a
      // function because try/catches deoptimize in certain engines.

      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error("setTimeout has not been defined");
      }
      function defaultClearTimeout() {
        throw new Error("clearTimeout has not been defined");
      }
      (function () {
        try {
          if (typeof setTimeout === "function") {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }
        try {
          if (typeof clearTimeout === "function") {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();
      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }
      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }
        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
          }
        }
      }
      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }
        draining = false;
        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }
        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while (len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }
          queueIndex = -1;
          len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      };

      // v8 likes predictible objects
      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }
      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };
      process.title = "browser";
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = ""; // empty string to avoid regexp issues
      process.versions = {};

      function noop() {}

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;

      process.listeners = function (name) {
        return [];
      };

      process.binding = function (name) {
        throw new Error("process.binding is not supported");
      };

      process.cwd = function () {
        return "/";
      };
      process.chdir = function (dir) {
        throw new Error("process.chdir is not supported");
      };
      process.umask = function () {
        return 0;
      };

      /***/
    },

    /***/ 2587: /***/ (module) => {
      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      // If obj.hasOwnProperty has been overridden, then calling
      // obj.hasOwnProperty(prop) will break.
      // See: https://github.com/joyent/node/issues/1707
      function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }

      module.exports = function (qs, sep, eq, options) {
        sep = sep || "&";
        eq = eq || "=";
        var obj = {};

        if (typeof qs !== "string" || qs.length === 0) {
          return obj;
        }

        var regexp = /\+/g;
        qs = qs.split(sep);

        var maxKeys = 1000;
        if (options && typeof options.maxKeys === "number") {
          maxKeys = options.maxKeys;
        }

        var len = qs.length;
        // maxKeys <= 0 means that we should not limit keys count
        if (maxKeys > 0 && len > maxKeys) {
          len = maxKeys;
        }

        for (var i = 0; i < len; ++i) {
          var x = qs[i].replace(regexp, "%20"),
            idx = x.indexOf(eq),
            kstr,
            vstr,
            k,
            v;

          if (idx >= 0) {
            kstr = x.substr(0, idx);
            vstr = x.substr(idx + 1);
          } else {
            kstr = x;
            vstr = "";
          }

          k = decodeURIComponent(kstr);
          v = decodeURIComponent(vstr);

          if (!hasOwnProperty(obj, k)) {
            obj[k] = v;
          } else if (Array.isArray(obj[k])) {
            obj[k].push(v);
          } else {
            obj[k] = [obj[k], v];
          }
        }

        return obj;
      };

      /***/
    },

    /***/ 2361: /***/ (module) => {
      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      var stringifyPrimitive = function (v) {
        switch (typeof v) {
          case "string":
            return v;

          case "boolean":
            return v ? "true" : "false";

          case "number":
            return isFinite(v) ? v : "";

          default:
            return "";
        }
      };

      module.exports = function (obj, sep, eq, name) {
        sep = sep || "&";
        eq = eq || "=";
        if (obj === null) {
          obj = undefined;
        }

        if (typeof obj === "object") {
          return Object.keys(obj)
            .map(function (k) {
              var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
              if (Array.isArray(obj[k])) {
                return obj[k]
                  .map(function (v) {
                    return ks + encodeURIComponent(stringifyPrimitive(v));
                  })
                  .join(sep);
              } else {
                return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
              }
            })
            .join(sep);
        }

        if (!name) return "";
        return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
      };

      /***/
    },

    /***/ 7673: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";

      exports.decode = exports.parse = __webpack_require__(2587);
      exports.encode = exports.stringify = __webpack_require__(2361);

      /***/
    },

    /***/ 4281: /***/ (module) => {
      "use strict";

      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;
        subClass.__proto__ = superClass;
      }

      var codes = {};

      function createErrorType(code, message, Base) {
        if (!Base) {
          Base = Error;
        }

        function getMessage(arg1, arg2, arg3) {
          if (typeof message === "string") {
            return message;
          } else {
            return message(arg1, arg2, arg3);
          }
        }

        var NodeError =
          /*#__PURE__*/
          (function (_Base) {
            _inheritsLoose(NodeError, _Base);

            function NodeError(arg1, arg2, arg3) {
              return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
            }

            return NodeError;
          })(Base);

        NodeError.prototype.name = Base.name;
        NodeError.prototype.code = code;
        codes[code] = NodeError;
      } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js

      function oneOf(expected, thing) {
        if (Array.isArray(expected)) {
          var len = expected.length;
          expected = expected.map(function (i) {
            return String(i);
          });

          if (len > 2) {
            return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
          } else if (len === 2) {
            return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
          } else {
            return "of ".concat(thing, " ").concat(expected[0]);
          }
        } else {
          return "of ".concat(thing, " ").concat(String(expected));
        }
      } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith

      function startsWith(str, search, pos) {
        return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
      } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith

      function endsWith(str, search, this_len) {
        if (this_len === undefined || this_len > str.length) {
          this_len = str.length;
        }

        return str.substring(this_len - search.length, this_len) === search;
      } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes

      function includes(str, search, start) {
        if (typeof start !== "number") {
          start = 0;
        }

        if (start + search.length > str.length) {
          return false;
        } else {
          return str.indexOf(search, start) !== -1;
        }
      }

      createErrorType(
        "ERR_INVALID_OPT_VALUE",
        function (name, value) {
          return 'The value "' + value + '" is invalid for option "' + name + '"';
        },
        TypeError
      );
      createErrorType(
        "ERR_INVALID_ARG_TYPE",
        function (name, expected, actual) {
          // determiner: 'must be' or 'must not be'
          var determiner;

          if (typeof expected === "string" && startsWith(expected, "not ")) {
            determiner = "must not be";
            expected = expected.replace(/^not /, "");
          } else {
            determiner = "must be";
          }

          var msg;

          if (endsWith(name, " argument")) {
            // For cases like 'first argument'
            msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
          } else {
            var type = includes(name, ".") ? "property" : "argument";
            msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
          }

          msg += ". Received type ".concat(typeof actual);
          return msg;
        },
        TypeError
      );
      createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
      createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function (name) {
        return "The " + name + " method is not implemented";
      });
      createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
      createErrorType("ERR_STREAM_DESTROYED", function (name) {
        return "Cannot call " + name + " after a stream was destroyed";
      });
      createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
      createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
      createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
      createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
      createErrorType(
        "ERR_UNKNOWN_ENCODING",
        function (arg) {
          return "Unknown encoding: " + arg;
        },
        TypeError
      );
      createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
      module.exports.q = codes;

      /***/
    },

    /***/ 6753: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /* provided dependency */ var process = __webpack_require__(4155);
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // a duplex stream is just a stream that is both readable and writable.
      // Since JS doesn't have multiple prototypal inheritance, this class
      // prototypally inherits from Readable, and then parasitically from
      // Writable.

      /*<replacement>*/

      var objectKeys =
        Object.keys ||
        function (obj) {
          var keys = [];

          for (var key in obj) {
            keys.push(key);
          }

          return keys;
        };
      /*</replacement>*/

      module.exports = Duplex;

      var Readable = __webpack_require__(9481);

      var Writable = __webpack_require__(4229);

      __webpack_require__(5717)(Duplex, Readable);

      {
        // Allow the keys array to be GC'ed.
        var keys = objectKeys(Writable.prototype);

        for (var v = 0; v < keys.length; v++) {
          var method = keys[v];
          if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
        }
      }

      function Duplex(options) {
        if (!(this instanceof Duplex)) return new Duplex(options);
        Readable.call(this, options);
        Writable.call(this, options);
        this.allowHalfOpen = true;

        if (options) {
          if (options.readable === false) this.readable = false;
          if (options.writable === false) this.writable = false;

          if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once("end", onend);
          }
        }
      }

      Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState.highWaterMark;
        },
      });
      Object.defineProperty(Duplex.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState && this._writableState.getBuffer();
        },
      });
      Object.defineProperty(Duplex.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState.length;
        },
      }); // the no-half-open enforcer

      function onend() {
        // If the writable side ended, then we're ok.
        if (this._writableState.ended) return; // no more data can be written.
        // But allow more writes to happen in this tick.

        process.nextTick(onEndNT, this);
      }

      function onEndNT(self) {
        self.end();
      }

      Object.defineProperty(Duplex.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          if (this._readableState === undefined || this._writableState === undefined) {
            return false;
          }

          return this._readableState.destroyed && this._writableState.destroyed;
        },
        set: function set(value) {
          // we ignore the value if the stream
          // has not been initialized yet
          if (this._readableState === undefined || this._writableState === undefined) {
            return;
          } // backward compatibility, the user is explicitly
          // managing destroyed

          this._readableState.destroyed = value;
          this._writableState.destroyed = value;
        },
      });

      /***/
    },

    /***/ 2725: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // a passthrough stream.
      // basically just the most minimal sort of Transform stream.
      // Every written chunk gets output as-is.

      module.exports = PassThrough;

      var Transform = __webpack_require__(4605);

      __webpack_require__(5717)(PassThrough, Transform);

      function PassThrough(options) {
        if (!(this instanceof PassThrough)) return new PassThrough(options);
        Transform.call(this, options);
      }

      PassThrough.prototype._transform = function (chunk, encoding, cb) {
        cb(null, chunk);
      };

      /***/
    },

    /***/ 9481: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /* provided dependency */ var process = __webpack_require__(4155);
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      module.exports = Readable;
      /*<replacement>*/

      var Duplex;
      /*</replacement>*/

      Readable.ReadableState = ReadableState;
      /*<replacement>*/

      var EE = __webpack_require__(7702).EventEmitter;

      var EElistenerCount = function EElistenerCount(emitter, type) {
        return emitter.listeners(type).length;
      };
      /*</replacement>*/

      /*<replacement>*/

      var Stream = __webpack_require__(2503);
      /*</replacement>*/

      var Buffer = __webpack_require__(8764).Buffer;

      var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};

      function _uint8ArrayToBuffer(chunk) {
        return Buffer.from(chunk);
      }

      function _isUint8Array(obj) {
        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
      }
      /*<replacement>*/

      var debugUtil = __webpack_require__(4616);

      var debug;

      if (debugUtil && debugUtil.debuglog) {
        debug = debugUtil.debuglog("stream");
      } else {
        debug = function debug() {};
      }
      /*</replacement>*/

      var BufferList = __webpack_require__(7327);

      var destroyImpl = __webpack_require__(1195);

      var _require = __webpack_require__(2457),
        getHighWaterMark = _require.getHighWaterMark;

      var _require$codes = __webpack_require__(4281) /* .codes */.q,
        ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
        ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
        ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.

      var StringDecoder;
      var createReadableStreamAsyncIterator;
      var from;

      __webpack_require__(5717)(Readable, Stream);

      var errorOrDestroy = destroyImpl.errorOrDestroy;
      var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];

      function prependListener(emitter, event, fn) {
        // Sadly this is not cacheable as some libraries bundle their own
        // event emitter implementation with them.
        if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
        // userland ones.  NEVER DO THIS. This is here only because this code needs
        // to continue to work with older versions of Node.js that do not include
        // the prependListener() method. The goal is to eventually remove this hack.

        if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
        else emitter._events[event] = [fn, emitter._events[event]];
      }

      function ReadableState(options, stream, isDuplex) {
        Duplex = Duplex || __webpack_require__(6753);
        options = options || {}; // Duplex streams are both readable and writable, but share
        // the same options object.
        // However, some cases require setting options to different
        // values for the readable and the writable sides of the duplex stream.
        // These options can be provided separately as readableXXX and writableXXX.

        if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
        // make all the buffer merging and length checks go away

        this.objectMode = !!options.objectMode;
        if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
        // Note: 0 is a valid value, means "don't call _read preemptively ever"

        this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex); // A linked list is used to store data chunks instead of an array because the
        // linked list can remove elements from the beginning faster than
        // array.shift()

        this.buffer = new BufferList();
        this.length = 0;
        this.pipes = null;
        this.pipesCount = 0;
        this.flowing = null;
        this.ended = false;
        this.endEmitted = false;
        this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
        // immediately, or on a later tick.  We set this to true at first, because
        // any actions that shouldn't happen until "later" should generally also
        // not happen before the first read call.

        this.sync = true; // whenever we return null, then we set a flag to say
        // that we're awaiting a 'readable' event emission.

        this.needReadable = false;
        this.emittedReadable = false;
        this.readableListening = false;
        this.resumeScheduled = false;
        this.paused = true; // Should close be emitted on destroy. Defaults to true.

        this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

        this.autoDestroy = !!options.autoDestroy; // has it been destroyed

        this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
        // encoding is 'binary' so we have to make this configurable.
        // Everything else in the universe uses 'utf8', though.

        this.defaultEncoding = options.defaultEncoding || "utf8"; // the number of writers that are awaiting a drain event in .pipe()s

        this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

        this.readingMore = false;
        this.decoder = null;
        this.encoding = null;

        if (options.encoding) {
          if (!StringDecoder) StringDecoder = __webpack_require__(2553) /* .StringDecoder */.s;
          this.decoder = new StringDecoder(options.encoding);
          this.encoding = options.encoding;
        }
      }

      function Readable(options) {
        Duplex = Duplex || __webpack_require__(6753);
        if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
        // the ReadableState constructor, at least with V8 6.5

        var isDuplex = this instanceof Duplex;
        this._readableState = new ReadableState(options, this, isDuplex); // legacy

        this.readable = true;

        if (options) {
          if (typeof options.read === "function") this._read = options.read;
          if (typeof options.destroy === "function") this._destroy = options.destroy;
        }

        Stream.call(this);
      }

      Object.defineProperty(Readable.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          if (this._readableState === undefined) {
            return false;
          }

          return this._readableState.destroyed;
        },
        set: function set(value) {
          // we ignore the value if the stream
          // has not been initialized yet
          if (!this._readableState) {
            return;
          } // backward compatibility, the user is explicitly
          // managing destroyed

          this._readableState.destroyed = value;
        },
      });
      Readable.prototype.destroy = destroyImpl.destroy;
      Readable.prototype._undestroy = destroyImpl.undestroy;

      Readable.prototype._destroy = function (err, cb) {
        cb(err);
      }; // Manually shove something into the read() buffer.
      // This returns true if the highWaterMark has not been hit yet,
      // similar to how Writable.write() returns true if you should
      // write() some more.

      Readable.prototype.push = function (chunk, encoding) {
        var state = this._readableState;
        var skipChunkCheck;

        if (!state.objectMode) {
          if (typeof chunk === "string") {
            encoding = encoding || state.defaultEncoding;

            if (encoding !== state.encoding) {
              chunk = Buffer.from(chunk, encoding);
              encoding = "";
            }

            skipChunkCheck = true;
          }
        } else {
          skipChunkCheck = true;
        }

        return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
      }; // Unshift should *always* be something directly out of read()

      Readable.prototype.unshift = function (chunk) {
        return readableAddChunk(this, chunk, null, true, false);
      };

      function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
        debug("readableAddChunk", chunk);
        var state = stream._readableState;

        if (chunk === null) {
          state.reading = false;
          onEofChunk(stream, state);
        } else {
          var er;
          if (!skipChunkCheck) er = chunkInvalid(state, chunk);

          if (er) {
            errorOrDestroy(stream, er);
          } else if (state.objectMode || (chunk && chunk.length > 0)) {
            if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
              chunk = _uint8ArrayToBuffer(chunk);
            }

            if (addToFront) {
              if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
              else addChunk(stream, state, chunk, true);
            } else if (state.ended) {
              errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            } else if (state.destroyed) {
              return false;
            } else {
              state.reading = false;

              if (state.decoder && !encoding) {
                chunk = state.decoder.write(chunk);
                if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                else maybeReadMore(stream, state);
              } else {
                addChunk(stream, state, chunk, false);
              }
            }
          } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
          }
        } // We can push more data if we are below the highWaterMark.
        // Also, if we have no data yet, we can stand some more bytes.
        // This is to work around cases where hwm=0, such as the repl.

        return !state.ended && (state.length < state.highWaterMark || state.length === 0);
      }

      function addChunk(stream, state, chunk, addToFront) {
        if (state.flowing && state.length === 0 && !state.sync) {
          state.awaitDrain = 0;
          stream.emit("data", chunk);
        } else {
          // update the buffer info.
          state.length += state.objectMode ? 1 : chunk.length;
          if (addToFront) state.buffer.unshift(chunk);
          else state.buffer.push(chunk);
          if (state.needReadable) emitReadable(stream);
        }

        maybeReadMore(stream, state);
      }

      function chunkInvalid(state, chunk) {
        var er;

        if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== undefined && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
        }

        return er;
      }

      Readable.prototype.isPaused = function () {
        return this._readableState.flowing === false;
      }; // backwards compatibility.

      Readable.prototype.setEncoding = function (enc) {
        if (!StringDecoder) StringDecoder = __webpack_require__(2553) /* .StringDecoder */.s;
        var decoder = new StringDecoder(enc);
        this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

        this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

        var p = this._readableState.buffer.head;
        var content = "";

        while (p !== null) {
          content += decoder.write(p.data);
          p = p.next;
        }

        this._readableState.buffer.clear();

        if (content !== "") this._readableState.buffer.push(content);
        this._readableState.length = content.length;
        return this;
      }; // Don't raise the hwm > 1GB

      var MAX_HWM = 0x40000000;

      function computeNewHighWaterMark(n) {
        if (n >= MAX_HWM) {
          // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
          n = MAX_HWM;
        } else {
          // Get the next highest power of 2 to prevent increasing hwm excessively in
          // tiny amounts
          n--;
          n |= n >>> 1;
          n |= n >>> 2;
          n |= n >>> 4;
          n |= n >>> 8;
          n |= n >>> 16;
          n++;
        }

        return n;
      } // This function is designed to be inlinable, so please take care when making
      // changes to the function body.

      function howMuchToRead(n, state) {
        if (n <= 0 || (state.length === 0 && state.ended)) return 0;
        if (state.objectMode) return 1;

        if (n !== n) {
          // Only flow one buffer at a time
          if (state.flowing && state.length) return state.buffer.head.data.length;
          else return state.length;
        } // If we're asking for more than the current hwm, then raise the hwm.

        if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
        if (n <= state.length) return n; // Don't have enough

        if (!state.ended) {
          state.needReadable = true;
          return 0;
        }

        return state.length;
      } // you can override either this method, or the async _read(n) below.

      Readable.prototype.read = function (n) {
        debug("read", n);
        n = parseInt(n, 10);
        var state = this._readableState;
        var nOrig = n;
        if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
        // already have a bunch of data in the buffer, then just trigger
        // the 'readable' event and move on.

        if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
          debug("read: emitReadable", state.length, state.ended);
          if (state.length === 0 && state.ended) endReadable(this);
          else emitReadable(this);
          return null;
        }

        n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

        if (n === 0 && state.ended) {
          if (state.length === 0) endReadable(this);
          return null;
        } // All the actual chunk generation logic needs to be
        // *below* the call to _read.  The reason is that in certain
        // synthetic stream cases, such as passthrough streams, _read
        // may be a completely synchronous operation which may change
        // the state of the read buffer, providing enough data when
        // before there was *not* enough.
        //
        // So, the steps are:
        // 1. Figure out what the state of things will be after we do
        // a read from the buffer.
        //
        // 2. If that resulting state will trigger a _read, then call _read.
        // Note that this may be asynchronous, or synchronous.  Yes, it is
        // deeply ugly to write APIs this way, but that still doesn't mean
        // that the Readable class should behave improperly, as streams are
        // designed to be sync/async agnostic.
        // Take note if the _read call is sync or async (ie, if the read call
        // has returned yet), so that we know whether or not it's safe to emit
        // 'readable' etc.
        //
        // 3. Actually pull the requested chunks out of the buffer and return.
        // if we need a readable event, then we need to do some reading.

        var doRead = state.needReadable;
        debug("need readable", doRead); // if we currently have less than the highWaterMark, then also read some

        if (state.length === 0 || state.length - n < state.highWaterMark) {
          doRead = true;
          debug("length less than watermark", doRead);
        } // however, if we've ended, then there's no point, and if we're already
        // reading, then it's unnecessary.

        if (state.ended || state.reading) {
          doRead = false;
          debug("reading or ended", doRead);
        } else if (doRead) {
          debug("do read");
          state.reading = true;
          state.sync = true; // if the length is currently zero, then we *need* a readable event.

          if (state.length === 0) state.needReadable = true; // call internal read method

          this._read(state.highWaterMark);

          state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
          // and we need to re-evaluate how much data we can return to the user.

          if (!state.reading) n = howMuchToRead(nOrig, state);
        }

        var ret;
        if (n > 0) ret = fromList(n, state);
        else ret = null;

        if (ret === null) {
          state.needReadable = state.length <= state.highWaterMark;
          n = 0;
        } else {
          state.length -= n;
          state.awaitDrain = 0;
        }

        if (state.length === 0) {
          // If we have nothing in the buffer, then we want to know
          // as soon as we *do* get something into the buffer.
          if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

          if (nOrig !== n && state.ended) endReadable(this);
        }

        if (ret !== null) this.emit("data", ret);
        return ret;
      };

      function onEofChunk(stream, state) {
        debug("onEofChunk");
        if (state.ended) return;

        if (state.decoder) {
          var chunk = state.decoder.end();

          if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
          }
        }

        state.ended = true;

        if (state.sync) {
          // if we are sync, wait until next tick to emit the data.
          // Otherwise we risk emitting data in the flow()
          // the readable code triggers during a read() call
          emitReadable(stream);
        } else {
          // emit 'readable' now to make sure it gets picked up.
          state.needReadable = false;

          if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
          }
        }
      } // Don't emit readable right away in sync mode, because this can trigger
      // another read() call => stack overflow.  This way, it might trigger
      // a nextTick recursion warning, but that's not so bad.

      function emitReadable(stream) {
        var state = stream._readableState;
        debug("emitReadable", state.needReadable, state.emittedReadable);
        state.needReadable = false;

        if (!state.emittedReadable) {
          debug("emitReadable", state.flowing);
          state.emittedReadable = true;
          process.nextTick(emitReadable_, stream);
        }
      }

      function emitReadable_(stream) {
        var state = stream._readableState;
        debug("emitReadable_", state.destroyed, state.length, state.ended);

        if (!state.destroyed && (state.length || state.ended)) {
          stream.emit("readable");
          state.emittedReadable = false;
        } // The stream needs another readable event if
        // 1. It is not flowing, as the flow mechanism will take
        //    care of it.
        // 2. It is not ended.
        // 3. It is below the highWaterMark, so we can schedule
        //    another readable later.

        state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
        flow(stream);
      } // at this point, the user has presumably seen the 'readable' event,
      // and called read() to consume some data.  that may have triggered
      // in turn another _read(n) call, in which case reading = true if
      // it's in progress.
      // However, if we're not ended, or reading, and the length < hwm,
      // then go ahead and try to read some more preemptively.

      function maybeReadMore(stream, state) {
        if (!state.readingMore) {
          state.readingMore = true;
          process.nextTick(maybeReadMore_, stream, state);
        }
      }

      function maybeReadMore_(stream, state) {
        // Attempt to read more data if we should.
        //
        // The conditions for reading more data are (one of):
        // - Not enough data buffered (state.length < state.highWaterMark). The loop
        //   is responsible for filling the buffer with enough data if such data
        //   is available. If highWaterMark is 0 and we are not in the flowing mode
        //   we should _not_ attempt to buffer any extra data. We'll get more data
        //   when the stream consumer calls read() instead.
        // - No data in the buffer, and the stream is in flowing mode. In this mode
        //   the loop below is responsible for ensuring read() is called. Failing to
        //   call read here would abort the flow and there's no other mechanism for
        //   continuing the flow if the stream consumer has just subscribed to the
        //   'data' event.
        //
        // In addition to the above conditions to keep reading data, the following
        // conditions prevent the data from being read:
        // - The stream has ended (state.ended).
        // - There is already a pending 'read' operation (state.reading). This is a
        //   case where the the stream has called the implementation defined _read()
        //   method, but they are processing the call asynchronously and have _not_
        //   called push() with new data. In this case we skip performing more
        //   read()s. The execution ends in this method again after the _read() ends
        //   up calling push() with more data.
        while (!state.reading && !state.ended && (state.length < state.highWaterMark || (state.flowing && state.length === 0))) {
          var len = state.length;
          debug("maybeReadMore read 0");
          stream.read(0);
          if (len === state.length)
            // didn't get any data, stop spinning.
            break;
        }

        state.readingMore = false;
      } // abstract method.  to be overridden in specific implementation classes.
      // call cb(er, data) where data is <= n in length.
      // for virtual (non-string, non-buffer) streams, "length" is somewhat
      // arbitrary, and perhaps not very meaningful.

      Readable.prototype._read = function (n) {
        errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
      };

      Readable.prototype.pipe = function (dest, pipeOpts) {
        var src = this;
        var state = this._readableState;

        switch (state.pipesCount) {
          case 0:
            state.pipes = dest;
            break;

          case 1:
            state.pipes = [state.pipes, dest];
            break;

          default:
            state.pipes.push(dest);
            break;
        }

        state.pipesCount += 1;
        debug("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
        var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
        var endFn = doEnd ? onend : unpipe;
        if (state.endEmitted) process.nextTick(endFn);
        else src.once("end", endFn);
        dest.on("unpipe", onunpipe);

        function onunpipe(readable, unpipeInfo) {
          debug("onunpipe");

          if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
              unpipeInfo.hasUnpiped = true;
              cleanup();
            }
          }
        }

        function onend() {
          debug("onend");
          dest.end();
        } // when the dest drains, it reduces the awaitDrain counter
        // on the source.  This would be more elegant with a .once()
        // handler in flow(), but adding and removing repeatedly is
        // too slow.

        var ondrain = pipeOnDrain(src);
        dest.on("drain", ondrain);
        var cleanedUp = false;

        function cleanup() {
          debug("cleanup"); // cleanup event handlers once the pipe is broken

          dest.removeListener("close", onclose);
          dest.removeListener("finish", onfinish);
          dest.removeListener("drain", ondrain);
          dest.removeListener("error", onerror);
          dest.removeListener("unpipe", onunpipe);
          src.removeListener("end", onend);
          src.removeListener("end", unpipe);
          src.removeListener("data", ondata);
          cleanedUp = true; // if the reader is waiting for a drain event from this
          // specific writer, then it would cause it to never start
          // flowing again.
          // So, if this is awaiting a drain, then we just call it now.
          // If we don't know, then assume that we are waiting for one.

          if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
        }

        src.on("data", ondata);

        function ondata(chunk) {
          debug("ondata");
          var ret = dest.write(chunk);
          debug("dest.write", ret);

          if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if (((state.pipesCount === 1 && state.pipes === dest) || (state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1)) && !cleanedUp) {
              debug("false write response, pause", state.awaitDrain);
              state.awaitDrain++;
            }

            src.pause();
          }
        } // if the dest has an error, then stop piping into it.
        // however, don't suppress the throwing behavior for this.

        function onerror(er) {
          debug("onerror", er);
          unpipe();
          dest.removeListener("error", onerror);
          if (EElistenerCount(dest, "error") === 0) errorOrDestroy(dest, er);
        } // Make sure our error handler is attached before userland ones.

        prependListener(dest, "error", onerror); // Both close and finish should trigger unpipe, but only once.

        function onclose() {
          dest.removeListener("finish", onfinish);
          unpipe();
        }

        dest.once("close", onclose);

        function onfinish() {
          debug("onfinish");
          dest.removeListener("close", onclose);
          unpipe();
        }

        dest.once("finish", onfinish);

        function unpipe() {
          debug("unpipe");
          src.unpipe(dest);
        } // tell the dest that it's being piped to

        dest.emit("pipe", src); // start the flow if it hasn't been started already.

        if (!state.flowing) {
          debug("pipe resume");
          src.resume();
        }

        return dest;
      };

      function pipeOnDrain(src) {
        return function pipeOnDrainFunctionResult() {
          var state = src._readableState;
          debug("pipeOnDrain", state.awaitDrain);
          if (state.awaitDrain) state.awaitDrain--;

          if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
            state.flowing = true;
            flow(src);
          }
        };
      }

      Readable.prototype.unpipe = function (dest) {
        var state = this._readableState;
        var unpipeInfo = {
          hasUnpiped: false,
        }; // if we're not piping anywhere, then do nothing.

        if (state.pipesCount === 0) return this; // just one destination.  most common case.

        if (state.pipesCount === 1) {
          // passed in one, but it's not the right one.
          if (dest && dest !== state.pipes) return this;
          if (!dest) dest = state.pipes; // got a match.

          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;
          if (dest) dest.emit("unpipe", this, unpipeInfo);
          return this;
        } // slow case. multiple pipe destinations.

        if (!dest) {
          // remove all.
          var dests = state.pipes;
          var len = state.pipesCount;
          state.pipes = null;
          state.pipesCount = 0;
          state.flowing = false;

          for (var i = 0; i < len; i++) {
            dests[i].emit("unpipe", this, {
              hasUnpiped: false,
            });
          }

          return this;
        } // try to find the right one.

        var index = indexOf(state.pipes, dest);
        if (index === -1) return this;
        state.pipes.splice(index, 1);
        state.pipesCount -= 1;
        if (state.pipesCount === 1) state.pipes = state.pipes[0];
        dest.emit("unpipe", this, unpipeInfo);
        return this;
      }; // set up data events if they are asked for
      // Ensure readable listeners eventually get something

      Readable.prototype.on = function (ev, fn) {
        var res = Stream.prototype.on.call(this, ev, fn);
        var state = this._readableState;

        if (ev === "data") {
          // update readableListening so that resume() may be a no-op
          // a few lines down. This is needed to support once('readable').
          state.readableListening = this.listenerCount("readable") > 0; // Try start flowing on next tick if stream isn't explicitly paused

          if (state.flowing !== false) this.resume();
        } else if (ev === "readable") {
          if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug("on readable", state.length, state.reading);

            if (state.length) {
              emitReadable(this);
            } else if (!state.reading) {
              process.nextTick(nReadingNextTick, this);
            }
          }
        }

        return res;
      };

      Readable.prototype.addListener = Readable.prototype.on;

      Readable.prototype.removeListener = function (ev, fn) {
        var res = Stream.prototype.removeListener.call(this, ev, fn);

        if (ev === "readable") {
          // We need to check if there is someone still listening to
          // readable and reset the state. However this needs to happen
          // after readable has been emitted but before I/O (nextTick) to
          // support once('readable', fn) cycles. This means that calling
          // resume within the same tick will have no
          // effect.
          process.nextTick(updateReadableListening, this);
        }

        return res;
      };

      Readable.prototype.removeAllListeners = function (ev) {
        var res = Stream.prototype.removeAllListeners.apply(this, arguments);

        if (ev === "readable" || ev === undefined) {
          // We need to check if there is someone still listening to
          // readable and reset the state. However this needs to happen
          // after readable has been emitted but before I/O (nextTick) to
          // support once('readable', fn) cycles. This means that calling
          // resume within the same tick will have no
          // effect.
          process.nextTick(updateReadableListening, this);
        }

        return res;
      };

      function updateReadableListening(self) {
        var state = self._readableState;
        state.readableListening = self.listenerCount("readable") > 0;

        if (state.resumeScheduled && !state.paused) {
          // flowing needs to be set to true now, otherwise
          // the upcoming resume will not flow.
          state.flowing = true; // crude way to check if we should resume
        } else if (self.listenerCount("data") > 0) {
          self.resume();
        }
      }

      function nReadingNextTick(self) {
        debug("readable nexttick read 0");
        self.read(0);
      } // pause() and resume() are remnants of the legacy readable stream API
      // If the user uses them, then switch into old mode.

      Readable.prototype.resume = function () {
        var state = this._readableState;

        if (!state.flowing) {
          debug("resume"); // we flow only if there is no one listening
          // for readable, but we still have to call
          // resume()

          state.flowing = !state.readableListening;
          resume(this, state);
        }

        state.paused = false;
        return this;
      };

      function resume(stream, state) {
        if (!state.resumeScheduled) {
          state.resumeScheduled = true;
          process.nextTick(resume_, stream, state);
        }
      }

      function resume_(stream, state) {
        debug("resume", state.reading);

        if (!state.reading) {
          stream.read(0);
        }

        state.resumeScheduled = false;
        stream.emit("resume");
        flow(stream);
        if (state.flowing && !state.reading) stream.read(0);
      }

      Readable.prototype.pause = function () {
        debug("call pause flowing=%j", this._readableState.flowing);

        if (this._readableState.flowing !== false) {
          debug("pause");
          this._readableState.flowing = false;
          this.emit("pause");
        }

        this._readableState.paused = true;
        return this;
      };

      function flow(stream) {
        var state = stream._readableState;
        debug("flow", state.flowing);

        while (state.flowing && stream.read() !== null) {}
      } // wrap an old-style stream as the async data source.
      // This is *not* part of the readable stream interface.
      // It is an ugly unfortunate mess of history.

      Readable.prototype.wrap = function (stream) {
        var _this = this;

        var state = this._readableState;
        var paused = false;
        stream.on("end", function () {
          debug("wrapped end");

          if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
          }

          _this.push(null);
        });
        stream.on("data", function (chunk) {
          debug("wrapped data");
          if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

          if (state.objectMode && (chunk === null || chunk === undefined)) return;
          else if (!state.objectMode && (!chunk || !chunk.length)) return;

          var ret = _this.push(chunk);

          if (!ret) {
            paused = true;
            stream.pause();
          }
        }); // proxy all the other methods.
        // important when wrapping filters and duplexes.

        for (var i in stream) {
          if (this[i] === undefined && typeof stream[i] === "function") {
            this[i] = (function methodWrap(method) {
              return function methodWrapReturnFunction() {
                return stream[method].apply(stream, arguments);
              };
            })(i);
          }
        } // proxy certain important events.

        for (var n = 0; n < kProxyEvents.length; n++) {
          stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
        } // when we try to consume some more bytes, simply unpause the
        // underlying stream.

        this._read = function (n) {
          debug("wrapped _read", n);

          if (paused) {
            paused = false;
            stream.resume();
          }
        };

        return this;
      };

      if (typeof Symbol === "function") {
        Readable.prototype[Symbol.asyncIterator] = function () {
          if (createReadableStreamAsyncIterator === undefined) {
            createReadableStreamAsyncIterator = __webpack_require__(5850);
          }

          return createReadableStreamAsyncIterator(this);
        };
      }

      Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._readableState.highWaterMark;
        },
      });
      Object.defineProperty(Readable.prototype, "readableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._readableState && this._readableState.buffer;
        },
      });
      Object.defineProperty(Readable.prototype, "readableFlowing", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._readableState.flowing;
        },
        set: function set(state) {
          if (this._readableState) {
            this._readableState.flowing = state;
          }
        },
      }); // exposed for testing purposes only.

      Readable._fromList = fromList;
      Object.defineProperty(Readable.prototype, "readableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._readableState.length;
        },
      }); // Pluck off n bytes from an array of buffers.
      // Length is the combined lengths of all the buffers in the list.
      // This function is designed to be inlinable, so please take care when making
      // changes to the function body.

      function fromList(n, state) {
        // nothing buffered
        if (state.length === 0) return null;
        var ret;
        if (state.objectMode) ret = state.buffer.shift();
        else if (!n || n >= state.length) {
          // read it all, truncate the list
          if (state.decoder) ret = state.buffer.join("");
          else if (state.buffer.length === 1) ret = state.buffer.first();
          else ret = state.buffer.concat(state.length);
          state.buffer.clear();
        } else {
          // read part of list
          ret = state.buffer.consume(n, state.decoder);
        }
        return ret;
      }

      function endReadable(stream) {
        var state = stream._readableState;
        debug("endReadable", state.endEmitted);

        if (!state.endEmitted) {
          state.ended = true;
          process.nextTick(endReadableNT, state, stream);
        }
      }

      function endReadableNT(state, stream) {
        debug("endReadableNT", state.endEmitted, state.length); // Check that we didn't get one last unshift.

        if (!state.endEmitted && state.length === 0) {
          state.endEmitted = true;
          stream.readable = false;
          stream.emit("end");

          if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;

            if (!wState || (wState.autoDestroy && wState.finished)) {
              stream.destroy();
            }
          }
        }
      }

      if (typeof Symbol === "function") {
        Readable.from = function (iterable, opts) {
          if (from === undefined) {
            from = __webpack_require__(5167);
          }

          return from(Readable, iterable, opts);
        };
      }

      function indexOf(xs, x) {
        for (var i = 0, l = xs.length; i < l; i++) {
          if (xs[i] === x) return i;
        }

        return -1;
      }

      /***/
    },

    /***/ 4605: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // a transform stream is a readable/writable stream where you do
      // something with the data.  Sometimes it's called a "filter",
      // but that's not a great name for it, since that implies a thing where
      // some bits pass through, and others are simply ignored.  (That would
      // be a valid example of a transform, of course.)
      //
      // While the output is causally related to the input, it's not a
      // necessarily symmetric or synchronous transformation.  For example,
      // a zlib stream might take multiple plain-text writes(), and then
      // emit a single compressed chunk some time in the future.
      //
      // Here's how this works:
      //
      // The Transform stream has all the aspects of the readable and writable
      // stream classes.  When you write(chunk), that calls _write(chunk,cb)
      // internally, and returns false if there's a lot of pending writes
      // buffered up.  When you call read(), that calls _read(n) until
      // there's enough pending readable data buffered up.
      //
      // In a transform stream, the written data is placed in a buffer.  When
      // _read(n) is called, it transforms the queued up data, calling the
      // buffered _write cb's as it consumes chunks.  If consuming a single
      // written chunk would result in multiple output chunks, then the first
      // outputted bit calls the readcb, and subsequent chunks just go into
      // the read buffer, and will cause it to emit 'readable' if necessary.
      //
      // This way, back-pressure is actually determined by the reading side,
      // since _read has to be called to start processing a new chunk.  However,
      // a pathological inflate type of transform can cause excessive buffering
      // here.  For example, imagine a stream where every byte of input is
      // interpreted as an integer from 0-255, and then results in that many
      // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
      // 1kb of data being output.  In this case, you could write a very small
      // amount of input, and end up with a very large amount of output.  In
      // such a pathological inflating mechanism, there'd be no way to tell
      // the system to stop doing the transform.  A single 4MB write could
      // cause the system to run out of memory.
      //
      // However, even in such a pathological case, only a single written chunk
      // would be consumed, and then the rest would wait (un-transformed) until
      // the results of the previous transformed chunk were consumed.

      module.exports = Transform;

      var _require$codes = __webpack_require__(4281) /* .codes */.q,
        ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
        ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
        ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

      var Duplex = __webpack_require__(6753);

      __webpack_require__(5717)(Transform, Duplex);

      function afterTransform(er, data) {
        var ts = this._transformState;
        ts.transforming = false;
        var cb = ts.writecb;

        if (cb === null) {
          return this.emit("error", new ERR_MULTIPLE_CALLBACK());
        }

        ts.writechunk = null;
        ts.writecb = null;
        if (data != null)
          // single equals check for both `null` and `undefined`
          this.push(data);
        cb(er);
        var rs = this._readableState;
        rs.reading = false;

        if (rs.needReadable || rs.length < rs.highWaterMark) {
          this._read(rs.highWaterMark);
        }
      }

      function Transform(options) {
        if (!(this instanceof Transform)) return new Transform(options);
        Duplex.call(this, options);
        this._transformState = {
          afterTransform: afterTransform.bind(this),
          needTransform: false,
          transforming: false,
          writecb: null,
          writechunk: null,
          writeencoding: null,
        }; // start out asking for a readable event once data is transformed.

        this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
        // that Readable wants before the first _read call, so unset the
        // sync guard flag.

        this._readableState.sync = false;

        if (options) {
          if (typeof options.transform === "function") this._transform = options.transform;
          if (typeof options.flush === "function") this._flush = options.flush;
        } // When the writable side finishes, then flush out anything remaining.

        this.on("prefinish", prefinish);
      }

      function prefinish() {
        var _this = this;

        if (typeof this._flush === "function" && !this._readableState.destroyed) {
          this._flush(function (er, data) {
            done(_this, er, data);
          });
        } else {
          done(this, null, null);
        }
      }

      Transform.prototype.push = function (chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
      }; // This is the part where you do stuff!
      // override this function in implementation classes.
      // 'chunk' is an input chunk.
      //
      // Call `push(newChunk)` to pass along transformed output
      // to the readable side.  You may call 'push' zero or more times.
      //
      // Call `cb(err)` when you are done with this chunk.  If you pass
      // an error, then that'll put the hurt on the whole operation.  If you
      // never call cb(), then you'll never get another chunk.

      Transform.prototype._transform = function (chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
      };

      Transform.prototype._write = function (chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;

        if (!ts.transforming) {
          var rs = this._readableState;
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
        }
      }; // Doesn't matter what the args are here.
      // _transform does all the work.
      // That we got here means that the readable side wants more data.

      Transform.prototype._read = function (n) {
        var ts = this._transformState;

        if (ts.writechunk !== null && !ts.transforming) {
          ts.transforming = true;

          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          // mark that we need a transform, so that any data that comes in
          // will get processed, now that we've asked for it.
          ts.needTransform = true;
        }
      };

      Transform.prototype._destroy = function (err, cb) {
        Duplex.prototype._destroy.call(this, err, function (err2) {
          cb(err2);
        });
      };

      function done(stream, er, data) {
        if (er) return stream.emit("error", er);
        if (data != null)
          // single equals check for both `null` and `undefined`
          stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
        // if there's nothing in the write buffer, then that means
        // that nothing more will ever be provided

        if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
        if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
        return stream.push(null);
      }

      /***/
    },

    /***/ 4229: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /* provided dependency */ var process = __webpack_require__(4155);
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      // A bit simpler than readable streams.
      // Implement an async ._write(chunk, encoding, cb), and it'll handle all
      // the drain event emission and buffering.

      module.exports = Writable;
      /* <replacement> */

      function WriteReq(chunk, encoding, cb) {
        this.chunk = chunk;
        this.encoding = encoding;
        this.callback = cb;
        this.next = null;
      } // It seems a linked list but it is not
      // there will be only 2 of these for each stream

      function CorkedRequest(state) {
        var _this = this;

        this.next = null;
        this.entry = null;

        this.finish = function () {
          onCorkedFinish(_this, state);
        };
      }
      /* </replacement> */

      /*<replacement>*/

      var Duplex;
      /*</replacement>*/

      Writable.WritableState = WritableState;
      /*<replacement>*/

      var internalUtil = {
        deprecate: __webpack_require__(4927),
      };
      /*</replacement>*/

      /*<replacement>*/

      var Stream = __webpack_require__(2503);
      /*</replacement>*/

      var Buffer = __webpack_require__(8764).Buffer;

      var OurUint8Array = __webpack_require__.g.Uint8Array || function () {};

      function _uint8ArrayToBuffer(chunk) {
        return Buffer.from(chunk);
      }

      function _isUint8Array(obj) {
        return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
      }

      var destroyImpl = __webpack_require__(1195);

      var _require = __webpack_require__(2457),
        getHighWaterMark = _require.getHighWaterMark;

      var _require$codes = __webpack_require__(4281) /* .codes */.q,
        ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
        ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
        ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
        ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
        ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
        ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
        ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

      var errorOrDestroy = destroyImpl.errorOrDestroy;

      __webpack_require__(5717)(Writable, Stream);

      function nop() {}

      function WritableState(options, stream, isDuplex) {
        Duplex = Duplex || __webpack_require__(6753);
        options = options || {}; // Duplex streams are both readable and writable, but share
        // the same options object.
        // However, some cases require setting options to different
        // values for the readable and the writable sides of the duplex stream,
        // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

        if (typeof isDuplex !== "boolean") isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
        // contains buffers or objects.

        this.objectMode = !!options.objectMode;
        if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
        // Note: 0 is a valid value, means that we always return false if
        // the entire buffer is not flushed immediately on write()

        this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex); // if _final has been called

        this.finalCalled = false; // drain event flag.

        this.needDrain = false; // at the start of calling end()

        this.ending = false; // when end() has been called, and returned

        this.ended = false; // when 'finish' is emitted

        this.finished = false; // has it been destroyed

        this.destroyed = false; // should we decode strings into buffers before passing to _write?
        // this is here so that some node-core streams can optimize string
        // handling at a lower level.

        var noDecode = options.decodeStrings === false;
        this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
        // encoding is 'binary' so we have to make this configurable.
        // Everything else in the universe uses 'utf8', though.

        this.defaultEncoding = options.defaultEncoding || "utf8"; // not an actual buffer we keep track of, but a measurement
        // of how much we're waiting to get pushed to some underlying
        // socket or file.

        this.length = 0; // a flag to see when we're in the middle of a write.

        this.writing = false; // when true all writes will be buffered until .uncork() call

        this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
        // or on a later tick.  We set this to true at first, because any
        // actions that shouldn't happen until "later" should generally also
        // not happen before the first write call.

        this.sync = true; // a flag to know if we're processing previously buffered items, which
        // may call the _write() callback in the same tick, so that we don't
        // end up in an overlapped onwrite situation.

        this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

        this.onwrite = function (er) {
          onwrite(stream, er);
        }; // the callback that the user supplies to write(chunk,encoding,cb)

        this.writecb = null; // the amount that is being written when _write is called.

        this.writelen = 0;
        this.bufferedRequest = null;
        this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
        // this must be 0 before 'finish' can be emitted

        this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
        // This is relevant for synchronous Transform streams

        this.prefinished = false; // True if the error was already emitted and should not be thrown again

        this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

        this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

        this.autoDestroy = !!options.autoDestroy; // count buffered requests

        this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
        // one allocated and free to use, and we maintain at most two

        this.corkedRequestsFree = new CorkedRequest(this);
      }

      WritableState.prototype.getBuffer = function getBuffer() {
        var current = this.bufferedRequest;
        var out = [];

        while (current) {
          out.push(current);
          current = current.next;
        }

        return out;
      };

      (function () {
        try {
          Object.defineProperty(WritableState.prototype, "buffer", {
            get: internalUtil.deprecate(
              function writableStateBufferGetter() {
                return this.getBuffer();
              },
              "_writableState.buffer is deprecated. Use _writableState.getBuffer " + "instead.",
              "DEP0003"
            ),
          });
        } catch (_) {}
      })(); // Test _writableState for inheritance to account for Duplex streams,
      // whose prototype chain only points to Readable.

      var realHasInstance;

      if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
        realHasInstance = Function.prototype[Symbol.hasInstance];
        Object.defineProperty(Writable, Symbol.hasInstance, {
          value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
          },
        });
      } else {
        realHasInstance = function realHasInstance(object) {
          return object instanceof this;
        };
      }

      function Writable(options) {
        Duplex = Duplex || __webpack_require__(6753); // Writable ctor is applied to Duplexes, too.
        // `realHasInstance` is necessary because using plain `instanceof`
        // would return false, as no `_writableState` property is attached.
        // Trying to use the custom `instanceof` for Writable here will also break the
        // Node.js LazyTransform implementation, which has a non-trivial getter for
        // `_writableState` that would lead to infinite recursion.
        // Checking for a Stream.Duplex instance is faster here instead of inside
        // the WritableState constructor, at least with V8 6.5

        var isDuplex = this instanceof Duplex;
        if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
        this._writableState = new WritableState(options, this, isDuplex); // legacy.

        this.writable = true;

        if (options) {
          if (typeof options.write === "function") this._write = options.write;
          if (typeof options.writev === "function") this._writev = options.writev;
          if (typeof options.destroy === "function") this._destroy = options.destroy;
          if (typeof options.final === "function") this._final = options.final;
        }

        Stream.call(this);
      } // Otherwise people can pipe Writable streams, which is just wrong.

      Writable.prototype.pipe = function () {
        errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
      };

      function writeAfterEnd(stream, cb) {
        var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
      } // Checks that a user-supplied chunk is valid, especially for the particular
      // mode the stream is in. Currently this means that `null` is never accepted
      // and undefined/non-string values are only allowed in object mode.

      function validChunk(stream, state, chunk, cb) {
        var er;

        if (chunk === null) {
          er = new ERR_STREAM_NULL_VALUES();
        } else if (typeof chunk !== "string" && !state.objectMode) {
          er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
        }

        if (er) {
          errorOrDestroy(stream, er);
          process.nextTick(cb, er);
          return false;
        }

        return true;
      }

      Writable.prototype.write = function (chunk, encoding, cb) {
        var state = this._writableState;
        var ret = false;

        var isBuf = !state.objectMode && _isUint8Array(chunk);

        if (isBuf && !Buffer.isBuffer(chunk)) {
          chunk = _uint8ArrayToBuffer(chunk);
        }

        if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }

        if (isBuf) encoding = "buffer";
        else if (!encoding) encoding = state.defaultEncoding;
        if (typeof cb !== "function") cb = nop;
        if (state.ending) writeAfterEnd(this, cb);
        else if (isBuf || validChunk(this, state, chunk, cb)) {
          state.pendingcb++;
          ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
        }
        return ret;
      };

      Writable.prototype.cork = function () {
        this._writableState.corked++;
      };

      Writable.prototype.uncork = function () {
        var state = this._writableState;

        if (state.corked) {
          state.corked--;
          if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
        }
      };

      Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
        // node::ParseEncoding() requires lower case.
        if (typeof encoding === "string") encoding = encoding.toLowerCase();
        if (
          !(
            ["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf(
              (encoding + "").toLowerCase()
            ) > -1
          )
        )
          throw new ERR_UNKNOWN_ENCODING(encoding);
        this._writableState.defaultEncoding = encoding;
        return this;
      };

      Object.defineProperty(Writable.prototype, "writableBuffer", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState && this._writableState.getBuffer();
        },
      });

      function decodeChunk(state, chunk, encoding) {
        if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
          chunk = Buffer.from(chunk, encoding);
        }

        return chunk;
      }

      Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState.highWaterMark;
        },
      }); // if we're already writing something, then just put this
      // in the queue, and wait our turn.  Otherwise, call _write
      // If we return false, then we need a drain event, so set that flag.

      function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
        if (!isBuf) {
          var newChunk = decodeChunk(state, chunk, encoding);

          if (chunk !== newChunk) {
            isBuf = true;
            encoding = "buffer";
            chunk = newChunk;
          }
        }

        var len = state.objectMode ? 1 : chunk.length;
        state.length += len;
        var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

        if (!ret) state.needDrain = true;

        if (state.writing || state.corked) {
          var last = state.lastBufferedRequest;
          state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null,
          };

          if (last) {
            last.next = state.lastBufferedRequest;
          } else {
            state.bufferedRequest = state.lastBufferedRequest;
          }

          state.bufferedRequestCount += 1;
        } else {
          doWrite(stream, state, false, len, chunk, encoding, cb);
        }

        return ret;
      }

      function doWrite(stream, state, writev, len, chunk, encoding, cb) {
        state.writelen = len;
        state.writecb = cb;
        state.writing = true;
        state.sync = true;
        if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED("write"));
        else if (writev) stream._writev(chunk, state.onwrite);
        else stream._write(chunk, encoding, state.onwrite);
        state.sync = false;
      }

      function onwriteError(stream, state, sync, er, cb) {
        --state.pendingcb;

        if (sync) {
          // defer the callback if we are being called synchronously
          // to avoid piling up things on the stack
          process.nextTick(cb, er); // this can emit finish, and it will always happen
          // after error

          process.nextTick(finishMaybe, stream, state);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er);
        } else {
          // the caller expect this to happen before if
          // it is async
          cb(er);
          stream._writableState.errorEmitted = true;
          errorOrDestroy(stream, er); // this can emit finish, but finish must
          // always follow error

          finishMaybe(stream, state);
        }
      }

      function onwriteStateUpdate(state) {
        state.writing = false;
        state.writecb = null;
        state.length -= state.writelen;
        state.writelen = 0;
      }

      function onwrite(stream, er) {
        var state = stream._writableState;
        var sync = state.sync;
        var cb = state.writecb;
        if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK();
        onwriteStateUpdate(state);
        if (er) onwriteError(stream, state, sync, er, cb);
        else {
          // Check if we're actually ready to finish, but don't emit yet
          var finished = needFinish(state) || stream.destroyed;

          if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
            clearBuffer(stream, state);
          }

          if (sync) {
            process.nextTick(afterWrite, stream, state, finished, cb);
          } else {
            afterWrite(stream, state, finished, cb);
          }
        }
      }

      function afterWrite(stream, state, finished, cb) {
        if (!finished) onwriteDrain(stream, state);
        state.pendingcb--;
        cb();
        finishMaybe(stream, state);
      } // Must force callback to be called on nextTick, so that we don't
      // emit 'drain' before the write() consumer gets the 'false' return
      // value, and has a chance to attach a 'drain' listener.

      function onwriteDrain(stream, state) {
        if (state.length === 0 && state.needDrain) {
          state.needDrain = false;
          stream.emit("drain");
        }
      } // if there's something in the buffer waiting, then process it

      function clearBuffer(stream, state) {
        state.bufferProcessing = true;
        var entry = state.bufferedRequest;

        if (stream._writev && entry && entry.next) {
          // Fast case, write everything using _writev()
          var l = state.bufferedRequestCount;
          var buffer = new Array(l);
          var holder = state.corkedRequestsFree;
          holder.entry = entry;
          var count = 0;
          var allBuffers = true;

          while (entry) {
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
          }

          buffer.allBuffers = allBuffers;
          doWrite(stream, state, true, state.length, buffer, "", holder.finish); // doWrite is almost always async, defer these to save a bit of time
          // as the hot path ends with doWrite

          state.pendingcb++;
          state.lastBufferedRequest = null;

          if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
          } else {
            state.corkedRequestsFree = new CorkedRequest(state);
          }

          state.bufferedRequestCount = 0;
        } else {
          // Slow case, write chunks one-by-one
          while (entry) {
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.

            if (state.writing) {
              break;
            }
          }

          if (entry === null) state.lastBufferedRequest = null;
        }

        state.bufferedRequest = entry;
        state.bufferProcessing = false;
      }

      Writable.prototype._write = function (chunk, encoding, cb) {
        cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
      };

      Writable.prototype._writev = null;

      Writable.prototype.end = function (chunk, encoding, cb) {
        var state = this._writableState;

        if (typeof chunk === "function") {
          cb = chunk;
          chunk = null;
          encoding = null;
        } else if (typeof encoding === "function") {
          cb = encoding;
          encoding = null;
        }

        if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

        if (state.corked) {
          state.corked = 1;
          this.uncork();
        } // ignore unnecessary end() calls.

        if (!state.ending) endWritable(this, state, cb);
        return this;
      };

      Object.defineProperty(Writable.prototype, "writableLength", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          return this._writableState.length;
        },
      });

      function needFinish(state) {
        return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
      }

      function callFinal(stream, state) {
        stream._final(function (err) {
          state.pendingcb--;

          if (err) {
            errorOrDestroy(stream, err);
          }

          state.prefinished = true;
          stream.emit("prefinish");
          finishMaybe(stream, state);
        });
      }

      function prefinish(stream, state) {
        if (!state.prefinished && !state.finalCalled) {
          if (typeof stream._final === "function" && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
          } else {
            state.prefinished = true;
            stream.emit("prefinish");
          }
        }
      }

      function finishMaybe(stream, state) {
        var need = needFinish(state);

        if (need) {
          prefinish(stream, state);

          if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit("finish");

            if (state.autoDestroy) {
              // In case of duplex streams we need a way to detect
              // if the readable side is ready for autoDestroy as well
              var rState = stream._readableState;

              if (!rState || (rState.autoDestroy && rState.endEmitted)) {
                stream.destroy();
              }
            }
          }
        }

        return need;
      }

      function endWritable(stream, state, cb) {
        state.ending = true;
        finishMaybe(stream, state);

        if (cb) {
          if (state.finished) process.nextTick(cb);
          else stream.once("finish", cb);
        }

        state.ended = true;
        stream.writable = false;
      }

      function onCorkedFinish(corkReq, state, err) {
        var entry = corkReq.entry;
        corkReq.entry = null;

        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        } // reuse the free corkReq.

        state.corkedRequestsFree.next = corkReq;
      }

      Object.defineProperty(Writable.prototype, "destroyed", {
        // making it explicit this property is not enumerable
        // because otherwise some prototype manipulation in
        // userland will fail
        enumerable: false,
        get: function get() {
          if (this._writableState === undefined) {
            return false;
          }

          return this._writableState.destroyed;
        },
        set: function set(value) {
          // we ignore the value if the stream
          // has not been initialized yet
          if (!this._writableState) {
            return;
          } // backward compatibility, the user is explicitly
          // managing destroyed

          this._writableState.destroyed = value;
        },
      });
      Writable.prototype.destroy = destroyImpl.destroy;
      Writable.prototype._undestroy = destroyImpl.undestroy;

      Writable.prototype._destroy = function (err, cb) {
        cb(err);
      };

      /***/
    },

    /***/ 5850: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /* provided dependency */ var process = __webpack_require__(4155);

      var _Object$setPrototypeO;

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      var finished = __webpack_require__(8610);

      var kLastResolve = Symbol("lastResolve");
      var kLastReject = Symbol("lastReject");
      var kError = Symbol("error");
      var kEnded = Symbol("ended");
      var kLastPromise = Symbol("lastPromise");
      var kHandlePromise = Symbol("handlePromise");
      var kStream = Symbol("stream");

      function createIterResult(value, done) {
        return {
          value: value,
          done: done,
        };
      }

      function readAndResolve(iter) {
        var resolve = iter[kLastResolve];

        if (resolve !== null) {
          var data = iter[kStream].read(); // we defer if data is null
          // we can be expecting either 'end' or
          // 'error'

          if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
          }
        }
      }

      function onReadable(iter) {
        // we wait for the next tick, because it might
        // emit an error with process.nextTick
        process.nextTick(readAndResolve, iter);
      }

      function wrapForNext(lastPromise, iter) {
        return function (resolve, reject) {
          lastPromise.then(function () {
            if (iter[kEnded]) {
              resolve(createIterResult(undefined, true));
              return;
            }

            iter[kHandlePromise](resolve, reject);
          }, reject);
        };
      }

      var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
      var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(
        ((_Object$setPrototypeO = {
          get stream() {
            return this[kStream];
          },

          next: function next() {
            var _this = this;

            // if we have detected an error in the meanwhile
            // reject straight away
            var error = this[kError];

            if (error !== null) {
              return Promise.reject(error);
            }

            if (this[kEnded]) {
              return Promise.resolve(createIterResult(undefined, true));
            }

            if (this[kStream].destroyed) {
              // We need to defer via nextTick because if .destroy(err) is
              // called, the error will be emitted via nextTick, and
              // we cannot guarantee that there is no error lingering around
              // waiting to be emitted.
              return new Promise(function (resolve, reject) {
                process.nextTick(function () {
                  if (_this[kError]) {
                    reject(_this[kError]);
                  } else {
                    resolve(createIterResult(undefined, true));
                  }
                });
              });
            } // if we have multiple next() calls
            // we will wait for the previous Promise to finish
            // this logic is optimized to support for await loops,
            // where next() is only called once at a time

            var lastPromise = this[kLastPromise];
            var promise;

            if (lastPromise) {
              promise = new Promise(wrapForNext(lastPromise, this));
            } else {
              // fast path needed to support multiple this.push()
              // without triggering the next() queue
              var data = this[kStream].read();

              if (data !== null) {
                return Promise.resolve(createIterResult(data, false));
              }

              promise = new Promise(this[kHandlePromise]);
            }

            this[kLastPromise] = promise;
            return promise;
          },
        }),
        _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
          return this;
        }),
        _defineProperty(_Object$setPrototypeO, "return", function _return() {
          var _this2 = this;

          // destroy(err, cb) is a private API
          // we can guarantee we have that here, because we control the
          // Readable class this is attached to
          return new Promise(function (resolve, reject) {
            _this2[kStream].destroy(null, function (err) {
              if (err) {
                reject(err);
                return;
              }

              resolve(createIterResult(undefined, true));
            });
          });
        }),
        _Object$setPrototypeO),
        AsyncIteratorPrototype
      );

      var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
        var _Object$create;

        var iterator = Object.create(
          ReadableStreamAsyncIteratorPrototype,
          ((_Object$create = {}),
          _defineProperty(_Object$create, kStream, {
            value: stream,
            writable: true,
          }),
          _defineProperty(_Object$create, kLastResolve, {
            value: null,
            writable: true,
          }),
          _defineProperty(_Object$create, kLastReject, {
            value: null,
            writable: true,
          }),
          _defineProperty(_Object$create, kError, {
            value: null,
            writable: true,
          }),
          _defineProperty(_Object$create, kEnded, {
            value: stream._readableState.endEmitted,
            writable: true,
          }),
          _defineProperty(_Object$create, kHandlePromise, {
            value: function value(resolve, reject) {
              var data = iterator[kStream].read();

              if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
              } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
              }
            },
            writable: true,
          }),
          _Object$create)
        );
        iterator[kLastPromise] = null;
        finished(stream, function (err) {
          if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
            var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error

            if (reject !== null) {
              iterator[kLastPromise] = null;
              iterator[kLastResolve] = null;
              iterator[kLastReject] = null;
              reject(err);
            }

            iterator[kError] = err;
            return;
          }

          var resolve = iterator[kLastResolve];

          if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
          }

          iterator[kEnded] = true;
        });
        stream.on("readable", onReadable.bind(null, iterator));
        return iterator;
      };

      module.exports = createReadableStreamAsyncIterator;

      /***/
    },

    /***/ 7327: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly)
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          keys.push.apply(keys, symbols);
        }
        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};
          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
        } else {
          obj[key] = value;
        }
        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var _require = __webpack_require__(8764),
        Buffer = _require.Buffer;

      var _require2 = __webpack_require__(6854),
        inspect = _require2.inspect;

      var custom = (inspect && inspect.custom) || "inspect";

      function copyBuffer(src, target, offset) {
        Buffer.prototype.copy.call(src, target, offset);
      }

      module.exports =
        /*#__PURE__*/
        (function () {
          function BufferList() {
            _classCallCheck(this, BufferList);

            this.head = null;
            this.tail = null;
            this.length = 0;
          }

          _createClass(BufferList, [
            {
              key: "push",
              value: function push(v) {
                var entry = {
                  data: v,
                  next: null,
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
              },
            },
            {
              key: "unshift",
              value: function unshift(v) {
                var entry = {
                  data: v,
                  next: this.head,
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
              },
            },
            {
              key: "shift",
              value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
              },
            },
            {
              key: "clear",
              value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
              },
            },
            {
              key: "join",
              value: function join(s) {
                if (this.length === 0) return "";
                var p = this.head;
                var ret = "" + p.data;

                while ((p = p.next)) {
                  ret += s + p.data;
                }

                return ret;
              },
            },
            {
              key: "concat",
              value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;

                while (p) {
                  copyBuffer(p.data, ret, i);
                  i += p.data.length;
                  p = p.next;
                }

                return ret;
              }, // Consumes a specified amount of bytes or characters from the buffered data.
            },
            {
              key: "consume",
              value: function consume(n, hasStrings) {
                var ret;

                if (n < this.head.data.length) {
                  // `slice` is the same for buffers and strings.
                  ret = this.head.data.slice(0, n);
                  this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) {
                  // First chunk is a perfect match.
                  ret = this.shift();
                } else {
                  // Result spans more than one buffer.
                  ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                }

                return ret;
              },
            },
            {
              key: "first",
              value: function first() {
                return this.head.data;
              }, // Consumes a specified amount of characters from the buffered data.
            },
            {
              key: "_getString",
              value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;

                while ((p = p.next)) {
                  var str = p.data;
                  var nb = n > str.length ? str.length : n;
                  if (nb === str.length) ret += str;
                  else ret += str.slice(0, n);
                  n -= nb;

                  if (n === 0) {
                    if (nb === str.length) {
                      ++c;
                      if (p.next) this.head = p.next;
                      else this.head = this.tail = null;
                    } else {
                      this.head = p;
                      p.data = str.slice(nb);
                    }

                    break;
                  }

                  ++c;
                }

                this.length -= c;
                return ret;
              }, // Consumes a specified amount of bytes from the buffered data.
            },
            {
              key: "_getBuffer",
              value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;

                while ((p = p.next)) {
                  var buf = p.data;
                  var nb = n > buf.length ? buf.length : n;
                  buf.copy(ret, ret.length - n, 0, nb);
                  n -= nb;

                  if (n === 0) {
                    if (nb === buf.length) {
                      ++c;
                      if (p.next) this.head = p.next;
                      else this.head = this.tail = null;
                    } else {
                      this.head = p;
                      p.data = buf.slice(nb);
                    }

                    break;
                  }

                  ++c;
                }

                this.length -= c;
                return ret;
              }, // Make sure the linked list only shows the minimal necessary information.
            },
            {
              key: custom,
              value: function value(_, options) {
                return inspect(
                  this,
                  _objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false,
                  })
                );
              },
            },
          ]);

          return BufferList;
        })();

      /***/
    },

    /***/ 1195: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /* provided dependency */ var process = __webpack_require__(4155);
      // undocumented cb() API, needed for core, not for public API

      function destroy(err, cb) {
        var _this = this;

        var readableDestroyed = this._readableState && this._readableState.destroyed;
        var writableDestroyed = this._writableState && this._writableState.destroyed;

        if (readableDestroyed || writableDestroyed) {
          if (cb) {
            cb(err);
          } else if (err) {
            if (!this._writableState) {
              process.nextTick(emitErrorNT, this, err);
            } else if (!this._writableState.errorEmitted) {
              this._writableState.errorEmitted = true;
              process.nextTick(emitErrorNT, this, err);
            }
          }

          return this;
        } // we set destroyed to true before firing error callbacks in order
        // to make it re-entrance safe in case destroy() is called within callbacks

        if (this._readableState) {
          this._readableState.destroyed = true;
        } // if this is a duplex stream mark the writable part as destroyed as well

        if (this._writableState) {
          this._writableState.destroyed = true;
        }

        this._destroy(err || null, function (err) {
          if (!cb && err) {
            if (!_this._writableState) {
              process.nextTick(emitErrorAndCloseNT, _this, err);
            } else if (!_this._writableState.errorEmitted) {
              _this._writableState.errorEmitted = true;
              process.nextTick(emitErrorAndCloseNT, _this, err);
            } else {
              process.nextTick(emitCloseNT, _this);
            }
          } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        });

        return this;
      }

      function emitErrorAndCloseNT(self, err) {
        emitErrorNT(self, err);
        emitCloseNT(self);
      }

      function emitCloseNT(self) {
        if (self._writableState && !self._writableState.emitClose) return;
        if (self._readableState && !self._readableState.emitClose) return;
        self.emit("close");
      }

      function undestroy() {
        if (this._readableState) {
          this._readableState.destroyed = false;
          this._readableState.reading = false;
          this._readableState.ended = false;
          this._readableState.endEmitted = false;
        }

        if (this._writableState) {
          this._writableState.destroyed = false;
          this._writableState.ended = false;
          this._writableState.ending = false;
          this._writableState.finalCalled = false;
          this._writableState.prefinished = false;
          this._writableState.finished = false;
          this._writableState.errorEmitted = false;
        }
      }

      function emitErrorNT(self, err) {
        self.emit("error", err);
      }

      function errorOrDestroy(stream, err) {
        // We have tests that rely on errors being emitted
        // in the same tick, so changing this is semver major.
        // For now when you opt-in to autoDestroy we allow
        // the error to be emitted nextTick. In a future
        // semver major update we should change the default to this.
        var rState = stream._readableState;
        var wState = stream._writableState;
        if ((rState && rState.autoDestroy) || (wState && wState.autoDestroy)) stream.destroy(err);
        else stream.emit("error", err);
      }

      module.exports = {
        destroy: destroy,
        undestroy: undestroy,
        errorOrDestroy: errorOrDestroy,
      };

      /***/
    },

    /***/ 8610: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      // Ported from https://github.com/mafintosh/end-of-stream with
      // permission from the author, Mathias Buus (@mafintosh).

      var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(4281) /* .codes.ERR_STREAM_PREMATURE_CLOSE */.q.ERR_STREAM_PREMATURE_CLOSE;

      function once(callback) {
        var called = false;
        return function () {
          if (called) return;
          called = true;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          callback.apply(this, args);
        };
      }

      function noop() {}

      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }

      function eos(stream, opts, callback) {
        if (typeof opts === "function") return eos(stream, null, opts);
        if (!opts) opts = {};
        callback = once(callback || noop);
        var readable = opts.readable || (opts.readable !== false && stream.readable);
        var writable = opts.writable || (opts.writable !== false && stream.writable);

        var onlegacyfinish = function onlegacyfinish() {
          if (!stream.writable) onfinish();
        };

        var writableEnded = stream._writableState && stream._writableState.finished;

        var onfinish = function onfinish() {
          writable = false;
          writableEnded = true;
          if (!readable) callback.call(stream);
        };

        var readableEnded = stream._readableState && stream._readableState.endEmitted;

        var onend = function onend() {
          readable = false;
          readableEnded = true;
          if (!writable) callback.call(stream);
        };

        var onerror = function onerror(err) {
          callback.call(stream, err);
        };

        var onclose = function onclose() {
          var err;

          if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
          }

          if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
          }
        };

        var onrequest = function onrequest() {
          stream.req.on("finish", onfinish);
        };

        if (isRequest(stream)) {
          stream.on("complete", onfinish);
          stream.on("abort", onclose);
          if (stream.req) onrequest();
          else stream.on("request", onrequest);
        } else if (writable && !stream._writableState) {
          // legacy streams
          stream.on("end", onlegacyfinish);
          stream.on("close", onlegacyfinish);
        }

        stream.on("end", onend);
        stream.on("finish", onfinish);
        if (opts.error !== false) stream.on("error", onerror);
        stream.on("close", onclose);
        return function () {
          stream.removeListener("complete", onfinish);
          stream.removeListener("abort", onclose);
          stream.removeListener("request", onrequest);
          if (stream.req) stream.req.removeListener("finish", onfinish);
          stream.removeListener("end", onlegacyfinish);
          stream.removeListener("close", onlegacyfinish);
          stream.removeListener("finish", onfinish);
          stream.removeListener("end", onend);
          stream.removeListener("error", onerror);
          stream.removeListener("close", onclose);
        };
      }

      module.exports = eos;

      /***/
    },

    /***/ 5167: /***/ (module) => {
      module.exports = function () {
        throw new Error("Readable.from is not available in the browser");
      };

      /***/
    },

    /***/ 9946: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      // Ported from https://github.com/mafintosh/pump with
      // permission from the author, Mathias Buus (@mafintosh).

      var eos;

      function once(callback) {
        var called = false;
        return function () {
          if (called) return;
          called = true;
          callback.apply(void 0, arguments);
        };
      }

      var _require$codes = __webpack_require__(4281) /* .codes */.q,
        ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
        ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

      function noop(err) {
        // Rethrow the error if it exists to avoid swallowing it
        if (err) throw err;
      }

      function isRequest(stream) {
        return stream.setHeader && typeof stream.abort === "function";
      }

      function destroyer(stream, reading, writing, callback) {
        callback = once(callback);
        var closed = false;
        stream.on("close", function () {
          closed = true;
        });
        if (eos === undefined) eos = __webpack_require__(8610);
        eos(
          stream,
          {
            readable: reading,
            writable: writing,
          },
          function (err) {
            if (err) return callback(err);
            closed = true;
            callback();
          }
        );
        var destroyed = false;
        return function (err) {
          if (closed) return;
          if (destroyed) return;
          destroyed = true; // request.destroy just do .end - .abort is what we want

          if (isRequest(stream)) return stream.abort();
          if (typeof stream.destroy === "function") return stream.destroy();
          callback(err || new ERR_STREAM_DESTROYED("pipe"));
        };
      }

      function call(fn) {
        fn();
      }

      function pipe(from, to) {
        return from.pipe(to);
      }

      function popCallback(streams) {
        if (!streams.length) return noop;
        if (typeof streams[streams.length - 1] !== "function") return noop;
        return streams.pop();
      }

      function pipeline() {
        for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
          streams[_key] = arguments[_key];
        }

        var callback = popCallback(streams);
        if (Array.isArray(streams[0])) streams = streams[0];

        if (streams.length < 2) {
          throw new ERR_MISSING_ARGS("streams");
        }

        var error;
        var destroys = streams.map(function (stream, i) {
          var reading = i < streams.length - 1;
          var writing = i > 0;
          return destroyer(stream, reading, writing, function (err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
          });
        });
        return streams.reduce(pipe);
      }

      module.exports = pipeline;

      /***/
    },

    /***/ 2457: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var ERR_INVALID_OPT_VALUE = __webpack_require__(4281) /* .codes.ERR_INVALID_OPT_VALUE */.q.ERR_INVALID_OPT_VALUE;

      function highWaterMarkFrom(options, isDuplex, duplexKey) {
        return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
      }

      function getHighWaterMark(state, options, duplexKey, isDuplex) {
        var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

        if (hwm != null) {
          if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : "highWaterMark";
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
          }

          return Math.floor(hwm);
        } // Default value

        return state.objectMode ? 16 : 16 * 1024;
      }

      module.exports = {
        getHighWaterMark: getHighWaterMark,
      };

      /***/
    },

    /***/ 2503: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      module.exports = __webpack_require__(7702).EventEmitter;

      /***/
    },

    /***/ 8473: /***/ (module, exports, __webpack_require__) => {
      exports = module.exports = __webpack_require__(9481);
      exports.Stream = exports;
      exports.Readable = exports;
      exports.Writable = __webpack_require__(4229);
      exports.Duplex = __webpack_require__(6753);
      exports.Transform = __webpack_require__(4605);
      exports.PassThrough = __webpack_require__(2725);
      exports.finished = __webpack_require__(8610);
      exports.pipeline = __webpack_require__(9946);

      /***/
    },

    /***/ 8501: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      var ClientRequest = __webpack_require__(1989);
      var response = __webpack_require__(5676);
      var extend = __webpack_require__(7529);
      var statusCodes = __webpack_require__(584);
      var url = __webpack_require__(8575);

      var http = exports;

      http.request = function (opts, cb) {
        if (typeof opts === "string") opts = url.parse(opts);
        else opts = extend(opts);

        // Normally, the page is loaded from http or https, so not specifying a protocol
        // will result in a (valid) protocol-relative url. However, this won't work if
        // the protocol is something else, like 'file:'
        var defaultProtocol = __webpack_require__.g.location.protocol.search(/^https?:$/) === -1 ? "http:" : "";

        var protocol = opts.protocol || defaultProtocol;
        var host = opts.hostname || opts.host;
        var port = opts.port;
        var path = opts.path || "/";

        // Necessary for IPv6 addresses
        if (host && host.indexOf(":") !== -1) host = "[" + host + "]";

        // This may be a relative url. The browser should always be able to interpret it correctly.
        opts.url = (host ? protocol + "//" + host : "") + (port ? ":" + port : "") + path;
        opts.method = (opts.method || "GET").toUpperCase();
        opts.headers = opts.headers || {};

        // Also valid opts.auth, opts.mode

        var req = new ClientRequest(opts);
        if (cb) req.on("response", cb);
        return req;
      };

      http.get = function get(opts, cb) {
        var req = http.request(opts, cb);
        req.end();
        return req;
      };

      http.ClientRequest = ClientRequest;
      http.IncomingMessage = response.IncomingMessage;

      http.Agent = function () {};
      http.Agent.defaultMaxSockets = 4;

      http.globalAgent = new http.Agent();

      http.STATUS_CODES = statusCodes;

      http.METHODS = [
        "CHECKOUT",
        "CONNECT",
        "COPY",
        "DELETE",
        "GET",
        "HEAD",
        "LOCK",
        "M-SEARCH",
        "MERGE",
        "MKACTIVITY",
        "MKCOL",
        "MOVE",
        "NOTIFY",
        "OPTIONS",
        "PATCH",
        "POST",
        "PROPFIND",
        "PROPPATCH",
        "PURGE",
        "PUT",
        "REPORT",
        "SEARCH",
        "SUBSCRIBE",
        "TRACE",
        "UNLOCK",
        "UNSUBSCRIBE",
      ];

      /***/
    },

    /***/ 8725: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      exports.fetch = isFunction(__webpack_require__.g.fetch) && isFunction(__webpack_require__.g.ReadableStream);

      exports.writableStream = isFunction(__webpack_require__.g.WritableStream);

      exports.abortController = isFunction(__webpack_require__.g.AbortController);

      // The xhr request to example.com may violate some restrictive CSP configurations,
      // so if we're running in a browser that supports `fetch`, avoid calling getXHR()
      // and assume support for certain features below.
      var xhr;
      function getXHR() {
        // Cache the xhr value
        if (xhr !== undefined) return xhr;

        if (__webpack_require__.g.XMLHttpRequest) {
          xhr = new __webpack_require__.g.XMLHttpRequest();
          // If XDomainRequest is available (ie only, where xhr might not work
          // cross domain), use the page location. Otherwise use example.com
          // Note: this doesn't actually make an http request.
          try {
            xhr.open("GET", __webpack_require__.g.XDomainRequest ? "/" : "https://example.com");
          } catch (e) {
            xhr = null;
          }
        } else {
          // Service workers don't have XHR
          xhr = null;
        }
        return xhr;
      }

      function checkTypeSupport(type) {
        var xhr = getXHR();
        if (!xhr) return false;
        try {
          xhr.responseType = type;
          return xhr.responseType === type;
        } catch (e) {}
        return false;
      }

      // If fetch is supported, then arraybuffer will be supported too. Skip calling
      // checkTypeSupport(), since that calls getXHR().
      exports.arraybuffer = exports.fetch || checkTypeSupport("arraybuffer");

      // These next two tests unavoidably show warnings in Chrome. Since fetch will always
      // be used if it's available, just return false for these to avoid the warnings.
      exports.msstream = !exports.fetch && checkTypeSupport("ms-stream");
      exports.mozchunkedarraybuffer = !exports.fetch && checkTypeSupport("moz-chunked-arraybuffer");

      // If fetch is supported, then overrideMimeType will be supported too. Skip calling
      // getXHR().
      exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);

      function isFunction(value) {
        return typeof value === "function";
      }

      xhr = null; // Help gc

      /***/
    },

    /***/ 1989: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      /* provided dependency */ var Buffer = __webpack_require__(8764)["Buffer"];
      /* provided dependency */ var process = __webpack_require__(4155);
      var capability = __webpack_require__(8725);
      var inherits = __webpack_require__(5717);
      var response = __webpack_require__(5676);
      var stream = __webpack_require__(8473);

      var IncomingMessage = response.IncomingMessage;
      var rStates = response.readyStates;

      function decideMode(preferBinary, useFetch) {
        if (capability.fetch && useFetch) {
          return "fetch";
        } else if (capability.mozchunkedarraybuffer) {
          return "moz-chunked-arraybuffer";
        } else if (capability.msstream) {
          return "ms-stream";
        } else if (capability.arraybuffer && preferBinary) {
          return "arraybuffer";
        } else {
          return "text";
        }
      }

      var ClientRequest = (module.exports = function (opts) {
        var self = this;
        stream.Writable.call(self);

        self._opts = opts;
        self._body = [];
        self._headers = {};
        if (opts.auth) self.setHeader("Authorization", "Basic " + Buffer.from(opts.auth).toString("base64"));
        Object.keys(opts.headers).forEach(function (name) {
          self.setHeader(name, opts.headers[name]);
        });

        var preferBinary;
        var useFetch = true;
        if (opts.mode === "disable-fetch" || ("requestTimeout" in opts && !capability.abortController)) {
          // If the use of XHR should be preferred. Not typically needed.
          useFetch = false;
          preferBinary = true;
        } else if (opts.mode === "prefer-streaming") {
          // If streaming is a high priority but binary compatibility and
          // the accuracy of the 'content-type' header aren't
          preferBinary = false;
        } else if (opts.mode === "allow-wrong-content-type") {
          // If streaming is more important than preserving the 'content-type' header
          preferBinary = !capability.overrideMimeType;
        } else if (!opts.mode || opts.mode === "default" || opts.mode === "prefer-fast") {
          // Use binary if text streaming may corrupt data or the content-type header, or for speed
          preferBinary = true;
        } else {
          throw new Error("Invalid value for opts.mode");
        }
        self._mode = decideMode(preferBinary, useFetch);
        self._fetchTimer = null;
        self._socketTimeout = null;
        self._socketTimer = null;

        self.on("finish", function () {
          self._onFinish();
        });
      });

      inherits(ClientRequest, stream.Writable);

      ClientRequest.prototype.setHeader = function (name, value) {
        var self = this;
        var lowerName = name.toLowerCase();
        // This check is not necessary, but it prevents warnings from browsers about setting unsafe
        // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
        // http-browserify did it, so I will too.
        if (unsafeHeaders.indexOf(lowerName) !== -1) return;

        self._headers[lowerName] = {
          name: name,
          value: value,
        };
      };

      ClientRequest.prototype.getHeader = function (name) {
        var header = this._headers[name.toLowerCase()];
        if (header) return header.value;
        return null;
      };

      ClientRequest.prototype.removeHeader = function (name) {
        var self = this;
        delete self._headers[name.toLowerCase()];
      };

      ClientRequest.prototype._onFinish = function () {
        var self = this;

        if (self._destroyed) return;
        var opts = self._opts;

        if ("timeout" in opts && opts.timeout !== 0) {
          self.setTimeout(opts.timeout);
        }

        var headersObj = self._headers;
        var body = null;
        if (opts.method !== "GET" && opts.method !== "HEAD") {
          body = new Blob(self._body, {
            type: (headersObj["content-type"] || {}).value || "",
          });
        }

        // create flattened list of headers
        var headersList = [];
        Object.keys(headersObj).forEach(function (keyName) {
          var name = headersObj[keyName].name;
          var value = headersObj[keyName].value;
          if (Array.isArray(value)) {
            value.forEach(function (v) {
              headersList.push([name, v]);
            });
          } else {
            headersList.push([name, value]);
          }
        });

        if (self._mode === "fetch") {
          var signal = null;
          if (capability.abortController) {
            var controller = new AbortController();
            signal = controller.signal;
            self._fetchAbortController = controller;

            if ("requestTimeout" in opts && opts.requestTimeout !== 0) {
              self._fetchTimer = __webpack_require__.g.setTimeout(function () {
                self.emit("requestTimeout");
                if (self._fetchAbortController) self._fetchAbortController.abort();
              }, opts.requestTimeout);
            }
          }

          __webpack_require__.g
            .fetch(self._opts.url, {
              method: self._opts.method,
              headers: headersList,
              body: body || undefined,
              mode: "cors",
              credentials: opts.withCredentials ? "include" : "same-origin",
              signal: signal,
            })
            .then(
              function (response) {
                self._fetchResponse = response;
                self._resetTimers(false);
                self._connect();
              },
              function (reason) {
                self._resetTimers(true);
                if (!self._destroyed) self.emit("error", reason);
              }
            );
        } else {
          var xhr = (self._xhr = new __webpack_require__.g.XMLHttpRequest());
          try {
            xhr.open(self._opts.method, self._opts.url, true);
          } catch (err) {
            process.nextTick(function () {
              self.emit("error", err);
            });
            return;
          }

          // Can't set responseType on really old browsers
          if ("responseType" in xhr) xhr.responseType = self._mode;

          if ("withCredentials" in xhr) xhr.withCredentials = !!opts.withCredentials;

          if (self._mode === "text" && "overrideMimeType" in xhr) xhr.overrideMimeType("text/plain; charset=x-user-defined");

          if ("requestTimeout" in opts) {
            xhr.timeout = opts.requestTimeout;
            xhr.ontimeout = function () {
              self.emit("requestTimeout");
            };
          }

          headersList.forEach(function (header) {
            xhr.setRequestHeader(header[0], header[1]);
          });

          self._response = null;
          xhr.onreadystatechange = function () {
            switch (xhr.readyState) {
              case rStates.LOADING:
              case rStates.DONE:
                self._onXHRProgress();
                break;
            }
          };
          // Necessary for streaming in Firefox, since xhr.response is ONLY defined
          // in onprogress, not in onreadystatechange with xhr.readyState = 3
          if (self._mode === "moz-chunked-arraybuffer") {
            xhr.onprogress = function () {
              self._onXHRProgress();
            };
          }

          xhr.onerror = function () {
            if (self._destroyed) return;
            self._resetTimers(true);
            self.emit("error", new Error("XHR error"));
          };

          try {
            xhr.send(body);
          } catch (err) {
            process.nextTick(function () {
              self.emit("error", err);
            });
            return;
          }
        }
      };

      /**
       * Checks if xhr.status is readable and non-zero, indicating no error.
       * Even though the spec says it should be available in readyState 3,
       * accessing it throws an exception in IE8
       */
      function statusValid(xhr) {
        try {
          var status = xhr.status;
          return status !== null && status !== 0;
        } catch (e) {
          return false;
        }
      }

      ClientRequest.prototype._onXHRProgress = function () {
        var self = this;

        self._resetTimers(false);

        if (!statusValid(self._xhr) || self._destroyed) return;

        if (!self._response) self._connect();

        self._response._onXHRProgress(self._resetTimers.bind(self));
      };

      ClientRequest.prototype._connect = function () {
        var self = this;

        if (self._destroyed) return;

        self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode, self._resetTimers.bind(self));
        self._response.on("error", function (err) {
          self.emit("error", err);
        });

        self.emit("response", self._response);
      };

      ClientRequest.prototype._write = function (chunk, encoding, cb) {
        var self = this;

        self._body.push(chunk);
        cb();
      };

      ClientRequest.prototype._resetTimers = function (done) {
        var self = this;

        __webpack_require__.g.clearTimeout(self._socketTimer);
        self._socketTimer = null;

        if (done) {
          __webpack_require__.g.clearTimeout(self._fetchTimer);
          self._fetchTimer = null;
        } else if (self._socketTimeout) {
          self._socketTimer = __webpack_require__.g.setTimeout(function () {
            self.emit("timeout");
          }, self._socketTimeout);
        }
      };

      ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function (err) {
        var self = this;
        self._destroyed = true;
        self._resetTimers(true);
        if (self._response) self._response._destroyed = true;
        if (self._xhr) self._xhr.abort();
        else if (self._fetchAbortController) self._fetchAbortController.abort();

        if (err) self.emit("error", err);
      };

      ClientRequest.prototype.end = function (data, encoding, cb) {
        var self = this;
        if (typeof data === "function") {
          cb = data;
          data = undefined;
        }

        stream.Writable.prototype.end.call(self, data, encoding, cb);
      };

      ClientRequest.prototype.setTimeout = function (timeout, cb) {
        var self = this;

        if (cb) self.once("timeout", cb);

        self._socketTimeout = timeout;
        self._resetTimers(false);
      };

      ClientRequest.prototype.flushHeaders = function () {};
      ClientRequest.prototype.setNoDelay = function () {};
      ClientRequest.prototype.setSocketKeepAlive = function () {};

      // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
      var unsafeHeaders = [
        "accept-charset",
        "accept-encoding",
        "access-control-request-headers",
        "access-control-request-method",
        "connection",
        "content-length",
        "cookie",
        "cookie2",
        "date",
        "dnt",
        "expect",
        "host",
        "keep-alive",
        "origin",
        "referer",
        "te",
        "trailer",
        "transfer-encoding",
        "upgrade",
        "via",
      ];

      /***/
    },

    /***/ 5676: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      /* provided dependency */ var process = __webpack_require__(4155);
      /* provided dependency */ var Buffer = __webpack_require__(8764)["Buffer"];
      var capability = __webpack_require__(8725);
      var inherits = __webpack_require__(5717);
      var stream = __webpack_require__(8473);

      var rStates = (exports.readyStates = {
        UNSENT: 0,
        OPENED: 1,
        HEADERS_RECEIVED: 2,
        LOADING: 3,
        DONE: 4,
      });

      var IncomingMessage = (exports.IncomingMessage = function (xhr, response, mode, resetTimers) {
        var self = this;
        stream.Readable.call(self);

        self._mode = mode;
        self.headers = {};
        self.rawHeaders = [];
        self.trailers = {};
        self.rawTrailers = [];

        // Fake the 'close' event, but only once 'end' fires
        self.on("end", function () {
          // The nextTick is necessary to prevent the 'request' module from causing an infinite loop
          process.nextTick(function () {
            self.emit("close");
          });
        });

        if (mode === "fetch") {
          self._fetchResponse = response;

          self.url = response.url;
          self.statusCode = response.status;
          self.statusMessage = response.statusText;

          response.headers.forEach(function (header, key) {
            self.headers[key.toLowerCase()] = header;
            self.rawHeaders.push(key, header);
          });

          if (capability.writableStream) {
            var writable = new WritableStream({
              write: function (chunk) {
                resetTimers(false);
                return new Promise(function (resolve, reject) {
                  if (self._destroyed) {
                    reject();
                  } else if (self.push(Buffer.from(chunk))) {
                    resolve();
                  } else {
                    self._resumeFetch = resolve;
                  }
                });
              },
              close: function () {
                resetTimers(true);
                if (!self._destroyed) self.push(null);
              },
              abort: function (err) {
                resetTimers(true);
                if (!self._destroyed) self.emit("error", err);
              },
            });

            try {
              response.body.pipeTo(writable).catch(function (err) {
                resetTimers(true);
                if (!self._destroyed) self.emit("error", err);
              });
              return;
            } catch (e) {} // pipeTo method isn't defined. Can't find a better way to feature test this
          }
          // fallback for when writableStream or pipeTo aren't available
          var reader = response.body.getReader();
          function read() {
            reader
              .read()
              .then(function (result) {
                if (self._destroyed) return;
                resetTimers(result.done);
                if (result.done) {
                  self.push(null);
                  return;
                }
                self.push(Buffer.from(result.value));
                read();
              })
              .catch(function (err) {
                resetTimers(true);
                if (!self._destroyed) self.emit("error", err);
              });
          }
          read();
        } else {
          self._xhr = xhr;
          self._pos = 0;

          self.url = xhr.responseURL;
          self.statusCode = xhr.status;
          self.statusMessage = xhr.statusText;
          var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
          headers.forEach(function (header) {
            var matches = header.match(/^([^:]+):\s*(.*)/);
            if (matches) {
              var key = matches[1].toLowerCase();
              if (key === "set-cookie") {
                if (self.headers[key] === undefined) {
                  self.headers[key] = [];
                }
                self.headers[key].push(matches[2]);
              } else if (self.headers[key] !== undefined) {
                self.headers[key] += ", " + matches[2];
              } else {
                self.headers[key] = matches[2];
              }
              self.rawHeaders.push(matches[1], matches[2]);
            }
          });

          self._charset = "x-user-defined";
          if (!capability.overrideMimeType) {
            var mimeType = self.rawHeaders["mime-type"];
            if (mimeType) {
              var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
              if (charsetMatch) {
                self._charset = charsetMatch[1].toLowerCase();
              }
            }
            if (!self._charset) self._charset = "utf-8"; // best guess
          }
        }
      });

      inherits(IncomingMessage, stream.Readable);

      IncomingMessage.prototype._read = function () {
        var self = this;

        var resolve = self._resumeFetch;
        if (resolve) {
          self._resumeFetch = null;
          resolve();
        }
      };

      IncomingMessage.prototype._onXHRProgress = function (resetTimers) {
        var self = this;

        var xhr = self._xhr;

        var response = null;
        switch (self._mode) {
          case "text":
            response = xhr.responseText;
            if (response.length > self._pos) {
              var newData = response.substr(self._pos);
              if (self._charset === "x-user-defined") {
                var buffer = Buffer.alloc(newData.length);
                for (var i = 0; i < newData.length; i++) buffer[i] = newData.charCodeAt(i) & 0xff;

                self.push(buffer);
              } else {
                self.push(newData, self._charset);
              }
              self._pos = response.length;
            }
            break;
          case "arraybuffer":
            if (xhr.readyState !== rStates.DONE || !xhr.response) break;
            response = xhr.response;
            self.push(Buffer.from(new Uint8Array(response)));
            break;
          case "moz-chunked-arraybuffer": // take whole
            response = xhr.response;
            if (xhr.readyState !== rStates.LOADING || !response) break;
            self.push(Buffer.from(new Uint8Array(response)));
            break;
          case "ms-stream":
            response = xhr.response;
            if (xhr.readyState !== rStates.LOADING) break;
            var reader = new __webpack_require__.g.MSStreamReader();
            reader.onprogress = function () {
              if (reader.result.byteLength > self._pos) {
                self.push(Buffer.from(new Uint8Array(reader.result.slice(self._pos))));
                self._pos = reader.result.byteLength;
              }
            };
            reader.onload = function () {
              resetTimers(true);
              self.push(null);
            };
            // reader.onerror = ??? // TODO: this
            reader.readAsArrayBuffer(response);
            break;
        }

        // The ms-stream case handles end separately in reader.onload()
        if (self._xhr.readyState === rStates.DONE && self._mode !== "ms-stream") {
          resetTimers(true);
          self.push(null);
        }
      };

      /***/
    },

    /***/ 2553: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      /*<replacement>*/

      var Buffer = __webpack_require__(396).Buffer;
      /*</replacement>*/

      var isEncoding =
        Buffer.isEncoding ||
        function (encoding) {
          encoding = "" + encoding;
          switch (encoding && encoding.toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
            case "raw":
              return true;
            default:
              return false;
          }
        };

      function _normalizeEncoding(enc) {
        if (!enc) return "utf8";
        var retried;
        while (true) {
          switch (enc) {
            case "utf8":
            case "utf-8":
              return "utf8";
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return "utf16le";
            case "latin1":
            case "binary":
              return "latin1";
            case "base64":
            case "ascii":
            case "hex":
              return enc;
            default: // undefined
              if (retried) return;
              enc = ("" + enc).toLowerCase();
              retried = true;
          }
        }
      }

      // Do not cache `Buffer.isEncoding` when checking encoding names as some
      // modules monkey-patch it to support additional encodings
      function normalizeEncoding(enc) {
        var nenc = _normalizeEncoding(enc);
        if (typeof nenc !== "string" && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
        return nenc || enc;
      }

      // StringDecoder provides an interface for efficiently splitting a series of
      // buffers into a series of JS strings without breaking apart multi-byte
      // characters.
      exports.s = StringDecoder;
      function StringDecoder(encoding) {
        this.encoding = normalizeEncoding(encoding);
        var nb;
        switch (this.encoding) {
          case "utf16le":
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
          case "utf8":
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
          case "base64":
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
          default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
        }
        this.lastNeed = 0;
        this.lastTotal = 0;
        this.lastChar = Buffer.allocUnsafe(nb);
      }

      StringDecoder.prototype.write = function (buf) {
        if (buf.length === 0) return "";
        var r;
        var i;
        if (this.lastNeed) {
          r = this.fillLast(buf);
          if (r === undefined) return "";
          i = this.lastNeed;
          this.lastNeed = 0;
        } else {
          i = 0;
        }
        if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
        return r || "";
      };

      StringDecoder.prototype.end = utf8End;

      // Returns only complete characters in a Buffer
      StringDecoder.prototype.text = utf8Text;

      // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
      StringDecoder.prototype.fillLast = function (buf) {
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
        this.lastNeed -= buf.length;
      };

      // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
      // continuation byte. If an invalid byte is detected, -2 is returned.
      function utf8CheckByte(byte) {
        if (byte <= 0x7f) return 0;
        else if (byte >> 5 === 0x06) return 2;
        else if (byte >> 4 === 0x0e) return 3;
        else if (byte >> 3 === 0x1e) return 4;
        return byte >> 6 === 0x02 ? -1 : -2;
      }

      // Checks at most 3 bytes at the end of a Buffer in order to detect an
      // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
      // needed to complete the UTF-8 character (if applicable) are returned.
      function utf8CheckIncomplete(self, buf, i) {
        var j = buf.length - 1;
        if (j < i) return 0;
        var nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) self.lastNeed = nb - 1;
          return nb;
        }
        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) self.lastNeed = nb - 2;
          return nb;
        }
        if (--j < i || nb === -2) return 0;
        nb = utf8CheckByte(buf[j]);
        if (nb >= 0) {
          if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
          }
          return nb;
        }
        return 0;
      }

      // Validates as many continuation bytes for a multi-byte UTF-8 character as
      // needed or are available. If we see a non-continuation byte where we expect
      // one, we "replace" the validated continuation bytes we've seen so far with
      // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
      // behavior. The continuation byte check is included three times in the case
      // where all of the continuation bytes for a character exist in the same buffer.
      // It is also done this way as a slight performance increase instead of using a
      // loop.
      function utf8CheckExtraBytes(self, buf, p) {
        if ((buf[0] & 0xc0) !== 0x80) {
          self.lastNeed = 0;
          return "\ufffd";
        }
        if (self.lastNeed > 1 && buf.length > 1) {
          if ((buf[1] & 0xc0) !== 0x80) {
            self.lastNeed = 1;
            return "\ufffd";
          }
          if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 0xc0) !== 0x80) {
              self.lastNeed = 2;
              return "\ufffd";
            }
          }
        }
      }

      // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
      function utf8FillLast(buf) {
        var p = this.lastTotal - this.lastNeed;
        var r = utf8CheckExtraBytes(this, buf, p);
        if (r !== undefined) return r;
        if (this.lastNeed <= buf.length) {
          buf.copy(this.lastChar, p, 0, this.lastNeed);
          return this.lastChar.toString(this.encoding, 0, this.lastTotal);
        }
        buf.copy(this.lastChar, p, 0, buf.length);
        this.lastNeed -= buf.length;
      }

      // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
      // partial character, the character's bytes are buffered until the required
      // number of bytes are available.
      function utf8Text(buf, i) {
        var total = utf8CheckIncomplete(this, buf, i);
        if (!this.lastNeed) return buf.toString("utf8", i);
        this.lastTotal = total;
        var end = buf.length - (total - this.lastNeed);
        buf.copy(this.lastChar, 0, end);
        return buf.toString("utf8", i, end);
      }

      // For UTF-8, a replacement character is added when ending on a partial
      // character.
      function utf8End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) return r + "\ufffd";
        return r;
      }

      // UTF-16LE typically needs two bytes per character, but even if we have an even
      // number of bytes available, we need to check if we end on a leading/high
      // surrogate. In that case, we need to wait for the next two bytes in order to
      // decode the last character properly.
      function utf16Text(buf, i) {
        if ((buf.length - i) % 2 === 0) {
          var r = buf.toString("utf16le", i);
          if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 0xd800 && c <= 0xdbff) {
              this.lastNeed = 2;
              this.lastTotal = 4;
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
              return r.slice(0, -1);
            }
          }
          return r;
        }
        this.lastNeed = 1;
        this.lastTotal = 2;
        this.lastChar[0] = buf[buf.length - 1];
        return buf.toString("utf16le", i, buf.length - 1);
      }

      // For UTF-16LE we do not explicitly append special replacement characters if we
      // end on a partial character, we simply let v8 handle that.
      function utf16End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) {
          var end = this.lastTotal - this.lastNeed;
          return r + this.lastChar.toString("utf16le", 0, end);
        }
        return r;
      }

      function base64Text(buf, i) {
        var n = (buf.length - i) % 3;
        if (n === 0) return buf.toString("base64", i);
        this.lastNeed = 3 - n;
        this.lastTotal = 3;
        if (n === 1) {
          this.lastChar[0] = buf[buf.length - 1];
        } else {
          this.lastChar[0] = buf[buf.length - 2];
          this.lastChar[1] = buf[buf.length - 1];
        }
        return buf.toString("base64", i, buf.length - n);
      }

      function base64End(buf) {
        var r = buf && buf.length ? this.write(buf) : "";
        if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
        return r;
      }

      // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
      function simpleWrite(buf) {
        return buf.toString(this.encoding);
      }

      function simpleEnd(buf) {
        return buf && buf.length ? this.write(buf) : "";
      }

      /***/
    },

    /***/ 396: /***/ (module, exports, __webpack_require__) => {
      /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
      /* eslint-disable node/no-deprecated-api */
      var buffer = __webpack_require__(8764);
      var Buffer = buffer.Buffer;

      // alternative to using Object.keys for old browsers
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
        module.exports = buffer;
      } else {
        // Copy properties from require('buffer')
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }

      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer(arg, encodingOrOffset, length);
      }

      SafeBuffer.prototype = Object.create(Buffer.prototype);

      // Copy static methods from Buffer
      copyProps(Buffer, SafeBuffer);

      SafeBuffer.from = function (arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer(arg, encodingOrOffset, length);
      };

      SafeBuffer.alloc = function (size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer(size);
        if (fill !== undefined) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };

      SafeBuffer.allocUnsafe = function (size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer(size);
      };

      SafeBuffer.allocUnsafeSlow = function (size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };

      /***/
    },

    /***/ 2511: /***/ function (module, exports, __webpack_require__) {
      /* module decorator */ module = __webpack_require__.nmd(module);
      var __WEBPACK_AMD_DEFINE_RESULT__; /*! https://mths.be/punycode v1.3.2 by @mathias */
      (function (root) {
        /** Detect free variables */
        var freeExports = true && exports && !exports.nodeType && exports;
        var freeModule = true && module && !module.nodeType && module;
        var freeGlobal = typeof __webpack_require__.g == "object" && __webpack_require__.g;
        if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
          root = freeGlobal;
        }

        /**
         * The `punycode` object.
         * @name punycode
         * @type Object
         */
        var punycode,
          /** Highest positive signed 32-bit float value */
          maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
          /** Bootstring parameters */
          base = 36,
          tMin = 1,
          tMax = 26,
          skew = 38,
          damp = 700,
          initialBias = 72,
          initialN = 128, // 0x80
          delimiter = "-", // '\x2D'
          /** Regular expressions */
          regexPunycode = /^xn--/,
          regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
          regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
          /** Error messages */
          errors = {
            overflow: "Overflow: input needs wider integers to process",
            "not-basic": "Illegal input >= 0x80 (not a basic code point)",
            "invalid-input": "Invalid input",
          },
          /** Convenience shortcuts */
          baseMinusTMin = base - tMin,
          floor = Math.floor,
          stringFromCharCode = String.fromCharCode,
          /** Temporary variable */
          key;

        /*--------------------------------------------------------------------------*/

        /**
         * A generic error utility function.
         * @private
         * @param {String} type The error type.
         * @returns {Error} Throws a `RangeError` with the applicable error message.
         */
        function error(type) {
          throw RangeError(errors[type]);
        }

        /**
         * A generic `Array#map` utility function.
         * @private
         * @param {Array} array The array to iterate over.
         * @param {Function} callback The function that gets called for every array
         * item.
         * @returns {Array} A new array of values returned by the callback function.
         */
        function map(array, fn) {
          var length = array.length;
          var result = [];
          while (length--) {
            result[length] = fn(array[length]);
          }
          return result;
        }

        /**
         * A simple `Array#map`-like wrapper to work with domain name strings or email
         * addresses.
         * @private
         * @param {String} domain The domain name or email address.
         * @param {Function} callback The function that gets called for every
         * character.
         * @returns {Array} A new string of characters returned by the callback
         * function.
         */
        function mapDomain(string, fn) {
          var parts = string.split("@");
          var result = "";
          if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + "@";
            string = parts[1];
          }
          // Avoid `split(regex)` for IE8 compatibility. See #17.
          string = string.replace(regexSeparators, "\x2E");
          var labels = string.split(".");
          var encoded = map(labels, fn).join(".");
          return result + encoded;
        }

        /**
         * Creates an array containing the numeric code points of each Unicode
         * character in the string. While JavaScript uses UCS-2 internally,
         * this function will convert a pair of surrogate halves (each of which
         * UCS-2 exposes as separate characters) into a single code point,
         * matching UTF-16.
         * @see `punycode.ucs2.encode`
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode.ucs2
         * @name decode
         * @param {String} string The Unicode input string (UCS-2).
         * @returns {Array} The new array of code points.
         */
        function ucs2decode(string) {
          var output = [],
            counter = 0,
            length = string.length,
            value,
            extra;
          while (counter < length) {
            value = string.charCodeAt(counter++);
            if (value >= 0xd800 && value <= 0xdbff && counter < length) {
              // high surrogate, and there is a next character
              extra = string.charCodeAt(counter++);
              if ((extra & 0xfc00) == 0xdc00) {
                // low surrogate
                output.push(((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000);
              } else {
                // unmatched surrogate; only append this code unit, in case the next
                // code unit is the high surrogate of a surrogate pair
                output.push(value);
                counter--;
              }
            } else {
              output.push(value);
            }
          }
          return output;
        }

        /**
         * Creates a string based on an array of numeric code points.
         * @see `punycode.ucs2.decode`
         * @memberOf punycode.ucs2
         * @name encode
         * @param {Array} codePoints The array of numeric code points.
         * @returns {String} The new Unicode string (UCS-2).
         */
        function ucs2encode(array) {
          return map(array, function (value) {
            var output = "";
            if (value > 0xffff) {
              value -= 0x10000;
              output += stringFromCharCode(((value >>> 10) & 0x3ff) | 0xd800);
              value = 0xdc00 | (value & 0x3ff);
            }
            output += stringFromCharCode(value);
            return output;
          }).join("");
        }

        /**
         * Converts a basic code point into a digit/integer.
         * @see `digitToBasic()`
         * @private
         * @param {Number} codePoint The basic numeric code point value.
         * @returns {Number} The numeric value of a basic code point (for use in
         * representing integers) in the range `0` to `base - 1`, or `base` if
         * the code point does not represent a value.
         */
        function basicToDigit(codePoint) {
          if (codePoint - 48 < 10) {
            return codePoint - 22;
          }
          if (codePoint - 65 < 26) {
            return codePoint - 65;
          }
          if (codePoint - 97 < 26) {
            return codePoint - 97;
          }
          return base;
        }

        /**
         * Converts a digit/integer into a basic code point.
         * @see `basicToDigit()`
         * @private
         * @param {Number} digit The numeric value of a basic code point.
         * @returns {Number} The basic code point whose value (when used for
         * representing integers) is `digit`, which needs to be in the range
         * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
         * used; else, the lowercase form is used. The behavior is undefined
         * if `flag` is non-zero and `digit` has no uppercase form.
         */
        function digitToBasic(digit, flag) {
          //  0..25 map to ASCII a..z or A..Z
          // 26..35 map to ASCII 0..9
          return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
        }

        /**
         * Bias adaptation function as per section 3.4 of RFC 3492.
         * http://tools.ietf.org/html/rfc3492#section-3.4
         * @private
         */
        function adapt(delta, numPoints, firstTime) {
          var k = 0;
          delta = firstTime ? floor(delta / damp) : delta >> 1;
          delta += floor(delta / numPoints);
          for (; /* no initialization */ delta > (baseMinusTMin * tMax) >> 1; k += base) {
            delta = floor(delta / baseMinusTMin);
          }
          return floor(k + ((baseMinusTMin + 1) * delta) / (delta + skew));
        }

        /**
         * Converts a Punycode string of ASCII-only symbols to a string of Unicode
         * symbols.
         * @memberOf punycode
         * @param {String} input The Punycode string of ASCII-only symbols.
         * @returns {String} The resulting string of Unicode symbols.
         */
        function decode(input) {
          // Don't use UCS-2
          var output = [],
            inputLength = input.length,
            out,
            i = 0,
            n = initialN,
            bias = initialBias,
            basic,
            j,
            index,
            oldi,
            w,
            k,
            digit,
            t,
            /** Cached calculation results */
            baseMinusT;

          // Handle the basic code points: let `basic` be the number of input code
          // points before the last delimiter, or `0` if there is none, then copy
          // the first basic code points to the output.

          basic = input.lastIndexOf(delimiter);
          if (basic < 0) {
            basic = 0;
          }

          for (j = 0; j < basic; ++j) {
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) {
              error("not-basic");
            }
            output.push(input.charCodeAt(j));
          }

          // Main decoding loop: start just after the last delimiter if any basic code
          // points were copied; start at the beginning otherwise.

          for (index = basic > 0 ? basic + 1 : 0; index < inputLength /* no final expression */; ) {
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for (oldi = i, w = 1, k = base /* no condition */; ; k += base) {
              if (index >= inputLength) {
                error("invalid-input");
              }

              digit = basicToDigit(input.charCodeAt(index++));

              if (digit >= base || digit > floor((maxInt - i) / w)) {
                error("overflow");
              }

              i += digit * w;
              t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

              if (digit < t) {
                break;
              }

              baseMinusT = base - t;
              if (w > floor(maxInt / baseMinusT)) {
                error("overflow");
              }

              w *= baseMinusT;
            }

            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);

            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) {
              error("overflow");
            }

            n += floor(i / out);
            i %= out;

            // Insert `n` at position `i` of the output
            output.splice(i++, 0, n);
          }

          return ucs2encode(output);
        }

        /**
         * Converts a string of Unicode symbols (e.g. a domain name label) to a
         * Punycode string of ASCII-only symbols.
         * @memberOf punycode
         * @param {String} input The string of Unicode symbols.
         * @returns {String} The resulting Punycode string of ASCII-only symbols.
         */
        function encode(input) {
          var n,
            delta,
            handledCPCount,
            basicLength,
            bias,
            j,
            m,
            q,
            k,
            t,
            currentValue,
            output = [],
            /** `inputLength` will hold the number of code points in `input`. */
            inputLength,
            /** Cached calculation results */
            handledCPCountPlusOne,
            baseMinusT,
            qMinusT;

          // Convert the input in UCS-2 to Unicode
          input = ucs2decode(input);

          // Cache the length
          inputLength = input.length;

          // Initialize the state
          n = initialN;
          delta = 0;
          bias = initialBias;

          // Handle the basic code points
          for (j = 0; j < inputLength; ++j) {
            currentValue = input[j];
            if (currentValue < 0x80) {
              output.push(stringFromCharCode(currentValue));
            }
          }

          handledCPCount = basicLength = output.length;

          // `handledCPCount` is the number of code points that have been handled;
          // `basicLength` is the number of basic code points.

          // Finish the basic string - if it is not empty - with a delimiter
          if (basicLength) {
            output.push(delimiter);
          }

          // Main encoding loop:
          while (handledCPCount < inputLength) {
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for (m = maxInt, j = 0; j < inputLength; ++j) {
              currentValue = input[j];
              if (currentValue >= n && currentValue < m) {
                m = currentValue;
              }
            }

            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
              error("overflow");
            }

            delta += (m - n) * handledCPCountPlusOne;
            n = m;

            for (j = 0; j < inputLength; ++j) {
              currentValue = input[j];

              if (currentValue < n && ++delta > maxInt) {
                error("overflow");
              }

              if (currentValue == n) {
                // Represent delta as a generalized variable-length integer
                for (q = delta, k = base /* no condition */; ; k += base) {
                  t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                  if (q < t) {
                    break;
                  }
                  qMinusT = q - t;
                  baseMinusT = base - t;
                  output.push(stringFromCharCode(digitToBasic(t + (qMinusT % baseMinusT), 0)));
                  q = floor(qMinusT / baseMinusT);
                }

                output.push(stringFromCharCode(digitToBasic(q, 0)));
                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                delta = 0;
                ++handledCPCount;
              }
            }

            ++delta;
            ++n;
          }
          return output.join("");
        }

        /**
         * Converts a Punycode string representing a domain name or an email address
         * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
         * it doesn't matter if you call it on a string that has already been
         * converted to Unicode.
         * @memberOf punycode
         * @param {String} input The Punycoded domain name or email address to
         * convert to Unicode.
         * @returns {String} The Unicode representation of the given Punycode
         * string.
         */
        function toUnicode(input) {
          return mapDomain(input, function (string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
          });
        }

        /**
         * Converts a Unicode string representing a domain name or an email address to
         * Punycode. Only the non-ASCII parts of the domain name will be converted,
         * i.e. it doesn't matter if you call it with a domain that's already in
         * ASCII.
         * @memberOf punycode
         * @param {String} input The domain name or email address to convert, as a
         * Unicode string.
         * @returns {String} The Punycode representation of the given domain name or
         * email address.
         */
        function toASCII(input) {
          return mapDomain(input, function (string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
          });
        }

        /*--------------------------------------------------------------------------*/

        /** Define the public API */
        punycode = {
          /**
           * A string representing the current Punycode.js version number.
           * @memberOf punycode
           * @type String
           */
          version: "1.3.2",
          /**
           * An object of methods to convert from JavaScript's internal character
           * representation (UCS-2) to Unicode code points, and back.
           * @see <https://mathiasbynens.be/notes/javascript-encoding>
           * @memberOf punycode
           * @type Object
           */
          ucs2: {
            decode: ucs2decode,
            encode: ucs2encode,
          },
          decode: decode,
          encode: encode,
          toASCII: toASCII,
          toUnicode: toUnicode,
        };

        /** Expose `punycode` */
        // Some AMD build optimizers, like r.js, check for specific condition patterns
        // like the following:
        if (true) {
          !((__WEBPACK_AMD_DEFINE_RESULT__ = function () {
            return punycode;
          }.call(exports, __webpack_require__, exports, module)),
          __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
        } else {
        }
      })(this);

      /***/
    },

    /***/ 8575: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      var punycode = __webpack_require__(2511);
      var util = __webpack_require__(2502);

      exports.parse = urlParse;
      exports.resolve = urlResolve;
      exports.resolveObject = urlResolveObject;
      exports.format = urlFormat;

      exports.Url = Url;

      function Url() {
        this.protocol = null;
        this.slashes = null;
        this.auth = null;
        this.host = null;
        this.port = null;
        this.hostname = null;
        this.hash = null;
        this.search = null;
        this.query = null;
        this.pathname = null;
        this.path = null;
        this.href = null;
      }

      // Reference: RFC 3986, RFC 1808, RFC 2396

      // define these here so at least they only have to be
      // compiled once on the first module load.
      var protocolPattern = /^([a-z0-9.+-]+:)/i,
        portPattern = /:[0-9]*$/,
        // Special case for a simple path URL
        simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
        // RFC 2396: characters reserved for delimiting URLs.
        // We actually just auto-escape these.
        delims = ["<", ">", '"', "`", " ", "\r", "\n", "\t"],
        // RFC 2396: characters not allowed for various reasons.
        unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims),
        // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
        autoEscape = ["'"].concat(unwise),
        // Characters that are never ever allowed in a hostname.
        // Note that any invalid chars are also handled, but these
        // are the ones that are *expected* to be seen, so we fast-path
        // them.
        nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape),
        hostEndingChars = ["/", "?", "#"],
        hostnameMaxLen = 255,
        hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
        hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
        // protocols that can allow "unsafe" and "unwise" chars.
        unsafeProtocol = {
          javascript: true,
          "javascript:": true,
        },
        // protocols that never have a hostname.
        hostlessProtocol = {
          javascript: true,
          "javascript:": true,
        },
        // protocols that always contain a // bit.
        slashedProtocol = {
          http: true,
          https: true,
          ftp: true,
          gopher: true,
          file: true,
          "http:": true,
          "https:": true,
          "ftp:": true,
          "gopher:": true,
          "file:": true,
        },
        querystring = __webpack_require__(7673);

      function urlParse(url, parseQueryString, slashesDenoteHost) {
        if (url && util.isObject(url) && url instanceof Url) return url;

        var u = new Url();
        u.parse(url, parseQueryString, slashesDenoteHost);
        return u;
      }

      Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
        if (!util.isString(url)) {
          throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
        }

        // Copy chrome, IE, opera backslash-handling behavior.
        // Back slashes before the query string get converted to forward slashes
        // See: https://code.google.com/p/chromium/issues/detail?id=25916
        var queryIndex = url.indexOf("?"),
          splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#",
          uSplit = url.split(splitter),
          slashRegex = /\\/g;
        uSplit[0] = uSplit[0].replace(slashRegex, "/");
        url = uSplit.join(splitter);

        var rest = url;

        // trim before proceeding.
        // This is to support parse stuff like "  http://foo.com  \n"
        rest = rest.trim();

        if (!slashesDenoteHost && url.split("#").length === 1) {
          // Try fast path regexp
          var simplePath = simplePathPattern.exec(rest);
          if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];
            if (simplePath[2]) {
              this.search = simplePath[2];
              if (parseQueryString) {
                this.query = querystring.parse(this.search.substr(1));
              } else {
                this.query = this.search.substr(1);
              }
            } else if (parseQueryString) {
              this.search = "";
              this.query = {};
            }
            return this;
          }
        }

        var proto = protocolPattern.exec(rest);
        if (proto) {
          proto = proto[0];
          var lowerProto = proto.toLowerCase();
          this.protocol = lowerProto;
          rest = rest.substr(proto.length);
        }

        // figure out if it's got a host
        // user@server is *always* interpreted as a hostname, and url
        // resolution will treat //foo/bar as host=foo,path=bar because that's
        // how the browser resolves relative URLs.
        if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
          var slashes = rest.substr(0, 2) === "//";
          if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
          }
        }

        if (!hostlessProtocol[proto] && (slashes || (proto && !slashedProtocol[proto]))) {
          // there's a hostname.
          // the first instance of /, ?, ;, or # ends the host.
          //
          // If there is an @ in the hostname, then non-host chars *are* allowed
          // to the left of the last @ sign, unless some host-ending character
          // comes *before* the @-sign.
          // URLs are obnoxious.
          //
          // ex:
          // http://a@b@c/ => user:a@b host:c
          // http://a@b?@c => user:a host:c path:/?@c

          // v0.12 TODO(isaacs): This is not quite how Chrome does things.
          // Review our test case against browsers more comprehensively.

          // find the first instance of any hostEndingChars
          var hostEnd = -1;
          for (var i = 0; i < hostEndingChars.length; i++) {
            var hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
          }

          // at this point, either we have an explicit point where the
          // auth portion cannot go past, or the last @ char is the decider.
          var auth, atSign;
          if (hostEnd === -1) {
            // atSign can be anywhere.
            atSign = rest.lastIndexOf("@");
          } else {
            // atSign must be in auth portion.
            // http://a@b/c@d => host:b auth:a path:/c@d
            atSign = rest.lastIndexOf("@", hostEnd);
          }

          // Now we have a portion which is definitely the auth.
          // Pull that off.
          if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
          }

          // the host is the remaining to the left of the first non-host char
          hostEnd = -1;
          for (var i = 0; i < nonHostChars.length; i++) {
            var hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
          }
          // if we still have not hit it, then the entire thing is a host.
          if (hostEnd === -1) hostEnd = rest.length;

          this.host = rest.slice(0, hostEnd);
          rest = rest.slice(hostEnd);

          // pull out port.
          this.parseHost();

          // we've indicated that there is a hostname,
          // so even if it's empty, it has to be present.
          this.hostname = this.hostname || "";

          // if hostname begins with [ and ends with ]
          // assume that it's an IPv6 address.
          var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";

          // validate a little.
          if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for (var i = 0, l = hostparts.length; i < l; i++) {
              var part = hostparts[i];
              if (!part) continue;
              if (!part.match(hostnamePartPattern)) {
                var newpart = "";
                for (var j = 0, k = part.length; j < k; j++) {
                  if (part.charCodeAt(j) > 127) {
                    // we replace non-ASCII char with a temporary placeholder
                    // we need this to make sure size of hostname is not
                    // broken by replacing non-ASCII by nothing
                    newpart += "x";
                  } else {
                    newpart += part[j];
                  }
                }
                // we test again with ASCII char only
                if (!newpart.match(hostnamePartPattern)) {
                  var validParts = hostparts.slice(0, i);
                  var notHost = hostparts.slice(i + 1);
                  var bit = part.match(hostnamePartStart);
                  if (bit) {
                    validParts.push(bit[1]);
                    notHost.unshift(bit[2]);
                  }
                  if (notHost.length) {
                    rest = "/" + notHost.join(".") + rest;
                  }
                  this.hostname = validParts.join(".");
                  break;
                }
              }
            }
          }

          if (this.hostname.length > hostnameMaxLen) {
            this.hostname = "";
          } else {
            // hostnames are always lower case.
            this.hostname = this.hostname.toLowerCase();
          }

          if (!ipv6Hostname) {
            // IDNA Support: Returns a punycoded representation of "domain".
            // It only converts parts of the domain name that
            // have non-ASCII characters, i.e. it doesn't matter if
            // you call it with a domain that already is ASCII-only.
            this.hostname = punycode.toASCII(this.hostname);
          }

          var p = this.port ? ":" + this.port : "";
          var h = this.hostname || "";
          this.host = h + p;
          this.href += this.host;

          // strip [ and ] from the hostname
          // the host field still retains them, though
          if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            if (rest[0] !== "/") {
              rest = "/" + rest;
            }
          }
        }

        // now rest is set to the post-host stuff.
        // chop off any delim chars.
        if (!unsafeProtocol[lowerProto]) {
          // First, make 100% sure that any "autoEscape" chars get
          // escaped, even if encodeURIComponent doesn't think they
          // need to be.
          for (var i = 0, l = autoEscape.length; i < l; i++) {
            var ae = autoEscape[i];
            if (rest.indexOf(ae) === -1) continue;
            var esc = encodeURIComponent(ae);
            if (esc === ae) {
              esc = escape(ae);
            }
            rest = rest.split(ae).join(esc);
          }
        }

        // chop off from the tail first.
        var hash = rest.indexOf("#");
        if (hash !== -1) {
          // got a fragment string.
          this.hash = rest.substr(hash);
          rest = rest.slice(0, hash);
        }
        var qm = rest.indexOf("?");
        if (qm !== -1) {
          this.search = rest.substr(qm);
          this.query = rest.substr(qm + 1);
          if (parseQueryString) {
            this.query = querystring.parse(this.query);
          }
          rest = rest.slice(0, qm);
        } else if (parseQueryString) {
          // no query string, but parseQueryString still requested
          this.search = "";
          this.query = {};
        }
        if (rest) this.pathname = rest;
        if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
          this.pathname = "/";
        }

        //to support http.request
        if (this.pathname || this.search) {
          var p = this.pathname || "";
          var s = this.search || "";
          this.path = p + s;
        }

        // finally, reconstruct the href based on what has been validated.
        this.href = this.format();
        return this;
      };

      // format a parsed object into a url string
      function urlFormat(obj) {
        // ensure it's an object, and not a string url.
        // If it's an obj, this is a no-op.
        // this way, you can call url_format() on strings
        // to clean up potentially wonky urls.
        if (util.isString(obj)) obj = urlParse(obj);
        if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
        return obj.format();
      }

      Url.prototype.format = function () {
        var auth = this.auth || "";
        if (auth) {
          auth = encodeURIComponent(auth);
          auth = auth.replace(/%3A/i, ":");
          auth += "@";
        }

        var protocol = this.protocol || "",
          pathname = this.pathname || "",
          hash = this.hash || "",
          host = false,
          query = "";

        if (this.host) {
          host = auth + this.host;
        } else if (this.hostname) {
          host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
          if (this.port) {
            host += ":" + this.port;
          }
        }

        if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
          query = querystring.stringify(this.query);
        }

        var search = this.search || (query && "?" + query) || "";

        if (protocol && protocol.substr(-1) !== ":") protocol += ":";

        // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
        // unless they had them to begin with.
        if (this.slashes || ((!protocol || slashedProtocol[protocol]) && host !== false)) {
          host = "//" + (host || "");
          if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
        } else if (!host) {
          host = "";
        }

        if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
        if (search && search.charAt(0) !== "?") search = "?" + search;

        pathname = pathname.replace(/[?#]/g, function (match) {
          return encodeURIComponent(match);
        });
        search = search.replace("#", "%23");

        return protocol + host + pathname + search + hash;
      };

      function urlResolve(source, relative) {
        return urlParse(source, false, true).resolve(relative);
      }

      Url.prototype.resolve = function (relative) {
        return this.resolveObject(urlParse(relative, false, true)).format();
      };

      function urlResolveObject(source, relative) {
        if (!source) return relative;
        return urlParse(source, false, true).resolveObject(relative);
      }

      Url.prototype.resolveObject = function (relative) {
        if (util.isString(relative)) {
          var rel = new Url();
          rel.parse(relative, false, true);
          relative = rel;
        }

        var result = new Url();
        var tkeys = Object.keys(this);
        for (var tk = 0; tk < tkeys.length; tk++) {
          var tkey = tkeys[tk];
          result[tkey] = this[tkey];
        }

        // hash is always overridden, no matter what.
        // even href="" will remove it.
        result.hash = relative.hash;

        // if the relative url is empty, then there's nothing left to do here.
        if (relative.href === "") {
          result.href = result.format();
          return result;
        }

        // hrefs like //foo/bar always cut to the protocol.
        if (relative.slashes && !relative.protocol) {
          // take everything except the protocol from relative
          var rkeys = Object.keys(relative);
          for (var rk = 0; rk < rkeys.length; rk++) {
            var rkey = rkeys[rk];
            if (rkey !== "protocol") result[rkey] = relative[rkey];
          }

          //urlParse appends trailing / to urls like http://www.example.com
          if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
            result.path = result.pathname = "/";
          }

          result.href = result.format();
          return result;
        }

        if (relative.protocol && relative.protocol !== result.protocol) {
          // if it's a known url protocol, then changing
          // the protocol does weird things
          // first, if it's not file:, then we MUST have a host,
          // and if there was a path
          // to begin with, then we MUST have a path.
          // if it is file:, then the host is dropped,
          // because that's known to be hostless.
          // anything else is assumed to be absolute.
          if (!slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);
            for (var v = 0; v < keys.length; v++) {
              var k = keys[v];
              result[k] = relative[k];
            }
            result.href = result.format();
            return result;
          }

          result.protocol = relative.protocol;
          if (!relative.host && !hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || "").split("/");
            while (relPath.length && !(relative.host = relPath.shift()));
            if (!relative.host) relative.host = "";
            if (!relative.hostname) relative.hostname = "";
            if (relPath[0] !== "") relPath.unshift("");
            if (relPath.length < 2) relPath.unshift("");
            result.pathname = relPath.join("/");
          } else {
            result.pathname = relative.pathname;
          }
          result.search = relative.search;
          result.query = relative.query;
          result.host = relative.host || "";
          result.auth = relative.auth;
          result.hostname = relative.hostname || relative.host;
          result.port = relative.port;
          // to support http.request
          if (result.pathname || result.search) {
            var p = result.pathname || "";
            var s = result.search || "";
            result.path = p + s;
          }
          result.slashes = result.slashes || relative.slashes;
          result.href = result.format();
          return result;
        }

        var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/",
          isRelAbs = relative.host || (relative.pathname && relative.pathname.charAt(0) === "/"),
          mustEndAbs = isRelAbs || isSourceAbs || (result.host && relative.pathname),
          removeAllDots = mustEndAbs,
          srcPath = (result.pathname && result.pathname.split("/")) || [],
          relPath = (relative.pathname && relative.pathname.split("/")) || [],
          psychotic = result.protocol && !slashedProtocol[result.protocol];

        // if the url is a non-slashed url, then relative
        // links like ../.. should be able
        // to crawl up to the hostname, as well.  This is strange.
        // result.protocol has already been set by now.
        // Later on, put the first path part into the host field.
        if (psychotic) {
          result.hostname = "";
          result.port = null;
          if (result.host) {
            if (srcPath[0] === "") srcPath[0] = result.host;
            else srcPath.unshift(result.host);
          }
          result.host = "";
          if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;
            if (relative.host) {
              if (relPath[0] === "") relPath[0] = relative.host;
              else relPath.unshift(relative.host);
            }
            relative.host = null;
          }
          mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
        }

        if (isRelAbs) {
          // it's absolute.
          result.host = relative.host || relative.host === "" ? relative.host : result.host;
          result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
          result.search = relative.search;
          result.query = relative.query;
          srcPath = relPath;
          // fall through to the dot-handling below.
        } else if (relPath.length) {
          // it's relative
          // throw away the existing file, and take the new path instead.
          if (!srcPath) srcPath = [];
          srcPath.pop();
          srcPath = srcPath.concat(relPath);
          result.search = relative.search;
          result.query = relative.query;
        } else if (!util.isNullOrUndefined(relative.search)) {
          // just pull out the search.
          // like href='?foo'.
          // Put this after the other two cases because it simplifies the booleans
          if (psychotic) {
            result.hostname = result.host = srcPath.shift();
            //occationaly the auth can get stuck only in host
            //this especially happens in cases like
            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
            var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
            if (authInHost) {
              result.auth = authInHost.shift();
              result.host = result.hostname = authInHost.shift();
            }
          }
          result.search = relative.search;
          result.query = relative.query;
          //to support http.request
          if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
            result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
          }
          result.href = result.format();
          return result;
        }

        if (!srcPath.length) {
          // no path at all.  easy.
          // we've already handled the other stuff above.
          result.pathname = null;
          //to support http.request
          if (result.search) {
            result.path = "/" + result.search;
          } else {
            result.path = null;
          }
          result.href = result.format();
          return result;
        }

        // if a url ENDs in . or .., then it must get a trailing slash.
        // however, if it ends in anything else non-slashy,
        // then it must NOT get a trailing slash.
        var last = srcPath.slice(-1)[0];
        var hasTrailingSlash = ((result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..")) || last === "";

        // strip single dots, resolve double dots to parent dir
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = srcPath.length; i >= 0; i--) {
          last = srcPath[i];
          if (last === ".") {
            srcPath.splice(i, 1);
          } else if (last === "..") {
            srcPath.splice(i, 1);
            up++;
          } else if (up) {
            srcPath.splice(i, 1);
            up--;
          }
        }

        // if the path is allowed to go above the root, restore leading ..s
        if (!mustEndAbs && !removeAllDots) {
          for (; up--; up) {
            srcPath.unshift("..");
          }
        }

        if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
          srcPath.unshift("");
        }

        if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
          srcPath.push("");
        }

        var isAbsolute = srcPath[0] === "" || (srcPath[0] && srcPath[0].charAt(0) === "/");

        // put the host back
        if (psychotic) {
          result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
          //occationaly the auth can get stuck only in host
          //this especially happens in cases like
          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
          var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
          if (authInHost) {
            result.auth = authInHost.shift();
            result.host = result.hostname = authInHost.shift();
          }
        }

        mustEndAbs = mustEndAbs || (result.host && srcPath.length);

        if (mustEndAbs && !isAbsolute) {
          srcPath.unshift("");
        }

        if (!srcPath.length) {
          result.pathname = null;
          result.path = null;
        } else {
          result.pathname = srcPath.join("/");
        }

        //to support request.http
        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
          result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        }
        result.auth = relative.auth || result.auth;
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
      };

      Url.prototype.parseHost = function () {
        var host = this.host;
        var port = portPattern.exec(host);
        if (port) {
          port = port[0];
          if (port !== ":") {
            this.port = port.substr(1);
          }
          host = host.substr(0, host.length - port.length);
        }
        if (host) this.hostname = host;
      };

      /***/
    },

    /***/ 2502: /***/ (module) => {
      "use strict";

      module.exports = {
        isString: function (arg) {
          return typeof arg === "string";
        },
        isObject: function (arg) {
          return typeof arg === "object" && arg !== null;
        },
        isNull: function (arg) {
          return arg === null;
        },
        isNullOrUndefined: function (arg) {
          return arg == null;
        },
      };

      /***/
    },

    /***/ 4927: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      /**
       * Module exports.
       */

      module.exports = deprecate;

      /**
       * Mark that a method should not be used.
       * Returns a modified function which warns once by default.
       *
       * If `localStorage.noDeprecation = true` is set, then it is a no-op.
       *
       * If `localStorage.throwDeprecation = true` is set, then deprecated functions
       * will throw an Error when invoked.
       *
       * If `localStorage.traceDeprecation = true` is set, then deprecated functions
       * will invoke `console.trace()` instead of `console.error()`.
       *
       * @param {Function} fn - the function to deprecate
       * @param {String} msg - the string to print to the console when `fn` is invoked
       * @returns {Function} a new "deprecated" version of `fn`
       * @api public
       */

      function deprecate(fn, msg) {
        if (config("noDeprecation")) {
          return fn;
        }

        var warned = false;
        function deprecated() {
          if (!warned) {
            if (config("throwDeprecation")) {
              throw new Error(msg);
            } else if (config("traceDeprecation")) {
              console.trace(msg);
            } else {
              console.warn(msg);
            }
            warned = true;
          }
          return fn.apply(this, arguments);
        }

        return deprecated;
      }

      /**
       * Checks `localStorage` for boolean values for the given `name`.
       *
       * @param {String} name
       * @returns {Boolean}
       * @api private
       */

      function config(name) {
        // accessing global.localStorage can trigger a DOMException in sandboxed iframes
        try {
          if (!__webpack_require__.g.localStorage) return false;
        } catch (_) {
          return false;
        }
        var val = __webpack_require__.g.localStorage[name];
        if (null == val) return false;
        return String(val).toLowerCase() === "true";
      }

      /***/
    },

    /***/ 384: /***/ (module) => {
      module.exports = function isBuffer(arg) {
        return (
          arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function"
        );
      };

      /***/
    },

    /***/ 5955: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      "use strict";
      // Currently in sync with Node.js lib/internal/util/types.js
      // https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9

      var isArgumentsObject = __webpack_require__(2584);
      var isGeneratorFunction = __webpack_require__(8662);
      var whichTypedArray = __webpack_require__(6430);
      var isTypedArray = __webpack_require__(5692);

      function uncurryThis(f) {
        return f.call.bind(f);
      }

      var BigIntSupported = typeof BigInt !== "undefined";
      var SymbolSupported = typeof Symbol !== "undefined";

      var ObjectToString = uncurryThis(Object.prototype.toString);

      var numberValue = uncurryThis(Number.prototype.valueOf);
      var stringValue = uncurryThis(String.prototype.valueOf);
      var booleanValue = uncurryThis(Boolean.prototype.valueOf);

      if (BigIntSupported) {
        var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
      }

      if (SymbolSupported) {
        var symbolValue = uncurryThis(Symbol.prototype.valueOf);
      }

      function checkBoxedPrimitive(value, prototypeValueOf) {
        if (typeof value !== "object") {
          return false;
        }
        try {
          prototypeValueOf(value);
          return true;
        } catch (e) {
          return false;
        }
      }

      exports.isArgumentsObject = isArgumentsObject;
      exports.isGeneratorFunction = isGeneratorFunction;
      exports.isTypedArray = isTypedArray;

      // Taken from here and modified for better browser support
      // https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
      function isPromise(input) {
        return (
          (typeof Promise !== "undefined" && input instanceof Promise) ||
          (input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function")
        );
      }
      exports.isPromise = isPromise;

      function isArrayBufferView(value) {
        if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
          return ArrayBuffer.isView(value);
        }

        return isTypedArray(value) || isDataView(value);
      }
      exports.isArrayBufferView = isArrayBufferView;

      function isUint8Array(value) {
        return whichTypedArray(value) === "Uint8Array";
      }
      exports.isUint8Array = isUint8Array;

      function isUint8ClampedArray(value) {
        return whichTypedArray(value) === "Uint8ClampedArray";
      }
      exports.isUint8ClampedArray = isUint8ClampedArray;

      function isUint16Array(value) {
        return whichTypedArray(value) === "Uint16Array";
      }
      exports.isUint16Array = isUint16Array;

      function isUint32Array(value) {
        return whichTypedArray(value) === "Uint32Array";
      }
      exports.isUint32Array = isUint32Array;

      function isInt8Array(value) {
        return whichTypedArray(value) === "Int8Array";
      }
      exports.isInt8Array = isInt8Array;

      function isInt16Array(value) {
        return whichTypedArray(value) === "Int16Array";
      }
      exports.isInt16Array = isInt16Array;

      function isInt32Array(value) {
        return whichTypedArray(value) === "Int32Array";
      }
      exports.isInt32Array = isInt32Array;

      function isFloat32Array(value) {
        return whichTypedArray(value) === "Float32Array";
      }
      exports.isFloat32Array = isFloat32Array;

      function isFloat64Array(value) {
        return whichTypedArray(value) === "Float64Array";
      }
      exports.isFloat64Array = isFloat64Array;

      function isBigInt64Array(value) {
        return whichTypedArray(value) === "BigInt64Array";
      }
      exports.isBigInt64Array = isBigInt64Array;

      function isBigUint64Array(value) {
        return whichTypedArray(value) === "BigUint64Array";
      }
      exports.isBigUint64Array = isBigUint64Array;

      function isMapToString(value) {
        return ObjectToString(value) === "[object Map]";
      }
      isMapToString.working = typeof Map !== "undefined" && isMapToString(new Map());

      function isMap(value) {
        if (typeof Map === "undefined") {
          return false;
        }

        return isMapToString.working ? isMapToString(value) : value instanceof Map;
      }
      exports.isMap = isMap;

      function isSetToString(value) {
        return ObjectToString(value) === "[object Set]";
      }
      isSetToString.working = typeof Set !== "undefined" && isSetToString(new Set());
      function isSet(value) {
        if (typeof Set === "undefined") {
          return false;
        }

        return isSetToString.working ? isSetToString(value) : value instanceof Set;
      }
      exports.isSet = isSet;

      function isWeakMapToString(value) {
        return ObjectToString(value) === "[object WeakMap]";
      }
      isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(new WeakMap());
      function isWeakMap(value) {
        if (typeof WeakMap === "undefined") {
          return false;
        }

        return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
      }
      exports.isWeakMap = isWeakMap;

      function isWeakSetToString(value) {
        return ObjectToString(value) === "[object WeakSet]";
      }
      isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(new WeakSet());
      function isWeakSet(value) {
        return isWeakSetToString(value);
      }
      exports.isWeakSet = isWeakSet;

      function isArrayBufferToString(value) {
        return ObjectToString(value) === "[object ArrayBuffer]";
      }
      isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
      function isArrayBuffer(value) {
        if (typeof ArrayBuffer === "undefined") {
          return false;
        }

        return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
      }
      exports.isArrayBuffer = isArrayBuffer;

      function isDataViewToString(value) {
        return ObjectToString(value) === "[object DataView]";
      }
      isDataViewToString.working =
        typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
      function isDataView(value) {
        if (typeof DataView === "undefined") {
          return false;
        }

        return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
      }
      exports.isDataView = isDataView;

      // Store a copy of SharedArrayBuffer in case it's deleted elsewhere
      var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : undefined;
      function isSharedArrayBufferToString(value) {
        return ObjectToString(value) === "[object SharedArrayBuffer]";
      }
      function isSharedArrayBuffer(value) {
        if (typeof SharedArrayBufferCopy === "undefined") {
          return false;
        }

        if (typeof isSharedArrayBufferToString.working === "undefined") {
          isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
        }

        return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
      }
      exports.isSharedArrayBuffer = isSharedArrayBuffer;

      function isAsyncFunction(value) {
        return ObjectToString(value) === "[object AsyncFunction]";
      }
      exports.isAsyncFunction = isAsyncFunction;

      function isMapIterator(value) {
        return ObjectToString(value) === "[object Map Iterator]";
      }
      exports.isMapIterator = isMapIterator;

      function isSetIterator(value) {
        return ObjectToString(value) === "[object Set Iterator]";
      }
      exports.isSetIterator = isSetIterator;

      function isGeneratorObject(value) {
        return ObjectToString(value) === "[object Generator]";
      }
      exports.isGeneratorObject = isGeneratorObject;

      function isWebAssemblyCompiledModule(value) {
        return ObjectToString(value) === "[object WebAssembly.Module]";
      }
      exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

      function isNumberObject(value) {
        return checkBoxedPrimitive(value, numberValue);
      }
      exports.isNumberObject = isNumberObject;

      function isStringObject(value) {
        return checkBoxedPrimitive(value, stringValue);
      }
      exports.isStringObject = isStringObject;

      function isBooleanObject(value) {
        return checkBoxedPrimitive(value, booleanValue);
      }
      exports.isBooleanObject = isBooleanObject;

      function isBigIntObject(value) {
        return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
      }
      exports.isBigIntObject = isBigIntObject;

      function isSymbolObject(value) {
        return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
      }
      exports.isSymbolObject = isSymbolObject;

      function isBoxedPrimitive(value) {
        return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
      }
      exports.isBoxedPrimitive = isBoxedPrimitive;

      function isAnyArrayBuffer(value) {
        return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
      }
      exports.isAnyArrayBuffer = isAnyArrayBuffer;

      ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function (method) {
        Object.defineProperty(exports, method, {
          enumerable: false,
          value: function () {
            throw new Error(method + " is not supported in userland");
          },
        });
      });

      /***/
    },

    /***/ 9539: /***/ (__unused_webpack_module, exports, __webpack_require__) => {
      /* provided dependency */ var process = __webpack_require__(4155);
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.

      var getOwnPropertyDescriptors =
        Object.getOwnPropertyDescriptors ||
        function getOwnPropertyDescriptors(obj) {
          var keys = Object.keys(obj);
          var descriptors = {};
          for (var i = 0; i < keys.length; i++) {
            descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
          }
          return descriptors;
        };

      var formatRegExp = /%[sdj%]/g;
      exports.format = function (f) {
        if (!isString(f)) {
          var objects = [];
          for (var i = 0; i < arguments.length; i++) {
            objects.push(inspect(arguments[i]));
          }
          return objects.join(" ");
        }

        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function (x) {
          if (x === "%%") return "%";
          if (i >= len) return x;
          switch (x) {
            case "%s":
              return String(args[i++]);
            case "%d":
              return Number(args[i++]);
            case "%j":
              try {
                return JSON.stringify(args[i++]);
              } catch (_) {
                return "[Circular]";
              }
            default:
              return x;
          }
        });
        for (var x = args[i]; i < len; x = args[++i]) {
          if (isNull(x) || !isObject(x)) {
            str += " " + x;
          } else {
            str += " " + inspect(x);
          }
        }
        return str;
      };

      // Mark that a method should not be used.
      // Returns a modified function which warns once by default.
      // If --no-deprecation is set, then it is a no-op.
      exports.deprecate = function (fn, msg) {
        if (typeof process !== "undefined" && process.noDeprecation === true) {
          return fn;
        }

        // Allow for deprecating things in the process of starting up.
        if (typeof process === "undefined") {
          return function () {
            return exports.deprecate(fn, msg).apply(this, arguments);
          };
        }

        var warned = false;
        function deprecated() {
          if (!warned) {
            if (process.throwDeprecation) {
              throw new Error(msg);
            } else if (process.traceDeprecation) {
              console.trace(msg);
            } else {
              console.error(msg);
            }
            warned = true;
          }
          return fn.apply(this, arguments);
        }

        return deprecated;
      };

      var debugs = {};
      var debugEnvRegex = /^$/;

      if (process.env.NODE_DEBUG) {
        var debugEnv = process.env.NODE_DEBUG;
        debugEnv = debugEnv
          .replace(/[|\\{}()[\]^$+?.]/g, "\\$&")
          .replace(/\*/g, ".*")
          .replace(/,/g, "$|^")
          .toUpperCase();
        debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
      }
      exports.debuglog = function (set) {
        set = set.toUpperCase();
        if (!debugs[set]) {
          if (debugEnvRegex.test(set)) {
            var pid = process.pid;
            debugs[set] = function () {
              var msg = exports.format.apply(exports, arguments);
              console.error("%s %d: %s", set, pid, msg);
            };
          } else {
            debugs[set] = function () {};
          }
        }
        return debugs[set];
      };

      /**
       * Echos the value of a value. Trys to print the value out
       * in the best way possible given the different types.
       *
       * @param {Object} obj The object to print out.
       * @param {Object} opts Optional options object that alters the output.
       */
      /* legacy: obj, showHidden, depth, colors*/
      function inspect(obj, opts) {
        // default options
        var ctx = {
          seen: [],
          stylize: stylizeNoColor,
        };
        // legacy...
        if (arguments.length >= 3) ctx.depth = arguments[2];
        if (arguments.length >= 4) ctx.colors = arguments[3];
        if (isBoolean(opts)) {
          // legacy...
          ctx.showHidden = opts;
        } else if (opts) {
          // got an "options" object
          exports._extend(ctx, opts);
        }
        // set default options
        if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
        if (isUndefined(ctx.depth)) ctx.depth = 2;
        if (isUndefined(ctx.colors)) ctx.colors = false;
        if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
        if (ctx.colors) ctx.stylize = stylizeWithColor;
        return formatValue(ctx, obj, ctx.depth);
      }
      exports.inspect = inspect;

      // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
      inspect.colors = {
        bold: [1, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        white: [37, 39],
        grey: [90, 39],
        black: [30, 39],
        blue: [34, 39],
        cyan: [36, 39],
        green: [32, 39],
        magenta: [35, 39],
        red: [31, 39],
        yellow: [33, 39],
      };

      // Don't use 'blue' not visible on cmd.exe
      inspect.styles = {
        special: "cyan",
        number: "yellow",
        boolean: "yellow",
        undefined: "grey",
        null: "bold",
        string: "green",
        date: "magenta",
        // "name": intentionally not styling
        regexp: "red",
      };

      function stylizeWithColor(str, styleType) {
        var style = inspect.styles[styleType];

        if (style) {
          return "\u001b[" + inspect.colors[style][0] + "m" + str + "\u001b[" + inspect.colors[style][1] + "m";
        } else {
          return str;
        }
      }

      function stylizeNoColor(str, styleType) {
        return str;
      }

      function arrayToHash(array) {
        var hash = {};

        array.forEach(function (val, idx) {
          hash[val] = true;
        });

        return hash;
      }

      function formatValue(ctx, value, recurseTimes) {
        // Provide a hook for user-specified inspect functions.
        // Check that value is an object with an inspect function on it
        if (
          ctx.customInspect &&
          value &&
          isFunction(value.inspect) &&
          // Filter out the util module, it's inspect function is special
          value.inspect !== exports.inspect &&
          // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)
        ) {
          var ret = value.inspect(recurseTimes, ctx);
          if (!isString(ret)) {
            ret = formatValue(ctx, ret, recurseTimes);
          }
          return ret;
        }

        // Primitive types cannot have properties
        var primitive = formatPrimitive(ctx, value);
        if (primitive) {
          return primitive;
        }

        // Look up the keys of the object.
        var keys = Object.keys(value);
        var visibleKeys = arrayToHash(keys);

        if (ctx.showHidden) {
          keys = Object.getOwnPropertyNames(value);
        }

        // IE doesn't make error fields non-enumerable
        // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
        if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
          return formatError(value);
        }

        // Some type of object without properties can be shortcutted.
        if (keys.length === 0) {
          if (isFunction(value)) {
            var name = value.name ? ": " + value.name : "";
            return ctx.stylize("[Function" + name + "]", "special");
          }
          if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
          }
          if (isDate(value)) {
            return ctx.stylize(Date.prototype.toString.call(value), "date");
          }
          if (isError(value)) {
            return formatError(value);
          }
        }

        var base = "",
          array = false,
          braces = ["{", "}"];

        // Make Array say that they are Array
        if (isArray(value)) {
          array = true;
          braces = ["[", "]"];
        }

        // Make functions say that they are functions
        if (isFunction(value)) {
          var n = value.name ? ": " + value.name : "";
          base = " [Function" + n + "]";
        }

        // Make RegExps say that they are RegExps
        if (isRegExp(value)) {
          base = " " + RegExp.prototype.toString.call(value);
        }

        // Make dates with properties first say the date
        if (isDate(value)) {
          base = " " + Date.prototype.toUTCString.call(value);
        }

        // Make error with message first say the error
        if (isError(value)) {
          base = " " + formatError(value);
        }

        if (keys.length === 0 && (!array || value.length == 0)) {
          return braces[0] + base + braces[1];
        }

        if (recurseTimes < 0) {
          if (isRegExp(value)) {
            return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
          } else {
            return ctx.stylize("[Object]", "special");
          }
        }

        ctx.seen.push(value);

        var output;
        if (array) {
          output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
        } else {
          output = keys.map(function (key) {
            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
          });
        }

        ctx.seen.pop();

        return reduceToSingleString(output, base, braces);
      }

      function formatPrimitive(ctx, value) {
        if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
        if (isString(value)) {
          var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
          return ctx.stylize(simple, "string");
        }
        if (isNumber(value)) return ctx.stylize("" + value, "number");
        if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
        // For some reason typeof null is "object", so special case here.
        if (isNull(value)) return ctx.stylize("null", "null");
      }

      function formatError(value) {
        return "[" + Error.prototype.toString.call(value) + "]";
      }

      function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
        var output = [];
        for (var i = 0, l = value.length; i < l; ++i) {
          if (hasOwnProperty(value, String(i))) {
            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
          } else {
            output.push("");
          }
        }
        keys.forEach(function (key) {
          if (!key.match(/^\d+$/)) {
            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
          }
        });
        return output;
      }

      function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
        var name, str, desc;
        desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
        if (desc.get) {
          if (desc.set) {
            str = ctx.stylize("[Getter/Setter]", "special");
          } else {
            str = ctx.stylize("[Getter]", "special");
          }
        } else {
          if (desc.set) {
            str = ctx.stylize("[Setter]", "special");
          }
        }
        if (!hasOwnProperty(visibleKeys, key)) {
          name = "[" + key + "]";
        }
        if (!str) {
          if (ctx.seen.indexOf(desc.value) < 0) {
            if (isNull(recurseTimes)) {
              str = formatValue(ctx, desc.value, null);
            } else {
              str = formatValue(ctx, desc.value, recurseTimes - 1);
            }
            if (str.indexOf("\n") > -1) {
              if (array) {
                str = str
                  .split("\n")
                  .map(function (line) {
                    return "  " + line;
                  })
                  .join("\n")
                  .substr(2);
              } else {
                str =
                  "\n" +
                  str
                    .split("\n")
                    .map(function (line) {
                      return "   " + line;
                    })
                    .join("\n");
              }
            }
          } else {
            str = ctx.stylize("[Circular]", "special");
          }
        }
        if (isUndefined(name)) {
          if (array && key.match(/^\d+$/)) {
            return str;
          }
          name = JSON.stringify("" + key);
          if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2);
            name = ctx.stylize(name, "name");
          } else {
            name = name
              .replace(/'/g, "\\'")
              .replace(/\\"/g, '"')
              .replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, "string");
          }
        }

        return name + ": " + str;
      }

      function reduceToSingleString(output, base, braces) {
        var numLinesEst = 0;
        var length = output.reduce(function (prev, cur) {
          numLinesEst++;
          if (cur.indexOf("\n") >= 0) numLinesEst++;
          return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
        }, 0);

        if (length > 60) {
          return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
        }

        return braces[0] + base + " " + output.join(", ") + " " + braces[1];
      }

      // NOTE: These type checking functions intentionally don't use `instanceof`
      // because it is fragile and can be easily faked with `Object.create()`.
      exports.types = __webpack_require__(5955);

      function isArray(ar) {
        return Array.isArray(ar);
      }
      exports.isArray = isArray;

      function isBoolean(arg) {
        return typeof arg === "boolean";
      }
      exports.isBoolean = isBoolean;

      function isNull(arg) {
        return arg === null;
      }
      exports.isNull = isNull;

      function isNullOrUndefined(arg) {
        return arg == null;
      }
      exports.isNullOrUndefined = isNullOrUndefined;

      function isNumber(arg) {
        return typeof arg === "number";
      }
      exports.isNumber = isNumber;

      function isString(arg) {
        return typeof arg === "string";
      }
      exports.isString = isString;

      function isSymbol(arg) {
        return typeof arg === "symbol";
      }
      exports.isSymbol = isSymbol;

      function isUndefined(arg) {
        return arg === void 0;
      }
      exports.isUndefined = isUndefined;

      function isRegExp(re) {
        return isObject(re) && objectToString(re) === "[object RegExp]";
      }
      exports.isRegExp = isRegExp;
      exports.types.isRegExp = isRegExp;

      function isObject(arg) {
        return typeof arg === "object" && arg !== null;
      }
      exports.isObject = isObject;

      function isDate(d) {
        return isObject(d) && objectToString(d) === "[object Date]";
      }
      exports.isDate = isDate;
      exports.types.isDate = isDate;

      function isError(e) {
        return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
      }
      exports.isError = isError;
      exports.types.isNativeError = isError;

      function isFunction(arg) {
        return typeof arg === "function";
      }
      exports.isFunction = isFunction;

      function isPrimitive(arg) {
        return (
          arg === null ||
          typeof arg === "boolean" ||
          typeof arg === "number" ||
          typeof arg === "string" ||
          typeof arg === "symbol" || // ES6 symbol
          typeof arg === "undefined"
        );
      }
      exports.isPrimitive = isPrimitive;

      exports.isBuffer = __webpack_require__(384);

      function objectToString(o) {
        return Object.prototype.toString.call(o);
      }

      function pad(n) {
        return n < 10 ? "0" + n.toString(10) : n.toString(10);
      }

      var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

      // 26 Feb 16:19:34
      function timestamp() {
        var d = new Date();
        var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(":");
        return [d.getDate(), months[d.getMonth()], time].join(" ");
      }

      // log is just a thin wrapper to console.log that prepends a timestamp
      exports.log = function () {
        console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
      };

      /**
       * Inherit the prototype methods from one constructor into another.
       *
       * The Function.prototype.inherits from lang.js rewritten as a standalone
       * function (not on Function.prototype). NOTE: If this file is to be loaded
       * during bootstrapping this function needs to be rewritten using some native
       * functions as prototype setup using normal JavaScript does not work as
       * expected during bootstrapping (see mirror.js in r114903).
       *
       * @param {function} ctor Constructor function which needs to inherit the
       *     prototype.
       * @param {function} superCtor Constructor function to inherit prototype from.
       */
      exports.inherits = __webpack_require__(5717);

      exports._extend = function (origin, add) {
        // Don't do anything if add isn't an object
        if (!add || !isObject(add)) return origin;

        var keys = Object.keys(add);
        var i = keys.length;
        while (i--) {
          origin[keys[i]] = add[keys[i]];
        }
        return origin;
      };

      function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }

      var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : undefined;

      exports.promisify = function promisify(original) {
        if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');

        if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
          var fn = original[kCustomPromisifiedSymbol];
          if (typeof fn !== "function") {
            throw new TypeError('The "util.promisify.custom" argument must be of type Function');
          }
          Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true,
          });
          return fn;
        }

        function fn() {
          var promiseResolve, promiseReject;
          var promise = new Promise(function (resolve, reject) {
            promiseResolve = resolve;
            promiseReject = reject;
          });

          var args = [];
          for (var i = 0; i < arguments.length; i++) {
            args.push(arguments[i]);
          }
          args.push(function (err, value) {
            if (err) {
              promiseReject(err);
            } else {
              promiseResolve(value);
            }
          });

          try {
            original.apply(this, args);
          } catch (err) {
            promiseReject(err);
          }

          return promise;
        }

        Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

        if (kCustomPromisifiedSymbol)
          Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true,
          });
        return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
      };

      exports.promisify.custom = kCustomPromisifiedSymbol;

      function callbackifyOnRejected(reason, cb) {
        // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
        // Because `null` is a special error value in callbacks which means "no error
        // occurred", we error-wrap so the callback consumer can distinguish between
        // "the promise rejected with null" or "the promise fulfilled with undefined".
        if (!reason) {
          var newReason = new Error("Promise was rejected with a falsy value");
          newReason.reason = reason;
          reason = newReason;
        }
        return cb(reason);
      }

      function callbackify(original) {
        if (typeof original !== "function") {
          throw new TypeError('The "original" argument must be of type Function');
        }

        // We DO NOT return the promise as it gives the user a false sense that
        // the promise is actually somehow related to the callback's execution
        // and that the callback throwing will reject the promise.
        function callbackified() {
          var args = [];
          for (var i = 0; i < arguments.length; i++) {
            args.push(arguments[i]);
          }

          var maybeCb = args.pop();
          if (typeof maybeCb !== "function") {
            throw new TypeError("The last argument must be of type Function");
          }
          var self = this;
          var cb = function () {
            return maybeCb.apply(self, arguments);
          };
          // In true node style we process the callback on `nextTick` with all the
          // implications (stack, `uncaughtException`, `async_hooks`)
          original.apply(this, args).then(
            function (ret) {
              process.nextTick(cb.bind(null, null, ret));
            },
            function (rej) {
              process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
            }
          );
        }

        Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
        Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
        return callbackified;
      }
      exports.callbackify = callbackify;

      /***/
    },

    /***/ 4928: /***/ (module) => {
      "use strict";
      /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /**
       * @file errors.js
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @author Marek Kotewicz <marek@parity.io>
       * @date 2017
       */

      module.exports = {
        ErrorResponse: function (result) {
          var message = !!result && !!result.error && !!result.error.message ? result.error.message : JSON.stringify(result);
          var data = !!result.error && !!result.error.data ? result.error.data : null;
          var err = new Error("Returned error: " + message);
          err.data = data;
          return err;
        },
        InvalidNumberOfParams: function (got, expected, method) {
          return new Error('Invalid number of parameters for "' + method + '". Got ' + got + " expected " + expected + "!");
        },
        InvalidConnection: function (host, event) {
          return this.ConnectionError("CONNECTION ERROR: Couldn't connect to node " + host + ".", event);
        },
        InvalidProvider: function () {
          return new Error("Provider not set or invalid");
        },
        InvalidResponse: function (result) {
          var message =
            !!result && !!result.error && !!result.error.message ? result.error.message : "Invalid JSON RPC response: " + JSON.stringify(result);
          return new Error(message);
        },
        ConnectionTimeout: function (ms) {
          return new Error("CONNECTION TIMEOUT: timeout of " + ms + " ms achived");
        },
        ConnectionNotOpenError: function (event) {
          return this.ConnectionError("connection not open on send()", event);
        },
        ConnectionCloseError: function (event) {
          if (typeof event === "object" && event.code && event.reason) {
            return this.ConnectionError(
              "CONNECTION ERROR: The connection got closed with " +
                "the close code `" +
                event.code +
                "` and the following " +
                "reason string `" +
                event.reason +
                "`",
              event
            );
          }
          return new Error("CONNECTION ERROR: The connection closed unexpectedly");
        },
        MaxAttemptsReachedOnReconnectingError: function () {
          return new Error("Maximum number of reconnect attempts reached!");
        },
        PendingRequestsOnReconnectingError: function () {
          return new Error("CONNECTION ERROR: Provider started to reconnect before the response got received!");
        },
        ConnectionError: function (msg, event) {
          const error = new Error(msg);
          if (event) {
            error.code = event.code;
            error.reason = event.reason;
          }
          return error;
        },
        RevertInstructionError: function (reason, signature) {
          var error = new Error("Your request got reverted with the following reason string: " + reason);
          error.reason = reason;
          error.signature = signature;
          return error;
        },
        TransactionRevertInstructionError: function (reason, signature, receipt) {
          var error = new Error("Transaction has been reverted by the EVM:\n" + JSON.stringify(receipt, null, 2));
          error.reason = reason;
          error.signature = signature;
          error.receipt = receipt;
          return error;
        },
        TransactionError: function (message, receipt) {
          var error = new Error(message);
          error.receipt = receipt;
          return error;
        },
        NoContractAddressFoundError: function (receipt) {
          return this.TransactionError("The transaction receipt didn't contain a contract address.", receipt);
        },
        ContractCodeNotStoredError: function (receipt) {
          return this.TransactionError("The contract code couldn't be stored, please check your gas limit.", receipt);
        },
        TransactionRevertedWithoutReasonError: function (receipt) {
          return this.TransactionError("Transaction has been reverted by the EVM:\n" + JSON.stringify(receipt, null, 2), receipt);
        },
        TransactionOutOfGasError: function (receipt) {
          return this.TransactionError("Transaction ran out of gas. Please provide more gas:\n" + JSON.stringify(receipt, null, 2), receipt);
        },
        ResolverMethodMissingError: function (address, name) {
          return new Error("The resolver at " + address + 'does not implement requested method: "' + name + '".');
        },
        ContractMissingABIError: function () {
          return new Error("You must provide the json interface of the contract when instantiating a contract object.");
        },
        ContractOnceRequiresCallbackError: function () {
          return new Error("Once requires a callback as the second parameter.");
        },
        ContractEventDoesNotExistError: function (eventName) {
          return new Error('Event "' + eventName + "\" doesn't exist in this contract.");
        },
        ContractReservedEventError: function (type) {
          return new Error('The event "' + type + "\" is a reserved event name, you can't use it.");
        },
        ContractMissingDeployDataError: function () {
          return new Error('No "data" specified in neither the given options, nor the default options.');
        },
        ContractNoAddressDefinedError: function () {
          return new Error("This contract object doesn't have address set yet, please set an address first.");
        },
        ContractNoFromAddressDefinedError: function () {
          return new Error('No "from" address specified in neither the given options, nor the default options.');
        },
      };

      /***/
    },

    /***/ 6267: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /**
       * @file formatters.js
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @author Marek Kotewicz <marek@parity.io>
       * @date 2017
       */

      var utils = __webpack_require__(6752);
      var Iban = __webpack_require__(4751);
      /**
       * Will format the given storage key array values to hex strings.
       *
       * @method inputStorageKeysFormatter
       *
       * @param {Array<Number|String|BN|BigNumber>} keys
       *
       * @returns {Array<String>}
       */
      var inputStorageKeysFormatter = function (keys) {
        return keys.map(utils.numberToHex);
      };
      /**
       * Will format the given proof response from the node.
       *
       * @method outputProofFormatter
       *
       * @param {object} proof
       *
       * @returns {object}
       */
      var outputProofFormatter = function (proof) {
        proof.address = utils.toChecksumAddress(proof.address);
        proof.nonce = utils.hexToNumberString(proof.nonce);
        proof.balance = utils.hexToNumberString(proof.balance);
        return proof;
      };
      /**
       * Should the format output to a big number
       *
       * @method outputBigNumberFormatter
       *
       * @param {String|Number|BigNumber|BN} number
       *
       * @returns {BN} object
       */
      var outputBigNumberFormatter = function (number) {
        return utils.toBN(number).toString(10);
      };
      /**
       * Returns true if the given blockNumber is 'latest', 'pending', 'earliest, 'finalized' or 'safe'
       *
       * @method isPredefinedBlockNumber
       *
       * @param {String} blockNumber
       *
       * @returns {Boolean}
       */
      var isPredefinedBlockNumber = function (blockNumber) {
        return ["latest", "pending", "earliest", "finalized", "safe"].includes(blockNumber);
      };
      /**
       * Returns the given block number as hex string or does return the defaultBlock property of the current module
       *
       * @method inputDefaultBlockNumberFormatter
       *
       * @param {String|Number|BN|BigNumber} blockNumber
       *
       * @returns {String}
       */
      var inputDefaultBlockNumberFormatter = function (blockNumber) {
        if (this && (blockNumber === undefined || blockNumber === null)) {
          return inputBlockNumberFormatter(this.defaultBlock);
        }
        return inputBlockNumberFormatter(blockNumber);
      };
      /**
       * Returns the given block number as hex string or the predefined block number 'latest', 'pending', 'earliest', 'finalized', 'safe', 'genesis'
       *
       * @param {String|Number|BN|BigNumber} blockNumber
       *
       * @returns {String}
       */
      var inputBlockNumberFormatter = function (blockNumber) {
        if (blockNumber === undefined) {
          return undefined;
        }
        if (isPredefinedBlockNumber(blockNumber)) {
          return blockNumber;
        }
        if (blockNumber === "genesis") {
          return "0x0";
        }
        return utils.isHexStrict(blockNumber)
          ? typeof blockNumber === "string"
            ? blockNumber.toLowerCase()
            : blockNumber
          : utils.numberToHex(blockNumber);
      };
      /**
       * Formats the input of a transaction and converts all values to HEX
       *
       * @method _txInputFormatter
       * @param {Object} transaction options
       * @returns object
       */
      var _txInputFormatter = function (options) {
        if (options.to) {
          // it might be contract creation
          options.to = inputAddressFormatter(options.to);
        }
        if (options.data && options.input) {
          throw new Error(
            'You can\'t have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.'
          );
        }
        if (!options.data && options.input) {
          options.data = options.input;
          delete options.input;
        }
        if (options.data && !options.data.startsWith("0x")) {
          options.data = "0x" + options.data;
        }
        if (options.data && !utils.isHex(options.data)) {
          throw new Error("The data field must be HEX encoded data.");
        }
        // allow both
        if (options.gas || options.gasLimit) {
          options.gas = options.gas || options.gasLimit;
        }
        if (options.maxPriorityFeePerGas || options.maxFeePerGas) {
          delete options.gasPrice;
        }
        ["gasPrice", "gas", "value", "maxPriorityFeePerGas", "maxFeePerGas", "nonce"]
          .filter(function (key) {
            return options[key] !== undefined;
          })
          .forEach(function (key) {
            options[key] = utils.numberToHex(options[key]);
          });
        return options;
      };
      /**
       * Formats the input of a transaction and converts all values to HEX
       *
       * @method inputCallFormatter
       * @param {Object} transaction options
       * @returns object
       */
      var inputCallFormatter = function (options) {
        options = _txInputFormatter(options);
        var from = options.from || (this ? this.defaultAccount : null);
        if (from) {
          options.from = inputAddressFormatter(from);
        }
        return options;
      };
      /**
       * Formats the input of a transaction and converts all values to HEX
       *
       * @method inputTransactionFormatter
       * @param {Object} options
       * @returns object
       */
      var inputTransactionFormatter = function (options) {
        options = _txInputFormatter(options);
        // check from, only if not number, or object
        if (!(typeof options.from === "number") && !(!!options.from && typeof options.from === "object")) {
          options.from = options.from || (this ? this.defaultAccount : null);
          if (!options.from && !(typeof options.from === "number")) {
            throw new Error('The send transactions "from" field must be defined!');
          }
          options.from = inputAddressFormatter(options.from);
        }
        return options;
      };
      /**
       * Hex encodes the data passed to eth_sign and personal_sign
       *
       * @method inputSignFormatter
       * @param {String} data
       * @returns {String}
       */
      var inputSignFormatter = function (data) {
        return utils.isHexStrict(data) ? data : utils.utf8ToHex(data);
      };
      /**
       * Formats the output of a transaction to its proper values
       *
       * @method outputTransactionFormatter
       * @param {Object} tx
       * @returns {Object}
       */
      var outputTransactionFormatter = function (tx) {
        if (tx.blockNumber !== null) tx.blockNumber = utils.hexToNumber(tx.blockNumber);
        if (tx.transactionIndex !== null) tx.transactionIndex = utils.hexToNumber(tx.transactionIndex);
        tx.nonce = utils.hexToNumber(tx.nonce);
        tx.gas = utils.hexToNumber(tx.gas);
        if (tx.gasPrice) tx.gasPrice = outputBigNumberFormatter(tx.gasPrice);
        if (tx.maxFeePerGas) tx.maxFeePerGas = outputBigNumberFormatter(tx.maxFeePerGas);
        if (tx.maxPriorityFeePerGas) tx.maxPriorityFeePerGas = outputBigNumberFormatter(tx.maxPriorityFeePerGas);
        if (tx.type) tx.type = utils.hexToNumber(tx.type);
        tx.value = outputBigNumberFormatter(tx.value);
        if (tx.to && utils.isAddress(tx.to)) {
          // tx.to could be `0x0` or `null` while contract creation
          tx.to = utils.toChecksumAddress(tx.to);
        } else {
          tx.to = null; // set to `null` if invalid address
        }
        if (tx.from) {
          tx.from = utils.toChecksumAddress(tx.from);
        }
        return tx;
      };
      /**
       * Formats the output of a transaction receipt to its proper values
       *
       * @method outputTransactionReceiptFormatter
       * @param {Object} receipt
       * @returns {Object}
       */
      var outputTransactionReceiptFormatter = function (receipt) {
        if (typeof receipt !== "object") {
          throw new Error("Received receipt is invalid: " + receipt);
        }
        if (!this.hexFormat) {
          if (receipt.blockNumber !== null) receipt.blockNumber = utils.hexToNumber(receipt.blockNumber);
          if (receipt.transactionIndex !== null) receipt.transactionIndex = utils.hexToNumber(receipt.transactionIndex);
          receipt.cumulativeGasUsed = utils.hexToNumber(receipt.cumulativeGasUsed);
          receipt.gasUsed = utils.hexToNumber(receipt.gasUsed);
          if (receipt.effectiveGasPrice) {
            receipt.effectiveGasPrice = utils.hexToNumber(receipt.effectiveGasPrice);
          }
        }
        if (Array.isArray(receipt.logs)) {
          receipt.logs = receipt.logs.map(outputLogFormatter);
        }
        if (receipt.contractAddress) {
          receipt.contractAddress = utils.toChecksumAddress(receipt.contractAddress);
        }
        if (typeof receipt.status !== "undefined" && receipt.status !== null) {
          receipt.status = Boolean(parseInt(receipt.status));
        }
        return receipt;
      };
      /**
       * Formats the output of a block to its proper values
       *
       * @method outputBlockFormatter
       * @param {Object} block
       * @returns {Object}
       */
      var outputBlockFormatter = function (block) {
        // transform to number
        block.gasLimit = utils.hexToNumber(block.gasLimit);
        block.gasUsed = utils.hexToNumber(block.gasUsed);
        block.size = utils.hexToNumber(block.size);
        block.timestamp = utils.hexToNumber(block.timestamp);
        if (block.number !== null) block.number = utils.hexToNumber(block.number);
        if (block.difficulty) block.difficulty = outputBigNumberFormatter(block.difficulty);
        if (block.totalDifficulty) block.totalDifficulty = outputBigNumberFormatter(block.totalDifficulty);
        if (Array.isArray(block.transactions)) {
          block.transactions.forEach(function (item) {
            if (!(typeof item === "string")) return outputTransactionFormatter(item);
          });
        }
        if (block.miner) block.miner = utils.toChecksumAddress(block.miner);
        if (block.baseFeePerGas) block.baseFeePerGas = utils.hexToNumber(block.baseFeePerGas);
        return block;
      };
      /**
       * Formats the input of a log
       *
       * @method inputLogFormatter
       * @param {Object} log object
       * @returns {Object} log
       */
      var inputLogFormatter = function (options) {
        var toTopic = function (value) {
          if (value === null || typeof value === "undefined") return null;
          value = String(value);
          if (value.indexOf("0x") === 0) return value;
          else return utils.fromUtf8(value);
        };
        if (options === undefined) options = {};
        // If options !== undefined, don't blow out existing data
        if (options.fromBlock === undefined) options = { ...options, fromBlock: "latest" };
        if (options.fromBlock || options.fromBlock === 0) options.fromBlock = inputBlockNumberFormatter(options.fromBlock);
        if (options.toBlock || options.toBlock === 0) options.toBlock = inputBlockNumberFormatter(options.toBlock);
        // make sure topics, get converted to hex
        options.topics = options.topics || [];
        options.topics = options.topics.map(function (topic) {
          return Array.isArray(topic) ? topic.map(toTopic) : toTopic(topic);
        });
        toTopic = null;
        if (options.address) {
          options.address = Array.isArray(options.address)
            ? options.address.map(function (addr) {
                return inputAddressFormatter(addr);
              })
            : inputAddressFormatter(options.address);
        }
        return options;
      };
      /**
       * Formats the output of a log
       *
       * @method outputLogFormatter
       * @param {Object} log object
       * @returns {Object} log
       */
      var outputLogFormatter = function (log) {
        // generate a custom log id
        if (typeof log.blockHash === "string" && typeof log.transactionHash === "string" && typeof log.logIndex === "string") {
          var shaId = utils.sha3(log.blockHash.replace("0x", "") + log.transactionHash.replace("0x", "") + log.logIndex.replace("0x", ""));
          log.id = "log_" + shaId.replace("0x", "").slice(0, 8);
        } else if (!log.id) {
          log.id = null;
        }
        if (log.blockNumber !== null) log.blockNumber = utils.hexToNumber(log.blockNumber);
        if (log.transactionIndex !== null) log.transactionIndex = utils.hexToNumber(log.transactionIndex);
        if (log.logIndex !== null) log.logIndex = utils.hexToNumber(log.logIndex);
        if (log.address) {
          log.address = utils.toChecksumAddress(log.address);
        }
        return log;
      };
      /**
       * Formats the input of a whisper post and converts all values to HEX
       *
       * @method inputPostFormatter
       * @param {Object} transaction object
       * @returns {Object}
       */
      var inputPostFormatter = function (post) {
        // post.payload = utils.toHex(post.payload);
        if (post.ttl) post.ttl = utils.numberToHex(post.ttl);
        if (post.workToProve) post.workToProve = utils.numberToHex(post.workToProve);
        if (post.priority) post.priority = utils.numberToHex(post.priority);
        // fallback
        if (!Array.isArray(post.topics)) {
          post.topics = post.topics ? [post.topics] : [];
        }
        // format the following options
        post.topics = post.topics.map(function (topic) {
          // convert only if not hex
          return topic.indexOf("0x") === 0 ? topic : utils.fromUtf8(topic);
        });
        return post;
      };
      /**
       * Formats the output of a received post message
       *
       * @method outputPostFormatter
       * @param {Object}
       * @returns {Object}
       */
      var outputPostFormatter = function (post) {
        post.expiry = utils.hexToNumber(post.expiry);
        post.sent = utils.hexToNumber(post.sent);
        post.ttl = utils.hexToNumber(post.ttl);
        post.workProved = utils.hexToNumber(post.workProved);
        // post.payloadRaw = post.payload;
        // post.payload = utils.hexToAscii(post.payload);
        // if (utils.isJson(post.payload)) {
        //     post.payload = JSON.parse(post.payload);
        // }
        // format the following options
        if (!post.topics) {
          post.topics = [];
        }
        post.topics = post.topics.map(function (topic) {
          return utils.toUtf8(topic);
        });
        return post;
      };
      var inputAddressFormatter = function (address) {
        var iban = new Iban(address);
        if (iban.isValid() && iban.isDirect()) {
          return iban.toAddress().toLowerCase();
        } else if (utils.isAddress(address)) {
          return "0x" + address.toLowerCase().replace("0x", "");
        }
        throw new Error(
          `Provided address ${address} is invalid, the capitalization checksum test failed, or it's an indirect IBAN address which can't be converted.`
        );
      };
      var outputSyncingFormatter = function (result) {
        result.startingBlock = utils.hexToNumber(result.startingBlock);
        result.currentBlock = utils.hexToNumber(result.currentBlock);
        result.highestBlock = utils.hexToNumber(result.highestBlock);
        if (result.knownStates) {
          result.knownStates = utils.hexToNumber(result.knownStates);
          result.pulledStates = utils.hexToNumber(result.pulledStates);
        }
        return result;
      };
      module.exports = {
        inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,
        inputBlockNumberFormatter: inputBlockNumberFormatter,
        inputCallFormatter: inputCallFormatter,
        inputTransactionFormatter: inputTransactionFormatter,
        inputAddressFormatter: inputAddressFormatter,
        inputPostFormatter: inputPostFormatter,
        inputLogFormatter: inputLogFormatter,
        inputSignFormatter: inputSignFormatter,
        inputStorageKeysFormatter: inputStorageKeysFormatter,
        outputProofFormatter: outputProofFormatter,
        outputBigNumberFormatter: outputBigNumberFormatter,
        outputTransactionFormatter: outputTransactionFormatter,
        outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,
        outputBlockFormatter: outputBlockFormatter,
        outputLogFormatter: outputLogFormatter,
        outputPostFormatter: outputPostFormatter,
        outputSyncingFormatter: outputSyncingFormatter,
      };

      /***/
    },

    /***/ 4390: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /**
       * @file index.js
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2017
       */

      var errors = __webpack_require__(4928);
      var formatters = __webpack_require__(6267);
      module.exports = {
        errors: errors,
        formatters: formatters,
      };

      /***/
    },

    /***/ 3952: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /**
       * @file index.js
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @author Marek Kotewicz <marek@parity.io>
       * @date 2017
       */

      var errors = __webpack_require__(4390).errors;
      var formatters = __webpack_require__(4390).formatters;
      var utils = __webpack_require__(6752);
      var promiEvent = __webpack_require__(4017);
      var Subscriptions = __webpack_require__(6602).subscriptions;
      var EthersTransactionUtils = __webpack_require__(5504);
      var Method = function Method(options) {
        if (!options.call || !options.name) {
          throw new Error('When creating a method you need to provide at least the "name" and "call" property.');
        }
        this.name = options.name;
        this.call = options.call;
        this.params = options.params || 0;
        this.inputFormatter = options.inputFormatter;
        this.outputFormatter = options.outputFormatter;
        this.transformPayload = options.transformPayload;
        this.extraFormatters = options.extraFormatters;
        this.abiCoder = options.abiCoder; // Will be used to encode the revert reason string
        this.requestManager = options.requestManager;
        // reference to eth.accounts
        this.accounts = options.accounts;
        this.defaultBlock = options.defaultBlock || "latest";
        this.defaultAccount = options.defaultAccount || null;
        this.transactionBlockTimeout = options.transactionBlockTimeout || 50;
        this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;
        this.transactionPollingTimeout = options.transactionPollingTimeout || 750;
        this.transactionPollingInterval = options.transactionPollingInterval || 1000;
        this.blockHeaderTimeout = options.blockHeaderTimeout || 10; // 10 seconds
        this.defaultCommon = options.defaultCommon;
        this.defaultChain = options.defaultChain;
        this.defaultHardfork = options.defaultHardfork;
        this.handleRevert = options.handleRevert;
      };
      Method.prototype.setRequestManager = function (requestManager, accounts) {
        this.requestManager = requestManager;
        // reference to eth.accounts
        if (accounts) {
          this.accounts = accounts;
        }
      };
      Method.prototype.createFunction = function (requestManager, accounts) {
        var func = this.buildCall();
        Object.defineProperty(func, "call", { configurable: true, writable: true, value: this.call });
        this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);
        return func;
      };
      Method.prototype.attachToObject = function (obj) {
        var func = this.buildCall();
        Object.defineProperty(func, "call", { configurable: true, writable: true, value: this.call });
        var name = this.name.split(".");
        if (name.length > 1) {
          obj[name[0]] = obj[name[0]] || {};
          obj[name[0]][name[1]] = func;
        } else {
          obj[name[0]] = func;
        }
      };
      /**
       * Should be used to determine name of the jsonrpc method based on arguments
       *
       * @method getCall
       * @param {Array} arguments
       * @return {String} name of jsonrpc method
       */
      Method.prototype.getCall = function (args) {
        return typeof this.call === "function" ? this.call(args) : this.call;
      };
      /**
       * Should be used to extract callback from array of arguments. Modifies input param
       *
       * @method extractCallback
       * @param {Array} arguments
       * @return {Function|Null} callback, if exists
       */
      Method.prototype.extractCallback = function (args) {
        if (typeof args[args.length - 1] === "function") {
          return args.pop(); // modify the args array!
        }
      };
      /**
       * Should be called to check if the number of arguments is correct
       *
       * @method validateArgs
       * @param {Array} arguments
       * @throws {Error} if it is not
       */
      Method.prototype.validateArgs = function (args) {
        if (args.length !== this.params) {
          throw errors.InvalidNumberOfParams(args.length, this.params, this.name);
        }
      };
      /**
       * Should be called to format input args of method
       *
       * @method formatInput
       * @param {Array}
       * @return {Array}
       */
      Method.prototype.formatInput = function (args) {
        var _this = this;
        if (!this.inputFormatter) {
          return args;
        }
        return this.inputFormatter.map(function (formatter, index) {
          // bind this for defaultBlock, and defaultAccount
          return formatter ? formatter.call(_this, args[index]) : args[index];
        });
      };
      /**
       * Should be called to format output(result) of method
       *
       * @method formatOutput
       * @param {Object}
       * @return {Object}
       */
      Method.prototype.formatOutput = function (result) {
        var _this = this;
        if (Array.isArray(result)) {
          return result.map(function (res) {
            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;
          });
        } else {
          return this.outputFormatter && result ? this.outputFormatter(result) : result;
        }
      };
      /**
       * Should create payload from given input args
       *
       * @method toPayload
       * @param {Array} args
       * @return {Object}
       */
      Method.prototype.toPayload = function (args) {
        var call = this.getCall(args);
        var callback = this.extractCallback(args);
        var params = this.formatInput(args);
        this.validateArgs(params);
        var payload = {
          method: call,
          params: params,
          callback: callback,
        };
        if (this.transformPayload) {
          payload = this.transformPayload(payload);
        }
        return payload;
      };
      Method.prototype._confirmTransaction = function (defer, result, payload) {
        var method = this,
          promiseResolved = false,
          canUnsubscribe = true,
          timeoutCount = 0,
          confirmationCount = 0,
          intervalId = null,
          blockHeaderTimeoutId = null,
          lastBlock = null,
          receiptJSON = "",
          gasProvided = !!payload.params[0] && typeof payload.params[0] === "object" && payload.params[0].gas ? payload.params[0].gas : null,
          isContractDeployment =
            !!payload.params[0] && typeof payload.params[0] === "object" && payload.params[0].data && payload.params[0].from && !payload.params[0].to,
          hasBytecode = isContractDeployment && payload.params[0].data.length > 2;
        // add custom send Methods
        var _ethereumCalls = [
          new Method({
            name: "getBlockByNumber",
            call: "eth_getBlockByNumber",
            params: 2,
            inputFormatter: [
              formatters.inputBlockNumberFormatter,
              function (val) {
                return !!val;
              },
            ],
            outputFormatter: formatters.outputBlockFormatter,
          }),
          new Method({
            name: "getTransactionReceipt",
            call: "eth_getTransactionReceipt",
            params: 1,
            inputFormatter: [null],
            outputFormatter: formatters.outputTransactionReceiptFormatter,
          }),
          new Method({
            name: "getCode",
            call: "eth_getCode",
            params: 2,
            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],
          }),
          new Method({
            name: "getTransactionByHash",
            call: "eth_getTransactionByHash",
            params: 1,
            inputFormatter: [null],
            outputFormatter: formatters.outputTransactionFormatter,
          }),
          new Subscriptions({
            name: "subscribe",
            type: "eth",
            subscriptions: {
              newBlockHeaders: {
                subscriptionName: "newHeads",
                params: 0,
                outputFormatter: formatters.outputBlockFormatter,
              },
            },
          }),
        ];
        // attach methods to this._ethereumCall
        var _ethereumCall = {};
        _ethereumCalls.forEach((mthd) => {
          mthd.attachToObject(_ethereumCall);
          mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()
        });
        // fire "receipt" and confirmation events and resolve after
        var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {
          if (!err) {
            // create fake unsubscribe
            if (!sub) {
              sub = {
                unsubscribe: function () {
                  clearInterval(intervalId);
                  clearTimeout(blockHeaderTimeoutId);
                },
              };
            }
            // if we have a valid receipt we don't need to send a request
            return (
              (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))
                // catch error from requesting receipt
                .catch(function (err) {
                  sub.unsubscribe();
                  promiseResolved = true;
                  utils._fireError(
                    {
                      message: "Failed to check for transaction receipt:",
                      data: err,
                    },
                    defer.eventEmitter,
                    defer.reject
                  );
                })
                // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false
                .then(async function (receipt) {
                  if (!receipt || !receipt.blockHash) {
                    throw new Error("Receipt missing or blockHash null");
                  }
                  // apply extra formatters
                  if (method.extraFormatters && method.extraFormatters.receiptFormatter) {
                    receipt = method.extraFormatters.receiptFormatter(receipt);
                  }
                  // check if confirmation listener exists
                  if (defer.eventEmitter.listeners("confirmation").length > 0) {
                    var block;
                    // If there was an immediately retrieved receipt, it's already
                    // been confirmed by the direct call to checkConfirmation needed
                    // for parity instant-seal
                    if (existingReceipt === undefined || confirmationCount !== 0) {
                      // Get latest block to emit with confirmation
                      var latestBlock = await _ethereumCall.getBlockByNumber("latest");
                      var latestBlockHash = latestBlock ? latestBlock.hash : null;
                      if (isPolling) {
                        // Check if actually a new block is existing on polling
                        if (lastBlock) {
                          block = await _ethereumCall.getBlockByNumber(lastBlock.number + 1);
                          if (block) {
                            lastBlock = block;
                            defer.eventEmitter.emit("confirmation", confirmationCount, receipt, latestBlockHash);
                          }
                        } else {
                          block = await _ethereumCall.getBlockByNumber(receipt.blockNumber);
                          lastBlock = block;
                          defer.eventEmitter.emit("confirmation", confirmationCount, receipt, latestBlockHash);
                        }
                      } else {
                        defer.eventEmitter.emit("confirmation", confirmationCount, receipt, latestBlockHash);
                      }
                    }
                    if ((isPolling && block) || !isPolling) {
                      confirmationCount++;
                    }
                    canUnsubscribe = false;
                    if (confirmationCount === method.transactionConfirmationBlocks + 1) {
                      // add 1 so we account for conf 0
                      sub.unsubscribe();
                      defer.eventEmitter.removeAllListeners();
                    }
                  }
                  return receipt;
                })
                // CHECK for CONTRACT DEPLOYMENT
                .then(async function (receipt) {
                  if (isContractDeployment && !promiseResolved) {
                    if (!receipt.contractAddress) {
                      if (canUnsubscribe) {
                        sub.unsubscribe();
                        promiseResolved = true;
                      }
                      utils._fireError(errors.NoContractAddressFoundError(receipt), defer.eventEmitter, defer.reject, null, receipt);
                      return;
                    }
                    var code;
                    try {
                      code = await _ethereumCall.getCode(receipt.contractAddress);
                    } catch (err) {
                      // ignore;
                    }
                    if (!code) {
                      return;
                    }
                    // If deployment is status.true and there was a real
                    // bytecode string, assume it was successful.
                    var deploymentSuccess = receipt.status === true && hasBytecode;
                    if (deploymentSuccess || code.length > 2) {
                      defer.eventEmitter.emit("receipt", receipt);
                      // if contract, return instance instead of receipt
                      if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {
                        defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));
                      } else {
                        defer.resolve(receipt);
                      }
                      // need to remove listeners, as they aren't removed automatically when succesfull
                      if (canUnsubscribe) {
                        defer.eventEmitter.removeAllListeners();
                      }
                    } else {
                      utils._fireError(errors.ContractCodeNotStoredError(receipt), defer.eventEmitter, defer.reject, null, receipt);
                    }
                    if (canUnsubscribe) {
                      sub.unsubscribe();
                    }
                    promiseResolved = true;
                  }
                  return receipt;
                })
                // CHECK for normal tx check for receipt only
                .then(async function (receipt) {
                  if (!isContractDeployment && !promiseResolved) {
                    if (
                      !receipt.outOfGas &&
                      (!gasProvided || gasProvided !== receipt.gasUsed) &&
                      (receipt.status === true || receipt.status === "0x1" || typeof receipt.status === "undefined")
                    ) {
                      defer.eventEmitter.emit("receipt", receipt);
                      defer.resolve(receipt);
                      // need to remove listeners, as they aren't removed automatically when succesfull
                      if (canUnsubscribe) {
                        defer.eventEmitter.removeAllListeners();
                      }
                    } else {
                      receiptJSON = JSON.stringify(receipt, null, 2);
                      if (receipt.status === false || receipt.status === "0x0") {
                        try {
                          var revertMessage = null;
                          if (method.handleRevert && (method.call === "eth_sendTransaction" || method.call === "eth_sendRawTransaction")) {
                            var txReplayOptions = payload.params[0];
                            // If send was raw, fetch the transaction and reconstitute the
                            // original params so they can be replayed with `eth_call`
                            if (method.call === "eth_sendRawTransaction") {
                              var rawTransactionHex = payload.params[0];
                              var parsedTx = EthersTransactionUtils.parse(rawTransactionHex);
                              txReplayOptions = formatters.inputTransactionFormatter({
                                data: parsedTx.data,
                                to: parsedTx.to,
                                from: parsedTx.from,
                                gas: parsedTx.gasLimit.toHexString(),
                                gasPrice: parsedTx.gasPrice ? parsedTx.gasPrice.toHexString() : undefined,
                                value: parsedTx.value.toHexString(),
                              });
                            }
                            // Get revert reason string with eth_call
                            revertMessage = await method.getRevertReason(txReplayOptions, receipt.blockNumber);
                            if (revertMessage) {
                              // Only throw a revert error if a revert reason is existing
                              utils._fireError(
                                errors.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt),
                                defer.eventEmitter,
                                defer.reject,
                                null,
                                receipt
                              );
                            } else {
                              throw false; // Throw false and let the try/catch statement handle the error correctly after
                            }
                          } else {
                            throw false; // Throw false and let the try/catch statement handle the error correctly after
                          }
                        } catch (error) {
                          // Throw an normal revert error if no revert reason is given or the detection of it is disabled
                          utils._fireError(errors.TransactionRevertedWithoutReasonError(receipt), defer.eventEmitter, defer.reject, null, receipt);
                        }
                      } else {
                        // Throw OOG if status is not existing and provided gas and used gas are equal
                        utils._fireError(errors.TransactionOutOfGasError(receipt), defer.eventEmitter, defer.reject, null, receipt);
                      }
                    }
                    if (canUnsubscribe) {
                      sub.unsubscribe();
                    }
                    promiseResolved = true;
                  }
                })
                // time out the transaction if not mined after 50 blocks
                .catch(function () {
                  timeoutCount++;
                  // check to see if we are http polling
                  if (!!isPolling) {
                    // polling timeout is different than transactionBlockTimeout blocks since we are triggering every second
                    if (timeoutCount - 1 >= method.transactionPollingTimeout) {
                      sub.unsubscribe();
                      promiseResolved = true;
                      utils._fireError(
                        errors.TransactionError(
                          "Transaction was not mined within " +
                            method.transactionPollingTimeout +
                            " seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!"
                        ),
                        defer.eventEmitter,
                        defer.reject
                      );
                    }
                  } else {
                    if (timeoutCount - 1 >= method.transactionBlockTimeout) {
                      sub.unsubscribe();
                      promiseResolved = true;
                      utils._fireError(
                        errors.TransactionError(
                          "Transaction was not mined within " +
                            method.transactionBlockTimeout +
                            " blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!"
                        ),
                        defer.eventEmitter,
                        defer.reject
                      );
                    }
                  }
                })
            );
          } else {
            sub.unsubscribe();
            promiseResolved = true;
            utils._fireError(
              {
                message: "Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.",
                data: err,
              },
              defer.eventEmitter,
              defer.reject
            );
          }
        };
        // start watching for confirmation depending on the support features of the provider
        var startWatching = function (existingReceipt) {
          let blockHeaderArrived = false;
          const startInterval = () => {
            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), method.transactionPollingInterval);
          };
          // If provider do not support event subscription use polling
          if (!this.requestManager.provider.on) {
            return startInterval();
          }
          // Subscribe to new block headers to look for tx receipt
          _ethereumCall.subscribe("newBlockHeaders", function (err, blockHeader, sub) {
            blockHeaderArrived = true;
            if (err || !blockHeader) {
              // fall back to polling
              return startInterval();
            }
            checkConfirmation(existingReceipt, false, err, blockHeader, sub);
          });
          // Fallback to polling if tx receipt didn't arrived in "blockHeaderTimeout" [10 seconds]
          blockHeaderTimeoutId = setTimeout(() => {
            if (!blockHeaderArrived) {
              startInterval();
            }
          }, this.blockHeaderTimeout * 1000);
        }.bind(this);
        // first check if we already have a confirmed transaction
        _ethereumCall
          .getTransactionReceipt(result)
          .then(function (receipt) {
            if (receipt && receipt.blockHash) {
              if (defer.eventEmitter.listeners("confirmation").length > 0) {
                // We must keep on watching for new Blocks, if a confirmation listener is present
                startWatching(receipt);
              }
              checkConfirmation(receipt, false);
            } else if (!promiseResolved) {
              startWatching();
            }
          })
          .catch(function () {
            if (!promiseResolved) startWatching();
          });
      };
      var getWallet = function (from, accounts) {
        var wallet = null;
        // is index given
        if (typeof from === "number") {
          wallet = accounts.wallet[from];
          // is account given
        } else if (!!from && typeof from === "object" && from.address && from.privateKey) {
          wallet = from;
          // search in wallet for address
        } else {
          wallet = accounts.wallet[from.toLowerCase()];
        }
        return wallet;
      };
      Method.prototype.buildCall = function () {
        var method = this,
          isSendTx = method.call === "eth_sendTransaction" || method.call === "eth_sendRawTransaction", // || method.call === 'personal_sendTransaction'
          isCall = method.call === "eth_call";
        // actual send function
        var send = function () {
          let args = Array.prototype.slice.call(arguments);
          var defer = promiEvent(!isSendTx),
            payload = method.toPayload(args);
          method.hexFormat = false;
          if (method.call === "eth_getTransactionReceipt") {
            method.hexFormat = payload.params.length < args.length && args[args.length - 1] === "hex";
          }
          // CALLBACK function
          var sendTxCallback = function (err, result) {
            if (method.handleRevert && isCall && method.abiCoder) {
              var reasonData;
              // Ganache / Geth <= 1.9.13 return the reason data as a successful eth_call response
              // Geth >= 1.9.15 attaches the reason data to an error object.
              // Geth 1.9.14 is missing revert reason (https://github.com/ethereum/web3.js/issues/3520)
              if (!err && method.isRevertReasonString(result)) {
                reasonData = result.substring(10);
              } else if (err && err.data) {
                reasonData = err.data.substring(10);
              }
              if (reasonData) {
                var reason = method.abiCoder.decodeParameter("string", "0x" + reasonData);
                var signature = "Error(String)";
                utils._fireError(errors.RevertInstructionError(reason, signature), defer.eventEmitter, defer.reject, payload.callback, {
                  reason: reason,
                  signature: signature,
                });
                return;
              }
            }
            try {
              result = method.formatOutput(result);
            } catch (e) {
              err = e;
            }
            if (result instanceof Error) {
              err = result;
            }
            if (!err) {
              if (payload.callback) {
                payload.callback(null, result);
              }
            } else {
              if (err.error) {
                err = err.error;
              }
              return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);
            }
            // return PROMISE
            if (!isSendTx) {
              if (!err) {
                defer.resolve(result);
              }
              // return PROMIEVENT
            } else {
              defer.eventEmitter.emit("transactionHash", result);
              method._confirmTransaction(defer, result, payload);
            }
          };
          // SENDS the SIGNED SIGNATURE
          var sendSignedTx = function (sign) {
            var signedPayload = { ...payload, method: "eth_sendRawTransaction", params: [sign.rawTransaction] };
            method.requestManager.send(signedPayload, sendTxCallback);
          };
          var sendRequest = function (payload, method) {
            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {
              var wallet;
              // ETH_SENDTRANSACTION
              if (payload.method === "eth_sendTransaction") {
                var tx = payload.params[0];
                wallet = getWallet(!!tx && typeof tx === "object" ? tx.from : null, method.accounts);
                // If wallet was found, sign tx, and send using sendRawTransaction
                if (wallet && wallet.privateKey) {
                  var tx = JSON.parse(JSON.stringify(tx));
                  delete tx.from;
                  if (method.defaultChain && !tx.chain) {
                    tx.chain = method.defaultChain;
                  }
                  if (method.defaultHardfork && !tx.hardfork) {
                    tx.hardfork = method.defaultHardfork;
                  }
                  if (method.defaultCommon && !tx.common) {
                    tx.common = method.defaultCommon;
                  }
                  method.accounts
                    .signTransaction(tx, wallet.privateKey)
                    .then(sendSignedTx)
                    .catch(function (err) {
                      if (typeof defer.eventEmitter.listeners === "function" && defer.eventEmitter.listeners("error").length) {
                        try {
                          defer.eventEmitter.emit("error", err);
                        } catch (err) {
                          // Ignore userland error prevent it to bubble up within web3.
                        }
                        defer.eventEmitter.removeAllListeners();
                        defer.eventEmitter.catch(function () {});
                      }
                      defer.reject(err);
                    });
                  return;
                }
                // ETH_SIGN
              } else if (payload.method === "eth_sign") {
                var data = payload.params[1];
                wallet = getWallet(payload.params[0], method.accounts);
                // If wallet was found, sign tx, and send using sendRawTransaction
                if (wallet && wallet.privateKey) {
                  var sign = method.accounts.sign(data, wallet.privateKey);
                  if (payload.callback) {
                    payload.callback(null, sign.signature);
                  }
                  defer.resolve(sign.signature);
                  return;
                }
              }
            }
            return method.requestManager.send(payload, sendTxCallback);
          };
          // Send the actual transaction
          if (
            isSendTx &&
            !!payload.params[0] &&
            typeof payload.params[0] === "object" &&
            typeof payload.params[0].gasPrice === "undefined" &&
            (typeof payload.params[0].maxPriorityFeePerGas === "undefined" || typeof payload.params[0].maxFeePerGas === "undefined")
          ) {
            _handleTxPricing(method, payload.params[0]).then((txPricing) => {
              if (txPricing.gasPrice !== undefined) {
                payload.params[0].gasPrice = txPricing.gasPrice;
              } else if (txPricing.maxPriorityFeePerGas !== undefined && txPricing.maxFeePerGas !== undefined) {
                payload.params[0].maxPriorityFeePerGas = txPricing.maxPriorityFeePerGas;
                payload.params[0].maxFeePerGas = txPricing.maxFeePerGas;
              }
              if (isSendTx) {
                setTimeout(() => {
                  defer.eventEmitter.emit("sending", payload);
                }, 0);
              }
              sendRequest(payload, method);
            });
          } else {
            if (isSendTx) {
              setTimeout(() => {
                defer.eventEmitter.emit("sending", payload);
              }, 0);
            }
            sendRequest(payload, method);
          }
          if (isSendTx) {
            setTimeout(() => {
              defer.eventEmitter.emit("sent", payload);
            }, 0);
          }
          return defer.eventEmitter;
        };
        // necessary to attach things to the method
        send.method = method;
        // necessary for batch requests
        send.request = this.request.bind(this);
        return send;
      };
      function _handleTxPricing(method, tx) {
        return new Promise((resolve, reject) => {
          try {
            var getBlockByNumber = new Method({
              name: "getBlockByNumber",
              call: "eth_getBlockByNumber",
              params: 2,
              inputFormatter: [
                function (blockNumber) {
                  return blockNumber ? utils.toHex(blockNumber) : "latest";
                },
                function () {
                  return false;
                },
              ],
            }).createFunction(method.requestManager);
            var getGasPrice = new Method({
              name: "getGasPrice",
              call: "eth_gasPrice",
              params: 0,
            }).createFunction(method.requestManager);
            Promise.all([getBlockByNumber(), getGasPrice()]).then((responses) => {
              const [block, gasPrice] = responses;
              if ((tx.type === "0x2" || tx.type === undefined) && block && block.baseFeePerGas) {
                // The network supports EIP-1559
                // Taken from https://github.com/ethers-io/ethers.js/blob/ba6854bdd5a912fe873d5da494cb5c62c190adde/packages/abstract-provider/src.ts/index.ts#L230
                let maxPriorityFeePerGas, maxFeePerGas;
                if (tx.gasPrice) {
                  // Using legacy gasPrice property on an eip-1559 network,
                  // so use gasPrice as both fee properties
                  maxPriorityFeePerGas = tx.gasPrice;
                  maxFeePerGas = tx.gasPrice;
                  delete tx.gasPrice;
                } else {
                  maxPriorityFeePerGas = tx.maxPriorityFeePerGas || "0x9502F900"; // 2.5 Gwei
                  maxFeePerGas =
                    tx.maxFeePerGas || utils.toHex(utils.toBN(block.baseFeePerGas).mul(utils.toBN(2)).add(utils.toBN(maxPriorityFeePerGas)));
                }
                resolve({ maxFeePerGas, maxPriorityFeePerGas });
              } else {
                if (tx.maxPriorityFeePerGas || tx.maxFeePerGas) throw Error("Network doesn't support eip-1559");
                resolve({ gasPrice });
              }
            });
          } catch (error) {
            reject(error);
          }
        });
      }
      /**
       * Returns the revert reason string if existing or otherwise false.
       *
       * @method getRevertReason
       *
       * @param {Object} txOptions
       * @param {Number} blockNumber
       *
       * @returns {Promise<Boolean|String>}
       */
      Method.prototype.getRevertReason = function (txOptions, blockNumber) {
        var self = this;
        return new Promise(function (resolve, reject) {
          new Method({
            name: "call",
            call: "eth_call",
            params: 2,
            abiCoder: self.abiCoder,
            handleRevert: true,
          })
            .createFunction(self.requestManager)(txOptions, utils.numberToHex(blockNumber))
            .then(function () {
              resolve(false);
            })
            .catch(function (error) {
              if (error.reason) {
                resolve({
                  reason: error.reason,
                  signature: error.signature,
                });
              } else {
                reject(error);
              }
            });
        });
      };
      /**
       * Checks if the given hex string is a revert message from the EVM
       *
       * @method isRevertReasonString
       *
       * @param {String} data - Hex string prefixed with 0x
       *
       * @returns {Boolean}
       */
      Method.prototype.isRevertReasonString = function (data) {
        return typeof data === "string" && ((data.length - 2) / 2) % 32 === 4 && data.substring(0, 10) === "0x08c379a0";
      };
      /**
       * Should be called to create the pure JSONRPC request which can be used in a batch request
       *
       * @method request
       * @return {Object} jsonrpc request
       */
      Method.prototype.request = function () {
        var payload = this.toPayload(Array.prototype.slice.call(arguments));
        payload.format = this.formatOutput.bind(this);
        return payload;
      };
      module.exports = Method;

      /***/
    },

    /***/ 4017: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /*
 This file is part of web3.js.

 web3.js is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 web3.js is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
 */
      /**
       * @file index.js
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2016
       */

      var EventEmitter = __webpack_require__(6729);
      /**
       * This function generates a defer promise and adds eventEmitter functionality to it
       *
       * @method eventifiedPromise
       */
      var PromiEvent = function PromiEvent(justPromise) {
        var resolve,
          reject,
          eventEmitter = new Promise(function () {
            resolve = arguments[0];
            reject = arguments[1];
          });
        if (justPromise) {
          return {
            resolve: resolve,
            reject: reject,
            eventEmitter: eventEmitter,
          };
        }
        // get eventEmitter
        var emitter = new EventEmitter();
        // add eventEmitter to the promise
        eventEmitter._events = emitter._events;
        eventEmitter.emit = emitter.emit;
        eventEmitter.on = emitter.on;
        eventEmitter.once = emitter.once;
        eventEmitter.off = emitter.off;
        eventEmitter.listeners = emitter.listeners;
        eventEmitter.addListener = emitter.addListener;
        eventEmitter.removeListener = emitter.removeListener;
        eventEmitter.removeAllListeners = emitter.removeAllListeners;
        return {
          resolve: resolve,
          reject: reject,
          eventEmitter: eventEmitter,
        };
      };
      PromiEvent.resolve = function (value) {
        var promise = PromiEvent(true);
        promise.resolve(value);
        return promise.eventEmitter;
      };
      module.exports = PromiEvent;

      /***/
    },

    /***/ 8991: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /**
       * @file batch.js
       * @author Marek Kotewicz <marek@ethdev.com>
       * @date 2015
       */

      var Jsonrpc = __webpack_require__(8911);
      var errors = __webpack_require__(4390).errors;
      var Batch = function (requestManager) {
        this.requestManager = requestManager;
        this.requests = [];
      };
      /**
       * Should be called to add create new request to batch request
       *
       * @method add
       * @param {Object} jsonrpc requet object
       */
      Batch.prototype.add = function (request) {
        this.requests.push(request);
      };
      /**
       * Should be called to execute batch request
       *
       * @method execute
       */
      Batch.prototype.execute = function () {
        var requests = this.requests;
        var sortResponses = this._sortResponses.bind(this);
        this.requestManager.sendBatch(requests, function (err, results) {
          results = sortResponses(results);
          requests
            .map(function (request, index) {
              return results[index] || {};
            })
            .forEach(function (result, index) {
              if (requests[index].callback) {
                if (result && result.error) {
                  return requests[index].callback(errors.ErrorResponse(result));
                }
                if (!Jsonrpc.isValidResponse(result)) {
                  return requests[index].callback(errors.InvalidResponse(result));
                }
                try {
                  requests[index].callback(null, requests[index].format ? requests[index].format(result.result) : result.result);
                } catch (err) {
                  requests[index].callback(err);
                }
              }
            });
        });
      };
      // Sort responses
      Batch.prototype._sortResponses = function (responses) {
        return (responses || []).sort((a, b) => a.id - b.id);
      };
      module.exports = Batch;

      /***/
    },

    /***/ 2319: /***/ (module) => {
      "use strict";
      /*
 This file is part of web3.js.

 web3.js is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 web3.js is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
 */
      /**
       * @file givenProvider.js
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2017
       */

      var givenProvider = null;
      // ADD GIVEN PROVIDER
      /* jshint ignore:start */
      var global = typeof globalThis === "object" ? globalThis : undefined;
      if (!global) {
        try {
          global = Function("return this")();
        } catch (e) {
          global = self;
        }
      }
      // EIP-1193: window.ethereum
      if (typeof global.ethereum !== "undefined") {
        givenProvider = global.ethereum;
        // Legacy web3.currentProvider
      } else if (typeof global.web3 !== "undefined" && global.web3.currentProvider) {
        if (global.web3.currentProvider.sendAsync) {
          global.web3.currentProvider.send = global.web3.currentProvider.sendAsync;
          delete global.web3.currentProvider.sendAsync;
        }
        // if connection is 'ipcProviderWrapper', add subscription support
        if (
          !global.web3.currentProvider.on &&
          global.web3.currentProvider.connection &&
          global.web3.currentProvider.connection.constructor.name === "ipcProviderWrapper"
        ) {
          global.web3.currentProvider.on = function (type, callback) {
            if (typeof callback !== "function") throw new Error("The second parameter callback must be a function.");
            switch (type) {
              case "data":
                this.connection.on("data", function (data) {
                  var result = "";
                  data = data.toString();
                  try {
                    result = JSON.parse(data);
                  } catch (e) {
                    return callback(new Error("Couldn't parse response data" + data));
                  }
                  // notification
                  if (!result.id && result.method.indexOf("_subscription") !== -1) {
                    callback(null, result);
                  }
                });
                break;
              default:
                this.connection.on(type, callback);
                break;
            }
          };
        }
        givenProvider = global.web3.currentProvider;
      }
      /* jshint ignore:end */
      module.exports = givenProvider;

      /***/
    },

    /***/ 4983: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /*
    This file is part of web3.js.
    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /**
       * @file index.js
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2017
       */

      const { callbackify } = __webpack_require__(9539);
      var errors = __webpack_require__(4390).errors;
      var Jsonrpc = __webpack_require__(8911);
      var BatchManager = __webpack_require__(8991);
      var givenProvider = __webpack_require__(2319);
      /**
       * It's responsible for passing messages to providers
       * It's also responsible for polling the ethereum node for incoming messages
       * Default poll timeout is 1 second
       * Singleton
       *
       * @param {string|Object}provider
       * @param {Net.Socket} net
       *
       * @constructor
       */
      var RequestManager = function RequestManager(provider, net) {
        this.provider = null;
        this.providers = RequestManager.providers;
        this.setProvider(provider, net);
        this.subscriptions = new Map();
      };
      RequestManager.givenProvider = givenProvider;
      RequestManager.providers = {
        WebsocketProvider: __webpack_require__(9556),
        HttpProvider: __webpack_require__(4351),
        IpcProvider: __webpack_require__(3097),
      };
      /**
       * Should be used to set provider of request manager
       *
       * @method setProvider
       *
       * @param {Object} provider
       * @param {net.Socket} net
       *
       * @returns void
       */
      RequestManager.prototype.setProvider = function (provider, net) {
        var _this = this;
        // autodetect provider
        if (provider && typeof provider === "string" && this.providers) {
          // HTTP
          if (/^http(s)?:\/\//i.test(provider)) {
            provider = new this.providers.HttpProvider(provider);
            // WS
          } else if (/^ws(s)?:\/\//i.test(provider)) {
            provider = new this.providers.WebsocketProvider(provider);
            // IPC
          } else if (provider && typeof net === "object" && typeof net.connect === "function") {
            provider = new this.providers.IpcProvider(provider, net);
          } else if (provider) {
            throw new Error("Can't autodetect provider for \"" + provider + '"');
          }
        }
        // reset the old one before changing, if still connected
        if (this.provider && this.provider.connected) this.clearSubscriptions();
        this.provider = provider || null;
        // listen to incoming notifications
        if (this.provider && this.provider.on) {
          if (typeof provider.request === "function") {
            // EIP-1193 provider
            this.provider.on("message", function (payload) {
              if (payload && payload.type === "eth_subscription" && payload.data) {
                const data = payload.data;
                if (data.subscription && _this.subscriptions.has(data.subscription)) {
                  _this.subscriptions.get(data.subscription).callback(null, data.result);
                }
              }
            });
          } else {
            // legacy provider subscription event
            this.provider.on("data", function data(result, deprecatedResult) {
              result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler
              // if result is a subscription, call callback for that subscription
              if (result.method && result.params && result.params.subscription && _this.subscriptions.has(result.params.subscription)) {
                _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);
              }
            });
          }
          // resubscribe if the provider has reconnected
          this.provider.on("connect", function connect() {
            _this.subscriptions.forEach(function (subscription) {
              subscription.subscription.resubscribe();
            });
          });
          // notify all subscriptions about the error condition
          this.provider.on("error", function error(error) {
            _this.subscriptions.forEach(function (subscription) {
              subscription.callback(error);
            });
          });
          // notify all subscriptions about bad close conditions
          const disconnect = function disconnect(event) {
            if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)) {
              _this.subscriptions.forEach(function (subscription) {
                subscription.callback(errors.ConnectionCloseError(event));
                _this.subscriptions.delete(subscription.subscription.id);
              });
              if (_this.provider && _this.provider.emit) {
                _this.provider.emit("error", errors.ConnectionCloseError(event));
              }
            }
            if (_this.provider && _this.provider.emit) {
              _this.provider.emit("end", event);
            }
          };
          this.provider.on("disconnect", disconnect);
          // TODO add end, timeout??
        }
      };
      /**
       * Asynchronously send request to provider.
       * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).
       * If `request` is not available, falls back to `sendAsync` and `send` respectively.
       * @method send
       * @param {Object} data
       * @param {Function} callback
       */
      RequestManager.prototype.send = function (data, callback) {
        callback = callback || function () {};
        if (!this.provider) {
          return callback(errors.InvalidProvider());
        }
        const { method, params } = data;
        const jsonrpcPayload = Jsonrpc.toPayload(method, params);
        const jsonrpcResultCallback = this._jsonrpcResultCallback(callback, jsonrpcPayload);
        if (this.provider.request) {
          const callbackRequest = callbackify(this.provider.request.bind(this.provider));
          const requestArgs = { method, params };
          callbackRequest(requestArgs, callback);
        } else if (this.provider.sendAsync) {
          this.provider.sendAsync(jsonrpcPayload, jsonrpcResultCallback);
        } else if (this.provider.send) {
          this.provider.send(jsonrpcPayload, jsonrpcResultCallback);
        } else {
          throw new Error("Provider does not have a request or send method to use.");
        }
      };
      /**
       * Asynchronously send batch request.
       * Only works if provider supports batch methods through `sendAsync` or `send`.
       * @method sendBatch
       * @param {Array} data - array of payload objects
       * @param {Function} callback
       */
      RequestManager.prototype.sendBatch = function (data, callback) {
        if (!this.provider) {
          return callback(errors.InvalidProvider());
        }
        var payload = Jsonrpc.toBatchPayload(data);
        this.provider[this.provider.sendAsync ? "sendAsync" : "send"](payload, function (err, results) {
          if (err) {
            return callback(err);
          }
          if (!Array.isArray(results)) {
            return callback(errors.InvalidResponse(results));
          }
          callback(null, results);
        });
      };
      /**
       * Waits for notifications
       *
       * @method addSubscription
       * @param {Subscription} subscription         the subscription
       * @param {String} type         the subscription namespace (eth, personal, etc)
       * @param {Function} callback   the callback to call for incoming notifications
       */
      RequestManager.prototype.addSubscription = function (subscription, callback) {
        if (this.provider.on) {
          this.subscriptions.set(subscription.id, {
            callback: callback,
            subscription: subscription,
          });
        } else {
          throw new Error("The provider doesn't support subscriptions: " + this.provider.constructor.name);
        }
      };
      /**
       * Waits for notifications
       *
       * @method removeSubscription
       * @param {String} id           the subscription id
       * @param {Function} callback   fired once the subscription is removed
       */
      RequestManager.prototype.removeSubscription = function (id, callback) {
        if (this.subscriptions.has(id)) {
          var type = this.subscriptions.get(id).subscription.options.type;
          // remove subscription first to avoid reentry
          this.subscriptions.delete(id);
          // then, try to actually unsubscribe
          this.send(
            {
              method: type + "_unsubscribe",
              params: [id],
            },
            callback
          );
          return;
        }
        if (typeof callback === "function") {
          // call the callback if the subscription was already removed
          callback(null);
        }
      };
      /**
       * Should be called to reset the subscriptions
       *
       * @method reset
       *
       * @returns {boolean}
       */
      RequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {
        try {
          var _this = this;
          // uninstall all subscriptions
          if (this.subscriptions.size > 0) {
            this.subscriptions.forEach(function (value, id) {
              if (!keepIsSyncing || value.name !== "syncing") _this.removeSubscription(id);
            });
          }
          //  reset notification callbacks etc.
          if (this.provider.reset) this.provider.reset();
          return true;
        } catch (e) {
          throw new Error(`Error while clearing subscriptions: ${e}`);
        }
      };
      /**
       * Evaluates WS close event
       *
       * @method _isCleanClose
       *
       * @param {CloseEvent | boolean} event WS close event or exception flag
       *
       * @returns {boolean}
       */
      RequestManager.prototype._isCleanCloseEvent = function (event) {
        return typeof event === "object" && ([1000].includes(event.code) || event.wasClean === true);
      };
      /**
       * Detects Ipc close error. The node.net module emits ('close', isException)
       *
       * @method _isIpcCloseError
       *
       * @param {CloseEvent | boolean} event WS close event or exception flag
       *
       * @returns {boolean}
       */
      RequestManager.prototype._isIpcCloseError = function (event) {
        return typeof event === "boolean" && event;
      };
      /**
       * The jsonrpc result callback for RequestManager.send
       *
       * @method _jsonrpcResultCallback
       *
       * @param {Function} callback the callback to use
       * @param {Object} payload the jsonrpc payload
       *
       * @returns {Function} return callback of form (err, result)
       *
       */
      RequestManager.prototype._jsonrpcResultCallback = function (callback, payload) {
        return function (err, result) {
          if (result && result.id && payload.id !== result.id) {
            return callback(new Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));
          }
          if (err) {
            return callback(err);
          }
          if (result && result.error) {
            return callback(errors.ErrorResponse(result));
          }
          if (!Jsonrpc.isValidResponse(result)) {
            return callback(errors.InvalidResponse(result));
          }
          callback(null, result.result);
        };
      };
      module.exports = {
        Manager: RequestManager,
        BatchManager: BatchManager,
      };

      /***/
    },

    /***/ 8911: /***/ (module) => {
      "use strict";
      /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /** @file jsonrpc.js
       * @authors:
       *   Fabian Vogelsteller <fabian@ethereum.org>
       *   Marek Kotewicz <marek@ethdev.com>
       *   Aaron Kumavis <aaron@kumavis.me>
       * @date 2015
       */

      // Initialize Jsonrpc as a simple object with utility functions.
      var Jsonrpc = {
        // This is the starting counter for the Jsonrpc.id.
        // Pick a random number between 0 and the maximum safe integer
        messageId: Math.floor(Math.random() * Number.MAX_SAFE_INTEGER),
      };
      /**
       * Should be called to valid json create payload object
       *
       * @method toPayload
       * @param {Function} method of jsonrpc call, required
       * @param {Array} params, an array of method params, optional
       * @returns {Object} valid jsonrpc payload object
       */
      Jsonrpc.toPayload = function (method, params) {
        if (!method) {
          throw new Error('JSONRPC method should be specified for params: "' + JSON.stringify(params) + '"!');
        }
        if (Jsonrpc.messageId === Number.MAX_SAFE_INTEGER) {
          // if the maximum safe integer has been reached, restart from a random number
          Jsonrpc.messageId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
        } else {
          // advance message ID
          Jsonrpc.messageId++;
        }
        return {
          jsonrpc: "2.0",
          id: Jsonrpc.messageId,
          method: method,
          params: params || [],
        };
      };
      /**
       * Should be called to check if jsonrpc response is valid
       *
       * @method isValidResponse
       * @param {Object}
       * @returns {Boolean} true if response is valid, otherwise false
       */
      Jsonrpc.isValidResponse = function (response) {
        return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);
        function validateSingleMessage(message) {
          return (
            !!message &&
            !message.error &&
            message.jsonrpc === "2.0" &&
            (typeof message.id === "number" || typeof message.id === "string") &&
            message.result !== undefined
          ); // only undefined is not valid json object
        }
      };
      /**
       * Should be called to create batch payload object
       *
       * @method toBatchPayload
       * @param {Array} messages, an array of objects with method (required) and params (optional) fields
       * @returns {Array} batch payload
       */
      Jsonrpc.toBatchPayload = function (messages) {
        return messages.map(function (message) {
          return Jsonrpc.toPayload(message.method, message.params);
        });
      };
      module.exports = Jsonrpc;

      /***/
    },

    /***/ 6602: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /**
       * @file index.js
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2017
       */

      var Subscription = __webpack_require__(5826);
      var Subscriptions = function Subscriptions(options) {
        this.name = options.name;
        this.type = options.type;
        this.subscriptions = options.subscriptions || {};
        this.requestManager = null;
      };
      Subscriptions.prototype.setRequestManager = function (rm) {
        this.requestManager = rm;
      };
      Subscriptions.prototype.attachToObject = function (obj) {
        var func = this.buildCall();
        var name = this.name.split(".");
        if (name.length > 1) {
          obj[name[0]] = obj[name[0]] || {};
          obj[name[0]][name[1]] = func;
        } else {
          obj[name[0]] = func;
        }
      };
      Subscriptions.prototype.buildCall = function () {
        var _this = this;
        return function () {
          if (!_this.subscriptions[arguments[0]]) {
            console.warn("Subscription " + JSON.stringify(arguments[0]) + " doesn't exist. Subscribing anyway.");
          }
          var subscription = new Subscription({
            subscription: _this.subscriptions[arguments[0]] || {},
            requestManager: _this.requestManager,
            type: _this.type,
          });
          return subscription.subscribe.apply(subscription, arguments);
        };
      };
      module.exports = {
        subscriptions: Subscriptions,
        subscription: Subscription,
      };

      /***/
    },

    /***/ 5826: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /**
       * @file subscription.js
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2017
       */

      var errors = __webpack_require__(4390).errors;
      var EventEmitter = __webpack_require__(6729);
      var formatters = __webpack_require__(4390).formatters;
      function identity(value) {
        return value;
      }
      function Subscription(options) {
        EventEmitter.call(this);
        this.id = null;
        this.callback = identity;
        this.arguments = null;
        this.lastBlock = null; // "from" block tracker for backfilling events on reconnection
        this.options = {
          subscription: options.subscription,
          type: options.type,
          requestManager: options.requestManager,
        };
      }
      // INHERIT
      Subscription.prototype = Object.create(EventEmitter.prototype);
      Subscription.prototype.constructor = Subscription;
      /**
       * Should be used to extract callback from array of arguments. Modifies input param
       *
       * @method extractCallback
       * @param {Array} arguments
       * @return {Function|Null} callback, if exists
       */
      Subscription.prototype._extractCallback = function (args) {
        if (typeof args[args.length - 1] === "function") {
          return args.pop(); // modify the args array!
        }
      };
      /**
       * Should be called to check if the number of arguments is correct
       *
       * @method validateArgs
       * @param {Array} arguments
       * @throws {Error} if it is not
       */
      Subscription.prototype._validateArgs = function (args) {
        var subscription = this.options.subscription;
        if (!subscription) subscription = {};
        if (!subscription.params) subscription.params = 0;
        if (args.length !== subscription.params) {
          throw errors.InvalidNumberOfParams(args.length, subscription.params, subscription.subscriptionName);
        }
      };
      /**
       * Should be called to format input args of method
       *
       * @method formatInput
       * @param {Array}
       * @return {Array}
       */
      Subscription.prototype._formatInput = function (args) {
        var subscription = this.options.subscription;
        if (!subscription) {
          return args;
        }
        if (!subscription.inputFormatter) {
          return args;
        }
        var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {
          return formatter ? formatter(args[index]) : args[index];
        });
        return formattedArgs;
      };
      /**
       * Should be called to format output(result) of method
       *
       * @method formatOutput
       * @param result {Object}
       * @return {Object}
       */
      Subscription.prototype._formatOutput = function (result) {
        var subscription = this.options.subscription;
        return subscription && subscription.outputFormatter && result ? subscription.outputFormatter(result) : result;
      };
      /**
       * Should create payload from given input args
       *
       * @method toPayload
       * @param {Array} args
       * @return {Object}
       */
      Subscription.prototype._toPayload = function (args) {
        var params = [];
        this.callback = this._extractCallback(args) || identity;
        if (!this.subscriptionMethod) {
          this.subscriptionMethod = args.shift();
          // replace subscription with given name
          if (this.options.subscription.subscriptionName) {
            this.subscriptionMethod = this.options.subscription.subscriptionName;
          }
        }
        if (!this.arguments) {
          this.arguments = this._formatInput(args);
          this._validateArgs(this.arguments);
          args = []; // make empty after validation
        }
        // re-add subscriptionName
        params.push(this.subscriptionMethod);
        params = params.concat(this.arguments);
        if (args.length) {
          throw new Error("Only a callback is allowed as parameter on an already instantiated subscription.");
        }
        return {
          method: this.options.type + "_subscribe",
          params: params,
        };
      };
      /**
       * Unsubscribes and clears callbacks
       *
       * @method unsubscribe
       * @return {Object}
       */
      Subscription.prototype.unsubscribe = function (callback) {
        this.options.requestManager.removeSubscription(this.id, callback);
        this.id = null;
        this.lastBlock = null;
        this.removeAllListeners();
      };
      /**
       * Subscribes and watches for changes
       *
       * @method subscribe
       * @param {String} subscription the subscription
       * @param {Object} options the options object with address topics and fromBlock
       * @return {Object}
       */
      Subscription.prototype.subscribe = function () {
        var _this = this;
        var args = Array.prototype.slice.call(arguments);
        var payload = this._toPayload(args);
        if (!payload) {
          return this;
        }
        // throw error, if provider is not set
        if (!this.options.requestManager.provider) {
          setTimeout(function () {
            var err1 = new Error("No provider set.");
            _this.callback(err1, null, _this);
            _this.emit("error", err1);
          }, 0);
          return this;
        }
        // throw error, if provider doesnt support subscriptions
        if (!this.options.requestManager.provider.on) {
          setTimeout(function () {
            var err2 = new Error("The current provider doesn't support subscriptions: " + _this.options.requestManager.provider.constructor.name);
            _this.callback(err2, null, _this);
            _this.emit("error", err2);
          }, 0);
          return this;
        }
        // Re-subscription only: continue fetching from the last block we received.
        // a dropped connection may have resulted in gaps in the logs...
        if (this.lastBlock && !!this.options.params && typeof this.options.params === "object") {
          payload.params[1] = this.options.params;
          payload.params[1].fromBlock = formatters.inputBlockNumberFormatter(this.lastBlock + 1);
        }
        // if id is there unsubscribe first
        if (this.id) {
          this.unsubscribe();
        }
        // store the params in the options object
        this.options.params = payload.params[1];
        // get past logs, if fromBlock is available
        if (
          payload.params[0] === "logs" &&
          !!payload.params[1] &&
          typeof payload.params[1] === "object" &&
          payload.params[1].hasOwnProperty("fromBlock") &&
          isFinite(payload.params[1].fromBlock)
        ) {
          // send the subscription request
          // copy the params to avoid race-condition with deletion below this block
          var blockParams = Object.assign({}, payload.params[1]);
          this.options.requestManager.send(
            {
              method: "eth_getLogs",
              params: [blockParams],
            },
            function (err, logs) {
              if (!err) {
                logs.forEach(function (log) {
                  var output = _this._formatOutput(log);
                  _this.callback(null, output, _this);
                  _this.emit("data", output);
                });
                // TODO subscribe here? after the past logs?
              } else {
                setTimeout(function () {
                  _this.callback(err, null, _this);
                  _this.emit("error", err);
                }, 0);
              }
            }
          );
        }
        // create subscription
        // TODO move to separate function? so that past logs can go first?
        if (typeof payload.params[1] === "object") delete payload.params[1].fromBlock;
        this.options.requestManager.send(payload, function (err, result) {
          if (!err && result) {
            _this.id = result;
            _this.method = payload.params[0];
            // call callback on notifications
            _this.options.requestManager.addSubscription(_this, function (error, result) {
              if (!error) {
                if (!Array.isArray(result)) {
                  result = [result];
                }
                result.forEach(function (resultItem) {
                  var output = _this._formatOutput(resultItem);
                  // Track current block (for gaps introduced by dropped connections)
                  _this.lastBlock = !!output && typeof output === "object" ? output.blockNumber : null;
                  if (typeof _this.options.subscription.subscriptionHandler === "function") {
                    return _this.options.subscription.subscriptionHandler.call(_this, output);
                  } else {
                    _this.emit("data", output);
                  }
                  // call the callback, last so that unsubscribe there won't affect the emit above
                  _this.callback(null, output, _this);
                });
              } else {
                _this.callback(error, false, _this);
                _this.emit("error", error);
              }
            });
            _this.emit("connected", result);
          } else {
            setTimeout(function () {
              _this.callback(err, false, _this);
              _this.emit("error", err);
            }, 0);
          }
        });
        // return an object to cancel the subscription
        return this;
      };
      /**
       * Resubscribe
       *
       * @method resubscribe
       *
       * @returns {void}
       */
      Subscription.prototype.resubscribe = function () {
        this.options.requestManager.removeSubscription(this.id); // unsubscribe
        this.id = null;
        this.subscribe(this.callback);
      };
      module.exports = Subscription;

      /***/
    },

    /***/ 6016: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /*
 This file is part of web3.js.

 web3.js is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 web3.js is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
 */
      /**
       * @file extend.js
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2017
       */

      var formatters = __webpack_require__(4390).formatters;
      var Method = __webpack_require__(3952);
      var utils = __webpack_require__(6752);
      var extend = function (pckg) {
        /* jshint maxcomplexity:5 */
        var ex = function (extension) {
          var extendedObject;
          if (extension.property) {
            if (!pckg[extension.property]) {
              pckg[extension.property] = {};
            }
            extendedObject = pckg[extension.property];
          } else {
            extendedObject = pckg;
          }
          if (extension.methods) {
            extension.methods.forEach(function (method) {
              if (!(method instanceof Method)) {
                method = new Method(method);
              }
              method.attachToObject(extendedObject);
              method.setRequestManager(pckg._requestManager);
            });
          }
          return pckg;
        };
        ex.formatters = formatters;
        ex.utils = utils;
        ex.Method = Method;
        return ex;
      };
      module.exports = extend;

      /***/
    },

    /***/ 2928: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /**
       * @file index.js
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2017
       */
      const requestManager = __webpack_require__(4983);
      const extend = __webpack_require__(6016);
      const packageInit = (pkg, args) => {
        args = Array.prototype.slice.call(args);
        if (!pkg) {
          throw new Error('You need to instantiate using the "new" keyword.');
        }
        // make property of pkg._provider, which can properly set providers
        Object.defineProperty(pkg, "currentProvider", {
          get: () => {
            return pkg._provider;
          },
          set: (value) => {
            return pkg.setProvider(value);
          },
          enumerable: true,
          configurable: true,
        });
        // inherit from parent package or create a new RequestManager
        if (args[0] && args[0]._requestManager) {
          pkg._requestManager = args[0]._requestManager;
        } else {
          pkg._requestManager = new requestManager.Manager(args[0], args[1]);
        }
        // add givenProvider
        pkg.givenProvider = requestManager.Manager.givenProvider;
        pkg.providers = requestManager.Manager.providers;
        pkg._provider = pkg._requestManager.provider;
        // add SETPROVIDER function (don't overwrite if already existing)
        if (!pkg.setProvider) {
          pkg.setProvider = (provider, net) => {
            pkg._requestManager.setProvider(provider, net);
            pkg._provider = pkg._requestManager.provider;
            return true;
          };
        }
        pkg.setRequestManager = (manager) => {
          pkg._requestManager = manager;
          pkg._provider = manager.provider;
        };
        // attach batch request creation
        pkg.BatchRequest = requestManager.BatchManager.bind(null, pkg._requestManager);
        // attach extend function
        pkg.extend = extend(pkg);
      };
      const addProviders = (pkg) => {
        pkg.givenProvider = requestManager.Manager.givenProvider;
        pkg.providers = requestManager.Manager.providers;
      };
      module.exports = {
        packageInit,
        addProviders,
      };

      /***/
    },

    /***/ 3338: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      /*
 This file is part of web3.js.

 web3.js is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 web3.js is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
 */
      /**
       * @file index.js
       * @author Marek Kotewicz <marek@parity.io>
       * @author Fabian Vogelsteller <fabian@frozeman.de>
       * @date 2018
       */
      var Buffer = __webpack_require__(8764).Buffer;
      var utils = __webpack_require__(6752);
      var EthersAbiCoder = __webpack_require__(8349) /* .AbiCoder */.RQ;
      var ParamType = __webpack_require__(8349) /* .ParamType */._R;
      var ethersAbiCoder = new EthersAbiCoder(function (type, value) {
        if (type.match(/^u?int/) && !Array.isArray(value) && (!(!!value && typeof value === "object") || value.constructor.name !== "BN")) {
          return value.toString();
        }
        return value;
      });
      // result method
      function Result() {}
      /**
       * ABICoder prototype should be used to encode/decode solidity params of any type
       */
      var ABICoder = function () {};
      /**
       * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
       *
       * @method encodeFunctionSignature
       * @param {String|Object} functionName
       * @return {String} encoded function name
       */
      ABICoder.prototype.encodeFunctionSignature = function (functionName) {
        if (typeof functionName === "function" || (typeof functionName === "object" && functionName)) {
          functionName = utils._jsonInterfaceMethodToString(functionName);
        }
        return utils.sha3(functionName).slice(0, 10);
      };
      /**
       * Encodes the function name to its ABI representation, which are the first 4 bytes of the sha3 of the function name including  types.
       *
       * @method encodeEventSignature
       * @param {String|Object} functionName
       * @return {String} encoded function name
       */
      ABICoder.prototype.encodeEventSignature = function (functionName) {
        if (typeof functionName === "function" || (typeof functionName === "object" && functionName)) {
          functionName = utils._jsonInterfaceMethodToString(functionName);
        }
        return utils.sha3(functionName);
      };
      /**
       * Should be used to encode plain param
       *
       * @method encodeParameter
       *
       * @param {String|Object} type
       * @param {any} param
       *
       * @return {String} encoded plain param
       */
      ABICoder.prototype.encodeParameter = function (type, param) {
        return this.encodeParameters([type], [param]);
      };
      /**
       * Should be used to encode list of params
       *
       * @method encodeParameters
       *
       * @param {Array<String|Object>} types
       * @param {Array<any>} params
       *
       * @return {String} encoded list of params
       */
      ABICoder.prototype.encodeParameters = function (types, params) {
        var self = this;
        types = self.mapTypes(types);
        params = params.map(function (param, index) {
          let type = types[index];
          if (typeof type === "object" && type.type) {
            // We may get a named type of shape {name, type}
            type = type.type;
          }
          param = self.formatParam(type, param);
          // Format params for tuples
          if (typeof type === "string" && type.includes("tuple")) {
            const coder = ethersAbiCoder._getCoder(ParamType.from(type));
            const modifyParams = (coder, param) => {
              if (coder.name === "array") {
                if (!coder.type.match(/\[(\d+)\]/)) {
                  return param.map((p) => modifyParams(ethersAbiCoder._getCoder(ParamType.from(coder.type.replace("[]", ""))), p));
                }
                const arrayLength = parseInt(coder.type.match(/\[(\d+)\]/)[1]);
                if (param.length !== arrayLength) {
                  throw new Error("Array length does not matches with the given input");
                }
                return param.map((p) => modifyParams(ethersAbiCoder._getCoder(ParamType.from(coder.type.replace(/\[\d+\]/, ""))), p));
              }
              coder.coders.forEach((c, i) => {
                if (c.name === "tuple") {
                  modifyParams(c, param[i]);
                } else {
                  param[i] = self.formatParam(c.name, param[i]);
                }
              });
            };
            modifyParams(coder, param);
          }
          return param;
        });
        return ethersAbiCoder.encode(types, params);
      };
      /**
       * Map types if simplified format is used
       *
       * @method mapTypes
       * @param {Array} types
       * @return {Array}
       */
      ABICoder.prototype.mapTypes = function (types) {
        var self = this;
        var mappedTypes = [];
        types.forEach(function (type) {
          // Remap `function` type params to bytes24 since Ethers does not
          // recognize former type. Solidity docs say `Function` is a bytes24
          // encoding the contract address followed by the function selector hash.
          if (typeof type === "object" && type.type === "function") {
            type = Object.assign({}, type, { type: "bytes24" });
          }
          if (self.isSimplifiedStructFormat(type)) {
            var structName = Object.keys(type)[0];
            mappedTypes.push(
              Object.assign(self.mapStructNameAndType(structName), {
                components: self.mapStructToCoderFormat(type[structName]),
              })
            );
            return;
          }
          mappedTypes.push(type);
        });
        return mappedTypes;
      };
      /**
       * Check if type is simplified struct format
       *
       * @method isSimplifiedStructFormat
       * @param {string | Object} type
       * @returns {boolean}
       */
      ABICoder.prototype.isSimplifiedStructFormat = function (type) {
        return typeof type === "object" && typeof type.components === "undefined" && typeof type.name === "undefined";
      };
      /**
       * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used
       *
       * @method mapStructNameAndType
       * @param {string} structName
       * @return {{type: string, name: *}}
       */
      ABICoder.prototype.mapStructNameAndType = function (structName) {
        var type = "tuple";
        if (structName.indexOf("[]") > -1) {
          type = "tuple[]";
          structName = structName.slice(0, -2);
        }
        return { type: type, name: structName };
      };
      /**
       * Maps the simplified format in to the expected format of the ABICoder
       *
       * @method mapStructToCoderFormat
       * @param {Object} struct
       * @return {Array}
       */
      ABICoder.prototype.mapStructToCoderFormat = function (struct) {
        var self = this;
        var components = [];
        Object.keys(struct).forEach(function (key) {
          if (typeof struct[key] === "object") {
            components.push(
              Object.assign(self.mapStructNameAndType(key), {
                components: self.mapStructToCoderFormat(struct[key]),
              })
            );
            return;
          }
          components.push({
            name: key,
            type: struct[key],
          });
        });
        return components;
      };
      /**
       * Handle some formatting of params for backwards compatability with Ethers V4
       *
       * @method formatParam
       * @param {String} - type
       * @param {any} - param
       * @return {any} - The formatted param
       */
      ABICoder.prototype.formatParam = function (type, param) {
        const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
        const paramTypeBytesArray = new RegExp(/^bytes([0-9]*)\[\]$/);
        const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
        const paramTypeNumberArray = new RegExp(/^(u?int)([0-9]*)\[\]$/);
        // Format BN to string
        if (utils.isBN(param) || utils.isBigNumber(param)) {
          return param.toString(10);
        }
        if (type.match(paramTypeBytesArray) || type.match(paramTypeNumberArray)) {
          return param.map((p) => this.formatParam(type.replace("[]", ""), p));
        }
        // Format correct width for u?int[0-9]*
        let match = type.match(paramTypeNumber);
        if (match) {
          let size = parseInt(match[2] || "256");
          if (size / 8 < param.length) {
            // pad to correct bit width
            param = utils.leftPad(param, size);
          }
        }
        // Format correct length for bytes[0-9]+
        match = type.match(paramTypeBytes);
        if (match) {
          if (Buffer.isBuffer(param)) {
            param = utils.toHex(param);
          }
          // format to correct length
          let size = parseInt(match[1]);
          if (size) {
            let maxSize = size * 2;
            if (param.substring(0, 2) === "0x") {
              maxSize += 2;
            }
            if (param.length < maxSize) {
              // pad to correct length
              param = utils.rightPad(param, size * 2);
            }
          }
          // format odd-length bytes to even-length
          if (param.length % 2 === 1) {
            param = "0x0" + param.substring(2);
          }
        }
        return param;
      };
      /**
       * Encodes a function call from its json interface and parameters.
       *
       * @method encodeFunctionCall
       * @param {Array} jsonInterface
       * @param {Array} params
       * @return {String} The encoded ABI for this function call
       */
      ABICoder.prototype.encodeFunctionCall = function (jsonInterface, params) {
        return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace("0x", "");
      };
      /**
       * Should be used to decode bytes to plain param
       *
       * @method decodeParameter
       * @param {String} type
       * @param {String} bytes
       * @return {Object} plain param
       */
      ABICoder.prototype.decodeParameter = function (type, bytes) {
        return this.decodeParameters([type], bytes)[0];
      };
      /**
       * Should be used to decode list of params
       *
       * @method decodeParameter
       * @param {Array} outputs
       * @param {String} bytes
       * @return {Array} array of plain params
       */
      ABICoder.prototype.decodeParameters = function (outputs, bytes) {
        return this.decodeParametersWith(outputs, bytes, false);
      };
      /**
       * Should be used to decode list of params
       *
       * @method decodeParameter
       * @param {Array} outputs
       * @param {String} bytes
       * @param {Boolean} loose
       * @return {Array} array of plain params
       */
      ABICoder.prototype.decodeParametersWith = function (outputs, bytes, loose) {
        if (outputs.length > 0 && (!bytes || bytes === "0x" || bytes === "0X")) {
          throw new Error(
            "Returned values aren't valid, did it run Out of Gas? " +
              "You might also see this error if you are not using the " +
              "correct ABI for the contract you are retrieving data from, " +
              "requesting data from a block number that does not exist, " +
              "or querying a node which is not fully synced."
          );
        }
        var res = ethersAbiCoder.decode(this.mapTypes(outputs), "0x" + bytes.replace(/0x/i, ""), loose);
        var returnValue = new Result();
        returnValue.__length__ = 0;
        outputs.forEach(function (output, i) {
          var decodedValue = res[returnValue.__length__];
          const isStringObject = typeof output === "object" && output.type && output.type === "string";
          const isStringType = typeof output === "string" && output === "string";
          // only convert `0x` to null if it's not string value
          decodedValue = decodedValue === "0x" && !isStringObject && !isStringType ? null : decodedValue;
          returnValue[i] = decodedValue;
          if ((typeof output === "function" || (!!output && typeof output === "object")) && output.name) {
            returnValue[output.name] = decodedValue;
          }
          returnValue.__length__++;
        });
        return returnValue;
      };
      /**
       * Decodes events non- and indexed parameters.
       *
       * @method decodeLog
       * @param {Object} inputs
       * @param {String} data
       * @param {Array} topics
       * @return {Array} array of plain params
       */
      ABICoder.prototype.decodeLog = function (inputs, data, topics) {
        var _this = this;
        topics = Array.isArray(topics) ? topics : [topics];
        data = data || "";
        var notIndexedInputs = [];
        var indexedParams = [];
        var topicCount = 0;
        // TODO check for anonymous logs?
        inputs.forEach(function (input, i) {
          if (input.indexed) {
            indexedParams[i] = ["bool", "int", "uint", "address", "fixed", "ufixed"].find(function (staticType) {
              return input.type.indexOf(staticType) !== -1;
            })
              ? _this.decodeParameter(input.type, topics[topicCount])
              : topics[topicCount];
            topicCount++;
          } else {
            notIndexedInputs[i] = input;
          }
        });
        var nonIndexedData = data;
        var notIndexedParams = nonIndexedData ? this.decodeParametersWith(notIndexedInputs, nonIndexedData, true) : [];
        var returnValue = new Result();
        returnValue.__length__ = 0;
        inputs.forEach(function (res, i) {
          returnValue[i] = res.type === "string" ? "" : null;
          if (typeof notIndexedParams[i] !== "undefined") {
            returnValue[i] = notIndexedParams[i];
          }
          if (typeof indexedParams[i] !== "undefined") {
            returnValue[i] = indexedParams[i];
          }
          if (res.name) {
            returnValue[res.name] = returnValue[i];
          }
          returnValue.__length__++;
        });
        return returnValue;
      };
      var coder = new ABICoder();
      module.exports = coder;

      /***/
    },

    /***/ 1692: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /**
       * @file contract.js
       *
       * To initialize a contract use:
       *
       *  var Contract = require('web3-eth-contract');
       *  Contract.setProvider('ws://localhost:8546');
       *  var contract = new Contract(abi, address, ...);
       *
       * @author Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2017
       */

      var core = __webpack_require__(2928);
      var Method = __webpack_require__(3952);
      var utils = __webpack_require__(6752);
      var Subscription = __webpack_require__(6602).subscription;
      var formatters = __webpack_require__(4390).formatters;
      var errors = __webpack_require__(4390).errors;
      var promiEvent = __webpack_require__(4017);
      var abi = __webpack_require__(3338);
      /**
       * Should be called to create new contract instance
       *
       * @method Contract
       * @constructor
       * @param {Array} jsonInterface
       * @param {String} address
       * @param {Object} options
       */
      var Contract = function Contract(jsonInterface, address, options) {
        var _this = this,
          args = Array.prototype.slice.call(arguments);
        if (!(this instanceof Contract)) {
          throw new Error('Please use the "new" keyword to instantiate a web3.eth.Contract() object!');
        }
        this.setProvider = function () {
          core.packageInit(_this, arguments);
          _this.clearSubscriptions = _this._requestManager.clearSubscriptions;
        };
        // sets _requestmanager
        core.packageInit(this, [this.constructor]);
        this.clearSubscriptions = this._requestManager.clearSubscriptions;
        if (!jsonInterface || !Array.isArray(jsonInterface)) {
          throw errors.ContractMissingABIError();
        }
        // create the options object
        this.options = {};
        var lastArg = args[args.length - 1];
        if (!!lastArg && typeof lastArg === "object" && !Array.isArray(lastArg)) {
          options = lastArg;
          this.options = { ...this.options, ...this._getOrSetDefaultOptions(options) };
          if (!!address && typeof address === "object") {
            address = null;
          }
        }
        // set address
        Object.defineProperty(this.options, "address", {
          set: function (value) {
            if (value) {
              _this._address = utils.toChecksumAddress(formatters.inputAddressFormatter(value));
            }
          },
          get: function () {
            return _this._address;
          },
          enumerable: true,
        });
        // add method and event signatures, when the jsonInterface gets set
        Object.defineProperty(this.options, "jsonInterface", {
          set: function (value) {
            _this.methods = {};
            _this.events = {};
            _this._jsonInterface = value.map(function (method) {
              var func, funcName;
              // make constant and payable backwards compatible
              method.constant = method.stateMutability === "view" || method.stateMutability === "pure" || method.constant;
              method.payable = method.stateMutability === "payable" || method.payable;
              if (method.name) {
                funcName = utils._jsonInterfaceMethodToString(method);
              }
              // function
              if (method.type === "function") {
                method.signature = abi.encodeFunctionSignature(funcName);
                func = _this._createTxObject.bind({
                  method: method,
                  parent: _this,
                });
                // add method only if not one already exists
                if (!_this.methods[method.name]) {
                  _this.methods[method.name] = func;
                } else {
                  var cascadeFunc = _this._createTxObject.bind({
                    method: method,
                    parent: _this,
                    nextMethod: _this.methods[method.name],
                  });
                  _this.methods[method.name] = cascadeFunc;
                }
                // definitely add the method based on its signature
                _this.methods[method.signature] = func;
                // add method by name
                _this.methods[funcName] = func;
                // event
              } else if (method.type === "event") {
                method.signature = abi.encodeEventSignature(funcName);
                var event = _this._on.bind(_this, method.signature);
                // add method only if not already exists
                if (!_this.events[method.name] || _this.events[method.name].name === "bound ") _this.events[method.name] = event;
                // definitely add the method based on its signature
                _this.events[method.signature] = event;
                // add event by name
                _this.events[funcName] = event;
              }
              return method;
            });
            // add allEvents
            _this.events.allEvents = _this._on.bind(_this, "allevents");
            return _this._jsonInterface;
          },
          get: function () {
            return _this._jsonInterface;
          },
          enumerable: true,
        });
        // get default account from the Class
        var defaultAccount = this.constructor.defaultAccount;
        var defaultBlock = this.constructor.defaultBlock || "latest";
        Object.defineProperty(this, "handleRevert", {
          get: function () {
            if (_this.options.handleRevert === false || _this.options.handleRevert === true) {
              return _this.options.handleRevert;
            }
            return this.constructor.handleRevert;
          },
          set: function (val) {
            _this.options.handleRevert = val;
          },
          enumerable: true,
        });
        Object.defineProperty(this, "defaultCommon", {
          get: function () {
            return _this.options.common || this.constructor.defaultCommon;
          },
          set: function (val) {
            _this.options.common = val;
          },
          enumerable: true,
        });
        Object.defineProperty(this, "defaultHardfork", {
          get: function () {
            return _this.options.hardfork || this.constructor.defaultHardfork;
          },
          set: function (val) {
            _this.options.hardfork = val;
          },
          enumerable: true,
        });
        Object.defineProperty(this, "defaultChain", {
          get: function () {
            return _this.options.chain || this.constructor.defaultChain;
          },
          set: function (val) {
            _this.options.chain = val;
          },
          enumerable: true,
        });
        Object.defineProperty(this, "transactionPollingTimeout", {
          get: function () {
            if (_this.options.transactionPollingTimeout === 0) {
              return _this.options.transactionPollingTimeout;
            }
            return _this.options.transactionPollingTimeout || this.constructor.transactionPollingTimeout;
          },
          set: function (val) {
            _this.options.transactionPollingTimeout = val;
          },
          enumerable: true,
        });
        Object.defineProperty(this, "transactionPollingInterval", {
          get: function () {
            if (_this.options.transactionPollingInterval === 0) {
              return _this.options.transactionPollingInterval;
            }
            return _this.options.transactionPollingInterval || this.constructor.transactionPollingInterval;
          },
          set: function (val) {
            _this.options.transactionPollingInterval = val;
          },
          enumerable: true,
        });
        Object.defineProperty(this, "transactionConfirmationBlocks", {
          get: function () {
            if (_this.options.transactionConfirmationBlocks === 0) {
              return _this.options.transactionConfirmationBlocks;
            }
            return _this.options.transactionConfirmationBlocks || this.constructor.transactionConfirmationBlocks;
          },
          set: function (val) {
            _this.options.transactionConfirmationBlocks = val;
          },
          enumerable: true,
        });
        Object.defineProperty(this, "transactionBlockTimeout", {
          get: function () {
            if (_this.options.transactionBlockTimeout === 0) {
              return _this.options.transactionBlockTimeout;
            }
            return _this.options.transactionBlockTimeout || this.constructor.transactionBlockTimeout;
          },
          set: function (val) {
            _this.options.transactionBlockTimeout = val;
          },
          enumerable: true,
        });
        Object.defineProperty(this, "blockHeaderTimeout", {
          get: function () {
            if (_this.options.blockHeaderTimeout === 0) {
              return _this.options.blockHeaderTimeout;
            }
            return _this.options.blockHeaderTimeout || this.constructor.blockHeaderTimeout;
          },
          set: function (val) {
            _this.options.blockHeaderTimeout = val;
          },
          enumerable: true,
        });
        Object.defineProperty(this, "defaultAccount", {
          get: function () {
            return defaultAccount;
          },
          set: function (val) {
            if (val) {
              defaultAccount = utils.toChecksumAddress(formatters.inputAddressFormatter(val));
            }
            return val;
          },
          enumerable: true,
        });
        Object.defineProperty(this, "defaultBlock", {
          get: function () {
            return defaultBlock;
          },
          set: function (val) {
            defaultBlock = val;
            return val;
          },
          enumerable: true,
        });
        // properties
        this.methods = {};
        this.events = {};
        this._address = null;
        this._jsonInterface = [];
        // set getter/setter properties
        this.options.address = address;
        this.options.jsonInterface = jsonInterface;
      };
      /**
       * Sets the new provider, creates a new requestManager, registers the "data" listener on the provider and sets the
       * accounts module for the Contract class.
       *
       * @method setProvider
       *
       * @param {string|provider} provider
       * @param {Accounts} accounts
       *
       * @returns void
       */
      Contract.setProvider = function (provider, accounts) {
        // Contract.currentProvider = provider;
        core.packageInit(this, [provider]);
        this._ethAccounts = accounts;
      };
      /**
       * Get the callback and modify the array if necessary
       *
       * @method _getCallback
       * @param {Array} args
       * @return {Function} the callback
       */
      Contract.prototype._getCallback = function getCallback(args) {
        if (args && !!args[args.length - 1] && typeof args[args.length - 1] === "function") {
          return args.pop(); // modify the args array!
        }
      };
      /**
       * Checks that no listener with name "newListener" or "removeListener" is added.
       *
       * @method _checkListener
       * @param {String} type
       * @param {String} event
       * @return {Object} the contract instance
       */
      Contract.prototype._checkListener = function (type, event) {
        if (event === type) {
          throw errors.ContractReservedEventError(type);
        }
      };
      /**
       * Use default values, if options are not available
       *
       * @method _getOrSetDefaultOptions
       * @param {Object} options the options gived by the user
       * @return {Object} the options with gaps filled by defaults
       */
      Contract.prototype._getOrSetDefaultOptions = function getOrSetDefaultOptions(options) {
        var _options = { ...options };
        var gasPrice = _options.gasPrice ? String(_options.gasPrice) : null;
        var from = _options.from ? utils.toChecksumAddress(formatters.inputAddressFormatter(_options.from)) : null;
        _options.data = _options.data || this.options.data;
        _options.from = from || this.options.from;
        _options.gasPrice = gasPrice || this.options.gasPrice;
        _options.gas = _options.gas || _options.gasLimit || this.options.gas;
        // TODO replace with only gasLimit?
        delete _options.gasLimit;
        return _options;
      };
      /**
       * Should be used to encode indexed params and options to one final object
       *
       * @method _encodeEventABI
       * @param {Object} event
       * @param {Object} options
       * @return {Object} everything combined together and encoded
       */
      Contract.prototype._encodeEventABI = function (event, options) {
        options = options || {};
        var filter = options.filter || {},
          result = {};
        ["fromBlock", "toBlock"]
          .filter(function (f) {
            return options[f] !== undefined;
          })
          .forEach(function (f) {
            result[f] = formatters.inputBlockNumberFormatter(options[f]);
          });
        // use given topics
        if (Array.isArray(options.topics)) {
          result.topics = options.topics;
          // create topics based on filter
        } else {
          result.topics = [];
          // add event signature
          if (event && !event.anonymous && event.name !== "ALLEVENTS") {
            result.topics.push(event.signature);
          }
          // add event topics (indexed arguments)
          if (event.name !== "ALLEVENTS") {
            var indexedTopics = event.inputs
              .filter(function (i) {
                return i.indexed === true;
              })
              .map(function (i) {
                var value = filter[i.name];
                if (!value) {
                  return null;
                }
                // TODO: https://github.com/ethereum/web3.js/issues/344
                // TODO: deal properly with components
                if (Array.isArray(value)) {
                  return value.map(function (v) {
                    return abi.encodeParameter(i.type, v);
                  });
                }
                return abi.encodeParameter(i.type, value);
              });
            result.topics = result.topics.concat(indexedTopics);
          }
          if (!result.topics.length) delete result.topics;
        }
        if (this.options.address) {
          result.address = this.options.address.toLowerCase();
        }
        return result;
      };
      /**
       * Should be used to decode indexed params and options
       *
       * @method _decodeEventABI
       * @param {Object} data
       * @return {Object} result object with decoded indexed && not indexed params
       */
      Contract.prototype._decodeEventABI = function (data) {
        var event = this;
        data.data = data.data || "";
        data.topics = data.topics || [];
        var result = formatters.outputLogFormatter(data);
        // if allEvents get the right event
        if (event.name === "ALLEVENTS") {
          event = event.jsonInterface.find(function (intf) {
            return intf.signature === data.topics[0];
          }) || { anonymous: true };
        }
        // create empty inputs if none are present (e.g. anonymous events on allEvents)
        event.inputs = event.inputs || [];
        // Handle case where an event signature shadows the current ABI with non-identical
        // arg indexing. If # of topics doesn't match, event is anon.
        if (!event.anonymous) {
          let indexedInputs = 0;
          event.inputs.forEach((input) => (input.indexed ? indexedInputs++ : null));
          if (indexedInputs > 0 && data.topics.length !== indexedInputs + 1) {
            event = {
              anonymous: true,
              inputs: [],
            };
          }
        }
        var argTopics = event.anonymous ? data.topics : data.topics.slice(1);
        result.returnValues = abi.decodeLog(event.inputs, data.data, argTopics);
        delete result.returnValues.__length__;
        // add name
        result.event = event.name;
        // add signature
        result.signature = event.anonymous || !data.topics[0] ? null : data.topics[0];
        // move the data and topics to "raw"
        result.raw = {
          data: result.data,
          topics: result.topics,
        };
        delete result.data;
        delete result.topics;
        return result;
      };
      /**
       * Encodes an ABI for a method, including signature or the method.
       * Or when constructor encodes only the constructor parameters.
       *
       * @method _encodeMethodABI
       * @param {Mixed} args the arguments to encode
       * @param {String} the encoded ABI
       */
      Contract.prototype._encodeMethodABI = function _encodeMethodABI() {
        var methodSignature = this._method.signature,
          args = this.arguments || [];
        var signature = false,
          paramsABI =
            this._parent.options.jsonInterface
              .filter(function (json) {
                return (
                  (methodSignature === "constructor" && json.type === methodSignature) ||
                  ((json.signature === methodSignature || json.signature === methodSignature.replace("0x", "") || json.name === methodSignature) &&
                    json.type === "function")
                );
              })
              .map(function (json) {
                var inputLength = Array.isArray(json.inputs) ? json.inputs.length : 0;
                if (inputLength !== args.length) {
                  throw new Error(
                    "The number of arguments is not matching the methods required number. You need to pass " + inputLength + " arguments."
                  );
                }
                if (json.type === "function") {
                  signature = json.signature;
                }
                return Array.isArray(json.inputs) ? json.inputs : [];
              })
              .map(function (inputs) {
                return abi.encodeParameters(inputs, args).replace("0x", "");
              })[0] || "";
        // return constructor
        if (methodSignature === "constructor") {
          if (!this._deployData)
            throw new Error("The contract has no contract data option set. This is necessary to append the constructor parameters.");
          if (!this._deployData.startsWith("0x")) {
            this._deployData = "0x" + this._deployData;
          }
          return this._deployData + paramsABI;
        }
        // return method
        var returnValue = signature ? signature + paramsABI : paramsABI;
        if (!returnValue) {
          throw new Error("Couldn't find a matching contract method named \"" + this._method.name + '".');
        }
        return returnValue;
      };
      /**
       * Decode method return values
       *
       * @method _decodeMethodReturn
       * @param {Array} outputs
       * @param {String} returnValues
       * @return {Object} decoded output return values
       */
      Contract.prototype._decodeMethodReturn = function (outputs, returnValues) {
        if (!returnValues) {
          return null;
        }
        returnValues = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;
        var result = abi.decodeParameters(outputs, returnValues);
        if (result.__length__ === 1) {
          return result[0];
        }
        delete result.__length__;
        return result;
      };
      /**
       * Deploys a contract and fire events based on its state: transactionHash, receipt
       *
       * All event listeners will be removed, once the last possible event is fired ("error", or "receipt")
       *
       * @method deploy
       * @param {Object} options
       * @param {Function} callback
       * @return {Object} EventEmitter possible events are "error", "transactionHash" and "receipt"
       */
      Contract.prototype.deploy = function (options, callback) {
        options = options || {};
        options.arguments = options.arguments || [];
        options = this._getOrSetDefaultOptions(options);
        // throw error, if no "data" is specified
        if (!options.data) {
          if (typeof callback === "function") {
            return callback(errors.ContractMissingDeployDataError());
          }
          throw errors.ContractMissingDeployDataError();
        }
        var constructor =
          this.options.jsonInterface.find((method) => {
            return method.type === "constructor";
          }) || {};
        constructor.signature = "constructor";
        return this._createTxObject.apply(
          {
            method: constructor,
            parent: this,
            deployData: options.data,
            _ethAccounts: this.constructor._ethAccounts,
          },
          options.arguments
        );
      };
      /**
       * Gets the event signature and outputFormatters
       *
       * @method _generateEventOptions
       * @param {Object} event
       * @param {Object} options
       * @param {Function} callback
       * @return {Object} the event options object
       */
      Contract.prototype._generateEventOptions = function () {
        var args = Array.prototype.slice.call(arguments);
        // get the callback
        var callback = this._getCallback(args);
        // get the options
        var options = (!!args[args.length - 1] && typeof args[args.length - 1]) === "object" ? args.pop() : {};
        var eventName = typeof args[0] === "string" ? args[0] : "allevents";
        var event =
          eventName.toLowerCase() === "allevents"
            ? {
                name: "ALLEVENTS",
                jsonInterface: this.options.jsonInterface,
              }
            : this.options.jsonInterface.find(function (json) {
                return json.type === "event" && (json.name === eventName || json.signature === "0x" + eventName.replace("0x", ""));
              });
        if (!event) {
          throw errors.ContractEventDoesNotExistError(eventName);
        }
        if (!utils.isAddress(this.options.address)) {
          throw errors.ContractNoAddressDefinedError();
        }
        return {
          params: this._encodeEventABI(event, options),
          event: event,
          callback: callback,
        };
      };
      /**
       * Adds event listeners and creates a subscription, and remove it once its fired.
       *
       * @method clone
       * @return {Object} the event subscription
       */
      Contract.prototype.clone = function () {
        return new this.constructor(this.options.jsonInterface, this.options.address, this.options);
      };
      /**
       * Adds event listeners and creates a subscription, and remove it once its fired.
       *
       * @method once
       * @param {String} event
       * @param {Object} options
       * @param {Function} callback
       * @return {Object} the event subscription
       */
      Contract.prototype.once = function (event, options, callback) {
        var args = Array.prototype.slice.call(arguments);
        // get the callback
        callback = this._getCallback(args);
        if (!callback) {
          throw errors.ContractOnceRequiresCallbackError();
        }
        // don't allow fromBlock
        if (options) delete options.fromBlock;
        // don't return as once shouldn't provide "on"
        this._on(event, options, function (err, res, sub) {
          sub.unsubscribe();
          if (typeof callback === "function") {
            callback(err, res, sub);
          }
        });
        return undefined;
      };
      /**
       * Adds event listeners and creates a subscription.
       *
       * @method _on
       *
       * @param {String} event
       * @param {Object} options
       * @param {Function} callback
       *
       * @return {Object} the event subscription
       */
      Contract.prototype._on = function () {
        var subOptions = this._generateEventOptions.apply(this, arguments);
        if (subOptions.params && subOptions.params.toBlock) {
          delete subOptions.params.toBlock;
          console.warn("Invalid option: toBlock. Use getPastEvents for specific range.");
        }
        // prevent the event "newListener" and "removeListener" from being overwritten
        this._checkListener("newListener", subOptions.event.name);
        this._checkListener("removeListener", subOptions.event.name);
        // TODO check if listener already exists? and reuse subscription if options are the same.
        // create new subscription
        var subscription = new Subscription({
          subscription: {
            params: 1,
            inputFormatter: [formatters.inputLogFormatter],
            outputFormatter: this._decodeEventABI.bind(subOptions.event),
            // DUBLICATE, also in web3-eth
            subscriptionHandler: function (output) {
              if (output.removed) {
                this.emit("changed", output);
              } else {
                this.emit("data", output);
              }
              if (typeof this.callback === "function") {
                this.callback(null, output, this);
              }
            },
          },
          type: "eth",
          requestManager: this._requestManager,
        });
        subscription.subscribe("logs", subOptions.params, subOptions.callback || function () {});
        return subscription;
      };
      /**
       * Get past events from contracts
       *
       * @method getPastEvents
       * @param {String} event
       * @param {Object} options
       * @param {Function} callback
       * @return {Object} the promievent
       */
      Contract.prototype.getPastEvents = function () {
        var subOptions = this._generateEventOptions.apply(this, arguments);
        var getPastLogs = new Method({
          name: "getPastLogs",
          call: "eth_getLogs",
          params: 1,
          inputFormatter: [formatters.inputLogFormatter],
          outputFormatter: this._decodeEventABI.bind(subOptions.event),
        });
        getPastLogs.setRequestManager(this._requestManager);
        var call = getPastLogs.buildCall();
        getPastLogs = null;
        return call(subOptions.params, subOptions.callback);
      };
      /**
       * returns the an object with call, send, estimate functions
       *
       * @method _createTxObject
       * @returns {Object} an object with functions to call the methods
       */
      Contract.prototype._createTxObject = function _createTxObject() {
        var args = Array.prototype.slice.call(arguments);
        var txObject = {};
        if (this.method.type === "function") {
          txObject.call = this.parent._executeMethod.bind(txObject, "call");
          txObject.call.request = this.parent._executeMethod.bind(txObject, "call", true); // to make batch requests
        }
        txObject.send = this.parent._executeMethod.bind(txObject, "send");
        txObject.send.request = this.parent._executeMethod.bind(txObject, "send", true); // to make batch requests
        txObject.encodeABI = this.parent._encodeMethodABI.bind(txObject);
        txObject.estimateGas = this.parent._executeMethod.bind(txObject, "estimate");
        txObject.createAccessList = this.parent._executeMethod.bind(txObject, "createAccessList");
        if (args && this.method.inputs && args.length !== this.method.inputs.length) {
          if (this.nextMethod) {
            return this.nextMethod.apply(null, args);
          }
          throw errors.InvalidNumberOfParams(args.length, this.method.inputs.length, this.method.name);
        }
        txObject.arguments = args || [];
        txObject._method = this.method;
        txObject._parent = this.parent;
        txObject._ethAccounts = this.parent.constructor._ethAccounts || this._ethAccounts;
        if (this.deployData) {
          txObject._deployData = this.deployData;
        }
        return txObject;
      };
      /**
       * Generates the options for the execute call
       *
       * @method _processExecuteArguments
       * @param {Array} args
       * @param {Promise} defer
       */
      Contract.prototype._processExecuteArguments = function _processExecuteArguments(args, defer) {
        var processedArgs = {};
        processedArgs.type = args.shift();
        // get the callback
        processedArgs.callback = this._parent._getCallback(args);
        // get block number to use for call
        if (
          processedArgs.type === "call" &&
          args[args.length - 1] !== true &&
          (typeof args[args.length - 1] === "string" || isFinite(args[args.length - 1]))
        )
          processedArgs.defaultBlock = args.pop();
        // get the options
        processedArgs.options = (!!args[args.length - 1] && typeof args[args.length - 1]) === "object" ? args.pop() : {};
        // get the generateRequest argument for batch requests
        processedArgs.generateRequest = args[args.length - 1] === true ? args.pop() : false;
        processedArgs.options = this._parent._getOrSetDefaultOptions(processedArgs.options);
        processedArgs.options.data = this.encodeABI();
        // add contract address
        if (!this._deployData && !utils.isAddress(this._parent.options.address)) throw errors.ContractNoAddressDefinedError();
        if (!this._deployData) processedArgs.options.to = this._parent.options.address;
        // return error, if no "data" is specified
        if (!processedArgs.options.data)
          return utils._fireError(
            new Error("Couldn't find a matching contract method, or the number of parameters is wrong."),
            defer.eventEmitter,
            defer.reject,
            processedArgs.callback
          );
        return processedArgs;
      };
      /**
       * Executes a call, transact or estimateGas on a contract function
       *
       * @method _executeMethod
       * @param {String} type the type this execute function should execute
       * @param {Boolean} makeRequest if true, it simply returns the request parameters, rather than executing it
       */
      Contract.prototype._executeMethod = function _executeMethod() {
        var _this = this,
          args = this._parent._processExecuteArguments.call(this, Array.prototype.slice.call(arguments), defer),
          defer = promiEvent(args.type !== "send"),
          ethAccounts = _this.constructor._ethAccounts || _this._ethAccounts;
        // simple return request for batch requests
        if (args.generateRequest) {
          var payload = {
            params: [formatters.inputCallFormatter.call(this._parent, args.options)],
            callback: args.callback,
          };
          if (args.type === "call") {
            payload.params.push(formatters.inputDefaultBlockNumberFormatter.call(this._parent, args.defaultBlock));
            payload.method = "eth_call";
            payload.format = this._parent._decodeMethodReturn.bind(null, this._method.outputs);
          } else {
            payload.method = "eth_sendTransaction";
          }
          return payload;
        }
        switch (args.type) {
          case "createAccessList":
            // return error, if no "from" is specified
            if (!utils.isAddress(args.options.from)) {
              return utils._fireError(errors.ContractNoFromAddressDefinedError(), defer.eventEmitter, defer.reject, args.callback);
            }
            var createAccessList = new Method({
              name: "createAccessList",
              call: "eth_createAccessList",
              params: 2,
              inputFormatter: [formatters.inputTransactionFormatter, formatters.inputDefaultBlockNumberFormatter],
              requestManager: _this._parent._requestManager,
              accounts: ethAccounts,
              defaultAccount: _this._parent.defaultAccount,
              defaultBlock: _this._parent.defaultBlock,
            }).createFunction();
            return createAccessList(args.options, args.callback);
          case "estimate":
            var estimateGas = new Method({
              name: "estimateGas",
              call: "eth_estimateGas",
              params: 1,
              inputFormatter: [formatters.inputCallFormatter],
              outputFormatter: utils.hexToNumber,
              requestManager: _this._parent._requestManager,
              accounts: ethAccounts,
              defaultAccount: _this._parent.defaultAccount,
              defaultBlock: _this._parent.defaultBlock,
            }).createFunction();
            return estimateGas(args.options, args.callback);
          case "call":
            // TODO check errors: missing "from" should give error on deploy and send, call ?
            var call = new Method({
              name: "call",
              call: "eth_call",
              params: 2,
              inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter],
              // add output formatter for decoding
              outputFormatter: function (result) {
                return _this._parent._decodeMethodReturn(_this._method.outputs, result);
              },
              requestManager: _this._parent._requestManager,
              accounts: ethAccounts,
              defaultAccount: _this._parent.defaultAccount,
              defaultBlock: _this._parent.defaultBlock,
              handleRevert: _this._parent.handleRevert,
              abiCoder: abi,
            }).createFunction();
            return call(args.options, args.defaultBlock, args.callback);
          case "send":
            // return error, if no "from" is specified
            if (!utils.isAddress(args.options.from)) {
              return utils._fireError(errors.ContractNoFromAddressDefinedError(), defer.eventEmitter, defer.reject, args.callback);
            }
            if (typeof this._method.payable === "boolean" && !this._method.payable && args.options.value && args.options.value > 0) {
              return utils._fireError(
                new Error("Can not send value to non-payable contract method or constructor"),
                defer.eventEmitter,
                defer.reject,
                args.callback
              );
            }
            // make sure receipt logs are decoded
            var extraFormatters = {
              receiptFormatter: function (receipt) {
                if (Array.isArray(receipt.logs)) {
                  // decode logs
                  var events = receipt.logs.map((log) => {
                    return _this._parent._decodeEventABI.call(
                      {
                        name: "ALLEVENTS",
                        jsonInterface: _this._parent.options.jsonInterface,
                      },
                      log
                    );
                  });
                  // make log names keys
                  receipt.events = {};
                  var count = 0;
                  events.forEach(function (ev) {
                    if (ev.event) {
                      // if > 1 of the same event, don't overwrite any existing events
                      if (receipt.events[ev.event]) {
                        if (Array.isArray(receipt.events[ev.event])) {
                          receipt.events[ev.event].push(ev);
                        } else {
                          receipt.events[ev.event] = [receipt.events[ev.event], ev];
                        }
                      } else {
                        receipt.events[ev.event] = ev;
                      }
                    } else {
                      receipt.events[count] = ev;
                      count++;
                    }
                  });
                  delete receipt.logs;
                }
                return receipt;
              },
              contractDeployFormatter: function (receipt) {
                var newContract = _this._parent.clone();
                newContract.options.address = receipt.contractAddress;
                return newContract;
              },
            };
            var sendTransaction = new Method({
              name: "sendTransaction",
              call: "eth_sendTransaction",
              params: 1,
              inputFormatter: [formatters.inputTransactionFormatter],
              requestManager: _this._parent._requestManager,
              accounts: _this.constructor._ethAccounts || _this._ethAccounts,
              defaultAccount: _this._parent.defaultAccount,
              defaultBlock: _this._parent.defaultBlock,
              transactionBlockTimeout: _this._parent.transactionBlockTimeout,
              transactionConfirmationBlocks: _this._parent.transactionConfirmationBlocks,
              transactionPollingTimeout: _this._parent.transactionPollingTimeout,
              transactionPollingInterval: _this._parent.transactionPollingInterval,
              defaultCommon: _this._parent.defaultCommon,
              defaultChain: _this._parent.defaultChain,
              defaultHardfork: _this._parent.defaultHardfork,
              handleRevert: _this._parent.handleRevert,
              extraFormatters: extraFormatters,
              abiCoder: abi,
            }).createFunction();
            return sendTransaction(args.options, args.callback);
          default:
            throw new Error('Method "' + args.type + '" not implemented.');
        }
      };
      module.exports = Contract;

      /***/
    },

    /***/ 4751: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /**
       * @file iban.js
       *
       * Details: https://github.com/ethereum/wiki/wiki/ICAP:-Inter-exchange-Client-Address-Protocol
       *
       * @author Marek Kotewicz <marek@parity.io>
       * @date 2015
       */

      const utils = __webpack_require__(6752);
      const BigNumber = __webpack_require__(3550);
      const leftPad = function (string, bytes) {
        let result = string;
        while (result.length < bytes * 2) {
          result = "0" + result;
        }
        return result;
      };
      /**
       * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to
       * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.
       *
       * @method iso13616Prepare
       * @param {String} iban the IBAN
       * @returns {String} the prepared IBAN
       */
      const iso13616Prepare = function (iban) {
        const A = "A".charCodeAt(0);
        const Z = "Z".charCodeAt(0);
        iban = iban.toUpperCase();
        iban = iban.slice(4) + iban.slice(0, 4);
        return iban
          .split("")
          .map(function (n) {
            const code = n.charCodeAt(0);
            if (code >= A && code <= Z) {
              // A = 10, B = 11, ... Z = 35
              return code - A + 10;
            } else {
              return n;
            }
          })
          .join("");
      };
      /**
       * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.
       *
       * @method mod9710
       * @param {String} iban
       * @returns {Number}
       */
      const mod9710 = function (iban) {
        let remainder = iban;
        let block;
        while (remainder.length > 2) {
          block = remainder.slice(0, 9);
          remainder = (parseInt(block, 10) % 97) + remainder.slice(block.length);
        }
        return parseInt(remainder, 10) % 97;
      };
      /**
       * This prototype should be used to create iban object from iban correct string
       *
       * @param {String} iban
       */
      class Iban {
        constructor(iban) {
          this._iban = iban;
        }
        /**
         * This method should be used to create an ethereum address from a direct iban address
         *
         * @method toAddress
         * @param {String} iban address
         * @return {String} the ethereum address
         */
        static toAddress(ib) {
          ib = new Iban(ib);
          if (!ib.isDirect()) {
            throw new Error("IBAN is indirect and can't be converted");
          }
          return ib.toAddress();
        }
        /**
         * This method should be used to create iban address from an ethereum address
         *
         * @method toIban
         * @param {String} address
         * @return {String} the IBAN address
         */
        static toIban(address) {
          return Iban.fromAddress(address).toString();
        }
        /**
         * This method should be used to create iban object from an ethereum address
         *
         * @method fromAddress
         * @param {String} address
         * @return {Iban} the IBAN object
         */
        static fromAddress(address) {
          if (!utils.isAddress(address)) {
            throw new Error("Provided address is not a valid address: " + address);
          }
          address = address.replace("0x", "").replace("0X", "");
          const asBn = new BigNumber(address, 16);
          const base36 = asBn.toString(36);
          const padded = leftPad(base36, 15);
          return Iban.fromBban(padded.toUpperCase());
        }
        /**
         * Convert the passed BBAN to an IBAN for this country specification.
         * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
         * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
         *
         * @method fromBban
         * @param {String} bban the BBAN to convert to IBAN
         * @returns {Iban} the IBAN object
         */
        static fromBban(bban) {
          const countryCode = "XE";
          const remainder = mod9710(iso13616Prepare(countryCode + "00" + bban));
          const checkDigit = ("0" + (98 - remainder)).slice(-2);
          return new Iban(countryCode + checkDigit + bban);
        }
        /**
         * Should be used to create IBAN object for given institution and identifier
         *
         * @method createIndirect
         * @param {Object} options, required options are "institution" and "identifier"
         * @return {Iban} the IBAN object
         */
        static createIndirect(options) {
          return Iban.fromBban("ETH" + options.institution + options.identifier);
        }
        /**
         * This method should be used to check if given string is valid iban object
         *
         * @method isValid
         * @param {String} iban string
         * @return {Boolean} true if it is valid IBAN
         */
        static isValid(iban) {
          const i = new Iban(iban);
          return i.isValid();
        }
        /**
         * Should be called to check if iban is correct
         *
         * @method isValid
         * @returns {Boolean} true if it is, otherwise false
         */
        isValid() {
          return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) && mod9710(iso13616Prepare(this._iban)) === 1;
        }
        /**
         * Should be called to check if iban number is direct
         *
         * @method isDirect
         * @returns {Boolean} true if it is, otherwise false
         */
        isDirect() {
          return this._iban.length === 34 || this._iban.length === 35;
        }
        /**
         * Should be called to check if iban number if indirect
         *
         * @method isIndirect
         * @returns {Boolean} true if it is, otherwise false
         */
        isIndirect() {
          return this._iban.length === 20;
        }
        /**
         * Should be called to get iban checksum
         * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)
         *
         * @method checksum
         * @returns {String} checksum
         */
        checksum() {
          return this._iban.slice(2, 4);
        }
        /**
         * Should be called to get institution identifier
         * eg. XREG
         *
         * @method institution
         * @returns {String} institution identifier
         */
        institution() {
          return this.isIndirect() ? this._iban.slice(7, 11) : "";
        }
        /**
         * Should be called to get client identifier within institution
         * eg. GAVOFYORK
         *
         * @method client
         * @returns {String} client identifier
         */
        client() {
          return this.isIndirect() ? this._iban.slice(11) : "";
        }
        /**
         * Should be called to get client direct address
         *
         * @method toAddress
         * @returns {String} ethereum address
         */
        toAddress() {
          if (this.isDirect()) {
            const base36 = this._iban.slice(4);
            const asBn = new BigNumber(base36, 36);
            return utils.toChecksumAddress(asBn.toString(16, 20));
          }
          return "";
        }
        toString() {
          return this._iban;
        }
      }
      module.exports = Iban;

      /***/
    },

    /***/ 4351: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /** @file httpprovider.js
       * @authors:
       *   Marek Kotewicz <marek@parity.io>
       *   Marian Oancea
       *   Fabian Vogelsteller <fabian@ethereum.org>
       *   AyanamiTech <ayanami0330@protonmail.com>
       * @date 2015
       */
      var errors = __webpack_require__(4390).errors;
      var http = __webpack_require__(8501);
      var https = __webpack_require__(9267);
      // Apply missing polyfill for IE
      __webpack_require__(1905);
      __webpack_require__(2702).polyfill();
      __webpack_require__(3367);
      /**
       * HttpProvider should be used to send rpc calls over http
       */
      var HttpProvider = function HttpProvider(host, options) {
        options = options || {};
        this.withCredentials = options.withCredentials;
        this.timeout = options.timeout || 0;
        this.headers = options.headers;
        this.agent = options.agent;
        this.connected = false;
        // keepAlive is true unless explicitly set to false
        const keepAlive = options.keepAlive !== false;
        this.host = host || "http://localhost:8545";
        if (!this.agent) {
          if (this.host.substring(0, 5) === "https") {
            this.httpsAgent = new https.Agent({ keepAlive });
          } else {
            this.httpAgent = new http.Agent({ keepAlive });
          }
        }
      };
      /**
       * Should be used to make async request
       *
       * @method send
       * @param {Object} payload
       * @param {Function} callback triggered on end with (err, result)
       */
      HttpProvider.prototype.send = function (payload, callback) {
        var options = {
          method: "POST",
          body: JSON.stringify(payload),
        };
        var headers = {};
        var controller;
        if (typeof AbortController !== "undefined") {
          controller = new AbortController();
        } else if (typeof window !== "undefined" && typeof window.AbortController !== "undefined") {
          // Some chrome version doesn't recognize new AbortController(); so we are using it from window instead
          // https://stackoverflow.com/questions/55718778/why-abortcontroller-is-not-defined
          controller = new window.AbortController();
        }
        if (typeof controller !== "undefined") {
          options.signal = controller.signal;
        }
        // the current runtime is node
        if (typeof XMLHttpRequest === "undefined") {
          // https://github.com/node-fetch/node-fetch#custom-agent
          var agents = { httpsAgent: this.httpsAgent, httpAgent: this.httpAgent };
          if (this.agent) {
            agents.httpsAgent = this.agent.https;
            agents.httpAgent = this.agent.http;
          }
          if (this.host.substring(0, 5) === "https") {
            options.agent = agents.httpsAgent;
          } else {
            options.agent = agents.httpAgent;
          }
        }
        if (this.headers) {
          this.headers.forEach(function (header) {
            headers[header.name] = header.value;
          });
        }
        // Default headers
        if (!headers["Content-Type"]) {
          headers["Content-Type"] = "application/json";
        }
        // As the Fetch API supports the credentials as following options 'include', 'omit', 'same-origin'
        // https://developer.mozilla.org/en-US/docs/Web/API/fetch#credentials
        // To avoid breaking change in 1.x we override this value based on boolean option.
        if (this.withCredentials) {
          options.credentials = "include";
        } else {
          options.credentials = "omit";
        }
        options.headers = headers;
        if (this.timeout > 0 && typeof controller !== "undefined") {
          this.timeoutId = setTimeout(function () {
            controller.abort();
          }, this.timeout);
        }
        var success = function (response) {
          if (this.timeoutId !== undefined) {
            clearTimeout(this.timeoutId);
          }
          // Response is a stream data so should be awaited for json response
          response
            .json()
            .then(function (data) {
              callback(null, data);
            })
            .catch(function (error) {
              callback(errors.InvalidResponse(response));
            });
        };
        var failed = function (error) {
          if (this.timeoutId !== undefined) {
            clearTimeout(this.timeoutId);
          }
          if (error.name === "AbortError") {
            callback(errors.ConnectionTimeout(this.timeout));
          }
          callback(errors.InvalidConnection(this.host));
        };
        fetch(this.host, options).then(success.bind(this)).catch(failed.bind(this));
      };
      HttpProvider.prototype.disconnect = function () {
        //NO OP
      };
      /**
       * Returns the desired boolean.
       *
       * @method supportsSubscriptions
       * @returns {boolean}
       */
      HttpProvider.prototype.supportsSubscriptions = function () {
        return false;
      };
      module.exports = HttpProvider;

      /***/
    },

    /***/ 3097: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
      /** @file index.js
       * @authors:
       *   Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2017
       */

      var errors = __webpack_require__(4390).errors;
      var oboe = __webpack_require__(3455);
      var IpcProvider = function IpcProvider(path, net) {
        var _this = this;
        this.responseCallbacks = {};
        this.notificationCallbacks = [];
        this.path = path;
        this.connected = false;
        this.connection = net.connect({ path: this.path });
        this.addDefaultEvents();
        // LISTEN FOR CONNECTION RESPONSES
        var callback = function (result) {
          /*jshint maxcomplexity: 6 */
          var id = null;
          // get the id which matches the returned id
          if (Array.isArray(result)) {
            result.forEach(function (load) {
              if (_this.responseCallbacks[load.id]) id = load.id;
            });
          } else {
            id = result.id;
          }
          // notification
          if (!id && result.method.indexOf("_subscription") !== -1) {
            _this.notificationCallbacks.forEach(function (callback) {
              if (typeof callback === "function") callback(result);
            });
            // fire the callback
          } else if (_this.responseCallbacks[id]) {
            _this.responseCallbacks[id](null, result);
            delete _this.responseCallbacks[id];
          }
        };
        // use oboe.js for Sockets
        if (net.constructor.name === "Socket") {
          oboe(this.connection).done(callback);
        } else {
          this.connection.on("data", function (data) {
            _this._parseResponse(data.toString()).forEach(callback);
          });
        }
      };
      /**
Will add the error and end event to timeout existing calls

@method addDefaultEvents
*/
      IpcProvider.prototype.addDefaultEvents = function () {
        var _this = this;
        this.connection.on("connect", function () {
          _this.connected = true;
        });
        this.connection.on("close", function () {
          _this.connected = false;
        });
        this.connection.on("error", function () {
          _this._timeout();
        });
        this.connection.on("end", function () {
          _this._timeout();
        });
        this.connection.on("timeout", function () {
          _this._timeout();
        });
      };
      /**
 Will parse the response and make an array out of it.

 NOTE, this exists for backwards compatibility reasons.

 @method _parseResponse
 @param {String} data
 */
      IpcProvider.prototype._parseResponse = function (data) {
        var _this = this,
          returnValues = [];
        // DE-CHUNKER
        var dechunkedData = data
          .replace(/\}[\n\r]?\{/g, "}|--|{") // }{
          .replace(/\}\][\n\r]?\[\{/g, "}]|--|[{") // }][{
          .replace(/\}[\n\r]?\[\{/g, "}|--|[{") // }[{
          .replace(/\}\][\n\r]?\{/g, "}]|--|{") // }]{
          .split("|--|");
        dechunkedData.forEach(function (data) {
          // prepend the last chunk
          if (_this.lastChunk) data = _this.lastChunk + data;
          var result = null;
          try {
            result = JSON.parse(data);
          } catch (e) {
            _this.lastChunk = data;
            // start timeout to cancel all requests
            clearTimeout(_this.lastChunkTimeout);
            _this.lastChunkTimeout = setTimeout(function () {
              _this._timeout();
              throw errors.InvalidResponse(data);
            }, 1000 * 15);
            return;
          }
          // cancel timeout and set chunk to null
          clearTimeout(_this.lastChunkTimeout);
          _this.lastChunk = null;
          if (result) returnValues.push(result);
        });
        return returnValues;
      };
      /**
Get the adds a callback to the responseCallbacks object,
which will be called if a response matching the response Id will arrive.

@method _addResponseCallback
*/
      IpcProvider.prototype._addResponseCallback = function (payload, callback) {
        var id = payload.id || payload[0].id;
        var method = payload.method || payload[0].method;
        this.responseCallbacks[id] = callback;
        this.responseCallbacks[id].method = method;
      };
      /**
Timeout all requests when the end/error event is fired

@method _timeout
*/
      IpcProvider.prototype._timeout = function () {
        for (var key in this.responseCallbacks) {
          if (this.responseCallbacks.hasOwnProperty(key)) {
            this.responseCallbacks[key](errors.InvalidConnection("on IPC"));
            delete this.responseCallbacks[key];
          }
        }
      };
      /**
 Try to reconnect

 @method reconnect
 */
      IpcProvider.prototype.reconnect = function () {
        this.connection.connect({ path: this.path });
      };
      IpcProvider.prototype.send = function (payload, callback) {
        // try reconnect, when connection is gone
        if (!this.connection.writable) this.connection.connect({ path: this.path });
        this.connection.write(JSON.stringify(payload));
        this._addResponseCallback(payload, callback);
      };
      /**
Subscribes to provider events.provider

@method on
@param {String} type    'notification', 'connect', 'error', 'end' or 'data'
@param {Function} callback   the callback to call
*/
      IpcProvider.prototype.on = function (type, callback) {
        if (typeof callback !== "function") throw new Error("The second parameter callback must be a function.");
        switch (type) {
          case "data":
            this.notificationCallbacks.push(callback);
            break;
          // adds error, end, timeout, connect
          default:
            this.connection.on(type, callback);
            break;
        }
      };
      /**
 Subscribes to provider events.provider

 @method on
 @param {String} type    'connect', 'error', 'end' or 'data'
 @param {Function} callback   the callback to call
 */
      IpcProvider.prototype.once = function (type, callback) {
        if (typeof callback !== "function") throw new Error("The second parameter callback must be a function.");
        this.connection.once(type, callback);
      };
      /**
Removes event listener

@method removeListener
@param {String} type    'data', 'connect', 'error', 'end' or 'data'
@param {Function} callback   the callback to call
*/
      IpcProvider.prototype.removeListener = function (type, callback) {
        var _this = this;
        switch (type) {
          case "data":
            this.notificationCallbacks.forEach(function (cb, index) {
              if (cb === callback) _this.notificationCallbacks.splice(index, 1);
            });
            break;
          default:
            this.connection.removeListener(type, callback);
            break;
        }
      };
      /**
Removes all event listeners

@method removeAllListeners
@param {String} type    'data', 'connect', 'error', 'end' or 'data'
*/
      IpcProvider.prototype.removeAllListeners = function (type) {
        switch (type) {
          case "data":
            this.notificationCallbacks = [];
            break;
          default:
            this.connection.removeAllListeners(type);
            break;
        }
      };
      /**
Resets the providers, clears all callbacks

@method reset
*/
      IpcProvider.prototype.reset = function () {
        this._timeout();
        this.notificationCallbacks = [];
        this.connection.removeAllListeners("error");
        this.connection.removeAllListeners("end");
        this.connection.removeAllListeners("timeout");
        this.addDefaultEvents();
      };
      /**
       * Returns the desired boolean.
       *
       * @method supportsSubscriptions
       * @returns {boolean}
       */
      IpcProvider.prototype.supportsSubscriptions = function () {
        return true;
      };
      module.exports = IpcProvider;

      /***/
    },

    /***/ 1057: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      /* provided dependency */ var process = __webpack_require__(4155);
      /* provided dependency */ var Buffer = __webpack_require__(8764)["Buffer"];
      var isNode = Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]";
      var isRN = typeof navigator !== "undefined" && navigator.product === "ReactNative";
      var _btoa = null;
      var helpers = null;
      if (isNode || isRN) {
        _btoa = function (str) {
          return Buffer.from(str).toString("base64");
        };
        var url = __webpack_require__(8575);
        if (url.URL) {
          // Use the new Node 6+ API for parsing URLs that supports username/password
          var newURL = url.URL;
          helpers = function (url) {
            return new newURL(url);
          };
        } else {
          // Web3 supports Node.js 5, so fall back to the legacy URL API if necessary
          helpers = __webpack_require__(8575).parse;
        }
      } else {
        _btoa = btoa.bind(typeof globalThis === "object" ? globalThis : self);
        helpers = function (url) {
          return new URL(url);
        };
      }
      module.exports = {
        parseURL: helpers,
        btoa: _btoa,
      };

      /***/
    },

    /***/ 9556: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";
      /*
 This file is part of web3.js.

 web3.js is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 web3.js is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
 */
      /**
       * @file WebsocketProvider.js
       * @authors: Samuel Furter <samuel@ethereum.org>, Fabian Vogelsteller <fabian@ethereum.org>
       * @date 2019
       */

      var EventEmitter = __webpack_require__(6729);
      var helpers = __webpack_require__(1057);
      var errors = __webpack_require__(4390).errors;
      var Ws = __webpack_require__(5840).w3cwebsocket;
      /**
       * @param {string} url
       * @param {Object} options
       *
       * @constructor
       */
      var WebsocketProvider = function WebsocketProvider(url, options) {
        EventEmitter.call(this);
        options = options || {};
        this.url = url;
        this._customTimeout = options.timeout || 1000 * 15;
        this.headers = options.headers || {};
        this.protocol = options.protocol || undefined;
        this.reconnectOptions = Object.assign(
          {
            auto: false,
            delay: 5000,
            maxAttempts: false,
            onTimeout: false,
          },
          options.reconnect
        );
        this.clientConfig = options.clientConfig || undefined; // Allow a custom client configuration
        this.requestOptions = options.requestOptions || undefined; // Allow a custom request options (https://github.com/theturtle32/WebSocket-Node/blob/master/docs/WebSocketClient.md#connectrequesturl-requestedprotocols-origin-headers-requestoptions)
        this.DATA = "data";
        this.CLOSE = "close";
        this.ERROR = "error";
        this.CONNECT = "connect";
        this.RECONNECT = "reconnect";
        this.connection = null;
        this.requestQueue = new Map();
        this.responseQueue = new Map();
        this.reconnectAttempts = 0;
        this.reconnecting = false;
        // The w3cwebsocket implementation does not support Basic Auth
        // username/password in the URL. So generate the basic auth header, and
        // pass through with any additional headers supplied in constructor
        var parsedURL = helpers.parseURL(url);
        if (parsedURL.username && parsedURL.password) {
          this.headers.authorization = "Basic " + helpers.btoa(parsedURL.username + ":" + parsedURL.password);
        }
        // When all node core implementations that do not have the
        // WHATWG compatible URL parser go out of service this line can be removed.
        if (parsedURL.auth) {
          this.headers.authorization = "Basic " + helpers.btoa(parsedURL.auth);
        }
        // make property `connected` which will return the current connection status
        Object.defineProperty(this, "connected", {
          get: function () {
            return this.connection && this.connection.readyState === this.connection.OPEN;
          },
          enumerable: true,
        });
        this.connect();
      };
      // Inherit from EventEmitter
      WebsocketProvider.prototype = Object.create(EventEmitter.prototype);
      WebsocketProvider.prototype.constructor = WebsocketProvider;
      /**
       * Connects to the configured node
       *
       * @method connect
       *
       * @returns {void}
       */
      WebsocketProvider.prototype.connect = function () {
        this.connection = new Ws(this.url, this.protocol, undefined, this.headers, this.requestOptions, this.clientConfig);
        this._addSocketListeners();
      };
      /**
       * Listener for the `data` event of the underlying WebSocket object
       *
       * @method _onMessage
       *
       * @returns {void}
       */
      WebsocketProvider.prototype._onMessage = function (e) {
        var _this = this;
        this._parseResponse(typeof e.data === "string" ? e.data : "").forEach(function (result) {
          if (result.method && result.method.indexOf("_subscription") !== -1) {
            _this.emit(_this.DATA, result);
            return;
          }
          var id = result.id;
          // get the id which matches the returned id
          if (Array.isArray(result)) {
            id = result[0].id;
          }
          if (_this.responseQueue.has(id)) {
            if (_this.responseQueue.get(id).callback !== undefined) {
              _this.responseQueue.get(id).callback(false, result);
            }
            _this.responseQueue.delete(id);
          }
        });
      };
      /**
       * Listener for the `open` event of the underlying WebSocket object
       *
       * @method _onConnect
       *
       * @returns {void}
       */
      WebsocketProvider.prototype._onConnect = function () {
        this.emit(this.CONNECT);
        this.reconnectAttempts = 0;
        this.reconnecting = false;
        if (this.requestQueue.size > 0) {
          var _this = this;
          this.requestQueue.forEach(function (request, key) {
            _this.send(request.payload, request.callback);
            _this.requestQueue.delete(key);
          });
        }
      };
      /**
       * Listener for the `close` event of the underlying WebSocket object
       *
       * @method _onClose
       *
       * @returns {void}
       */
      WebsocketProvider.prototype._onClose = function (event) {
        var _this = this;
        if (this.reconnectOptions.auto && (![1000, 1001].includes(event.code) || event.wasClean === false)) {
          this.reconnect();
          return;
        }
        this.emit(this.CLOSE, event);
        if (this.requestQueue.size > 0) {
          this.requestQueue.forEach(function (request, key) {
            request.callback(errors.ConnectionNotOpenError(event));
            _this.requestQueue.delete(key);
          });
        }
        if (this.responseQueue.size > 0) {
          this.responseQueue.forEach(function (request, key) {
            request.callback(errors.InvalidConnection("on WS", event));
            _this.responseQueue.delete(key);
          });
        }
        this._removeSocketListeners();
        this.removeAllListeners();
      };
      /**
       * Will add the required socket listeners
       *
       * @method _addSocketListeners
       *
       * @returns {void}
       */
      WebsocketProvider.prototype._addSocketListeners = function () {
        this.connection.addEventListener("message", this._onMessage.bind(this));
        this.connection.addEventListener("open", this._onConnect.bind(this));
        this.connection.addEventListener("close", this._onClose.bind(this));
      };
      /**
       * Will remove all socket listeners
       *
       * @method _removeSocketListeners
       *
       * @returns {void}
       */
      WebsocketProvider.prototype._removeSocketListeners = function () {
        this.connection.removeEventListener("message", this._onMessage);
        this.connection.removeEventListener("open", this._onConnect);
        this.connection.removeEventListener("close", this._onClose);
      };
      /**
       * Will parse the response and make an array out of it.
       *
       * @method _parseResponse
       *
       * @param {String} data
       *
       * @returns {Array}
       */
      WebsocketProvider.prototype._parseResponse = function (data) {
        var _this = this,
          returnValues = [];
        // DE-CHUNKER
        var dechunkedData = data
          .replace(/\}[\n\r]?\{/g, "}|--|{") // }{
          .replace(/\}\][\n\r]?\[\{/g, "}]|--|[{") // }][{
          .replace(/\}[\n\r]?\[\{/g, "}|--|[{") // }[{
          .replace(/\}\][\n\r]?\{/g, "}]|--|{") // }]{
          .split("|--|");
        dechunkedData.forEach(function (data) {
          // prepend the last chunk
          if (_this.lastChunk) data = _this.lastChunk + data;
          var result = null;
          try {
            result = JSON.parse(data);
          } catch (e) {
            _this.lastChunk = data;
            // start timeout to cancel all requests
            clearTimeout(_this.lastChunkTimeout);
            _this.lastChunkTimeout = setTimeout(function () {
              if (_this.reconnectOptions.auto && _this.reconnectOptions.onTimeout) {
                _this.reconnect();
                return;
              }
              _this.emit(_this.ERROR, errors.ConnectionTimeout(_this._customTimeout));
              if (_this.requestQueue.size > 0) {
                _this.requestQueue.forEach(function (request, key) {
                  request.callback(errors.ConnectionTimeout(_this._customTimeout));
                  _this.requestQueue.delete(key);
                });
              }
            }, _this._customTimeout);
            return;
          }
          // cancel timeout and set chunk to null
          clearTimeout(_this.lastChunkTimeout);
          _this.lastChunk = null;
          if (result) returnValues.push(result);
        });
        return returnValues;
      };
      /**
       * Does check if the provider is connecting and will add it to the queue or will send it directly
       *
       * @method send
       *
       * @param {Object} payload
       * @param {Function} callback
       *
       * @returns {void}
       */
      WebsocketProvider.prototype.send = function (payload, callback) {
        var _this = this;
        var id = payload.id;
        var request = { payload: payload, callback: callback };
        if (Array.isArray(payload)) {
          id = payload[0].id;
        }
        if (this.connection.readyState === this.connection.CONNECTING || this.reconnecting) {
          this.requestQueue.set(id, request);
          return;
        }
        if (this.connection.readyState !== this.connection.OPEN) {
          this.requestQueue.delete(id);
          this.emit(this.ERROR, errors.ConnectionNotOpenError());
          request.callback(errors.ConnectionNotOpenError());
          return;
        }
        this.responseQueue.set(id, request);
        this.requestQueue.delete(id);
        try {
          this.connection.send(JSON.stringify(request.payload));
        } catch (error) {
          request.callback(error);
          _this.responseQueue.delete(id);
        }
      };
      /**
       * Resets the providers, clears all callbacks
       *
       * @method reset
       *
       * @returns {void}
       */
      WebsocketProvider.prototype.reset = function () {
        this.responseQueue.clear();
        this.requestQueue.clear();
        this.removeAllListeners();
        this._removeSocketListeners();
        this._addSocketListeners();
      };
      /**
       * Closes the current connection with the given code and reason arguments
       *
       * @method disconnect
       *
       * @param {number} code
       * @param {string} reason
       *
       * @returns {void}
       */
      WebsocketProvider.prototype.disconnect = function (code, reason) {
        this._removeSocketListeners();
        this.connection.close(code || 1000, reason);
      };
      /**
       * Returns the desired boolean.
       *
       * @method supportsSubscriptions
       *
       * @returns {boolean}
       */
      WebsocketProvider.prototype.supportsSubscriptions = function () {
        return true;
      };
      /**
       * Removes the listeners and reconnects to the socket.
       *
       * @method reconnect
       *
       * @returns {void}
       */
      WebsocketProvider.prototype.reconnect = function () {
        var _this = this;
        this.reconnecting = true;
        if (this.responseQueue.size > 0) {
          this.responseQueue.forEach(function (request, key) {
            request.callback(errors.PendingRequestsOnReconnectingError());
            _this.responseQueue.delete(key);
          });
        }
        if (!this.reconnectOptions.maxAttempts || this.reconnectAttempts < this.reconnectOptions.maxAttempts) {
          setTimeout(function () {
            _this.reconnectAttempts++;
            _this._removeSocketListeners();
            _this.emit(_this.RECONNECT, _this.reconnectAttempts);
            _this.connect();
          }, this.reconnectOptions.delay);
          return;
        }
        this.emit(this.ERROR, errors.MaxAttemptsReachedOnReconnectingError());
        this.reconnecting = false;
        if (this.requestQueue.size > 0) {
          this.requestQueue.forEach(function (request, key) {
            request.callback(errors.MaxAttemptsReachedOnReconnectingError());
            _this.requestQueue.delete(key);
          });
        }
      };
      module.exports = WebsocketProvider;

      /***/
    },

    /***/ 5840: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      var _globalThis;
      if (typeof globalThis === "object") {
        _globalThis = globalThis;
      } else {
        try {
          _globalThis = __webpack_require__(284);
        } catch (error) {
        } finally {
          if (!_globalThis && typeof window !== "undefined") {
            _globalThis = window;
          }
          if (!_globalThis) {
            throw new Error("Could not determine global this");
          }
        }
      }

      var NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;
      var websocket_version = __webpack_require__(9387);

      /**
       * Expose a W3C WebSocket class with just one or two arguments.
       */
      function W3CWebSocket(uri, protocols) {
        var native_instance;

        if (protocols) {
          native_instance = new NativeWebSocket(uri, protocols);
        } else {
          native_instance = new NativeWebSocket(uri);
        }

        /**
         * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
         * class). Since it is an Object it will be returned as it is when creating an
         * instance of W3CWebSocket via 'new W3CWebSocket()'.
         *
         * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
         */
        return native_instance;
      }
      if (NativeWebSocket) {
        ["CONNECTING", "OPEN", "CLOSING", "CLOSED"].forEach(function (prop) {
          Object.defineProperty(W3CWebSocket, prop, {
            get: function () {
              return NativeWebSocket[prop];
            },
          });
        });
      }

      /**
       * Module exports.
       */
      module.exports = {
        w3cwebsocket: NativeWebSocket ? W3CWebSocket : null,
        version: websocket_version,
      };

      /***/
    },

    /***/ 9387: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      module.exports = __webpack_require__(9794).version;

      /***/
    },

    /***/ 6430: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var forEach = __webpack_require__(4029);
      var availableTypedArrays = __webpack_require__(3083);
      var callBound = __webpack_require__(1924);

      var $toString = callBound("Object.prototype.toString");
      var hasToStringTag = __webpack_require__(6410)();

      var g = typeof globalThis === "undefined" ? __webpack_require__.g : globalThis;
      var typedArrays = availableTypedArrays();

      var $slice = callBound("String.prototype.slice");
      var toStrTags = {};
      var gOPD = __webpack_require__(882);
      var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
      if (hasToStringTag && gOPD && getPrototypeOf) {
        forEach(typedArrays, function (typedArray) {
          if (typeof g[typedArray] === "function") {
            var arr = new g[typedArray]();
            if (Symbol.toStringTag in arr) {
              var proto = getPrototypeOf(arr);
              var descriptor = gOPD(proto, Symbol.toStringTag);
              if (!descriptor) {
                var superProto = getPrototypeOf(proto);
                descriptor = gOPD(superProto, Symbol.toStringTag);
              }
              toStrTags[typedArray] = descriptor.get;
            }
          }
        });
      }

      var tryTypedArrays = function tryAllTypedArrays(value) {
        var foundName = false;
        forEach(toStrTags, function (getter, typedArray) {
          if (!foundName) {
            try {
              var name = getter.call(value);
              if (name === typedArray) {
                foundName = name;
              }
            } catch (e) {}
          }
        });
        return foundName;
      };

      var isTypedArray = __webpack_require__(5692);

      module.exports = function whichTypedArray(value) {
        if (!isTypedArray(value)) {
          return false;
        }
        if (!hasToStringTag || !(Symbol.toStringTag in value)) {
          return $slice($toString(value), 8, -1);
        }
        return tryTypedArrays(value);
      };

      /***/
    },

    /***/ 7529: /***/ (module) => {
      module.exports = extend;

      var hasOwnProperty = Object.prototype.hasOwnProperty;

      function extend() {
        var target = {};

        for (var i = 0; i < arguments.length; i++) {
          var source = arguments[i];

          for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }

        return target;
      }

      /***/
    },

    /***/ 7702: /***/ (module) => {
      "use strict";
      module.exports = require("events");

      /***/
    },

    /***/ 6752: /***/ (module) => {
      "use strict";
      module.exports = require("web3-utils");

      /***/
    },

    /***/ 6601: /***/ () => {
      /* (ignored) */
      /***/
    },

    /***/ 9214: /***/ () => {
      /* (ignored) */
      /***/
    },

    /***/ 6854: /***/ () => {
      /* (ignored) */
      /***/
    },

    /***/ 4616: /***/ () => {
      /* (ignored) */
      /***/
    },

    /***/ 3083: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var possibleNames = [
        "BigInt64Array",
        "BigUint64Array",
        "Float32Array",
        "Float64Array",
        "Int16Array",
        "Int32Array",
        "Int8Array",
        "Uint16Array",
        "Uint32Array",
        "Uint8Array",
        "Uint8ClampedArray",
      ];

      var g = typeof globalThis === "undefined" ? __webpack_require__.g : globalThis;

      module.exports = function availableTypedArrays() {
        var out = [];
        for (var i = 0; i < possibleNames.length; i++) {
          if (typeof g[possibleNames[i]] === "function") {
            out[out.length] = possibleNames[i];
          }
        }
        return out;
      };

      /***/
    },

    /***/ 882: /***/ (module, __unused_webpack_exports, __webpack_require__) => {
      "use strict";

      var GetIntrinsic = __webpack_require__(210);

      var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
      if ($gOPD) {
        try {
          $gOPD([], "length");
        } catch (e) {
          // IE 8 has a broken gOPD
          $gOPD = null;
        }
      }

      module.exports = $gOPD;

      /***/
    },

    /***/ 8597: /***/ (module) => {
      "use strict";
      module.exports = { i8: "6.5.4" };

      /***/
    },

    /***/ 9794: /***/ (module) => {
      "use strict";
      module.exports = { version: "1.0.34" };

      /***/
    },

    /******/
  };
  /************************************************************************/
  /******/ // The module cache
  /******/ var __webpack_module_cache__ = {};
  /******/
  /******/ // The require function
  /******/ function __webpack_require__(moduleId) {
    /******/ // Check if module is in cache
    /******/ var cachedModule = __webpack_module_cache__[moduleId];
    /******/ if (cachedModule !== undefined) {
      /******/ return cachedModule.exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/ var module = (__webpack_module_cache__[moduleId] = {
      /******/ id: moduleId,
      /******/ loaded: false,
      /******/ exports: {},
      /******/
    });
    /******/
    /******/ // Execute the module function
    /******/ __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/ module.loaded = true;
    /******/
    /******/ // Return the exports of the module
    /******/ return module.exports;
    /******/
  }
  /******/
  /************************************************************************/
  /******/ /* webpack/runtime/amd options */
  /******/ (() => {
    /******/ __webpack_require__.amdO = {};
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/compat get default export */
  /******/ (() => {
    /******/ // getDefaultExport function for compatibility with non-harmony modules
    /******/ __webpack_require__.n = (module) => {
      /******/ var getter = module && module.__esModule ? /******/ () => module["default"] : /******/ () => module;
      /******/ __webpack_require__.d(getter, { a: getter });
      /******/ return getter;
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/define property getters */
  /******/ (() => {
    /******/ // define getter functions for harmony exports
    /******/ __webpack_require__.d = (exports, definition) => {
      /******/ for (var key in definition) {
        /******/ if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
          /******/ Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
          /******/
        }
        /******/
      }
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/global */
  /******/ (() => {
    /******/ __webpack_require__.g = (function () {
      /******/ if (typeof globalThis === "object") return globalThis;
      /******/ try {
        /******/ return this || new Function("return this")();
        /******/
      } catch (e) {
        /******/ if (typeof window === "object") return window;
        /******/
      }
      /******/
    })();
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/hasOwnProperty shorthand */
  /******/ (() => {
    /******/ __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/make namespace object */
  /******/ (() => {
    /******/ // define __esModule on exports
    /******/ __webpack_require__.r = (exports) => {
      /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        /******/ Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        /******/
      }
      /******/ Object.defineProperty(exports, "__esModule", { value: true });
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/node module decorator */
  /******/ (() => {
    /******/ __webpack_require__.nmd = (module) => {
      /******/ module.paths = [];
      /******/ if (!module.children) module.children = [];
      /******/ return module;
      /******/
    };
    /******/
  })();
  /******/
  /************************************************************************/
  var __webpack_exports__ = {};
  // This entry need to be wrapped in an IIFE because it need to be in strict mode.
  (() => {
    "use strict";
    // ESM COMPAT FLAG
    __webpack_require__.r(__webpack_exports__);

    // EXPORTS
    __webpack_require__.d(__webpack_exports__, {
      AGGREGATE_VERIFIER: () => /* reexport */ AGGREGATE_VERIFIER,
      CONTRACT_MAP: () => /* reexport */ CONTRACT_MAP,
      LOGIN: () => /* reexport */ LOGIN,
      REDIRECT_PARAMS_STORAGE_METHOD: () => /* reexport */ REDIRECT_PARAMS_STORAGE_METHOD,
      SENTRY_TXNS: () => /* reexport */ SENTRY_TXNS,
      SIGNER_MAP: () => /* reexport */ SIGNER_MAP,
      SkipTorusKey: () => /* reexport */ SkipTorusKey,
      TORUS_METHOD: () => /* reexport */ TORUS_METHOD,
      UX_MODE: () => /* reexport */ UX_MODE,
      are3PCSupported: () => /* reexport */ helpers_are3PCSupported,
      broadcastChannelOptions: () => /* reexport */ broadcastChannelOptions,
      constructURL: () => /* reexport */ constructURL,
      createHandler: () => /* reexport */ HandlerFactory,
      default: () => /* reexport */ login,
      eventToPromise: () => /* reexport */ eventToPromise,
      getPopupFeatures: () => /* reexport */ getPopupFeatures,
      getVerifierId: () => /* reexport */ getVerifierId,
      handleRedirectParameters: () => /* reexport */ handleRedirectParameters,
      isFirefox: () => /* reexport */ isFirefox,
      loginToConnectionMap: () => /* reexport */ loginToConnectionMap,
      padUrlString: () => /* reexport */ padUrlString,
      randomId: () => /* reexport */ randomId,
      storageAvailable: () => /* reexport */ storageAvailable,
      validateAndConstructUrl: () => /* reexport */ validateAndConstructUrl,
    });

    // NAMESPACE OBJECT: ./node_modules/socket.io-parser/build/esm/index.js
    var socket_io_parser_build_esm_namespaceObject = {};
    __webpack_require__.r(socket_io_parser_build_esm_namespaceObject);
    __webpack_require__.d(socket_io_parser_build_esm_namespaceObject, {
      Decoder: () => Decoder,
      Encoder: () => Encoder,
      PacketType: () => PacketType,
      protocol: () => build_esm_protocol,
    }); // CONCATENATED MODULE: external "@babel/runtime/helpers/defineProperty"

    const defineProperty_namespaceObject = require("@babel/runtime/helpers/defineProperty");
    var defineProperty_default = /*#__PURE__*/ __webpack_require__.n(defineProperty_namespaceObject); // CONCATENATED MODULE: external "@babel/runtime/helpers/asyncToGenerator"
    const asyncToGenerator_namespaceObject = require("@babel/runtime/helpers/asyncToGenerator");
    var asyncToGenerator_default = /*#__PURE__*/ __webpack_require__.n(asyncToGenerator_namespaceObject); // CONCATENATED MODULE: external "@babel/runtime/helpers/classCallCheck"
    const classCallCheck_namespaceObject = require("@babel/runtime/helpers/classCallCheck");
    var classCallCheck_default = /*#__PURE__*/ __webpack_require__.n(classCallCheck_namespaceObject); // CONCATENATED MODULE: external "@babel/runtime/helpers/createClass"
    const createClass_namespaceObject = require("@babel/runtime/helpers/createClass");
    var createClass_default = /*#__PURE__*/ __webpack_require__.n(createClass_namespaceObject); // CONCATENATED MODULE: external "@babel/runtime/regenerator"
    const regenerator_namespaceObject = require("@babel/runtime/regenerator");
    var regenerator_default = /*#__PURE__*/ __webpack_require__.n(regenerator_namespaceObject);
    // EXTERNAL MODULE: ./node_modules/web3-eth-contract/lib/index.js
    var lib = __webpack_require__(1692);
    var lib_default = /*#__PURE__*/ __webpack_require__.n(lib);
    // EXTERNAL MODULE: external "web3-utils"
    var external_web3_utils_ = __webpack_require__(6752); // CONCATENATED MODULE: ./node_modules/@toruslabs/fetch-node-details/dist/fetchNodeDetails.esm.js
    var _NETWORK_MAP;

    var TORUS_NETWORK = {
      TESTNET: "testnet",
      MAINNET: "mainnet",
      CYAN: "cyan",
      AQUA: "aqua",
    };
    var NETWORK_MAP =
      ((_NETWORK_MAP = {}),
      defineProperty_default()(_NETWORK_MAP, TORUS_NETWORK.MAINNET, "mainnet"),
      defineProperty_default()(_NETWORK_MAP, TORUS_NETWORK.TESTNET, "ropsten"),
      defineProperty_default()(_NETWORK_MAP, TORUS_NETWORK.CYAN, "polygon-mainnet"),
      defineProperty_default()(_NETWORK_MAP, TORUS_NETWORK.AQUA, "polygon-mainnet"),
      _NETWORK_MAP);
    var abi = [
      {
        inputs: [
          {
            internalType: "string",
            name: "_verifier",
            type: "string",
          },
          {
            internalType: "bytes32",
            name: "hashedVerifierId",
            type: "bytes32",
          },
        ],
        name: "getNodeSet",
        outputs: [
          {
            internalType: "uint256",
            name: "currentEpoch",
            type: "uint256",
          },
          {
            internalType: "string[]",
            name: "torusNodeEndpoints",
            type: "string[]",
          },
          {
            internalType: "uint256[]",
            name: "torusNodePubX",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "torusNodePubY",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "torusIndexes",
            type: "uint256[]",
          },
        ],
        stateMutability: "view",
        type: "function",
      },
    ];

    var NodeDetailManager = /*#__PURE__*/ (function () {
      function NodeDetailManager() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$network = _ref.network,
          network = _ref$network === void 0 ? TORUS_NETWORK.MAINNET : _ref$network,
          _ref$proxyAddress = _ref.proxyAddress,
          proxyAddress = _ref$proxyAddress === void 0 ? NodeDetailManager.PROXY_ADDRESS_MAINNET : _ref$proxyAddress;

        classCallCheck_default()(this, NodeDetailManager);

        defineProperty_default()(this, "_currentEpoch", "");

        defineProperty_default()(this, "_torusNodeEndpoints", []);

        defineProperty_default()(this, "_torusNodePub", []);

        defineProperty_default()(this, "_torusIndexes", []);

        defineProperty_default()(this, "nodeListAddress", void 0);

        defineProperty_default()(this, "updated", void 0);

        defineProperty_default()(this, "nodeListContract", void 0);

        var url;

        try {
          var localUrl = new URL(network);
          url = localUrl.href;
        } catch (_) {
          var projectId = "b8cdb0e4cff24599a286bf8e87ff1c96";
          url = "https://".concat(NETWORK_MAP[network], ".infura.io/v3/").concat(projectId);
        }

        lib_default().setProvider(url);
        this.nodeListContract = new (lib_default())(abi, proxyAddress);
        this.nodeListAddress = proxyAddress;
        this.updated = false;
      }

      createClass_default()(NodeDetailManager, [
        {
          key: "_nodeDetails",
          get: function get() {
            return {
              currentEpoch: this._currentEpoch,
              nodeListAddress: this.nodeListAddress,
              torusNodeEndpoints: this._torusNodeEndpoints,
              torusNodePub: this._torusNodePub,
              torusIndexes: this._torusIndexes,
              updated: this.updated,
            };
          },
        },
        {
          key: "getNodeDetails",
          value: (function () {
            var _getNodeDetails = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee(_ref2) {
                var verifier,
                  verifierId,
                  hashedVerifierId,
                  nodeDetails,
                  currentEpoch,
                  torusNodeEndpoints,
                  torusNodePubX,
                  torusNodePubY,
                  torusIndexes,
                  updatedEndpoints,
                  updatedNodePub,
                  index,
                  endPointElement,
                  pubKx,
                  pubKy,
                  endpoint;
                return regenerator_default().wrap(
                  function _callee$(_context) {
                    while (1) {
                      switch ((_context.prev = _context.next)) {
                        case 0:
                          (verifier = _ref2.verifier), (verifierId = _ref2.verifierId);
                          _context.prev = 1;

                          if (
                            !(
                              this.updated &&
                              (this.nodeListAddress === NodeDetailManager.PROXY_ADDRESS_MAINNET ||
                                this.nodeListAddress === NodeDetailManager.PROXY_ADDRESS_TESTNET)
                            )
                          ) {
                            _context.next = 4;
                            break;
                          }

                          return _context.abrupt("return", this._nodeDetails);

                        case 4:
                          hashedVerifierId = (0, external_web3_utils_.keccak256)(verifierId);
                          _context.next = 7;
                          return this.nodeListContract.methods.getNodeSet(verifier, hashedVerifierId).call();

                        case 7:
                          nodeDetails = _context.sent;
                          (currentEpoch = nodeDetails.currentEpoch),
                            (torusNodeEndpoints = nodeDetails.torusNodeEndpoints),
                            (torusNodePubX = nodeDetails.torusNodePubX),
                            (torusNodePubY = nodeDetails.torusNodePubY),
                            (torusIndexes = nodeDetails.torusIndexes);
                          this._currentEpoch = currentEpoch;
                          this._torusIndexes = torusIndexes.map(function (x) {
                            return Number(x);
                          });
                          updatedEndpoints = [];
                          updatedNodePub = [];

                          for (index = 0; index < torusNodeEndpoints.length; index += 1) {
                            endPointElement = torusNodeEndpoints[index];
                            pubKx = torusNodePubX[index];
                            pubKy = torusNodePubY[index];
                            endpoint = "https://".concat(endPointElement.split(":")[0], "/jrpc");
                            updatedEndpoints.push(endpoint);
                            updatedNodePub.push({
                              X: (0, external_web3_utils_.toHex)(pubKx).replace("0x", ""),
                              Y: (0, external_web3_utils_.toHex)(pubKy).replace("0x", ""),
                            });
                          }

                          this._torusNodeEndpoints = updatedEndpoints;
                          this._torusNodePub = updatedNodePub;
                          this.updated = true;
                          return _context.abrupt("return", this._nodeDetails);

                        case 20:
                          _context.prev = 20;
                          _context.t0 = _context["catch"](1);

                          if (!(this.nodeListAddress === NodeDetailManager.PROXY_ADDRESS_MAINNET)) {
                            _context.next = 24;
                            break;
                          }

                          return _context.abrupt("return", NodeDetailManager.NODE_DETAILS_MAINNET);

                        case 24:
                          throw _context.t0;

                        case 25:
                        case "end":
                          return _context.stop();
                      }
                    }
                  },
                  _callee,
                  this,
                  [[1, 20]]
                );
              })
            );

            function getNodeDetails(_x) {
              return _getNodeDetails.apply(this, arguments);
            }

            return getNodeDetails;
          })(),
        },
      ]);

      return NodeDetailManager;
    })();

    defineProperty_default()(NodeDetailManager, "PROXY_ADDRESS_MAINNET", "0xf20336e16B5182637f09821c27BDe29b0AFcfe80");

    defineProperty_default()(NodeDetailManager, "PROXY_ADDRESS_TESTNET", "0x6258c9d6c12ed3edda59a1a6527e469517744aa7");

    defineProperty_default()(NodeDetailManager, "PROXY_ADDRESS_CYAN", "0x9f072ba19b3370e512aa1b4bfcdaf97283168005");

    defineProperty_default()(NodeDetailManager, "PROXY_ADDRESS_AQUA", "0x29Dea82a0509153b91040ee13cDBba0f03efb625");

    defineProperty_default()(NodeDetailManager, "NODE_DETAILS_MAINNET", {
      currentEpoch: "19",
      nodeListAddress: NodeDetailManager.PROXY_ADDRESS_MAINNET,
      torusNodeEndpoints: [
        "https://torus-19.torusnode.com/jrpc",
        "https://torus-node.ens.domains/jrpc",
        "https://torus-node.matic.network/jrpc",
        "https://torus.zilliqa.network/jrpc",
        "https://torus-mainnet.cosmos.network/jrpc",
        "https://torus2.etherscan.com/jrpc",
        "https://torus-node-v2.skalelabs.com/jrpc",
        "https://torus-node.binancex.dev/jrpc",
        "https://torusnode.ont.io/jrpc",
      ],
      torusIndexes: [1, 2, 3, 4, 5, 6, 7, 8, 9],
      torusNodePub: [
        {
          X: "bbe83c64177c3775550e6ba6ac2bc059f6847d644c9e4894e42c60d7974d8c2b",
          Y: "82b49a7caf70def38cdad2740af45c1e4f969650105c5019a29bb18b21a9acb5",
        },
        {
          X: "c208cac4ef9a47d386097a9c915b28e9cb89213abee8d26a17198ee261201b0d",
          Y: "c7db2fe4631109f40833de9dc78d07e35706549ee48fa557b33e4e75e1047873",
        },
        {
          X: "ca1766bb426d4ca5582818a0c5439d560ea64f5baa060793ab29dd3d0ceacfe",
          Y: "d46c1d08c40e1306e1bca328c2287b8268166b11a1ba4b8442ea2ad0c5e32152",
        },
        {
          X: "c3934dd2f6f4b3d2e1e398cc501e143c1e1a381b52feb6d1525af34d16253768",
          Y: "71f5141a5035799099f5ea3e241e66946bc55dc857ac3bd7d6fcdb8dcd3eeeef",
        },
        {
          X: "22e66f1929631d00bf026227581597f085fd94fd952fc0dca9f0833398b5c064",
          Y: "6088b3912e10a1e9d50355a609c10db7d188f16a2e2fd7357e51bf4f6a74f0a1",
        },
        {
          X: "9dc9fa410f3ce9eb70df70cdea00a49f2c4cc7a31c08c0dab5f863ed35ff5139",
          Y: "627a291cb87a75c61da3f65d6818e1e05e360217179817ed27e8c73bca7ec122",
        },
        {
          X: "118b9fc07e97b096d899b9f6658463ce6a8caa64038e37fc969df4e6023dd8c6",
          Y: "baf9fa4e51770f4796ea165dd03a769b8606681a38954a0a92c4cbffd6609ce9",
        },
        {
          X: "8a6d8b925da15a273dec3d8f8395ec35cd6878f274b2b180e4e106999db64043",
          Y: "96f67f870c157743da0b1eb84d89bf30500d74dc84c11f501ee1cb013acc8c46",
        },
        {
          X: "39cecb62e863729f572f7dfc46c24867981bf04bb405fed0df39e33984bfade5",
          Y: "61c2364434012e68a2be2e9952805037e52629d7762fafc8e10e9fb5bad8f790",
        },
      ],
      updated: false,
    }); // CONCATENATED MODULE: ./src/utils/enums.ts

    //# sourceMappingURL=fetchNodeDetails.esm.js.map

    var _CONTRACT_MAP, _SIGNER_MAP;

    var LOGIN = {
      GOOGLE: "google",
      FACEBOOK: "facebook",
      REDDIT: "reddit",
      DISCORD: "discord",
      TWITCH: "twitch",
      APPLE: "apple",
      GITHUB: "github",
      LINKEDIN: "linkedin",
      TWITTER: "twitter",
      WEIBO: "weibo",
      LINE: "line",
      EMAIL_PASSWORD: "email_password",
      PASSWORDLESS: "passwordless",
      JWT: "jwt",
      WEBAUTHN: "webauthn",
    };
    var AGGREGATE_VERIFIER = {
      SINGLE_VERIFIER_ID: "single_id_verifier", // AND_AGGREGATE_VERIFIER : "and_aggregate_verifier",
      // OR_AGGREGATE_VERIFIER : "or_aggregate_verifier",
    };
    var UX_MODE = {
      POPUP: "popup",
      REDIRECT: "redirect",
    };
    var REDIRECT_PARAMS_STORAGE_METHOD = {
      LOCAL_STORAGE: "localStorage",
      SESSION_STORAGE: "sessionStorage",
      SERVER: "server",
    };
    var TORUS_METHOD = {
      TRIGGER_LOGIN: "triggerLogin",
      TRIGGER_AGGREGATE_LOGIN: "triggerAggregateLogin",
      TRIGGER_AGGREGATE_HYBRID_LOGIN: "triggerHybridAggregateLogin",
    };
    var CONTRACT_MAP =
      ((_CONTRACT_MAP = {}),
      defineProperty_default()(_CONTRACT_MAP, TORUS_NETWORK.MAINNET, NodeDetailManager.PROXY_ADDRESS_MAINNET),
      defineProperty_default()(_CONTRACT_MAP, TORUS_NETWORK.TESTNET, NodeDetailManager.PROXY_ADDRESS_TESTNET),
      defineProperty_default()(_CONTRACT_MAP, TORUS_NETWORK.CYAN, NodeDetailManager.PROXY_ADDRESS_CYAN),
      defineProperty_default()(_CONTRACT_MAP, TORUS_NETWORK.AQUA, NodeDetailManager.PROXY_ADDRESS_AQUA),
      _CONTRACT_MAP);
    var SIGNER_MAP =
      ((_SIGNER_MAP = {}),
      defineProperty_default()(_SIGNER_MAP, TORUS_NETWORK.MAINNET, "https://signer.tor.us"),
      defineProperty_default()(_SIGNER_MAP, TORUS_NETWORK.TESTNET, "https://signer.tor.us"),
      defineProperty_default()(_SIGNER_MAP, TORUS_NETWORK.CYAN, "https://signer-polygon.tor.us"),
      defineProperty_default()(_SIGNER_MAP, TORUS_NETWORK.AQUA, "https://signer-polygon.tor.us"),
      _SIGNER_MAP);
    var SENTRY_TXNS = {
      FETCH_NODE_DETAILS: "fetchNodeDetails",
      PUB_ADDRESS_LOOKUP: "pubAddressLookup",
      FETCH_SHARES: "fetchShares",
    }; // CONCATENATED MODULE: external "@babel/runtime/helpers/assertThisInitialized"
    const assertThisInitialized_namespaceObject = require("@babel/runtime/helpers/assertThisInitialized");
    var assertThisInitialized_default = /*#__PURE__*/ __webpack_require__.n(assertThisInitialized_namespaceObject); // CONCATENATED MODULE: external "@babel/runtime/helpers/inherits"
    const inherits_namespaceObject = require("@babel/runtime/helpers/inherits");
    var inherits_default = /*#__PURE__*/ __webpack_require__.n(inherits_namespaceObject); // CONCATENATED MODULE: external "@babel/runtime/helpers/possibleConstructorReturn"
    const possibleConstructorReturn_namespaceObject = require("@babel/runtime/helpers/possibleConstructorReturn");
    var possibleConstructorReturn_default = /*#__PURE__*/ __webpack_require__.n(possibleConstructorReturn_namespaceObject); // CONCATENATED MODULE: external "@babel/runtime/helpers/getPrototypeOf"
    const getPrototypeOf_namespaceObject = require("@babel/runtime/helpers/getPrototypeOf");
    var getPrototypeOf_default = /*#__PURE__*/ __webpack_require__.n(getPrototypeOf_namespaceObject); // CONCATENATED MODULE: external "@toruslabs/http-helpers"
    const http_helpers_namespaceObject = require("@toruslabs/http-helpers"); // CONCATENATED MODULE: external "lodash.merge"
    const external_lodash_merge_namespaceObject = require("lodash.merge");
    var external_lodash_merge_default = /*#__PURE__*/ __webpack_require__.n(external_lodash_merge_namespaceObject); // CONCATENATED MODULE: external "@babel/runtime/helpers/objectWithoutProperties"
    const objectWithoutProperties_namespaceObject = require("@babel/runtime/helpers/objectWithoutProperties");
    var objectWithoutProperties_default = /*#__PURE__*/ __webpack_require__.n(objectWithoutProperties_namespaceObject); // CONCATENATED MODULE: external "bowser"
    const external_bowser_namespaceObject = require("bowser");
    var external_bowser_default = /*#__PURE__*/ __webpack_require__.n(external_bowser_namespaceObject); // CONCATENATED MODULE: external "loglevel"
    const external_loglevel_namespaceObject = require("loglevel");
    var external_loglevel_default = /*#__PURE__*/ __webpack_require__.n(external_loglevel_namespaceObject); // CONCATENATED MODULE: ./node_modules/@toruslabs/broadcast-channel/dist/esbrowser/util.js
    /**
     * returns true if the given object is a promise
     */

    function isPromise(obj) {
      if (obj && typeof obj.then === "function") {
        return true;
      } else {
        return false;
      }
    }
    var PROMISE_RESOLVED_FALSE = Promise.resolve(false);
    var PROMISE_RESOLVED_TRUE = Promise.resolve(true);
    var PROMISE_RESOLVED_VOID = Promise.resolve();
    function sleep(time, resolveWith) {
      if (!time) time = 0;
      return new Promise(function (res) {
        return setTimeout(function () {
          return res(resolveWith);
        }, time);
      });
    }
    function randomInt(min, max) {
      return Math.floor(Math.random() * (max - min + 1) + min);
    }
    /**
     * https://stackoverflow.com/a/8084248
     */

    function randomToken() {
      return Math.random().toString(36).substring(2);
    }
    var lastMs = 0;
    var additional = 0;
    /**
     * returns the current time in micro-seconds,
     * WARNING: This is a pseudo-function
     * Performance.now is not reliable in webworkers, so we just make sure to never return the same time.
     * This is enough in browsers, and this function will not be used in nodejs.
     * The main reason for this hack is to ensure that BroadcastChannel behaves equal to production when it is used in fast-running unit tests.
     */

    function microSeconds() {
      var ms = new Date().getTime();

      if (ms === lastMs) {
        additional++;
        return ms * 1000 + additional;
      } else {
        lastMs = ms;
        additional = 0;
        return ms * 1000;
      }
    }
    function are3PCSupported() {
      if (typeof navigator === "undefined") return false;
      var browserInfo = external_bowser_default().parse(navigator.userAgent);
      log.info(JSON.stringify(browserInfo), "current browser info");
      var thirdPartyCookieSupport = true; // brave

      if (navigator.brave) {
        thirdPartyCookieSupport = false;
      } // All webkit & gecko engine instances use itp (intelligent tracking prevention -
      // https://webkit.org/tracking-prevention/#intelligent-tracking-prevention-itp)

      if (
        browserInfo.engine.name === external_bowser_default().ENGINE_MAP.WebKit ||
        browserInfo.engine.name === external_bowser_default().ENGINE_MAP.Gecko
      ) {
        thirdPartyCookieSupport = false;
      }

      return thirdPartyCookieSupport;
    }
    var log = external_loglevel_default().getLogger("broadcast-channel");
    log.setLevel("error");
    var setLogLevel = function setLogLevel(level) {
      log.setLevel(level);
    }; // CONCATENATED MODULE: ./node_modules/@toruslabs/broadcast-channel/dist/esbrowser/methods/native.js
    var native_microSeconds = microSeconds;
    var type = "native";
    function create(channelName) {
      var state = {
        messagesCallback: null,
        bc: new BroadcastChannel(channelName),
        subFns: [], // subscriberFunctions
      };

      state.bc.onmessage = function (msg) {
        if (state.messagesCallback) {
          state.messagesCallback(msg.data);
        }
      };

      return state;
    }
    function native_close(channelState) {
      channelState.bc.close();
      channelState.subFns = [];
    }
    function postMessage(channelState, messageJson) {
      try {
        channelState.bc.postMessage(messageJson, false);
        return PROMISE_RESOLVED_VOID;
      } catch (err) {
        return Promise.reject(err);
      }
    }
    function onMessage(channelState, fn) {
      channelState.messagesCallback = fn;
    }
    function canBeUsed(options) {
      /**
       * in the electron-renderer, isNode will be true even if we are in browser-context
       * so we also check if window is undefined
       */
      if (typeof window === "undefined") return false;
      if (!options.support3PC) return false;

      if (typeof BroadcastChannel === "function") {
        if (BroadcastChannel._pubkey) {
          throw new Error("BroadcastChannel: Do not overwrite window.BroadcastChannel with this module, this is not a polyfill");
        }

        return true;
      } else return false;
    }
    function averageResponseTime() {
      return 150;
    }
    /* harmony default export */ const methods_native = {
      create: create,
      close: native_close,
      onMessage: onMessage,
      postMessage: postMessage,
      canBeUsed: canBeUsed,
      type: type,
      averageResponseTime: averageResponseTime,
      microSeconds: native_microSeconds,
    }; // CONCATENATED MODULE: ./node_modules/oblivious-set/dist/es/index.js
    /**
     * this is a set which automatically forgets
     * a given entry when a new entry is set and the ttl
     * of the old one is over
     */
    var ObliviousSet = /** @class */ (function () {
      function ObliviousSet(ttl) {
        this.ttl = ttl;
        this.map = new Map();
        /**
         * Creating calls to setTimeout() is expensive,
         * so we only do that if there is not timeout already open.
         */
        this._to = false;
      }
      ObliviousSet.prototype.has = function (value) {
        return this.map.has(value);
      };
      ObliviousSet.prototype.add = function (value) {
        var _this = this;
        this.map.set(value, now());
        /**
         * When a new value is added,
         * start the cleanup at the next tick
         * to not block the cpu for more important stuff
         * that might happen.
         */
        if (!this._to) {
          this._to = true;
          setTimeout(function () {
            _this._to = false;
            removeTooOldValues(_this);
          }, 0);
        }
      };
      ObliviousSet.prototype.clear = function () {
        this.map.clear();
      };
      return ObliviousSet;
    })();

    /**
     * Removes all entries from the set
     * where the TTL has expired
     */
    function removeTooOldValues(obliviousSet) {
      var olderThen = now() - obliviousSet.ttl;
      var iterator = obliviousSet.map[Symbol.iterator]();
      /**
       * Because we can assume the new values are added at the bottom,
       * we start from the top and stop as soon as we reach a non-too-old value.
       */
      while (true) {
        var next = iterator.next().value;
        if (!next) {
          return; // no more elements
        }
        var value = next[0];
        var time = next[1];
        if (time < olderThen) {
          obliviousSet.map.delete(value);
        } else {
          // We reached a value that is not old enough
          return;
        }
      }
    }
    function now() {
      return new Date().getTime();
    } // CONCATENATED MODULE: ./node_modules/@toruslabs/broadcast-channel/dist/esbrowser/options.js
    //# sourceMappingURL=index.js.map
    function fillOptionsWithDefaults() {
      var originalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var options = JSON.parse(JSON.stringify(originalOptions));
      if (typeof options.support3PC === "undefined") options.support3PC = are3PCSupported(); // main

      if (typeof options.webWorkerSupport === "undefined") options.webWorkerSupport = true; // indexed-db

      if (!options.idb) options.idb = {}; //  after this time the messages get deleted

      if (!options.idb.ttl) options.idb.ttl = 1000 * 45;
      if (!options.idb.fallbackInterval) options.idb.fallbackInterval = 150; //  handles abrupt db onclose events.

      if (originalOptions.idb && typeof originalOptions.idb.onclose === "function") options.idb.onclose = originalOptions.idb.onclose; // localstorage

      if (!options.localstorage) options.localstorage = {};
      if (!options.localstorage.removeTimeout) options.localstorage.removeTimeout = 1000 * 60; // server

      if (!options.server) options.server = {};
      if (!options.server.url) options.server.url = "https://broadcast-server.tor.us";
      if (!options.server.removeTimeout) options.server.removeTimeout = 1000 * 60 * 5; // 5 minutes
      // custom methods

      if (originalOptions.methods) options.methods = originalOptions.methods;
      return options;
    } // CONCATENATED MODULE: ./node_modules/@toruslabs/broadcast-channel/dist/esbrowser/methods/indexed-db.js
    /**
     * this method uses indexeddb to store the messages
     * There is currently no observerAPI for idb
     * @link https://github.com/w3c/IndexedDB/issues/51
     *
     * When working on this, ensure to use these performance optimizations:
     * @link https://rxdb.info/slow-indexeddb.html
     */

    var indexed_db_microSeconds = microSeconds;

    var DB_PREFIX = "pubkey.broadcast-channel-0-";
    var OBJECT_STORE_ID = "messages";
    /**
     * Use relaxed durability for faster performance on all transactions.
     * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/
     */

    var TRANSACTION_SETTINGS = {
      durability: "relaxed",
    };
    var indexed_db_type = "idb";
    function getIdb() {
      if (typeof indexedDB !== "undefined") return indexedDB;

      if (typeof window !== "undefined") {
        if (typeof window.mozIndexedDB !== "undefined") return window.mozIndexedDB;
        if (typeof window.webkitIndexedDB !== "undefined") return window.webkitIndexedDB;
        if (typeof window.msIndexedDB !== "undefined") return window.msIndexedDB;
      }

      return false;
    }
    /**
     * If possible, we should explicitly commit IndexedDB transactions
     * for better performance.
     * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/
     */

    function commitIndexedDBTransaction(tx) {
      if (tx.commit) {
        tx.commit();
      }
    }
    function createDatabase(channelName) {
      var IndexedDB = getIdb(); // create table

      var dbName = DB_PREFIX + channelName;
      /**
       * All IndexedDB databases are opened without version
       * because it is a bit faster, especially on firefox
       * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version
       */

      var openRequest = IndexedDB.open(dbName);

      openRequest.onupgradeneeded = function (ev) {
        var db = ev.target.result;
        db.createObjectStore(OBJECT_STORE_ID, {
          keyPath: "id",
          autoIncrement: true,
        });
      };

      var dbPromise = new Promise(function (res, rej) {
        openRequest.onerror = function (ev) {
          return rej(ev);
        };

        openRequest.onsuccess = function () {
          res(openRequest.result);
        };
      });
      return dbPromise;
    }
    /**
     * writes the new message to the database
     * so other readers can find it
     */

    function writeMessage(db, readerUuid, messageJson) {
      var time = new Date().getTime();
      var writeObject = {
        uuid: readerUuid,
        time: time,
        data: messageJson,
      };
      var tx = db.transaction([OBJECT_STORE_ID], "readwrite", TRANSACTION_SETTINGS);
      return new Promise(function (res, rej) {
        tx.oncomplete = function () {
          return res();
        };

        tx.onerror = function (ev) {
          return rej(ev);
        };

        var objectStore = tx.objectStore(OBJECT_STORE_ID);
        objectStore.add(writeObject);
        commitIndexedDBTransaction(tx);
      });
    }
    function getAllMessages(db) {
      var tx = db.transaction(OBJECT_STORE_ID, "readonly", TRANSACTION_SETTINGS);
      var objectStore = tx.objectStore(OBJECT_STORE_ID);
      var ret = [];
      return new Promise(function (res) {
        objectStore.openCursor().onsuccess = function (ev) {
          var cursor = ev.target.result;

          if (cursor) {
            ret.push(cursor.value); //alert("Name for SSN " + cursor.key + " is " + cursor.value.name);

            cursor["continue"]();
          } else {
            commitIndexedDBTransaction(tx);
            res(ret);
          }
        };
      });
    }
    function getMessagesHigherThan(db, lastCursorId) {
      var tx = db.transaction(OBJECT_STORE_ID, "readonly", TRANSACTION_SETTINGS);
      var objectStore = tx.objectStore(OBJECT_STORE_ID);
      var ret = [];
      var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);
      /**
       * Optimization shortcut,
       * if getAll() can be used, do not use a cursor.
       * @link https://rxdb.info/slow-indexeddb.html
       */

      if (objectStore.getAll) {
        var getAllRequest = objectStore.getAll(keyRangeValue);
        return new Promise(function (res, rej) {
          getAllRequest.onerror = function (err) {
            return rej(err);
          };

          getAllRequest.onsuccess = function (e) {
            res(e.target.result);
          };
        });
      }

      function openCursor() {
        // Occasionally Safari will fail on IDBKeyRange.bound, this
        // catches that error, having it open the cursor to the first
        // item. When it gets data it will advance to the desired key.
        try {
          keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);
          return objectStore.openCursor(keyRangeValue);
        } catch (e) {
          return objectStore.openCursor();
        }
      }

      return new Promise(function (res, rej) {
        var openCursorRequest = openCursor();

        openCursorRequest.onerror = function (err) {
          return rej(err);
        };

        openCursorRequest.onsuccess = function (ev) {
          var cursor = ev.target.result;

          if (cursor) {
            if (cursor.value.id < lastCursorId + 1) {
              cursor["continue"](lastCursorId + 1);
            } else {
              ret.push(cursor.value);
              cursor["continue"]();
            }
          } else {
            commitIndexedDBTransaction(tx);
            res(ret);
          }
        };
      });
    }
    function removeMessagesById(db, ids) {
      var tx = db.transaction([OBJECT_STORE_ID], "readwrite", TRANSACTION_SETTINGS);
      var objectStore = tx.objectStore(OBJECT_STORE_ID);
      return Promise.all(
        ids.map(function (id) {
          var deleteRequest = objectStore["delete"](id);
          return new Promise(function (res) {
            deleteRequest.onsuccess = function () {
              return res();
            };
          });
        })
      );
    }
    function getOldMessages(db, ttl) {
      var olderThen = new Date().getTime() - ttl;
      var tx = db.transaction(OBJECT_STORE_ID, "readonly", TRANSACTION_SETTINGS);
      var objectStore = tx.objectStore(OBJECT_STORE_ID);
      var ret = [];
      return new Promise(function (res) {
        objectStore.openCursor().onsuccess = function (ev) {
          var cursor = ev.target.result;

          if (cursor) {
            var msgObk = cursor.value;

            if (msgObk.time < olderThen) {
              ret.push(msgObk); //alert("Name for SSN " + cursor.key + " is " + cursor.value.name);

              cursor["continue"]();
            } else {
              // no more old messages,
              commitIndexedDBTransaction(tx);
              res(ret);
              return;
            }
          } else {
            res(ret);
          }
        };
      });
    }
    function cleanOldMessages(db, ttl) {
      return getOldMessages(db, ttl).then(function (tooOld) {
        return removeMessagesById(
          db,
          tooOld.map(function (msg) {
            return msg.id;
          })
        );
      });
    }
    function indexed_db_create(channelName, options) {
      options = fillOptionsWithDefaults(options);
      return createDatabase(channelName).then(function (db) {
        var state = {
          closed: false,
          lastCursorId: 0,
          channelName: channelName,
          options: options,
          uuid: randomToken(),

          /**
           * emittedMessagesIds
           * contains all messages that have been emitted before
           * @type {ObliviousSet}
           */
          eMIs: new ObliviousSet(options.idb.ttl * 2),
          // ensures we do not read messages in parrallel
          writeBlockPromise: PROMISE_RESOLVED_VOID,
          messagesCallback: null,
          readQueuePromises: [],
          db: db,
        };
        /**
         * Handle abrupt closes that do not originate from db.close().
         * This could happen, for example, if the underlying storage is
         * removed or if the user clears the database in the browser's
         * history preferences.
         */

        db.onclose = function () {
          state.closed = true;
          if (options.idb.onclose) options.idb.onclose();
        };
        /**
         * if service-workers are used,
         * we have no 'storage'-event if they post a message,
         * therefore we also have to set an interval
         */

        _readLoop(state);

        return state;
      });
    }

    function _readLoop(state) {
      if (state.closed) return;
      readNewMessages(state)
        .then(function () {
          return sleep(state.options.idb.fallbackInterval);
        })
        .then(function () {
          return _readLoop(state);
        });
    }

    function _filterMessage(msgObj, state) {
      if (msgObj.uuid === state.uuid) return false; // send by own

      if (state.eMIs.has(msgObj.id)) return false; // already emitted

      if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback

      return true;
    }
    /**
     * reads all new messages from the database and emits them
     */

    function readNewMessages(state) {
      // channel already closed
      if (state.closed) return PROMISE_RESOLVED_VOID; // if no one is listening, we do not need to scan for new messages

      if (!state.messagesCallback) return PROMISE_RESOLVED_VOID;
      return getMessagesHigherThan(state.db, state.lastCursorId).then(function (newerMessages) {
        var useMessages = newerMessages
          /**
           * there is a bug in iOS where the msgObj can be undefined some times
           * so we filter them out
           * @link https://github.com/pubkey/broadcast-channel/issues/19
           */
          .filter(function (msgObj) {
            return !!msgObj;
          })
          .map(function (msgObj) {
            if (msgObj.id > state.lastCursorId) {
              state.lastCursorId = msgObj.id;
            }

            return msgObj;
          })
          .filter(function (msgObj) {
            return _filterMessage(msgObj, state);
          })
          .sort(function (msgObjA, msgObjB) {
            return msgObjA.time - msgObjB.time;
          }); // sort by time

        useMessages.forEach(function (msgObj) {
          if (state.messagesCallback) {
            state.eMIs.add(msgObj.id);
            state.messagesCallback(msgObj.data);
          }
        });
        return PROMISE_RESOLVED_VOID;
      });
    }

    function indexed_db_close(channelState) {
      channelState.closed = true;
      channelState.db.close();
    }
    function indexed_db_postMessage(channelState, messageJson) {
      channelState.writeBlockPromise = channelState.writeBlockPromise
        .then(function () {
          return writeMessage(channelState.db, channelState.uuid, messageJson);
        })
        .then(function () {
          if (randomInt(0, 10) === 0) {
            /* await (do not await) */
            cleanOldMessages(channelState.db, channelState.options.idb.ttl);
          }
        });
      return channelState.writeBlockPromise;
    }
    function indexed_db_onMessage(channelState, fn, time) {
      channelState.messagesCallbackTime = time;
      channelState.messagesCallback = fn;
      readNewMessages(channelState);
    }
    function indexed_db_canBeUsed(options) {
      if (!options.support3PC) return false;
      var idb = getIdb();
      if (!idb) return false;
      return true;
    }
    function indexed_db_averageResponseTime(options) {
      return options.idb.fallbackInterval * 2;
    }
    /* harmony default export */ const indexed_db = {
      create: indexed_db_create,
      close: indexed_db_close,
      onMessage: indexed_db_onMessage,
      postMessage: indexed_db_postMessage,
      canBeUsed: indexed_db_canBeUsed,
      type: indexed_db_type,
      averageResponseTime: indexed_db_averageResponseTime,
      microSeconds: indexed_db_microSeconds,
    }; // CONCATENATED MODULE: ./node_modules/@toruslabs/broadcast-channel/dist/esbrowser/methods/localstorage.js
    /**
     * A localStorage-only method which uses localstorage and its 'storage'-event
     * This does not work inside of webworkers because they have no access to locastorage
     * This is basically implemented to support IE9 or your grandmothers toaster.
     * @link https://caniuse.com/#feat=namevalue-storage
     * @link https://caniuse.com/#feat=indexeddb
     */

    var localstorage_microSeconds = microSeconds;
    var KEY_PREFIX = "pubkey.broadcastChannel-";
    var localstorage_type = "localstorage";
    /**
     * copied from crosstab
     * @link https://github.com/tejacques/crosstab/blob/master/src/crosstab.js#L32
     */

    function getLocalStorage() {
      var localStorage;
      if (typeof window === "undefined") return null;

      try {
        localStorage = window.localStorage;
        localStorage = window["ie8-eventlistener/storage"] || window.localStorage;
      } catch (e) {
        // New versions of Firefox throw a Security exception
        // if cookies are disabled. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=1028153
      }

      return localStorage;
    }
    function storageKey(channelName) {
      return KEY_PREFIX + channelName;
    }
    /**
     * writes the new message to the storage
     * and fires the storage-event so other readers can find it
     */

    function localstorage_postMessage(channelState, messageJson) {
      return new Promise(function (res) {
        sleep().then(function () {
          var key = storageKey(channelState.channelName);
          var writeObj = {
            token: randomToken(),
            time: new Date().getTime(),
            data: messageJson,
            uuid: channelState.uuid,
          };
          var value = JSON.stringify(writeObj);
          getLocalStorage().setItem(key, value);
          /**
           * StorageEvent does not fire the 'storage' event
           * in the window that changes the state of the local storage.
           * So we fire it manually
           */

          var ev = document.createEvent("Event");
          ev.initEvent("storage", true, true);
          ev.key = key;
          ev.newValue = value;
          window.dispatchEvent(ev);
          res();
        });
      });
    }
    function addStorageEventListener(channelName, fn) {
      var key = storageKey(channelName);

      var listener = function listener(ev) {
        if (ev.key === key) {
          fn(JSON.parse(ev.newValue));
        }
      };

      window.addEventListener("storage", listener);
      return listener;
    }
    function removeStorageEventListener(listener) {
      window.removeEventListener("storage", listener);
    }
    function localstorage_create(channelName, options) {
      options = fillOptionsWithDefaults(options);

      if (!localstorage_canBeUsed(options)) {
        throw new Error("BroadcastChannel: localstorage cannot be used");
      }

      var uuid = randomToken();
      /**
       * eMIs
       * contains all messages that have been emitted before
       * @type {ObliviousSet}
       */

      var eMIs = new ObliviousSet(options.localstorage.removeTimeout);
      var state = {
        channelName: channelName,
        uuid: uuid,
        eMIs: eMIs, // emittedMessagesIds
      };
      state.listener = addStorageEventListener(channelName, function (msgObj) {
        if (!state.messagesCallback) return; // no listener

        if (msgObj.uuid === uuid) return; // own message

        if (!msgObj.token || eMIs.has(msgObj.token)) return; // already emitted

        if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return; // too old

        eMIs.add(msgObj.token);
        state.messagesCallback(msgObj.data);
      });
      return state;
    }
    function localstorage_close(channelState) {
      removeStorageEventListener(channelState.listener);
    }
    function localstorage_onMessage(channelState, fn, time) {
      channelState.messagesCallbackTime = time;
      channelState.messagesCallback = fn;
    }
    function localstorage_canBeUsed(options) {
      if (!options.support3PC) return false;
      var ls = getLocalStorage();
      if (!ls) return false;

      try {
        var key = "__broadcastchannel_check";
        ls.setItem(key, "works");
        ls.removeItem(key);
      } catch (e) {
        // Safari 10 in private mode will not allow write access to local
        // storage and fail with a QuotaExceededError. See
        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API#Private_Browsing_Incognito_modes
        return false;
      }

      return true;
    }
    function localstorage_averageResponseTime() {
      var defaultTime = 120;
      var userAgent = navigator.userAgent.toLowerCase();

      if (userAgent.includes("safari") && !userAgent.includes("chrome")) {
        // safari is much slower so this time is higher
        return defaultTime * 2;
      }

      return defaultTime;
    }
    /* harmony default export */ const localstorage = {
      create: localstorage_create,
      close: localstorage_close,
      onMessage: localstorage_onMessage,
      postMessage: localstorage_postMessage,
      canBeUsed: localstorage_canBeUsed,
      type: localstorage_type,
      averageResponseTime: localstorage_averageResponseTime,
      microSeconds: localstorage_microSeconds,
    }; // CONCATENATED MODULE: ./node_modules/engine.io-parser/build/esm/commons.js
    const PACKET_TYPES = Object.create(null); // no Map = no polyfill
    PACKET_TYPES["open"] = "0";
    PACKET_TYPES["close"] = "1";
    PACKET_TYPES["ping"] = "2";
    PACKET_TYPES["pong"] = "3";
    PACKET_TYPES["message"] = "4";
    PACKET_TYPES["upgrade"] = "5";
    PACKET_TYPES["noop"] = "6";
    const PACKET_TYPES_REVERSE = Object.create(null);
    Object.keys(PACKET_TYPES).forEach((key) => {
      PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
    });
    const ERROR_PACKET = { type: "error", data: "parser error" }; // CONCATENATED MODULE: ./node_modules/engine.io-parser/build/esm/encodePacket.browser.js

    const withNativeBlob =
      typeof Blob === "function" || (typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]");
    const withNativeArrayBuffer = typeof ArrayBuffer === "function";
    // ArrayBuffer.isView method is not defined in IE10
    const isView = (obj) => {
      return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
    };
    const encodePacket = ({ type, data }, supportsBinary, callback) => {
      if (withNativeBlob && data instanceof Blob) {
        if (supportsBinary) {
          return callback(data);
        } else {
          return encodeBlobAsBase64(data, callback);
        }
      } else if (withNativeArrayBuffer && (data instanceof ArrayBuffer || isView(data))) {
        if (supportsBinary) {
          return callback(data);
        } else {
          return encodeBlobAsBase64(new Blob([data]), callback);
        }
      }
      // plain string
      return callback(PACKET_TYPES[type] + (data || ""));
    };
    const encodeBlobAsBase64 = (data, callback) => {
      const fileReader = new FileReader();
      fileReader.onload = function () {
        const content = fileReader.result.split(",")[1];
        callback("b" + content);
      };
      return fileReader.readAsDataURL(data);
    };
    /* harmony default export */ const encodePacket_browser = encodePacket; // CONCATENATED MODULE: ./node_modules/engine.io-parser/build/esm/contrib/base64-arraybuffer.js

    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    // Use a lookup table to find the index.
    const lookup = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
    for (let i = 0; i < chars.length; i++) {
      lookup[chars.charCodeAt(i)] = i;
    }
    const encode = (arraybuffer) => {
      let bytes = new Uint8Array(arraybuffer),
        i,
        len = bytes.length,
        base64 = "";
      for (i = 0; i < len; i += 3) {
        base64 += chars[bytes[i] >> 2];
        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
        base64 += chars[bytes[i + 2] & 63];
      }
      if (len % 3 === 2) {
        base64 = base64.substring(0, base64.length - 1) + "=";
      } else if (len % 3 === 1) {
        base64 = base64.substring(0, base64.length - 2) + "==";
      }
      return base64;
    };
    const decode = (base64) => {
      let bufferLength = base64.length * 0.75,
        len = base64.length,
        i,
        p = 0,
        encoded1,
        encoded2,
        encoded3,
        encoded4;
      if (base64[base64.length - 1] === "=") {
        bufferLength--;
        if (base64[base64.length - 2] === "=") {
          bufferLength--;
        }
      }
      const arraybuffer = new ArrayBuffer(bufferLength),
        bytes = new Uint8Array(arraybuffer);
      for (i = 0; i < len; i += 4) {
        encoded1 = lookup[base64.charCodeAt(i)];
        encoded2 = lookup[base64.charCodeAt(i + 1)];
        encoded3 = lookup[base64.charCodeAt(i + 2)];
        encoded4 = lookup[base64.charCodeAt(i + 3)];
        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
      }
      return arraybuffer;
    }; // CONCATENATED MODULE: ./node_modules/engine.io-parser/build/esm/decodePacket.browser.js

    const decodePacket_browser_withNativeArrayBuffer = typeof ArrayBuffer === "function";
    const decodePacket = (encodedPacket, binaryType) => {
      if (typeof encodedPacket !== "string") {
        return {
          type: "message",
          data: mapBinary(encodedPacket, binaryType),
        };
      }
      const type = encodedPacket.charAt(0);
      if (type === "b") {
        return {
          type: "message",
          data: decodeBase64Packet(encodedPacket.substring(1), binaryType),
        };
      }
      const packetType = PACKET_TYPES_REVERSE[type];
      if (!packetType) {
        return ERROR_PACKET;
      }
      return encodedPacket.length > 1
        ? {
            type: PACKET_TYPES_REVERSE[type],
            data: encodedPacket.substring(1),
          }
        : {
            type: PACKET_TYPES_REVERSE[type],
          };
    };
    const decodeBase64Packet = (data, binaryType) => {
      if (decodePacket_browser_withNativeArrayBuffer) {
        const decoded = decode(data);
        return mapBinary(decoded, binaryType);
      } else {
        return { base64: true, data }; // fallback for old browsers
      }
    };
    const mapBinary = (data, binaryType) => {
      switch (binaryType) {
        case "blob":
          return data instanceof ArrayBuffer ? new Blob([data]) : data;
        case "arraybuffer":
        default:
          return data; // assuming the data is already an ArrayBuffer
      }
    };
    /* harmony default export */ const decodePacket_browser = decodePacket; // CONCATENATED MODULE: ./node_modules/engine.io-parser/build/esm/index.js

    const SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text
    const encodePayload = (packets, callback) => {
      // some packets may be added to the array while encoding, so the initial length must be saved
      const length = packets.length;
      const encodedPackets = new Array(length);
      let count = 0;
      packets.forEach((packet, i) => {
        // force base64 encoding for binary packets
        encodePacket_browser(packet, false, (encodedPacket) => {
          encodedPackets[i] = encodedPacket;
          if (++count === length) {
            callback(encodedPackets.join(SEPARATOR));
          }
        });
      });
    };
    const decodePayload = (encodedPayload, binaryType) => {
      const encodedPackets = encodedPayload.split(SEPARATOR);
      const packets = [];
      for (let i = 0; i < encodedPackets.length; i++) {
        const decodedPacket = decodePacket_browser(encodedPackets[i], binaryType);
        packets.push(decodedPacket);
        if (decodedPacket.type === "error") {
          break;
        }
      }
      return packets;
    };
    const protocol = 4; // CONCATENATED MODULE: ./node_modules/@socket.io/component-emitter/index.mjs

    /**
     * Initialize a new `Emitter`.
     *
     * @api public
     */

    function Emitter(obj) {
      if (obj) return mixin(obj);
    }

    /**
     * Mixin the emitter properties.
     *
     * @param {Object} obj
     * @return {Object}
     * @api private
     */

    function mixin(obj) {
      for (var key in Emitter.prototype) {
        obj[key] = Emitter.prototype[key];
      }
      return obj;
    }

    /**
     * Listen on the given `event` with `fn`.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */

    Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
      this._callbacks = this._callbacks || {};
      (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
      return this;
    };

    /**
     * Adds an `event` listener that will be invoked a single
     * time then automatically removed.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */

    Emitter.prototype.once = function (event, fn) {
      function on() {
        this.off(event, on);
        fn.apply(this, arguments);
      }

      on.fn = fn;
      this.on(event, on);
      return this;
    };

    /**
     * Remove the given callback for `event` or all
     * registered callbacks.
     *
     * @param {String} event
     * @param {Function} fn
     * @return {Emitter}
     * @api public
     */

    Emitter.prototype.off =
      Emitter.prototype.removeListener =
      Emitter.prototype.removeAllListeners =
      Emitter.prototype.removeEventListener =
        function (event, fn) {
          this._callbacks = this._callbacks || {};

          // all
          if (0 == arguments.length) {
            this._callbacks = {};
            return this;
          }

          // specific event
          var callbacks = this._callbacks["$" + event];
          if (!callbacks) return this;

          // remove all handlers
          if (1 == arguments.length) {
            delete this._callbacks["$" + event];
            return this;
          }

          // remove specific handler
          var cb;
          for (var i = 0; i < callbacks.length; i++) {
            cb = callbacks[i];
            if (cb === fn || cb.fn === fn) {
              callbacks.splice(i, 1);
              break;
            }
          }

          // Remove event specific arrays for event types that no
          // one is subscribed for to avoid memory leak.
          if (callbacks.length === 0) {
            delete this._callbacks["$" + event];
          }

          return this;
        };

    /**
     * Emit `event` with the given args.
     *
     * @param {String} event
     * @param {Mixed} ...
     * @return {Emitter}
     */

    Emitter.prototype.emit = function (event) {
      this._callbacks = this._callbacks || {};

      var args = new Array(arguments.length - 1),
        callbacks = this._callbacks["$" + event];

      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }

      if (callbacks) {
        callbacks = callbacks.slice(0);
        for (var i = 0, len = callbacks.length; i < len; ++i) {
          callbacks[i].apply(this, args);
        }
      }

      return this;
    };

    // alias used for reserved events (protected method)
    Emitter.prototype.emitReserved = Emitter.prototype.emit;

    /**
     * Return array of callbacks for `event`.
     *
     * @param {String} event
     * @return {Array}
     * @api public
     */

    Emitter.prototype.listeners = function (event) {
      this._callbacks = this._callbacks || {};
      return this._callbacks["$" + event] || [];
    };

    /**
     * Check if this emitter has `event` handlers.
     *
     * @param {String} event
     * @return {Boolean}
     * @api public
     */

    Emitter.prototype.hasListeners = function (event) {
      return !!this.listeners(event).length;
    }; // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/globalThis.browser.js

    const globalThisShim = (() => {
      if (typeof self !== "undefined") {
        return self;
      } else if (typeof window !== "undefined") {
        return window;
      } else {
        return Function("return this")();
      }
    })(); // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/util.js

    function pick(obj, ...attr) {
      return attr.reduce((acc, k) => {
        if (obj.hasOwnProperty(k)) {
          acc[k] = obj[k];
        }
        return acc;
      }, {});
    }
    // Keep a reference to the real timeout functions so they can be used when overridden
    const NATIVE_SET_TIMEOUT = setTimeout;
    const NATIVE_CLEAR_TIMEOUT = clearTimeout;
    function installTimerFunctions(obj, opts) {
      if (opts.useNativeTimers) {
        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThisShim);
        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThisShim);
      } else {
        obj.setTimeoutFn = setTimeout.bind(globalThisShim);
        obj.clearTimeoutFn = clearTimeout.bind(globalThisShim);
      }
    }
    // base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)
    const BASE64_OVERHEAD = 1.33;
    // we could also have used `new Blob([obj]).size`, but it isn't supported in IE9
    function byteLength(obj) {
      if (typeof obj === "string") {
        return utf8Length(obj);
      }
      // arraybuffer or blob
      return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
    }
    function utf8Length(str) {
      let c = 0,
        length = 0;
      for (let i = 0, l = str.length; i < l; i++) {
        c = str.charCodeAt(i);
        if (c < 0x80) {
          length += 1;
        } else if (c < 0x800) {
          length += 2;
        } else if (c < 0xd800 || c >= 0xe000) {
          length += 3;
        } else {
          i++;
          length += 4;
        }
      }
      return length;
    } // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/transport.js

    class TransportError extends Error {
      constructor(reason, description, context) {
        super(reason);
        this.description = description;
        this.context = context;
        this.type = "TransportError";
      }
    }
    class Transport extends Emitter {
      /**
       * Transport abstract constructor.
       *
       * @param {Object} options.
       * @api private
       */
      constructor(opts) {
        super();
        this.writable = false;
        installTimerFunctions(this, opts);
        this.opts = opts;
        this.query = opts.query;
        this.readyState = "";
        this.socket = opts.socket;
      }
      /**
       * Emits an error.
       *
       * @param {String} reason
       * @param description
       * @param context - the error context
       * @return {Transport} for chaining
       * @api protected
       */
      onError(reason, description, context) {
        super.emitReserved("error", new TransportError(reason, description, context));
        return this;
      }
      /**
       * Opens the transport.
       *
       * @api public
       */
      open() {
        if ("closed" === this.readyState || "" === this.readyState) {
          this.readyState = "opening";
          this.doOpen();
        }
        return this;
      }
      /**
       * Closes the transport.
       *
       * @api public
       */
      close() {
        if ("opening" === this.readyState || "open" === this.readyState) {
          this.doClose();
          this.onClose();
        }
        return this;
      }
      /**
       * Sends multiple packets.
       *
       * @param {Array} packets
       * @api public
       */
      send(packets) {
        if ("open" === this.readyState) {
          this.write(packets);
        } else {
          // this might happen if the transport was silently closed in the beforeunload event handler
        }
      }
      /**
       * Called upon open
       *
       * @api protected
       */
      onOpen() {
        this.readyState = "open";
        this.writable = true;
        super.emitReserved("open");
      }
      /**
       * Called with data.
       *
       * @param {String} data
       * @api protected
       */
      onData(data) {
        const packet = decodePacket_browser(data, this.socket.binaryType);
        this.onPacket(packet);
      }
      /**
       * Called with a decoded packet.
       *
       * @api protected
       */
      onPacket(packet) {
        super.emitReserved("packet", packet);
      }
      /**
       * Called upon close.
       *
       * @api protected
       */
      onClose(details) {
        this.readyState = "closed";
        super.emitReserved("close", details);
      }
    } // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/contrib/yeast.js

    // imported from https://github.com/unshiftio/yeast

    const alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),
      yeast_length = 64,
      map = {};
    let seed = 0,
      i = 0,
      prev;
    /**
     * Return a string representing the specified number.
     *
     * @param {Number} num The number to convert.
     * @returns {String} The string representation of the number.
     * @api public
     */
    function yeast_encode(num) {
      let encoded = "";
      do {
        encoded = alphabet[num % yeast_length] + encoded;
        num = Math.floor(num / yeast_length);
      } while (num > 0);
      return encoded;
    }
    /**
     * Return the integer value specified by the given string.
     *
     * @param {String} str The string to convert.
     * @returns {Number} The integer value represented by the string.
     * @api public
     */
    function yeast_decode(str) {
      let decoded = 0;
      for (i = 0; i < str.length; i++) {
        decoded = decoded * yeast_length + map[str.charAt(i)];
      }
      return decoded;
    }
    /**
     * Yeast: A tiny growing id generator.
     *
     * @returns {String} A unique id.
     * @api public
     */
    function yeast() {
      const now = yeast_encode(+new Date());
      if (now !== prev) return (seed = 0), (prev = now);
      return now + "." + yeast_encode(seed++);
    }
    //
    // Map each character to its index.
    //
    for (; i < yeast_length; i++) map[alphabet[i]] = i; // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/contrib/parseqs.js

    // imported from https://github.com/galkn/querystring
    /**
     * Compiles a querystring
     * Returns string representation of the object
     *
     * @param {Object}
     * @api private
     */
    function parseqs_encode(obj) {
      let str = "";
      for (let i in obj) {
        if (obj.hasOwnProperty(i)) {
          if (str.length) str += "&";
          str += encodeURIComponent(i) + "=" + encodeURIComponent(obj[i]);
        }
      }
      return str;
    }
    /**
     * Parses a simple querystring into an object
     *
     * @param {String} qs
     * @api private
     */
    function parseqs_decode(qs) {
      let qry = {};
      let pairs = qs.split("&");
      for (let i = 0, l = pairs.length; i < l; i++) {
        let pair = pairs[i].split("=");
        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
      }
      return qry;
    } // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/contrib/has-cors.js

    // imported from https://github.com/component/has-cors
    let value = false;
    try {
      value = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
    } catch (err) {
      // if XMLHttp support is disabled in IE then it will throw
      // when trying to create
    }
    const hasCORS = value; // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/transports/xmlhttprequest.browser.js

    // browser shim for xmlhttprequest module

    function XHR(opts) {
      const xdomain = opts.xdomain;
      // XMLHttpRequest can be disabled on IE
      try {
        if ("undefined" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
          return new XMLHttpRequest();
        }
      } catch (e) {}
      if (!xdomain) {
        try {
          return new globalThisShim[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
        } catch (e) {}
      }
    } // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/transports/polling.js

    function empty() {}
    const hasXHR2 = (function () {
      const xhr = new XHR({
        xdomain: false,
      });
      return null != xhr.responseType;
    })();
    class Polling extends Transport {
      /**
       * XHR Polling constructor.
       *
       * @param {Object} opts
       * @api public
       */
      constructor(opts) {
        super(opts);
        this.polling = false;
        if (typeof location !== "undefined") {
          const isSSL = "https:" === location.protocol;
          let port = location.port;
          // some user agents have empty `location.port`
          if (!port) {
            port = isSSL ? "443" : "80";
          }
          this.xd = (typeof location !== "undefined" && opts.hostname !== location.hostname) || port !== opts.port;
          this.xs = opts.secure !== isSSL;
        }
        /**
         * XHR supports binary
         */
        const forceBase64 = opts && opts.forceBase64;
        this.supportsBinary = hasXHR2 && !forceBase64;
      }
      /**
       * Transport name.
       */
      get name() {
        return "polling";
      }
      /**
       * Opens the socket (triggers polling). We write a PING message to determine
       * when the transport is open.
       *
       * @api private
       */
      doOpen() {
        this.poll();
      }
      /**
       * Pauses polling.
       *
       * @param {Function} callback upon buffers are flushed and transport is paused
       * @api private
       */
      pause(onPause) {
        this.readyState = "pausing";
        const pause = () => {
          this.readyState = "paused";
          onPause();
        };
        if (this.polling || !this.writable) {
          let total = 0;
          if (this.polling) {
            total++;
            this.once("pollComplete", function () {
              --total || pause();
            });
          }
          if (!this.writable) {
            total++;
            this.once("drain", function () {
              --total || pause();
            });
          }
        } else {
          pause();
        }
      }
      /**
       * Starts polling cycle.
       *
       * @api public
       */
      poll() {
        this.polling = true;
        this.doPoll();
        this.emitReserved("poll");
      }
      /**
       * Overloads onData to detect payloads.
       *
       * @api private
       */
      onData(data) {
        const callback = (packet) => {
          // if its the first message we consider the transport open
          if ("opening" === this.readyState && packet.type === "open") {
            this.onOpen();
          }
          // if its a close packet, we close the ongoing requests
          if ("close" === packet.type) {
            this.onClose({ description: "transport closed by the server" });
            return false;
          }
          // otherwise bypass onData and handle the message
          this.onPacket(packet);
        };
        // decode payload
        decodePayload(data, this.socket.binaryType).forEach(callback);
        // if an event did not trigger closing
        if ("closed" !== this.readyState) {
          // if we got data we're not polling
          this.polling = false;
          this.emitReserved("pollComplete");
          if ("open" === this.readyState) {
            this.poll();
          } else {
          }
        }
      }
      /**
       * For polling, send a close packet.
       *
       * @api private
       */
      doClose() {
        const close = () => {
          this.write([{ type: "close" }]);
        };
        if ("open" === this.readyState) {
          close();
        } else {
          // in case we're trying to close while
          // handshaking is in progress (GH-164)
          this.once("open", close);
        }
      }
      /**
       * Writes a packets payload.
       *
       * @param {Array} data packets
       * @param {Function} drain callback
       * @api private
       */
      write(packets) {
        this.writable = false;
        encodePayload(packets, (data) => {
          this.doWrite(data, () => {
            this.writable = true;
            this.emitReserved("drain");
          });
        });
      }
      /**
       * Generates uri for connection.
       *
       * @api private
       */
      uri() {
        let query = this.query || {};
        const schema = this.opts.secure ? "https" : "http";
        let port = "";
        // cache busting is forced
        if (false !== this.opts.timestampRequests) {
          query[this.opts.timestampParam] = yeast();
        }
        if (!this.supportsBinary && !query.sid) {
          query.b64 = 1;
        }
        // avoid port if default for schema
        if (this.opts.port && (("https" === schema && Number(this.opts.port) !== 443) || ("http" === schema && Number(this.opts.port) !== 80))) {
          port = ":" + this.opts.port;
        }
        const encodedQuery = parseqs_encode(query);
        const ipv6 = this.opts.hostname.indexOf(":") !== -1;
        return (
          schema +
          "://" +
          (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) +
          port +
          this.opts.path +
          (encodedQuery.length ? "?" + encodedQuery : "")
        );
      }
      /**
       * Creates a request.
       *
       * @param {String} method
       * @api private
       */
      request(opts = {}) {
        Object.assign(opts, { xd: this.xd, xs: this.xs }, this.opts);
        return new Request(this.uri(), opts);
      }
      /**
       * Sends data.
       *
       * @param {String} data to send.
       * @param {Function} called upon flush.
       * @api private
       */
      doWrite(data, fn) {
        const req = this.request({
          method: "POST",
          data: data,
        });
        req.on("success", fn);
        req.on("error", (xhrStatus, context) => {
          this.onError("xhr post error", xhrStatus, context);
        });
      }
      /**
       * Starts a poll cycle.
       *
       * @api private
       */
      doPoll() {
        const req = this.request();
        req.on("data", this.onData.bind(this));
        req.on("error", (xhrStatus, context) => {
          this.onError("xhr poll error", xhrStatus, context);
        });
        this.pollXhr = req;
      }
    }
    class Request extends Emitter {
      /**
       * Request constructor
       *
       * @param {Object} options
       * @api public
       */
      constructor(uri, opts) {
        super();
        installTimerFunctions(this, opts);
        this.opts = opts;
        this.method = opts.method || "GET";
        this.uri = uri;
        this.async = false !== opts.async;
        this.data = undefined !== opts.data ? opts.data : null;
        this.create();
      }
      /**
       * Creates the XHR object and sends the request.
       *
       * @api private
       */
      create() {
        const opts = pick(this.opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
        opts.xdomain = !!this.opts.xd;
        opts.xscheme = !!this.opts.xs;
        const xhr = (this.xhr = new XHR(opts));
        try {
          xhr.open(this.method, this.uri, this.async);
          try {
            if (this.opts.extraHeaders) {
              xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
              for (let i in this.opts.extraHeaders) {
                if (this.opts.extraHeaders.hasOwnProperty(i)) {
                  xhr.setRequestHeader(i, this.opts.extraHeaders[i]);
                }
              }
            }
          } catch (e) {}
          if ("POST" === this.method) {
            try {
              xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
            } catch (e) {}
          }
          try {
            xhr.setRequestHeader("Accept", "*/*");
          } catch (e) {}
          // ie6 check
          if ("withCredentials" in xhr) {
            xhr.withCredentials = this.opts.withCredentials;
          }
          if (this.opts.requestTimeout) {
            xhr.timeout = this.opts.requestTimeout;
          }
          xhr.onreadystatechange = () => {
            if (4 !== xhr.readyState) return;
            if (200 === xhr.status || 1223 === xhr.status) {
              this.onLoad();
            } else {
              // make sure the `error` event handler that's user-set
              // does not throw in the same tick and gets caught here
              this.setTimeoutFn(() => {
                this.onError(typeof xhr.status === "number" ? xhr.status : 0);
              }, 0);
            }
          };
          xhr.send(this.data);
        } catch (e) {
          // Need to defer since .create() is called directly from the constructor
          // and thus the 'error' event can only be only bound *after* this exception
          // occurs.  Therefore, also, we cannot throw here at all.
          this.setTimeoutFn(() => {
            this.onError(e);
          }, 0);
          return;
        }
        if (typeof document !== "undefined") {
          this.index = Request.requestsCount++;
          Request.requests[this.index] = this;
        }
      }
      /**
       * Called upon error.
       *
       * @api private
       */
      onError(err) {
        this.emitReserved("error", err, this.xhr);
        this.cleanup(true);
      }
      /**
       * Cleans up house.
       *
       * @api private
       */
      cleanup(fromError) {
        if ("undefined" === typeof this.xhr || null === this.xhr) {
          return;
        }
        this.xhr.onreadystatechange = empty;
        if (fromError) {
          try {
            this.xhr.abort();
          } catch (e) {}
        }
        if (typeof document !== "undefined") {
          delete Request.requests[this.index];
        }
        this.xhr = null;
      }
      /**
       * Called upon load.
       *
       * @api private
       */
      onLoad() {
        const data = this.xhr.responseText;
        if (data !== null) {
          this.emitReserved("data", data);
          this.emitReserved("success");
          this.cleanup();
        }
      }
      /**
       * Aborts the request.
       *
       * @api public
       */
      abort() {
        this.cleanup();
      }
    }
    Request.requestsCount = 0;
    Request.requests = {};
    /**
     * Aborts pending requests when unloading the window. This is needed to prevent
     * memory leaks (e.g. when using IE) and to ensure that no spurious error is
     * emitted.
     */
    if (typeof document !== "undefined") {
      // @ts-ignore
      if (typeof attachEvent === "function") {
        // @ts-ignore
        attachEvent("onunload", unloadHandler);
      } else if (typeof addEventListener === "function") {
        const terminationEvent = "onpagehide" in globalThisShim ? "pagehide" : "unload";
        addEventListener(terminationEvent, unloadHandler, false);
      }
    }
    function unloadHandler() {
      for (let i in Request.requests) {
        if (Request.requests.hasOwnProperty(i)) {
          Request.requests[i].abort();
        }
      }
    } // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js

    const nextTick = (() => {
      const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
      if (isPromiseAvailable) {
        return (cb) => Promise.resolve().then(cb);
      } else {
        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);
      }
    })();
    const WebSocket = globalThisShim.WebSocket || globalThisShim.MozWebSocket;
    const usingBrowserWebSocket = true;
    const defaultBinaryType = "arraybuffer"; // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/transports/websocket.js

    /* provided dependency */ var Buffer = __webpack_require__(8764)["Buffer"];

    // detect ReactNative environment
    const isReactNative =
      typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
    class WS extends Transport {
      /**
       * WebSocket transport constructor.
       *
       * @api {Object} connection options
       * @api public
       */
      constructor(opts) {
        super(opts);
        this.supportsBinary = !opts.forceBase64;
      }
      /**
       * Transport name.
       *
       * @api public
       */
      get name() {
        return "websocket";
      }
      /**
       * Opens socket.
       *
       * @api private
       */
      doOpen() {
        if (!this.check()) {
          // let probe timeout
          return;
        }
        const uri = this.uri();
        const protocols = this.opts.protocols;
        // React Native only supports the 'headers' option, and will print a warning if anything else is passed
        const opts = isReactNative
          ? {}
          : pick(
              this.opts,
              "agent",
              "perMessageDeflate",
              "pfx",
              "key",
              "passphrase",
              "cert",
              "ca",
              "ciphers",
              "rejectUnauthorized",
              "localAddress",
              "protocolVersion",
              "origin",
              "maxPayload",
              "family",
              "checkServerIdentity"
            );
        if (this.opts.extraHeaders) {
          opts.headers = this.opts.extraHeaders;
        }
        try {
          this.ws =
            usingBrowserWebSocket && !isReactNative
              ? protocols
                ? new WebSocket(uri, protocols)
                : new WebSocket(uri)
              : new WebSocket(uri, protocols, opts);
        } catch (err) {
          return this.emitReserved("error", err);
        }
        this.ws.binaryType = this.socket.binaryType || defaultBinaryType;
        this.addEventListeners();
      }
      /**
       * Adds event listeners to the socket
       *
       * @api private
       */
      addEventListeners() {
        this.ws.onopen = () => {
          if (this.opts.autoUnref) {
            this.ws._socket.unref();
          }
          this.onOpen();
        };
        this.ws.onclose = (closeEvent) =>
          this.onClose({
            description: "websocket connection closed",
            context: closeEvent,
          });
        this.ws.onmessage = (ev) => this.onData(ev.data);
        this.ws.onerror = (e) => this.onError("websocket error", e);
      }
      /**
       * Writes data to socket.
       *
       * @param {Array} array of packets.
       * @api private
       */
      write(packets) {
        this.writable = false;
        // encodePacket efficient as it uses WS framing
        // no need for encodePayload
        for (let i = 0; i < packets.length; i++) {
          const packet = packets[i];
          const lastPacket = i === packets.length - 1;
          encodePacket_browser(packet, this.supportsBinary, (data) => {
            // always create a new object (GH-437)
            const opts = {};
            if (!usingBrowserWebSocket) {
              if (packet.options) {
                opts.compress = packet.options.compress;
              }
              if (this.opts.perMessageDeflate) {
                const len =
                  // @ts-ignore
                  "string" === typeof data ? Buffer.byteLength(data) : data.length;
                if (len < this.opts.perMessageDeflate.threshold) {
                  opts.compress = false;
                }
              }
            }
            // Sometimes the websocket has already been closed but the browser didn't
            // have a chance of informing us about it yet, in that case send will
            // throw an error
            try {
              if (usingBrowserWebSocket) {
                // TypeError is thrown when passing the second argument on Safari
                this.ws.send(data);
              } else {
                this.ws.send(data, opts);
              }
            } catch (e) {}
            if (lastPacket) {
              // fake drain
              // defer to next tick to allow Socket to clear writeBuffer
              nextTick(() => {
                this.writable = true;
                this.emitReserved("drain");
              }, this.setTimeoutFn);
            }
          });
        }
      }
      /**
       * Closes socket.
       *
       * @api private
       */
      doClose() {
        if (typeof this.ws !== "undefined") {
          this.ws.close();
          this.ws = null;
        }
      }
      /**
       * Generates uri for connection.
       *
       * @api private
       */
      uri() {
        let query = this.query || {};
        const schema = this.opts.secure ? "wss" : "ws";
        let port = "";
        // avoid port if default for schema
        if (this.opts.port && (("wss" === schema && Number(this.opts.port) !== 443) || ("ws" === schema && Number(this.opts.port) !== 80))) {
          port = ":" + this.opts.port;
        }
        // append timestamp to URI
        if (this.opts.timestampRequests) {
          query[this.opts.timestampParam] = yeast();
        }
        // communicate binary support capabilities
        if (!this.supportsBinary) {
          query.b64 = 1;
        }
        const encodedQuery = parseqs_encode(query);
        const ipv6 = this.opts.hostname.indexOf(":") !== -1;
        return (
          schema +
          "://" +
          (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) +
          port +
          this.opts.path +
          (encodedQuery.length ? "?" + encodedQuery : "")
        );
      }
      /**
       * Feature detection for WebSocket.
       *
       * @return {Boolean} whether this transport is available.
       * @api public
       */
      check() {
        return !!WebSocket;
      }
    } // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/transports/index.js

    const transports = {
      websocket: WS,
      polling: Polling,
    }; // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/contrib/parseuri.js

    // imported from https://github.com/galkn/parseuri
    /**
     * Parses an URI
     *
     * @author Steven Levithan <stevenlevithan.com> (MIT license)
     * @api private
     */
    const re =
      /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
    const parts = [
      "source",
      "protocol",
      "authority",
      "userInfo",
      "user",
      "password",
      "host",
      "port",
      "relative",
      "path",
      "directory",
      "file",
      "query",
      "anchor",
    ];
    function parse(str) {
      const src = str,
        b = str.indexOf("["),
        e = str.indexOf("]");
      if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ";") + str.substring(e, str.length);
      }
      let m = re.exec(str || ""),
        uri = {},
        i = 14;
      while (i--) {
        uri[parts[i]] = m[i] || "";
      }
      if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");
        uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");
        uri.ipv6uri = true;
      }
      uri.pathNames = pathNames(uri, uri["path"]);
      uri.queryKey = queryKey(uri, uri["query"]);
      return uri;
    }
    function pathNames(obj, path) {
      const regx = /\/{2,9}/g,
        names = path.replace(regx, "/").split("/");
      if (path.substr(0, 1) == "/" || path.length === 0) {
        names.splice(0, 1);
      }
      if (path.substr(path.length - 1, 1) == "/") {
        names.splice(names.length - 1, 1);
      }
      return names;
    }
    function queryKey(uri, query) {
      const data = {};
      query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
        if ($1) {
          data[$1] = $2;
        }
      });
      return data;
    } // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/socket.js

    class Socket extends Emitter {
      /**
       * Socket constructor.
       *
       * @param {String|Object} uri or options
       * @param {Object} opts - options
       * @api public
       */
      constructor(uri, opts = {}) {
        super();
        if (uri && "object" === typeof uri) {
          opts = uri;
          uri = null;
        }
        if (uri) {
          uri = parse(uri);
          opts.hostname = uri.host;
          opts.secure = uri.protocol === "https" || uri.protocol === "wss";
          opts.port = uri.port;
          if (uri.query) opts.query = uri.query;
        } else if (opts.host) {
          opts.hostname = parse(opts.host).host;
        }
        installTimerFunctions(this, opts);
        this.secure = null != opts.secure ? opts.secure : typeof location !== "undefined" && "https:" === location.protocol;
        if (opts.hostname && !opts.port) {
          // if no port is specified manually, use the protocol default
          opts.port = this.secure ? "443" : "80";
        }
        this.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
        this.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : this.secure ? "443" : "80");
        this.transports = opts.transports || ["polling", "websocket"];
        this.readyState = "";
        this.writeBuffer = [];
        this.prevBufferLen = 0;
        this.opts = Object.assign(
          {
            path: "/engine.io",
            agent: false,
            withCredentials: false,
            upgrade: true,
            timestampParam: "t",
            rememberUpgrade: false,
            rejectUnauthorized: true,
            perMessageDeflate: {
              threshold: 1024,
            },
            transportOptions: {},
            closeOnBeforeunload: true,
          },
          opts
        );
        this.opts.path = this.opts.path.replace(/\/$/, "") + "/";
        if (typeof this.opts.query === "string") {
          this.opts.query = parseqs_decode(this.opts.query);
        }
        // set on handshake
        this.id = null;
        this.upgrades = null;
        this.pingInterval = null;
        this.pingTimeout = null;
        // set on heartbeat
        this.pingTimeoutTimer = null;
        if (typeof addEventListener === "function") {
          if (this.opts.closeOnBeforeunload) {
            // Firefox closes the connection when the "beforeunload" event is emitted but not Chrome. This event listener
            // ensures every browser behaves the same (no "disconnect" event at the Socket.IO level when the page is
            // closed/reloaded)
            addEventListener(
              "beforeunload",
              () => {
                if (this.transport) {
                  // silently close the transport
                  this.transport.removeAllListeners();
                  this.transport.close();
                }
              },
              false
            );
          }
          if (this.hostname !== "localhost") {
            this.offlineEventListener = () => {
              this.onClose("transport close", {
                description: "network connection lost",
              });
            };
            addEventListener("offline", this.offlineEventListener, false);
          }
        }
        this.open();
      }
      /**
       * Creates transport of the given type.
       *
       * @param {String} transport name
       * @return {Transport}
       * @api private
       */
      createTransport(name) {
        const query = Object.assign({}, this.opts.query);
        // append engine.io protocol identifier
        query.EIO = protocol;
        // transport name
        query.transport = name;
        // session id if we already have one
        if (this.id) query.sid = this.id;
        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {
          query,
          socket: this,
          hostname: this.hostname,
          secure: this.secure,
          port: this.port,
        });
        return new transports[name](opts);
      }
      /**
       * Initializes transport to use and starts probe.
       *
       * @api private
       */
      open() {
        let transport;
        if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1) {
          transport = "websocket";
        } else if (0 === this.transports.length) {
          // Emit error on next tick so it can be listened to
          this.setTimeoutFn(() => {
            this.emitReserved("error", "No transports available");
          }, 0);
          return;
        } else {
          transport = this.transports[0];
        }
        this.readyState = "opening";
        // Retry with the next transport if the transport is disabled (jsonp: false)
        try {
          transport = this.createTransport(transport);
        } catch (e) {
          this.transports.shift();
          this.open();
          return;
        }
        transport.open();
        this.setTransport(transport);
      }
      /**
       * Sets the current transport. Disables the existing one (if any).
       *
       * @api private
       */
      setTransport(transport) {
        if (this.transport) {
          this.transport.removeAllListeners();
        }
        // set up transport
        this.transport = transport;
        // set up transport listeners
        transport
          .on("drain", this.onDrain.bind(this))
          .on("packet", this.onPacket.bind(this))
          .on("error", this.onError.bind(this))
          .on("close", (reason) => this.onClose("transport close", reason));
      }
      /**
       * Probes a transport.
       *
       * @param {String} transport name
       * @api private
       */
      probe(name) {
        let transport = this.createTransport(name);
        let failed = false;
        Socket.priorWebsocketSuccess = false;
        const onTransportOpen = () => {
          if (failed) return;
          transport.send([{ type: "ping", data: "probe" }]);
          transport.once("packet", (msg) => {
            if (failed) return;
            if ("pong" === msg.type && "probe" === msg.data) {
              this.upgrading = true;
              this.emitReserved("upgrading", transport);
              if (!transport) return;
              Socket.priorWebsocketSuccess = "websocket" === transport.name;
              this.transport.pause(() => {
                if (failed) return;
                if ("closed" === this.readyState) return;
                cleanup();
                this.setTransport(transport);
                transport.send([{ type: "upgrade" }]);
                this.emitReserved("upgrade", transport);
                transport = null;
                this.upgrading = false;
                this.flush();
              });
            } else {
              const err = new Error("probe error");
              // @ts-ignore
              err.transport = transport.name;
              this.emitReserved("upgradeError", err);
            }
          });
        };
        function freezeTransport() {
          if (failed) return;
          // Any callback called by transport should be ignored since now
          failed = true;
          cleanup();
          transport.close();
          transport = null;
        }
        // Handle any error that happens while probing
        const onerror = (err) => {
          const error = new Error("probe error: " + err);
          // @ts-ignore
          error.transport = transport.name;
          freezeTransport();
          this.emitReserved("upgradeError", error);
        };
        function onTransportClose() {
          onerror("transport closed");
        }
        // When the socket is closed while we're probing
        function onclose() {
          onerror("socket closed");
        }
        // When the socket is upgraded while we're probing
        function onupgrade(to) {
          if (transport && to.name !== transport.name) {
            freezeTransport();
          }
        }
        // Remove all listeners on the transport and on self
        const cleanup = () => {
          transport.removeListener("open", onTransportOpen);
          transport.removeListener("error", onerror);
          transport.removeListener("close", onTransportClose);
          this.off("close", onclose);
          this.off("upgrading", onupgrade);
        };
        transport.once("open", onTransportOpen);
        transport.once("error", onerror);
        transport.once("close", onTransportClose);
        this.once("close", onclose);
        this.once("upgrading", onupgrade);
        transport.open();
      }
      /**
       * Called when connection is deemed open.
       *
       * @api private
       */
      onOpen() {
        this.readyState = "open";
        Socket.priorWebsocketSuccess = "websocket" === this.transport.name;
        this.emitReserved("open");
        this.flush();
        // we check for `readyState` in case an `open`
        // listener already closed the socket
        if ("open" === this.readyState && this.opts.upgrade && this.transport.pause) {
          let i = 0;
          const l = this.upgrades.length;
          for (; i < l; i++) {
            this.probe(this.upgrades[i]);
          }
        }
      }
      /**
       * Handles a packet.
       *
       * @api private
       */
      onPacket(packet) {
        if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
          this.emitReserved("packet", packet);
          // Socket is live - any packet counts
          this.emitReserved("heartbeat");
          switch (packet.type) {
            case "open":
              this.onHandshake(JSON.parse(packet.data));
              break;
            case "ping":
              this.resetPingTimeout();
              this.sendPacket("pong");
              this.emitReserved("ping");
              this.emitReserved("pong");
              break;
            case "error":
              const err = new Error("server error");
              // @ts-ignore
              err.code = packet.data;
              this.onError(err);
              break;
            case "message":
              this.emitReserved("data", packet.data);
              this.emitReserved("message", packet.data);
              break;
          }
        } else {
        }
      }
      /**
       * Called upon handshake completion.
       *
       * @param {Object} data - handshake obj
       * @api private
       */
      onHandshake(data) {
        this.emitReserved("handshake", data);
        this.id = data.sid;
        this.transport.query.sid = data.sid;
        this.upgrades = this.filterUpgrades(data.upgrades);
        this.pingInterval = data.pingInterval;
        this.pingTimeout = data.pingTimeout;
        this.maxPayload = data.maxPayload;
        this.onOpen();
        // In case open handler closes socket
        if ("closed" === this.readyState) return;
        this.resetPingTimeout();
      }
      /**
       * Sets and resets ping timeout timer based on server pings.
       *
       * @api private
       */
      resetPingTimeout() {
        this.clearTimeoutFn(this.pingTimeoutTimer);
        this.pingTimeoutTimer = this.setTimeoutFn(() => {
          this.onClose("ping timeout");
        }, this.pingInterval + this.pingTimeout);
        if (this.opts.autoUnref) {
          this.pingTimeoutTimer.unref();
        }
      }
      /**
       * Called on `drain` event
       *
       * @api private
       */
      onDrain() {
        this.writeBuffer.splice(0, this.prevBufferLen);
        // setting prevBufferLen = 0 is very important
        // for example, when upgrading, upgrade packet is sent over,
        // and a nonzero prevBufferLen could cause problems on `drain`
        this.prevBufferLen = 0;
        if (0 === this.writeBuffer.length) {
          this.emitReserved("drain");
        } else {
          this.flush();
        }
      }
      /**
       * Flush write buffers.
       *
       * @api private
       */
      flush() {
        if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
          const packets = this.getWritablePackets();
          this.transport.send(packets);
          // keep track of current length of writeBuffer
          // splice writeBuffer and callbackBuffer on `drain`
          this.prevBufferLen = packets.length;
          this.emitReserved("flush");
        }
      }
      /**
       * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP
       * long-polling)
       *
       * @private
       */
      getWritablePackets() {
        const shouldCheckPayloadSize = this.maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1;
        if (!shouldCheckPayloadSize) {
          return this.writeBuffer;
        }
        let payloadSize = 1; // first packet type
        for (let i = 0; i < this.writeBuffer.length; i++) {
          const data = this.writeBuffer[i].data;
          if (data) {
            payloadSize += byteLength(data);
          }
          if (i > 0 && payloadSize > this.maxPayload) {
            return this.writeBuffer.slice(0, i);
          }
          payloadSize += 2; // separator + packet type
        }
        return this.writeBuffer;
      }
      /**
       * Sends a message.
       *
       * @param {String} message.
       * @param {Function} callback function.
       * @param {Object} options.
       * @return {Socket} for chaining.
       * @api public
       */
      write(msg, options, fn) {
        this.sendPacket("message", msg, options, fn);
        return this;
      }
      send(msg, options, fn) {
        this.sendPacket("message", msg, options, fn);
        return this;
      }
      /**
       * Sends a packet.
       *
       * @param {String} packet type.
       * @param {String} data.
       * @param {Object} options.
       * @param {Function} callback function.
       * @api private
       */
      sendPacket(type, data, options, fn) {
        if ("function" === typeof data) {
          fn = data;
          data = undefined;
        }
        if ("function" === typeof options) {
          fn = options;
          options = null;
        }
        if ("closing" === this.readyState || "closed" === this.readyState) {
          return;
        }
        options = options || {};
        options.compress = false !== options.compress;
        const packet = {
          type: type,
          data: data,
          options: options,
        };
        this.emitReserved("packetCreate", packet);
        this.writeBuffer.push(packet);
        if (fn) this.once("flush", fn);
        this.flush();
      }
      /**
       * Closes the connection.
       *
       * @api public
       */
      close() {
        const close = () => {
          this.onClose("forced close");
          this.transport.close();
        };
        const cleanupAndClose = () => {
          this.off("upgrade", cleanupAndClose);
          this.off("upgradeError", cleanupAndClose);
          close();
        };
        const waitForUpgrade = () => {
          // wait for upgrade to finish since we can't send packets while pausing a transport
          this.once("upgrade", cleanupAndClose);
          this.once("upgradeError", cleanupAndClose);
        };
        if ("opening" === this.readyState || "open" === this.readyState) {
          this.readyState = "closing";
          if (this.writeBuffer.length) {
            this.once("drain", () => {
              if (this.upgrading) {
                waitForUpgrade();
              } else {
                close();
              }
            });
          } else if (this.upgrading) {
            waitForUpgrade();
          } else {
            close();
          }
        }
        return this;
      }
      /**
       * Called upon transport error
       *
       * @api private
       */
      onError(err) {
        Socket.priorWebsocketSuccess = false;
        this.emitReserved("error", err);
        this.onClose("transport error", err);
      }
      /**
       * Called upon transport close.
       *
       * @api private
       */
      onClose(reason, description) {
        if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
          // clear timers
          this.clearTimeoutFn(this.pingTimeoutTimer);
          // stop event from firing again for transport
          this.transport.removeAllListeners("close");
          // ensure transport won't stay open
          this.transport.close();
          // ignore further transport communication
          this.transport.removeAllListeners();
          if (typeof removeEventListener === "function") {
            removeEventListener("offline", this.offlineEventListener, false);
          }
          // set ready state
          this.readyState = "closed";
          // clear session id
          this.id = null;
          // emit close event
          this.emitReserved("close", reason, description);
          // clean buffers after, so users can still
          // grab the buffers on `close` event
          this.writeBuffer = [];
          this.prevBufferLen = 0;
        }
      }
      /**
       * Filters upgrades, returning only those matching client transports.
       *
       * @param {Array} server upgrades
       * @api private
       *
       */
      filterUpgrades(upgrades) {
        const filteredUpgrades = [];
        let i = 0;
        const j = upgrades.length;
        for (; i < j; i++) {
          if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);
        }
        return filteredUpgrades;
      }
    }
    Socket.protocol = protocol; // CONCATENATED MODULE: ./node_modules/engine.io-client/build/esm/index.js

    const esm_protocol = Socket.protocol; // CONCATENATED MODULE: ./node_modules/socket.io-client/build/esm/url.js

    /**
     * URL parser.
     *
     * @param uri - url
     * @param path - the request path of the connection
     * @param loc - An object meant to mimic window.location.
     *        Defaults to window.location.
     * @public
     */
    function url(uri, path = "", loc) {
      let obj = uri;
      // default to window.location
      loc = loc || (typeof location !== "undefined" && location);
      if (null == uri) uri = loc.protocol + "//" + loc.host;
      // relative path support
      if (typeof uri === "string") {
        if ("/" === uri.charAt(0)) {
          if ("/" === uri.charAt(1)) {
            uri = loc.protocol + uri;
          } else {
            uri = loc.host + uri;
          }
        }
        if (!/^(https?|wss?):\/\//.test(uri)) {
          if ("undefined" !== typeof loc) {
            uri = loc.protocol + "//" + uri;
          } else {
            uri = "https://" + uri;
          }
        }
        // parse
        obj = parse(uri);
      }
      // make sure we treat `localhost:80` and `localhost` equally
      if (!obj.port) {
        if (/^(http|ws)$/.test(obj.protocol)) {
          obj.port = "80";
        } else if (/^(http|ws)s$/.test(obj.protocol)) {
          obj.port = "443";
        }
      }
      obj.path = obj.path || "/";
      const ipv6 = obj.host.indexOf(":") !== -1;
      const host = ipv6 ? "[" + obj.host + "]" : obj.host;
      // define unique id
      obj.id = obj.protocol + "://" + host + ":" + obj.port + path;
      // define href
      obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
      return obj;
    } // CONCATENATED MODULE: ./node_modules/socket.io-parser/build/esm/is-binary.js

    const is_binary_withNativeArrayBuffer = typeof ArrayBuffer === "function";
    const is_binary_isView = (obj) => {
      return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
    };
    const is_binary_toString = Object.prototype.toString;
    const is_binary_withNativeBlob =
      typeof Blob === "function" || (typeof Blob !== "undefined" && is_binary_toString.call(Blob) === "[object BlobConstructor]");
    const withNativeFile =
      typeof File === "function" || (typeof File !== "undefined" && is_binary_toString.call(File) === "[object FileConstructor]");
    /**
     * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.
     *
     * @private
     */
    function isBinary(obj) {
      return (
        (is_binary_withNativeArrayBuffer && (obj instanceof ArrayBuffer || is_binary_isView(obj))) ||
        (is_binary_withNativeBlob && obj instanceof Blob) ||
        (withNativeFile && obj instanceof File)
      );
    }
    function hasBinary(obj, toJSON) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      if (Array.isArray(obj)) {
        for (let i = 0, l = obj.length; i < l; i++) {
          if (hasBinary(obj[i])) {
            return true;
          }
        }
        return false;
      }
      if (isBinary(obj)) {
        return true;
      }
      if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) {
        return hasBinary(obj.toJSON(), true);
      }
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
          return true;
        }
      }
      return false;
    } // CONCATENATED MODULE: ./node_modules/socket.io-parser/build/esm/binary.js

    /**
     * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.
     *
     * @param {Object} packet - socket.io event packet
     * @return {Object} with deconstructed packet and list of buffers
     * @public
     */
    function deconstructPacket(packet) {
      const buffers = [];
      const packetData = packet.data;
      const pack = packet;
      pack.data = _deconstructPacket(packetData, buffers);
      pack.attachments = buffers.length; // number of binary 'attachments'
      return { packet: pack, buffers: buffers };
    }
    function _deconstructPacket(data, buffers) {
      if (!data) return data;
      if (isBinary(data)) {
        const placeholder = { _placeholder: true, num: buffers.length };
        buffers.push(data);
        return placeholder;
      } else if (Array.isArray(data)) {
        const newData = new Array(data.length);
        for (let i = 0; i < data.length; i++) {
          newData[i] = _deconstructPacket(data[i], buffers);
        }
        return newData;
      } else if (typeof data === "object" && !(data instanceof Date)) {
        const newData = {};
        for (const key in data) {
          if (Object.prototype.hasOwnProperty.call(data, key)) {
            newData[key] = _deconstructPacket(data[key], buffers);
          }
        }
        return newData;
      }
      return data;
    }
    /**
     * Reconstructs a binary packet from its placeholder packet and buffers
     *
     * @param {Object} packet - event packet with placeholders
     * @param {Array} buffers - binary buffers to put in placeholder positions
     * @return {Object} reconstructed packet
     * @public
     */
    function reconstructPacket(packet, buffers) {
      packet.data = _reconstructPacket(packet.data, buffers);
      packet.attachments = undefined; // no longer useful
      return packet;
    }
    function _reconstructPacket(data, buffers) {
      if (!data) return data;
      if (data && data._placeholder) {
        return buffers[data.num]; // appropriate buffer (should be natural order anyway)
      } else if (Array.isArray(data)) {
        for (let i = 0; i < data.length; i++) {
          data[i] = _reconstructPacket(data[i], buffers);
        }
      } else if (typeof data === "object") {
        for (const key in data) {
          if (Object.prototype.hasOwnProperty.call(data, key)) {
            data[key] = _reconstructPacket(data[key], buffers);
          }
        }
      }
      return data;
    } // CONCATENATED MODULE: ./node_modules/socket.io-parser/build/esm/index.js

    /**
     * Protocol version.
     *
     * @public
     */
    const build_esm_protocol = 5;
    var PacketType;
    (function (PacketType) {
      PacketType[(PacketType["CONNECT"] = 0)] = "CONNECT";
      PacketType[(PacketType["DISCONNECT"] = 1)] = "DISCONNECT";
      PacketType[(PacketType["EVENT"] = 2)] = "EVENT";
      PacketType[(PacketType["ACK"] = 3)] = "ACK";
      PacketType[(PacketType["CONNECT_ERROR"] = 4)] = "CONNECT_ERROR";
      PacketType[(PacketType["BINARY_EVENT"] = 5)] = "BINARY_EVENT";
      PacketType[(PacketType["BINARY_ACK"] = 6)] = "BINARY_ACK";
    })(PacketType || (PacketType = {}));
    /**
     * A socket.io Encoder instance
     */
    class Encoder {
      /**
       * Encoder constructor
       *
       * @param {function} replacer - custom replacer to pass down to JSON.parse
       */
      constructor(replacer) {
        this.replacer = replacer;
      }
      /**
       * Encode a packet as a single string if non-binary, or as a
       * buffer sequence, depending on packet type.
       *
       * @param {Object} obj - packet object
       */
      encode(obj) {
        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
          if (hasBinary(obj)) {
            obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;
            return this.encodeAsBinary(obj);
          }
        }
        return [this.encodeAsString(obj)];
      }
      /**
       * Encode packet as string.
       */
      encodeAsString(obj) {
        // first is type
        let str = "" + obj.type;
        // attachments if we have them
        if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {
          str += obj.attachments + "-";
        }
        // if we have a namespace other than `/`
        // we append it followed by a comma `,`
        if (obj.nsp && "/" !== obj.nsp) {
          str += obj.nsp + ",";
        }
        // immediately followed by the id
        if (null != obj.id) {
          str += obj.id;
        }
        // json data
        if (null != obj.data) {
          str += JSON.stringify(obj.data, this.replacer);
        }
        return str;
      }
      /**
       * Encode packet as 'buffer sequence' by removing blobs, and
       * deconstructing packet into object with placeholders and
       * a list of buffers.
       */
      encodeAsBinary(obj) {
        const deconstruction = deconstructPacket(obj);
        const pack = this.encodeAsString(deconstruction.packet);
        const buffers = deconstruction.buffers;
        buffers.unshift(pack); // add packet info to beginning of data list
        return buffers; // write all the buffers
      }
    }
    /**
     * A socket.io Decoder instance
     *
     * @return {Object} decoder
     */
    class Decoder extends Emitter {
      /**
       * Decoder constructor
       *
       * @param {function} reviver - custom reviver to pass down to JSON.stringify
       */
      constructor(reviver) {
        super();
        this.reviver = reviver;
      }
      /**
       * Decodes an encoded packet string into packet JSON.
       *
       * @param {String} obj - encoded packet
       */
      add(obj) {
        let packet;
        if (typeof obj === "string") {
          packet = this.decodeString(obj);
          if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {
            // binary packet's json
            this.reconstructor = new BinaryReconstructor(packet);
            // no attachments, labeled binary but no binary data to follow
            if (packet.attachments === 0) {
              super.emitReserved("decoded", packet);
            }
          } else {
            // non-binary full packet
            super.emitReserved("decoded", packet);
          }
        } else if (isBinary(obj) || obj.base64) {
          // raw binary data
          if (!this.reconstructor) {
            throw new Error("got binary data when not reconstructing a packet");
          } else {
            packet = this.reconstructor.takeBinaryData(obj);
            if (packet) {
              // received final buffer
              this.reconstructor = null;
              super.emitReserved("decoded", packet);
            }
          }
        } else {
          throw new Error("Unknown type: " + obj);
        }
      }
      /**
       * Decode a packet String (JSON data)
       *
       * @param {String} str
       * @return {Object} packet
       */
      decodeString(str) {
        let i = 0;
        // look up type
        const p = {
          type: Number(str.charAt(0)),
        };
        if (PacketType[p.type] === undefined) {
          throw new Error("unknown packet type " + p.type);
        }
        // look up attachments if type binary
        if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {
          const start = i + 1;
          while (str.charAt(++i) !== "-" && i != str.length) {}
          const buf = str.substring(start, i);
          if (buf != Number(buf) || str.charAt(i) !== "-") {
            throw new Error("Illegal attachments");
          }
          p.attachments = Number(buf);
        }
        // look up namespace (if any)
        if ("/" === str.charAt(i + 1)) {
          const start = i + 1;
          while (++i) {
            const c = str.charAt(i);
            if ("," === c) break;
            if (i === str.length) break;
          }
          p.nsp = str.substring(start, i);
        } else {
          p.nsp = "/";
        }
        // look up id
        const next = str.charAt(i + 1);
        if ("" !== next && Number(next) == next) {
          const start = i + 1;
          while (++i) {
            const c = str.charAt(i);
            if (null == c || Number(c) != c) {
              --i;
              break;
            }
            if (i === str.length) break;
          }
          p.id = Number(str.substring(start, i + 1));
        }
        // look up json data
        if (str.charAt(++i)) {
          const payload = this.tryParse(str.substr(i));
          if (Decoder.isPayloadValid(p.type, payload)) {
            p.data = payload;
          } else {
            throw new Error("invalid payload");
          }
        }
        return p;
      }
      tryParse(str) {
        try {
          return JSON.parse(str, this.reviver);
        } catch (e) {
          return false;
        }
      }
      static isPayloadValid(type, payload) {
        switch (type) {
          case PacketType.CONNECT:
            return typeof payload === "object";
          case PacketType.DISCONNECT:
            return payload === undefined;
          case PacketType.CONNECT_ERROR:
            return typeof payload === "string" || typeof payload === "object";
          case PacketType.EVENT:
          case PacketType.BINARY_EVENT:
            return Array.isArray(payload) && payload.length > 0;
          case PacketType.ACK:
          case PacketType.BINARY_ACK:
            return Array.isArray(payload);
        }
      }
      /**
       * Deallocates a parser's resources
       */
      destroy() {
        if (this.reconstructor) {
          this.reconstructor.finishedReconstruction();
        }
      }
    }
    /**
     * A manager of a binary event's 'buffer sequence'. Should
     * be constructed whenever a packet of type BINARY_EVENT is
     * decoded.
     *
     * @param {Object} packet
     * @return {BinaryReconstructor} initialized reconstructor
     */
    class BinaryReconstructor {
      constructor(packet) {
        this.packet = packet;
        this.buffers = [];
        this.reconPack = packet;
      }
      /**
       * Method to be called when binary data received from connection
       * after a BINARY_EVENT packet.
       *
       * @param {Buffer | ArrayBuffer} binData - the raw binary data received
       * @return {null | Object} returns null if more binary data is expected or
       *   a reconstructed packet object if all buffers have been received.
       */
      takeBinaryData(binData) {
        this.buffers.push(binData);
        if (this.buffers.length === this.reconPack.attachments) {
          // done with buffer list
          const packet = reconstructPacket(this.reconPack, this.buffers);
          this.finishedReconstruction();
          return packet;
        }
        return null;
      }
      /**
       * Cleans up binary packet reconstruction variables.
       */
      finishedReconstruction() {
        this.reconPack = null;
        this.buffers = [];
      }
    } // CONCATENATED MODULE: ./node_modules/socket.io-client/build/esm/on.js

    function on(obj, ev, fn) {
      obj.on(ev, fn);
      return function subDestroy() {
        obj.off(ev, fn);
      };
    } // CONCATENATED MODULE: ./node_modules/socket.io-client/build/esm/socket.js

    /**
     * Internal events.
     * These events can't be emitted by the user.
     */
    const RESERVED_EVENTS = Object.freeze({
      connect: 1,
      connect_error: 1,
      disconnect: 1,
      disconnecting: 1,
      // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
      newListener: 1,
      removeListener: 1,
    });
    class socket_Socket extends Emitter {
      /**
       * `Socket` constructor.
       *
       * @public
       */
      constructor(io, nsp, opts) {
        super();
        this.connected = false;
        this.receiveBuffer = [];
        this.sendBuffer = [];
        this.ids = 0;
        this.acks = {};
        this.flags = {};
        this.io = io;
        this.nsp = nsp;
        if (opts && opts.auth) {
          this.auth = opts.auth;
        }
        if (this.io._autoConnect) this.open();
      }
      /**
       * Whether the socket is currently disconnected
       */
      get disconnected() {
        return !this.connected;
      }
      /**
       * Subscribe to open, close and packet events
       *
       * @private
       */
      subEvents() {
        if (this.subs) return;
        const io = this.io;
        this.subs = [
          on(io, "open", this.onopen.bind(this)),
          on(io, "packet", this.onpacket.bind(this)),
          on(io, "error", this.onerror.bind(this)),
          on(io, "close", this.onclose.bind(this)),
        ];
      }
      /**
       * Whether the Socket will try to reconnect when its Manager connects or reconnects
       */
      get active() {
        return !!this.subs;
      }
      /**
       * "Opens" the socket.
       *
       * @public
       */
      connect() {
        if (this.connected) return this;
        this.subEvents();
        if (!this.io["_reconnecting"]) this.io.open(); // ensure open
        if ("open" === this.io._readyState) this.onopen();
        return this;
      }
      /**
       * Alias for connect()
       */
      open() {
        return this.connect();
      }
      /**
       * Sends a `message` event.
       *
       * @return self
       * @public
       */
      send(...args) {
        args.unshift("message");
        this.emit.apply(this, args);
        return this;
      }
      /**
       * Override `emit`.
       * If the event is in `events`, it's emitted normally.
       *
       * @return self
       * @public
       */
      emit(ev, ...args) {
        if (RESERVED_EVENTS.hasOwnProperty(ev)) {
          throw new Error('"' + ev + '" is a reserved event name');
        }
        args.unshift(ev);
        const packet = {
          type: PacketType.EVENT,
          data: args,
        };
        packet.options = {};
        packet.options.compress = this.flags.compress !== false;
        // event ack callback
        if ("function" === typeof args[args.length - 1]) {
          const id = this.ids++;
          const ack = args.pop();
          this._registerAckCallback(id, ack);
          packet.id = id;
        }
        const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;
        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);
        if (discardPacket) {
        } else if (this.connected) {
          this.notifyOutgoingListeners(packet);
          this.packet(packet);
        } else {
          this.sendBuffer.push(packet);
        }
        this.flags = {};
        return this;
      }
      /**
       * @private
       */
      _registerAckCallback(id, ack) {
        const timeout = this.flags.timeout;
        if (timeout === undefined) {
          this.acks[id] = ack;
          return;
        }
        // @ts-ignore
        const timer = this.io.setTimeoutFn(() => {
          delete this.acks[id];
          for (let i = 0; i < this.sendBuffer.length; i++) {
            if (this.sendBuffer[i].id === id) {
              this.sendBuffer.splice(i, 1);
            }
          }
          ack.call(this, new Error("operation has timed out"));
        }, timeout);
        this.acks[id] = (...args) => {
          // @ts-ignore
          this.io.clearTimeoutFn(timer);
          ack.apply(this, [null, ...args]);
        };
      }
      /**
       * Sends a packet.
       *
       * @param packet
       * @private
       */
      packet(packet) {
        packet.nsp = this.nsp;
        this.io._packet(packet);
      }
      /**
       * Called upon engine `open`.
       *
       * @private
       */
      onopen() {
        if (typeof this.auth == "function") {
          this.auth((data) => {
            this.packet({ type: PacketType.CONNECT, data });
          });
        } else {
          this.packet({ type: PacketType.CONNECT, data: this.auth });
        }
      }
      /**
       * Called upon engine or manager `error`.
       *
       * @param err
       * @private
       */
      onerror(err) {
        if (!this.connected) {
          this.emitReserved("connect_error", err);
        }
      }
      /**
       * Called upon engine `close`.
       *
       * @param reason
       * @param description
       * @private
       */
      onclose(reason, description) {
        this.connected = false;
        delete this.id;
        this.emitReserved("disconnect", reason, description);
      }
      /**
       * Called with socket packet.
       *
       * @param packet
       * @private
       */
      onpacket(packet) {
        const sameNamespace = packet.nsp === this.nsp;
        if (!sameNamespace) return;
        switch (packet.type) {
          case PacketType.CONNECT:
            if (packet.data && packet.data.sid) {
              const id = packet.data.sid;
              this.onconnect(id);
            } else {
              this.emitReserved(
                "connect_error",
                new Error(
                  "It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"
                )
              );
            }
            break;
          case PacketType.EVENT:
          case PacketType.BINARY_EVENT:
            this.onevent(packet);
            break;
          case PacketType.ACK:
          case PacketType.BINARY_ACK:
            this.onack(packet);
            break;
          case PacketType.DISCONNECT:
            this.ondisconnect();
            break;
          case PacketType.CONNECT_ERROR:
            this.destroy();
            const err = new Error(packet.data.message);
            // @ts-ignore
            err.data = packet.data.data;
            this.emitReserved("connect_error", err);
            break;
        }
      }
      /**
       * Called upon a server event.
       *
       * @param packet
       * @private
       */
      onevent(packet) {
        const args = packet.data || [];
        if (null != packet.id) {
          args.push(this.ack(packet.id));
        }
        if (this.connected) {
          this.emitEvent(args);
        } else {
          this.receiveBuffer.push(Object.freeze(args));
        }
      }
      emitEvent(args) {
        if (this._anyListeners && this._anyListeners.length) {
          const listeners = this._anyListeners.slice();
          for (const listener of listeners) {
            listener.apply(this, args);
          }
        }
        super.emit.apply(this, args);
      }
      /**
       * Produces an ack callback to emit with an event.
       *
       * @private
       */
      ack(id) {
        const self = this;
        let sent = false;
        return function (...args) {
          // prevent double callbacks
          if (sent) return;
          sent = true;
          self.packet({
            type: PacketType.ACK,
            id: id,
            data: args,
          });
        };
      }
      /**
       * Called upon a server acknowlegement.
       *
       * @param packet
       * @private
       */
      onack(packet) {
        const ack = this.acks[packet.id];
        if ("function" === typeof ack) {
          ack.apply(this, packet.data);
          delete this.acks[packet.id];
        } else {
        }
      }
      /**
       * Called upon server connect.
       *
       * @private
       */
      onconnect(id) {
        this.id = id;
        this.connected = true;
        this.emitBuffered();
        this.emitReserved("connect");
      }
      /**
       * Emit buffered events (received and emitted).
       *
       * @private
       */
      emitBuffered() {
        this.receiveBuffer.forEach((args) => this.emitEvent(args));
        this.receiveBuffer = [];
        this.sendBuffer.forEach((packet) => {
          this.notifyOutgoingListeners(packet);
          this.packet(packet);
        });
        this.sendBuffer = [];
      }
      /**
       * Called upon server disconnect.
       *
       * @private
       */
      ondisconnect() {
        this.destroy();
        this.onclose("io server disconnect");
      }
      /**
       * Called upon forced client/server side disconnections,
       * this method ensures the manager stops tracking us and
       * that reconnections don't get triggered for this.
       *
       * @private
       */
      destroy() {
        if (this.subs) {
          // clean subscriptions to avoid reconnections
          this.subs.forEach((subDestroy) => subDestroy());
          this.subs = undefined;
        }
        this.io["_destroy"](this);
      }
      /**
       * Disconnects the socket manually.
       *
       * @return self
       * @public
       */
      disconnect() {
        if (this.connected) {
          this.packet({ type: PacketType.DISCONNECT });
        }
        // remove socket from pool
        this.destroy();
        if (this.connected) {
          // fire events
          this.onclose("io client disconnect");
        }
        return this;
      }
      /**
       * Alias for disconnect()
       *
       * @return self
       * @public
       */
      close() {
        return this.disconnect();
      }
      /**
       * Sets the compress flag.
       *
       * @param compress - if `true`, compresses the sending data
       * @return self
       * @public
       */
      compress(compress) {
        this.flags.compress = compress;
        return this;
      }
      /**
       * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
       * ready to send messages.
       *
       * @returns self
       * @public
       */
      get volatile() {
        this.flags.volatile = true;
        return this;
      }
      /**
       * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
       * given number of milliseconds have elapsed without an acknowledgement from the server:
       *
       * ```
       * socket.timeout(5000).emit("my-event", (err) => {
       *   if (err) {
       *     // the server did not acknowledge the event in the given delay
       *   }
       * });
       * ```
       *
       * @returns self
       * @public
       */
      timeout(timeout) {
        this.flags.timeout = timeout;
        return this;
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback.
       *
       * @param listener
       * @public
       */
      onAny(listener) {
        this._anyListeners = this._anyListeners || [];
        this._anyListeners.push(listener);
        return this;
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback. The listener is added to the beginning of the listeners array.
       *
       * @param listener
       * @public
       */
      prependAny(listener) {
        this._anyListeners = this._anyListeners || [];
        this._anyListeners.unshift(listener);
        return this;
      }
      /**
       * Removes the listener that will be fired when any event is emitted.
       *
       * @param listener
       * @public
       */
      offAny(listener) {
        if (!this._anyListeners) {
          return this;
        }
        if (listener) {
          const listeners = this._anyListeners;
          for (let i = 0; i < listeners.length; i++) {
            if (listener === listeners[i]) {
              listeners.splice(i, 1);
              return this;
            }
          }
        } else {
          this._anyListeners = [];
        }
        return this;
      }
      /**
       * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
       * e.g. to remove listeners.
       *
       * @public
       */
      listenersAny() {
        return this._anyListeners || [];
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback.
       *
       * @param listener
       *
       * <pre><code>
       *
       * socket.onAnyOutgoing((event, ...args) => {
       *   console.log(event);
       * });
       *
       * </pre></code>
       *
       * @public
       */
      onAnyOutgoing(listener) {
        this._anyOutgoingListeners = this._anyOutgoingListeners || [];
        this._anyOutgoingListeners.push(listener);
        return this;
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback. The listener is added to the beginning of the listeners array.
       *
       * @param listener
       *
       * <pre><code>
       *
       * socket.prependAnyOutgoing((event, ...args) => {
       *   console.log(event);
       * });
       *
       * </pre></code>
       *
       * @public
       */
      prependAnyOutgoing(listener) {
        this._anyOutgoingListeners = this._anyOutgoingListeners || [];
        this._anyOutgoingListeners.unshift(listener);
        return this;
      }
      /**
       * Removes the listener that will be fired when any event is emitted.
       *
       * @param listener
       *
       * <pre><code>
       *
       * const handler = (event, ...args) => {
       *   console.log(event);
       * }
       *
       * socket.onAnyOutgoing(handler);
       *
       * // then later
       * socket.offAnyOutgoing(handler);
       *
       * </pre></code>
       *
       * @public
       */
      offAnyOutgoing(listener) {
        if (!this._anyOutgoingListeners) {
          return this;
        }
        if (listener) {
          const listeners = this._anyOutgoingListeners;
          for (let i = 0; i < listeners.length; i++) {
            if (listener === listeners[i]) {
              listeners.splice(i, 1);
              return this;
            }
          }
        } else {
          this._anyOutgoingListeners = [];
        }
        return this;
      }
      /**
       * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
       * e.g. to remove listeners.
       *
       * @public
       */
      listenersAnyOutgoing() {
        return this._anyOutgoingListeners || [];
      }
      /**
       * Notify the listeners for each packet sent
       *
       * @param packet
       *
       * @private
       */
      notifyOutgoingListeners(packet) {
        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
          const listeners = this._anyOutgoingListeners.slice();
          for (const listener of listeners) {
            listener.apply(this, packet.data);
          }
        }
      }
    } // CONCATENATED MODULE: ./node_modules/socket.io-client/build/esm/contrib/backo2.js

    /**
     * Initialize backoff timer with `opts`.
     *
     * - `min` initial timeout in milliseconds [100]
     * - `max` max timeout [10000]
     * - `jitter` [0]
     * - `factor` [2]
     *
     * @param {Object} opts
     * @api public
     */
    function Backoff(opts) {
      opts = opts || {};
      this.ms = opts.min || 100;
      this.max = opts.max || 10000;
      this.factor = opts.factor || 2;
      this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
      this.attempts = 0;
    }
    /**
     * Return the backoff duration.
     *
     * @return {Number}
     * @api public
     */
    Backoff.prototype.duration = function () {
      var ms = this.ms * Math.pow(this.factor, this.attempts++);
      if (this.jitter) {
        var rand = Math.random();
        var deviation = Math.floor(rand * this.jitter * ms);
        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
      }
      return Math.min(ms, this.max) | 0;
    };
    /**
     * Reset the number of attempts.
     *
     * @api public
     */
    Backoff.prototype.reset = function () {
      this.attempts = 0;
    };
    /**
     * Set the minimum duration
     *
     * @api public
     */
    Backoff.prototype.setMin = function (min) {
      this.ms = min;
    };
    /**
     * Set the maximum duration
     *
     * @api public
     */
    Backoff.prototype.setMax = function (max) {
      this.max = max;
    };
    /**
     * Set the jitter
     *
     * @api public
     */
    Backoff.prototype.setJitter = function (jitter) {
      this.jitter = jitter;
    }; // CONCATENATED MODULE: ./node_modules/socket.io-client/build/esm/manager.js

    class Manager extends Emitter {
      constructor(uri, opts) {
        var _a;
        super();
        this.nsps = {};
        this.subs = [];
        if (uri && "object" === typeof uri) {
          opts = uri;
          uri = undefined;
        }
        opts = opts || {};
        opts.path = opts.path || "/socket.io";
        this.opts = opts;
        installTimerFunctions(this, opts);
        this.reconnection(opts.reconnection !== false);
        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
        this.reconnectionDelay(opts.reconnectionDelay || 1000);
        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
        this.backoff = new Backoff({
          min: this.reconnectionDelay(),
          max: this.reconnectionDelayMax(),
          jitter: this.randomizationFactor(),
        });
        this.timeout(null == opts.timeout ? 20000 : opts.timeout);
        this._readyState = "closed";
        this.uri = uri;
        const _parser = opts.parser || socket_io_parser_build_esm_namespaceObject;
        this.encoder = new _parser.Encoder();
        this.decoder = new _parser.Decoder();
        this._autoConnect = opts.autoConnect !== false;
        if (this._autoConnect) this.open();
      }
      reconnection(v) {
        if (!arguments.length) return this._reconnection;
        this._reconnection = !!v;
        return this;
      }
      reconnectionAttempts(v) {
        if (v === undefined) return this._reconnectionAttempts;
        this._reconnectionAttempts = v;
        return this;
      }
      reconnectionDelay(v) {
        var _a;
        if (v === undefined) return this._reconnectionDelay;
        this._reconnectionDelay = v;
        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);
        return this;
      }
      randomizationFactor(v) {
        var _a;
        if (v === undefined) return this._randomizationFactor;
        this._randomizationFactor = v;
        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);
        return this;
      }
      reconnectionDelayMax(v) {
        var _a;
        if (v === undefined) return this._reconnectionDelayMax;
        this._reconnectionDelayMax = v;
        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);
        return this;
      }
      timeout(v) {
        if (!arguments.length) return this._timeout;
        this._timeout = v;
        return this;
      }
      /**
       * Starts trying to reconnect if reconnection is enabled and we have not
       * started reconnecting yet
       *
       * @private
       */
      maybeReconnectOnOpen() {
        // Only try to reconnect if it's the first time we're connecting
        if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
          // keeps reconnection from firing twice for the same reconnection loop
          this.reconnect();
        }
      }
      /**
       * Sets the current transport `socket`.
       *
       * @param {Function} fn - optional, callback
       * @return self
       * @public
       */
      open(fn) {
        if (~this._readyState.indexOf("open")) return this;
        this.engine = new Socket(this.uri, this.opts);
        const socket = this.engine;
        const self = this;
        this._readyState = "opening";
        this.skipReconnect = false;
        // emit `open`
        const openSubDestroy = on(socket, "open", function () {
          self.onopen();
          fn && fn();
        });
        // emit `error`
        const errorSub = on(socket, "error", (err) => {
          self.cleanup();
          self._readyState = "closed";
          this.emitReserved("error", err);
          if (fn) {
            fn(err);
          } else {
            // Only do this if there is no fn to handle the error
            self.maybeReconnectOnOpen();
          }
        });
        if (false !== this._timeout) {
          const timeout = this._timeout;
          if (timeout === 0) {
            openSubDestroy(); // prevents a race condition with the 'open' event
          }
          // set timer
          const timer = this.setTimeoutFn(() => {
            openSubDestroy();
            socket.close();
            // @ts-ignore
            socket.emit("error", new Error("timeout"));
          }, timeout);
          if (this.opts.autoUnref) {
            timer.unref();
          }
          this.subs.push(function subDestroy() {
            clearTimeout(timer);
          });
        }
        this.subs.push(openSubDestroy);
        this.subs.push(errorSub);
        return this;
      }
      /**
       * Alias for open()
       *
       * @return self
       * @public
       */
      connect(fn) {
        return this.open(fn);
      }
      /**
       * Called upon transport open.
       *
       * @private
       */
      onopen() {
        // clear old subs
        this.cleanup();
        // mark as open
        this._readyState = "open";
        this.emitReserved("open");
        // add new subs
        const socket = this.engine;
        this.subs.push(
          on(socket, "ping", this.onping.bind(this)),
          on(socket, "data", this.ondata.bind(this)),
          on(socket, "error", this.onerror.bind(this)),
          on(socket, "close", this.onclose.bind(this)),
          on(this.decoder, "decoded", this.ondecoded.bind(this))
        );
      }
      /**
       * Called upon a ping.
       *
       * @private
       */
      onping() {
        this.emitReserved("ping");
      }
      /**
       * Called with data.
       *
       * @private
       */
      ondata(data) {
        this.decoder.add(data);
      }
      /**
       * Called when parser fully decodes a packet.
       *
       * @private
       */
      ondecoded(packet) {
        this.emitReserved("packet", packet);
      }
      /**
       * Called upon socket error.
       *
       * @private
       */
      onerror(err) {
        this.emitReserved("error", err);
      }
      /**
       * Creates a new socket for the given `nsp`.
       *
       * @return {Socket}
       * @public
       */
      socket(nsp, opts) {
        let socket = this.nsps[nsp];
        if (!socket) {
          socket = new socket_Socket(this, nsp, opts);
          this.nsps[nsp] = socket;
        }
        return socket;
      }
      /**
       * Called upon a socket close.
       *
       * @param socket
       * @private
       */
      _destroy(socket) {
        const nsps = Object.keys(this.nsps);
        for (const nsp of nsps) {
          const socket = this.nsps[nsp];
          if (socket.active) {
            return;
          }
        }
        this._close();
      }
      /**
       * Writes a packet.
       *
       * @param packet
       * @private
       */
      _packet(packet) {
        const encodedPackets = this.encoder.encode(packet);
        for (let i = 0; i < encodedPackets.length; i++) {
          this.engine.write(encodedPackets[i], packet.options);
        }
      }
      /**
       * Clean up transport subscriptions and packet buffer.
       *
       * @private
       */
      cleanup() {
        this.subs.forEach((subDestroy) => subDestroy());
        this.subs.length = 0;
        this.decoder.destroy();
      }
      /**
       * Close the current socket.
       *
       * @private
       */
      _close() {
        this.skipReconnect = true;
        this._reconnecting = false;
        this.onclose("forced close");
        if (this.engine) this.engine.close();
      }
      /**
       * Alias for close()
       *
       * @private
       */
      disconnect() {
        return this._close();
      }
      /**
       * Called upon engine close.
       *
       * @private
       */
      onclose(reason, description) {
        this.cleanup();
        this.backoff.reset();
        this._readyState = "closed";
        this.emitReserved("close", reason, description);
        if (this._reconnection && !this.skipReconnect) {
          this.reconnect();
        }
      }
      /**
       * Attempt a reconnection.
       *
       * @private
       */
      reconnect() {
        if (this._reconnecting || this.skipReconnect) return this;
        const self = this;
        if (this.backoff.attempts >= this._reconnectionAttempts) {
          this.backoff.reset();
          this.emitReserved("reconnect_failed");
          this._reconnecting = false;
        } else {
          const delay = this.backoff.duration();
          this._reconnecting = true;
          const timer = this.setTimeoutFn(() => {
            if (self.skipReconnect) return;
            this.emitReserved("reconnect_attempt", self.backoff.attempts);
            // check again for the case socket closed in above events
            if (self.skipReconnect) return;
            self.open((err) => {
              if (err) {
                self._reconnecting = false;
                self.reconnect();
                this.emitReserved("reconnect_error", err);
              } else {
                self.onreconnect();
              }
            });
          }, delay);
          if (this.opts.autoUnref) {
            timer.unref();
          }
          this.subs.push(function subDestroy() {
            clearTimeout(timer);
          });
        }
      }
      /**
       * Called upon successful reconnect.
       *
       * @private
       */
      onreconnect() {
        const attempt = this.backoff.attempts;
        this._reconnecting = false;
        this.backoff.reset();
        this.emitReserved("reconnect", attempt);
      }
    } // CONCATENATED MODULE: ./node_modules/socket.io-client/build/esm/index.js

    /**
     * Managers cache.
     */
    const cache = {};
    function esm_lookup(uri, opts) {
      if (typeof uri === "object") {
        opts = uri;
        uri = undefined;
      }
      opts = opts || {};
      const parsed = url(uri, opts.path || "/socket.io");
      const source = parsed.source;
      const id = parsed.id;
      const path = parsed.path;
      const sameNamespace = cache[id] && path in cache[id]["nsps"];
      const newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;
      let io;
      if (newConnection) {
        io = new Manager(source, opts);
      } else {
        if (!cache[id]) {
          cache[id] = new Manager(source, opts);
        }
        io = cache[id];
      }
      if (parsed.query && !opts.query) {
        opts.query = parsed.queryKey;
      }
      return io.socket(parsed.path, opts);
    }
    // so that "lookup" can be used both as a function (e.g. `io(...)`) and as a
    // namespace (e.g. `io.connect(...)`), for backward compatibility
    Object.assign(esm_lookup, {
      Manager: Manager,
      Socket: socket_Socket,
      io: esm_lookup,
      connect: esm_lookup,
    }); // CONCATENATED MODULE: external "@toruslabs/eccrypto"
    /**
     * Protocol version.
     *
     * @public
     */

    /**
     * Expose constructors for standalone build.
     *
     * @public
     */

    const eccrypto_namespaceObject = require("@toruslabs/eccrypto"); // CONCATENATED MODULE: external "@toruslabs/metadata-helpers"
    const metadata_helpers_namespaceObject = require("@toruslabs/metadata-helpers");
    // EXTERNAL MODULE: ./node_modules/keccak/js.js
    var js = __webpack_require__(5811);
    var js_default = /*#__PURE__*/ __webpack_require__.n(js); // CONCATENATED MODULE: ./node_modules/@toruslabs/broadcast-channel/dist/esbrowser/methods/server.js
    /**
     * A localStorage-only method which uses localstorage and its 'storage'-event
     * This does not work inside of webworkers because they have no access to locastorage
     * This is basically implemented to support IE9 or your grandmothers toaster.
     * @link https://caniuse.com/#feat=namevalue-storage
     * @link https://caniuse.com/#feat=indexeddb
     */

    var server_microSeconds = microSeconds; // PASS IN STRING/BUFFER TO GET BUFFER

    function keccak256(a) {
      return js_default()("keccak256").update(a).digest();
    }
    var server_KEY_PREFIX = "pubkey.broadcastChannel-";
    var server_type = "server";
    var SOCKET_CONN_INSTANCE = null;
    function server_storageKey(channelName) {
      return server_KEY_PREFIX + channelName;
    }
    /**
     * writes the new message to the storage
     * and fires the storage-event so other readers can find it
     */

    function server_postMessage(channelState, messageJson) {
      return new Promise(function (res, rej) {
        sleep().then(
          /*#__PURE__*/ asyncToGenerator_default()(
            /*#__PURE__*/ regenerator_default().mark(function _callee() {
              var key, channelEncPrivKey, encData, body;
              return regenerator_default().wrap(function _callee$(_context) {
                while (1) {
                  switch ((_context.prev = _context.next)) {
                    case 0:
                      key = server_storageKey(channelState.channelName);
                      channelEncPrivKey = keccak256(key);
                      _context.next = 4;
                      return (0, metadata_helpers_namespaceObject.encryptData)(channelEncPrivKey.toString("hex"), {
                        token: randomToken(),
                        time: new Date().getTime(),
                        data: messageJson,
                        uuid: channelState.uuid,
                      });

                    case 4:
                      encData = _context.sent;
                      _context.t0 = (0, eccrypto_namespaceObject.getPublic)(channelEncPrivKey).toString("hex");
                      _context.t1 = encData;
                      _context.next = 9;
                      return (0, eccrypto_namespaceObject.sign)(channelEncPrivKey, keccak256(encData));

                    case 9:
                      _context.t2 = _context.sent.toString("hex");
                      body = {
                        key: _context.t0,
                        data: _context.t1,
                        signature: _context.t2,
                      };
                      if (channelState.timeout) body.timeout = channelState.timeout;
                      return _context.abrupt(
                        "return",
                        fetch(channelState.serverUrl + "/channel/set", {
                          method: "POST",
                          body: JSON.stringify(body),
                          headers: {
                            "Content-Type": "application/json; charset=utf-8",
                          },
                        })
                          .then(res)
                          ["catch"](rej)
                      );

                    case 13:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            })
          )
        );
      });
    }
    function getSocketInstance(serverUrl) {
      if (SOCKET_CONN_INSTANCE) {
        return SOCKET_CONN_INSTANCE;
      }

      var SOCKET_CONN = esm_lookup(serverUrl, {
        transports: ["websocket", "polling"],
        // use WebSocket first, if available
        withCredentials: true,
        reconnectionDelayMax: 10000,
        reconnectionAttempts: 10,
      });
      SOCKET_CONN.on("connect_error", function (err) {
        // revert to classic upgrade
        SOCKET_CONN.io.opts.transports = ["polling", "websocket"];
        log.error("connect error", err);
      });
      SOCKET_CONN.on(
        "connect",
        /*#__PURE__*/ asyncToGenerator_default()(
          /*#__PURE__*/ regenerator_default().mark(function _callee2() {
            var engine;
            return regenerator_default().wrap(function _callee2$(_context2) {
              while (1) {
                switch ((_context2.prev = _context2.next)) {
                  case 0:
                    engine = SOCKET_CONN.io.engine;
                    log.debug("initially connected to", engine.transport.name); // in most cases, prints "polling"

                    engine.once("upgrade", function () {
                      // called when the transport is upgraded (i.e. from HTTP long-polling to WebSocket)
                      log.debug("upgraded", engine.transport.name); // in most cases, prints "websocket"
                    });
                    engine.once("close", function (reason) {
                      // called when the underlying connection is closed
                      log.debug("connection closed", reason);
                    });

                  case 4:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          })
        )
      );
      SOCKET_CONN.on("error", function (err) {
        log.error("socket errored", err);
        SOCKET_CONN.disconnect();
      });
      SOCKET_CONN.on("disconnect", function () {
        log.debug("socket disconnected");
      });
      SOCKET_CONN_INSTANCE = SOCKET_CONN;
      return SOCKET_CONN;
    }
    function setupSocketConnection(serverUrl, channelName, fn) {
      var socketConn = getSocketInstance(serverUrl);
      var key = server_storageKey(channelName);
      var channelEncPrivKey = keccak256(key);
      var channelPubKey = (0, eccrypto_namespaceObject.getPublic)(channelEncPrivKey).toString("hex");

      if (socketConn.connected) {
        socketConn.emit("check_auth_status", channelPubKey);
      } else {
        socketConn.once("connect", function () {
          log.debug("connected with socket");
          socketConn.emit("check_auth_status", channelPubKey);
        });
      }

      var visibilityListener = function visibilityListener() {
        // if channel is closed, then remove the listener.
        if (!socketConn) {
          document.removeEventListener("visibilitychange", visibilityListener);
          return;
        } // if not connected, then wait for connection and ping server for latest msg.

        if (!socketConn.connected && document.visibilityState === "visible") {
          socketConn.once(
            "connect",
            /*#__PURE__*/ asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee3() {
                return regenerator_default().wrap(function _callee3$(_context3) {
                  while (1) {
                    switch ((_context3.prev = _context3.next)) {
                      case 0:
                        socketConn.emit("check_auth_status", channelPubKey);

                      case 1:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              })
            )
          );
        }
      };

      var listener = /*#__PURE__*/ (function () {
        var _ref4 = asyncToGenerator_default()(
          /*#__PURE__*/ regenerator_default().mark(function _callee4(ev) {
            var decData;
            return regenerator_default().wrap(
              function _callee4$(_context4) {
                while (1) {
                  switch ((_context4.prev = _context4.next)) {
                    case 0:
                      _context4.prev = 0;
                      _context4.next = 3;
                      return (0, metadata_helpers_namespaceObject.decryptData)(channelEncPrivKey.toString("hex"), ev);

                    case 3:
                      decData = _context4.sent;
                      log.info(decData);
                      fn(decData);
                      _context4.next = 11;
                      break;

                    case 8:
                      _context4.prev = 8;
                      _context4.t0 = _context4["catch"](0);
                      log.error(_context4.t0);

                    case 11:
                    case "end":
                      return _context4.stop();
                  }
                }
              },
              _callee4,
              null,
              [[0, 8]]
            );
          })
        );

        return function listener(_x) {
          return _ref4.apply(this, arguments);
        };
      })();

      socketConn.on(channelPubKey + "_success", listener);
      document.addEventListener("visibilitychange", visibilityListener);
      return socketConn;
    }
    function server_removeStorageEventListener() {
      if (SOCKET_CONN_INSTANCE) {
        SOCKET_CONN_INSTANCE.disconnect();
      }
    }
    function server_create(channelName, options) {
      options = fillOptionsWithDefaults(options);

      if (!server_canBeUsed(options)) {
        throw new Error("BroadcastChannel: server cannot be used");
      }

      var uuid = randomToken();
      /**
       * eMIs
       * contains all messages that have been emitted before
       * @type {ObliviousSet}
       */

      var eMIs = new ObliviousSet(options.server.removeTimeout);
      var state = {
        channelName: channelName,
        uuid: uuid,
        eMIs: eMIs,
        // emittedMessagesIds
        serverUrl: options.server.url,
      };
      if (options.server.timeout) state.timeout = options.server.timeout;
      setupSocketConnection(options.server.url, channelName, function (msgObj) {
        if (!state.messagesCallback) return; // no listener

        if (msgObj.uuid === state.uuid) return; // own message

        if (!msgObj.token || state.eMIs.has(msgObj.token)) return; // already emitted
        // if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return; // too old

        state.eMIs.add(msgObj.token);
        state.messagesCallback(msgObj.data);
      });
      return state;
    }
    function server_close() {
      // give 2 sec for all msgs which are in transit to be consumed
      // by receiver.
      // window.setTimeout(() => {
      //     removeStorageEventListener(channelState);
      //     SOCKET_CONN_INSTANCE = null;
      // }, 1000);
    }
    function server_onMessage(channelState, fn, time) {
      channelState.messagesCallbackTime = time;
      channelState.messagesCallback = fn;
    }
    function server_canBeUsed() {
      return true;
    }
    function server_averageResponseTime() {
      var defaultTime = 500; // TODO: Maybe increase it based on operation

      return defaultTime;
    }
    /* harmony default export */ const server = {
      create: server_create,
      close: server_close,
      onMessage: server_onMessage,
      postMessage: server_postMessage,
      canBeUsed: server_canBeUsed,
      type: server_type,
      averageResponseTime: server_averageResponseTime,
      microSeconds: server_microSeconds,
    }; // CONCATENATED MODULE: ./node_modules/@toruslabs/broadcast-channel/dist/esbrowser/methods/simulate.js
    var simulate_microSeconds = microSeconds;
    var simulate_type = "simulate";
    var SIMULATE_CHANNELS = new Set();
    function simulate_create(channelName) {
      var state = {
        name: channelName,
        messagesCallback: null,
      };
      SIMULATE_CHANNELS.add(state);
      return state;
    }
    function simulate_close(channelState) {
      SIMULATE_CHANNELS["delete"](channelState);
    }
    function simulate_postMessage(channelState, messageJson) {
      return new Promise(function (res) {
        return setTimeout(function () {
          var channelArray = Array.from(SIMULATE_CHANNELS);
          channelArray
            .filter(function (channel) {
              return channel.name === channelState.name;
            })
            .filter(function (channel) {
              return channel !== channelState;
            })
            .filter(function (channel) {
              return !!channel.messagesCallback;
            })
            .forEach(function (channel) {
              return channel.messagesCallback(messageJson);
            });
          res();
        }, 5);
      });
    }
    function simulate_onMessage(channelState, fn) {
      channelState.messagesCallback = fn;
    }
    function simulate_canBeUsed() {
      return true;
    }
    function simulate_averageResponseTime() {
      return 5;
    }
    /* harmony default export */ const simulate = {
      create: simulate_create,
      close: simulate_close,
      onMessage: simulate_onMessage,
      postMessage: simulate_postMessage,
      canBeUsed: simulate_canBeUsed,
      type: simulate_type,
      averageResponseTime: simulate_averageResponseTime,
      microSeconds: simulate_microSeconds,
    }; // CONCATENATED MODULE: ./node_modules/@toruslabs/broadcast-channel/dist/esbrowser/method-chooser.js
    // order is important

    var METHODS = [
      methods_native, // fastest
      indexed_db,
      localstorage,
      server,
    ];
    function chooseMethod(options) {
      var chooseMethods = [].concat(options.methods, METHODS).filter(Boolean); // directly chosen

      if (options.type) {
        if (options.type === "simulate") {
          // only use simulate-method if directly chosen
          return simulate;
        }

        var ret = chooseMethods.find(function (m) {
          return m.type === options.type;
        });
        if (!ret) throw new Error("method-type " + options.type + " not found");
        else return ret;
      }
      /**
       * if no webworker support is needed,
       * remove idb from the list so that localstorage is been chosen
       */

      if (!options.webWorkerSupport) {
        chooseMethods = chooseMethods.filter(function (m) {
          return m.type !== "idb";
        });
      }

      var useMethod = chooseMethods.find(function (method) {
        return method.canBeUsed(options);
      });
      if (!useMethod)
        throw new Error(
          "No useable method found in " +
            JSON.stringify(
              METHODS.map(function (m) {
                return m.type;
              })
            )
        );
      else return useMethod;
    } // CONCATENATED MODULE: ./node_modules/@toruslabs/broadcast-channel/dist/esbrowser/broadcast-channel.js
    /**
     * Contains all open channels,
     * used in tests to ensure everything is closed.
     */

    var OPEN_BROADCAST_CHANNELS = new Set();
    var lastId = 0;
    var broadcast_channel_BroadcastChannel = function BroadcastChannel(name, options) {
      // identifier of the channel to debug stuff
      this.id = lastId++;
      OPEN_BROADCAST_CHANNELS.add(this);
      this.name = name;

      if (ENFORCED_OPTIONS) {
        options = ENFORCED_OPTIONS;
      }

      this.options = fillOptionsWithDefaults(options);
      this.method = chooseMethod(this.options); // isListening

      this._iL = false;
      /**
       * _onMessageListener
       * setting onmessage twice,
       * will overwrite the first listener
       */

      this._onML = null;
      /**
       * _addEventListeners
       */

      this._addEL = {
        message: [],
        internal: [],
      };
      /**
       * Unsend message promises
       * where the sending is still in progress
       * @type {Set<Promise>}
       */

      this._uMP = new Set();
      /**
       * _beforeClose
       * array of promises that will be awaited
       * before the channel is closed
       */

      this._befC = [];
      /**
       * _preparePromise
       */

      this._prepP = null;

      _prepareChannel(this);
    }; // STATICS

    /**
     * used to identify if someone overwrites
     * window.BroadcastChannel with this
     * See methods/native.js
     */

    broadcast_channel_BroadcastChannel._pubkey = true;
    /**
     * if set, this method is enforced,
     * no mather what the options are
     */

    var ENFORCED_OPTIONS;
    function enforceOptions(options) {
      ENFORCED_OPTIONS = options;
    } // PROTOTYPE

    broadcast_channel_BroadcastChannel.prototype = {
      postMessage: function postMessage(msg) {
        if (this.closed) {
          throw new Error(
            "BroadcastChannel.postMessage(): " +
              "Cannot post message after channel has closed " +
              /**
               * In the past when this error appeared, it was realy hard to debug.
               * So now we log the msg together with the error so it at least
               * gives some clue about where in your application this happens.
               */
              JSON.stringify(msg)
          );
        }

        return _post(this, "message", msg);
      },
      postInternal: function postInternal(msg) {
        return _post(this, "internal", msg);
      },

      set onmessage(fn) {
        var time = this.method.microSeconds();
        var listenObj = {
          time: time,
          fn: fn,
        };

        _removeListenerObject(this, "message", this._onML);

        if (fn && typeof fn === "function") {
          this._onML = listenObj;

          _addListenerObject(this, "message", listenObj);
        } else {
          this._onML = null;
        }
      },

      addEventListener: function addEventListener(type, fn) {
        var time = this.method.microSeconds();
        var listenObj = {
          time: time,
          fn: fn,
        };

        _addListenerObject(this, type, listenObj);
      },
      removeEventListener: function removeEventListener(type, fn) {
        var obj = this._addEL[type].find(function (obj) {
          return obj.fn === fn;
        });

        _removeListenerObject(this, type, obj);
      },
      close: function close() {
        var _this = this;

        if (this.closed) {
          return;
        }

        OPEN_BROADCAST_CHANNELS["delete"](this);
        this.closed = true;
        var awaitPrepare = this._prepP ? this._prepP : PROMISE_RESOLVED_VOID;
        this._onML = null;
        this._addEL.message = [];
        return awaitPrepare // wait until all current sending are processed
          .then(function () {
            return Promise.all(Array.from(_this._uMP));
          }) // run before-close hooks
          .then(function () {
            return Promise.all(
              _this._befC.map(function (fn) {
                return fn();
              })
            );
          }) // close the channel
          .then(function () {
            return _this.method.close(_this._state);
          });
      },

      get type() {
        return this.method.type;
      },

      get isClosed() {
        return this.closed;
      },
    };
    /**
     * Post a message over the channel
     * @returns {Promise} that resolved when the message sending is done
     */

    function _post(broadcastChannel, type, msg) {
      var time = broadcastChannel.method.microSeconds();
      var msgObj = {
        time: time,
        type: type,
        data: msg,
      };
      var awaitPrepare = broadcastChannel._prepP ? broadcastChannel._prepP : PROMISE_RESOLVED_VOID;
      return awaitPrepare.then(function () {
        var sendPromise = broadcastChannel.method.postMessage(broadcastChannel._state, msgObj); // add/remove to unsend messages list

        broadcastChannel._uMP.add(sendPromise);

        sendPromise["catch"]().then(function () {
          return broadcastChannel._uMP["delete"](sendPromise);
        });
        return sendPromise;
      });
    }

    function _prepareChannel(channel) {
      var maybePromise = channel.method.create(channel.name, channel.options);

      if (isPromise(maybePromise)) {
        channel._prepP = maybePromise;
        maybePromise.then(function (s) {
          // used in tests to simulate slow runtime

          /*if (channel.options.prepareDelay) {
           await new Promise(res => setTimeout(res, this.options.prepareDelay));
      }*/
          channel._state = s;
        });
      } else {
        channel._state = maybePromise;
      }
    }

    function _hasMessageListeners(channel) {
      if (channel._addEL.message.length > 0) return true;
      if (channel._addEL.internal.length > 0) return true;
      return false;
    }

    function _addListenerObject(channel, type, obj) {
      channel._addEL[type].push(obj);

      _startListening(channel);
    }

    function _removeListenerObject(channel, type, obj) {
      channel._addEL[type] = channel._addEL[type].filter(function (o) {
        return o !== obj;
      });

      _stopListening(channel);
    }

    function _startListening(channel) {
      if (!channel._iL && _hasMessageListeners(channel)) {
        // someone is listening, start subscribing
        var listenerFn = function listenerFn(msgObj) {
          channel._addEL[msgObj.type].forEach(function (listenerObject) {
            /**
             * Getting the current time in JavaScript has no good precision.
             * So instead of only listening to events that happend 'after' the listener
             * was added, we also listen to events that happended 100ms before it.
             * This ensures that when another process, like a WebWorker, sends events
             * we do not miss them out because their timestamp is a bit off compared to the main process.
             * Not doing this would make messages missing when we send data directly after subscribing and awaiting a response.
             * @link https://johnresig.com/blog/accuracy-of-javascript-time/
             */
            var hundredMsInMicro = 100 * 1000;
            var minMessageTime = listenerObject.time - hundredMsInMicro;

            if (msgObj.time >= minMessageTime) {
              listenerObject.fn(msgObj.data);
            } else if (channel.method.type === "server") {
              // server msg might lag based on connection.
              listenerObject.fn(msgObj.data);
            }
          });
        };

        var time = channel.method.microSeconds();

        if (channel._prepP) {
          channel._prepP.then(function () {
            channel._iL = true;
            channel.method.onMessage(channel._state, listenerFn, time);
          });
        } else {
          channel._iL = true;
          channel.method.onMessage(channel._state, listenerFn, time);
        }
      }
    }

    function _stopListening(channel) {
      if (channel._iL && !_hasMessageListeners(channel)) {
        // noone is listening, stop subscribing
        channel._iL = false;
        var time = channel.method.microSeconds();
        channel.method.onMessage(channel._state, null, time);
      }
    } // CONCATENATED MODULE: external "@babel/runtime/helpers/slicedToArray"
    const slicedToArray_namespaceObject = require("@babel/runtime/helpers/slicedToArray");
    var slicedToArray_default = /*#__PURE__*/ __webpack_require__.n(slicedToArray_namespaceObject); // CONCATENATED MODULE: ./src/utils/loglevel.ts
    /* harmony default export */ const loglevel = external_loglevel_default().getLogger("customauth"); // CONCATENATED MODULE: ./src/utils/helpers.ts
    var _loginToConnectionMap;

    function eventToPromise(emitter) {
      return new Promise(function (resolve, reject) {
        var handler = function handler(ev) {
          var _ev$error = ev.error,
            error = _ev$error === void 0 ? "" : _ev$error,
            data = ev.data;
          emitter.removeEventListener("message", handler);
          if (error) return reject(new Error(error));
          return resolve(data);
        };

        emitter.addEventListener("message", handler);
      });
    } // These are the connection names used by auth0

    var loginToConnectionMap =
      ((_loginToConnectionMap = {}),
      defineProperty_default()(_loginToConnectionMap, LOGIN.APPLE, "apple"),
      defineProperty_default()(_loginToConnectionMap, LOGIN.GITHUB, "github"),
      defineProperty_default()(_loginToConnectionMap, LOGIN.LINKEDIN, "linkedin"),
      defineProperty_default()(_loginToConnectionMap, LOGIN.TWITTER, "twitter"),
      defineProperty_default()(_loginToConnectionMap, LOGIN.WEIBO, "weibo"),
      defineProperty_default()(_loginToConnectionMap, LOGIN.LINE, "line"),
      defineProperty_default()(_loginToConnectionMap, LOGIN.EMAIL_PASSWORD, "Username-Password-Authentication"),
      defineProperty_default()(_loginToConnectionMap, LOGIN.PASSWORDLESS, "email"),
      _loginToConnectionMap);
    var padUrlString = function padUrlString(url) {
      return url.href.endsWith("/") ? url.href : "".concat(url.href, "/");
    };
    /**
     * Returns a random number. Don't use for cryptographic purposes.
     * @returns a random number
     */

    var randomId = function randomId() {
      return Math.random().toString(36).slice(2);
    };
    var broadcastChannelOptions = {
      // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']
      webWorkerSupport: false, // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)
    };

    function caseSensitiveField(field, isCaseSensitive) {
      return isCaseSensitive ? field : field.toLowerCase();
    }

    var getVerifierId = function getVerifierId(userInfo, typeOfLogin, verifierIdField) {
      var isVerifierIdCaseSensitive = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
      var name = userInfo.name,
        sub = userInfo.sub;
      if (verifierIdField) return caseSensitiveField(userInfo[verifierIdField], isVerifierIdCaseSensitive);

      switch (typeOfLogin) {
        case LOGIN.PASSWORDLESS:
        case LOGIN.EMAIL_PASSWORD:
          return caseSensitiveField(name, isVerifierIdCaseSensitive);

        case LOGIN.WEIBO:
        case LOGIN.GITHUB:
        case LOGIN.TWITTER:
        case LOGIN.APPLE:
        case LOGIN.LINKEDIN:
        case LOGIN.LINE:
        case LOGIN.JWT:
          return caseSensitiveField(sub, isVerifierIdCaseSensitive);

        default:
          throw new Error("Invalid login type");
      }
    };
    var handleRedirectParameters = function handleRedirectParameters(hash, queryParameters) {
      var hashParameters = hash.split("&").reduce(function (result, item) {
        var _item$split = item.split("="),
          _item$split2 = slicedToArray_default()(_item$split, 2),
          part0 = _item$split2[0],
          part1 = _item$split2[1];

        result[part0] = part1;
        return result;
      }, {});
      loglevel.info(hashParameters, queryParameters);
      var instanceParameters = {};
      var error = "";

      if (Object.keys(hashParameters).length > 0 && hashParameters.state) {
        instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};
        error = hashParameters.error_description || hashParameters.error || error;
      } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {
        instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};
        if (queryParameters.error) error = queryParameters.error;
      }

      return {
        error: error,
        instanceParameters: instanceParameters,
        hashParameters: hashParameters,
      };
    };
    function storageAvailable(type) {
      var storage;

      try {
        storage = window[type];
        var x = "__storage_test__";
        storage.setItem(x, x);
        storage.removeItem(x);
        return true;
      } catch (e) {
        return (
          e && // everything except Firefox
          (e.code === 22 || // Firefox
            e.code === 1014 || // test name field too, because code might not be present
            // everything except Firefox
            e.name === "QuotaExceededError" || // Firefox
            e.name === "NS_ERROR_DOM_QUOTA_REACHED") && // acknowledge QuotaExceededError only if there's something already stored
          storage &&
          storage.length !== 0
        );
      }
    }
    function getPopupFeatures() {
      // Fixes dual-screen position                             Most browsers      Firefox
      var dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;
      var dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;
      var w = 1200;
      var h = 700;
      var width = window.innerWidth
        ? window.innerWidth
        : document.documentElement.clientWidth
        ? document.documentElement.clientWidth
        : window.screen.width;
      var height = window.innerHeight
        ? window.innerHeight
        : document.documentElement.clientHeight
        ? document.documentElement.clientHeight
        : window.screen.height;
      var systemZoom = 1; // No reliable estimate

      var left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);
      var top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);
      var features = "titlebar=0,toolbar=0,status=0,location=0,menubar=0,height="
        .concat(h / systemZoom, ",width=")
        .concat(w / systemZoom, ",top=")
        .concat(top, ",left=")
        .concat(left);
      return features;
    }
    var isFirefox = function isFirefox() {
      var _window, _window$navigator;

      return (
        ((_window = window) === null || _window === void 0
          ? void 0
          : (_window$navigator = _window.navigator) === null || _window$navigator === void 0
          ? void 0
          : _window$navigator.userAgent.toLowerCase().indexOf("firefox")) > -1 || false
      );
    };
    function constructURL(params) {
      var baseURL = params.baseURL,
        query = params.query,
        hash = params.hash;
      var url = new URL(baseURL);

      if (query) {
        Object.keys(query).forEach(function (key) {
          url.searchParams.append(key, query[key]);
        });
      }

      if (hash) {
        var h = new URL(
          constructURL({
            baseURL: baseURL,
            query: hash,
          })
        ).searchParams.toString();
        url.hash = h;
      }

      return url.toString();
    }
    function helpers_are3PCSupported() {
      var _navigator;

      var browserInfo = external_bowser_default().parse(navigator.userAgent);
      loglevel.info(JSON.stringify(browserInfo), "current browser infos");
      var thirdPartyCookieSupport = true; // brave

      if ((_navigator = navigator) !== null && _navigator !== void 0 && _navigator.brave) {
        thirdPartyCookieSupport = false;
      } // All webkit & gecko engine instances use itp (intelligent tracking prevention -
      // https://webkit.org/tracking-prevention/#intelligent-tracking-prevention-itp)

      if (
        browserInfo.engine.name === external_bowser_namespaceObject.ENGINE_MAP.WebKit ||
        browserInfo.engine.name === external_bowser_namespaceObject.ENGINE_MAP.Gecko
      ) {
        thirdPartyCookieSupport = false;
      }

      return thirdPartyCookieSupport;
    }
    var validateAndConstructUrl = function validateAndConstructUrl(domain) {
      try {
        var url = new URL(decodeURIComponent(domain));
        return url;
      } catch (error) {
        throw new Error(
          ""
            .concat((error === null || error === void 0 ? void 0 : error.message) || "", ", Note: Your jwt domain: (i.e ")
            .concat(domain, ") must have http:// or https:// prefix")
        );
      }
    };
    // EXTERNAL MODULE: external "events"
    var external_events_ = __webpack_require__(7702); // CONCATENATED MODULE: ./src/utils/PopupHandler.ts
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = getPrototypeOf_default()(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = getPrototypeOf_default()(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return possibleConstructorReturn_default()(this, result);
      };
    }

    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    var PopupHandler = /*#__PURE__*/ (function (_EventEmitter) {
      inherits_default()(PopupHandler, _EventEmitter);

      var _super = _createSuper(PopupHandler);

      function PopupHandler(_ref) {
        var _this;

        var url = _ref.url,
          target = _ref.target,
          features = _ref.features;

        classCallCheck_default()(this, PopupHandler);

        _this = _super.call(this);

        defineProperty_default()(assertThisInitialized_default()(_this), "url", void 0);

        defineProperty_default()(assertThisInitialized_default()(_this), "target", void 0);

        defineProperty_default()(assertThisInitialized_default()(_this), "features", void 0);

        defineProperty_default()(assertThisInitialized_default()(_this), "window", void 0);

        defineProperty_default()(assertThisInitialized_default()(_this), "windowTimer", void 0);

        defineProperty_default()(assertThisInitialized_default()(_this), "iClosedWindow", void 0);

        _this.url = url;
        _this.target = target || "_blank";
        _this.features = features || getPopupFeatures();
        _this.window = undefined;
        _this.windowTimer = undefined;
        _this.iClosedWindow = false;

        _this._setupTimer();

        return _this;
      }

      createClass_default()(PopupHandler, [
        {
          key: "_setupTimer",
          value: function _setupTimer() {
            var _this2 = this;

            this.windowTimer = Number(
              setInterval(function () {
                if (_this2.window && _this2.window.closed) {
                  clearInterval(_this2.windowTimer);

                  if (!_this2.iClosedWindow) {
                    _this2.emit("close");
                  }

                  _this2.iClosedWindow = false;
                  _this2.window = undefined;
                }

                if (_this2.window === undefined) clearInterval(_this2.windowTimer);
              }, 500)
            );
          },
        },
        {
          key: "open",
          value: function open() {
            var _this$window;

            this.window = window.open(this.url.href, this.target, this.features);
            if ((_this$window = this.window) !== null && _this$window !== void 0 && _this$window.focus) this.window.focus();
            return Promise.resolve();
          },
        },
        {
          key: "close",
          value: function close() {
            this.iClosedWindow = true;
            if (this.window) this.window.close();
          },
        },
        {
          key: "redirect",
          value: function redirect(locationReplaceOnRedirect) {
            if (locationReplaceOnRedirect) {
              window.location.replace(this.url.href);
            } else {
              window.location.href = this.url.href;
            }
          },
        },
      ]);

      return PopupHandler;
    })(external_events_.EventEmitter);

    /* harmony default export */ const utils_PopupHandler = PopupHandler; // CONCATENATED MODULE: ./src/handlers/AbstractLoginHandler.ts
    var _excluded = ["access_token", "id_token"];

    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly &&
          (symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })),
          keys.push.apply(keys, symbols);
      }
      return keys;
    }

    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2
          ? ownKeys(Object(source), !0).forEach(function (key) {
              defineProperty_default()(target, key, source[key]);
            })
          : Object.getOwnPropertyDescriptors
          ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
          : ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
      }
      return target;
    }

    var AbstractLoginHandler = /*#__PURE__*/ (function () {
      // Not using object constructor because of this issue
      // https://github.com/microsoft/TypeScript/issues/5326
      function AbstractLoginHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState) {
        classCallCheck_default()(this, AbstractLoginHandler);

        this.clientId = clientId;
        this.verifier = verifier;
        this.redirect_uri = redirect_uri;
        this.typeOfLogin = typeOfLogin;
        this.uxMode = uxMode;
        this.redirectToOpener = redirectToOpener;
        this.jwtParams = jwtParams;
        this.customState = customState;

        defineProperty_default()(this, "nonce", randomId());

        defineProperty_default()(this, "finalURL", void 0);
      }

      createClass_default()(AbstractLoginHandler, [
        {
          key: "state",
          get: function get() {
            return encodeURIComponent(
              window.btoa(
                JSON.stringify(
                  _objectSpread(
                    _objectSpread({}, this.customState || {}),
                    {},
                    {
                      instanceId: this.nonce,
                      verifier: this.verifier,
                      typeOfLogin: this.typeOfLogin,
                      redirectToOpener: this.redirectToOpener || false,
                    }
                  )
                )
              )
            );
          },
        },
        {
          key: "handleLoginWindow",
          value: function handleLoginWindow(params) {
            var _this = this;

            var verifierWindow = new utils_PopupHandler({
              url: this.finalURL,
              features: params.popupFeatures,
            });

            if (this.uxMode === UX_MODE.REDIRECT) {
              verifierWindow.redirect(params.locationReplaceOnRedirect);
            } else {
              return new Promise(function (resolve, reject) {
                var bc;

                var handleData = /*#__PURE__*/ (function () {
                  var _ref = asyncToGenerator_default()(
                    /*#__PURE__*/ regenerator_default().mark(function _callee(ev) {
                      var error, data, _ref2, instanceParams, _ref2$hashParams, accessToken, idToken, rest;

                      return regenerator_default().wrap(
                        function _callee$(_context) {
                          while (1) {
                            switch ((_context.prev = _context.next)) {
                              case 0:
                                _context.prev = 0;
                                (error = ev.error), (data = ev.data);
                                (_ref2 = data || {}),
                                  (instanceParams = _ref2.instanceParams),
                                  (_ref2$hashParams = _ref2.hashParams),
                                  (accessToken = _ref2$hashParams.access_token),
                                  (idToken = _ref2$hashParams.id_token),
                                  (rest = objectWithoutProperties_default()(_ref2$hashParams, _excluded));

                                if (!error) {
                                  _context.next = 7;
                                  break;
                                }

                                loglevel.error(ev);
                                reject(new Error("Error: ".concat(error, ". Info: ").concat(JSON.stringify(ev.data || {}))));
                                return _context.abrupt("return");

                              case 7:
                                if (!(ev.data && instanceParams.verifier === _this.verifier)) {
                                  _context.next = 13;
                                  break;
                                }

                                loglevel.info(ev.data);

                                if (!(!_this.redirectToOpener && bc)) {
                                  _context.next = 12;
                                  break;
                                }

                                _context.next = 12;
                                return bc.postMessage({
                                  success: true,
                                });

                              case 12:
                                resolve(
                                  _objectSpread(
                                    _objectSpread(
                                      {
                                        accessToken: accessToken,
                                        idToken: idToken || "",
                                      },
                                      rest
                                    ),
                                    {},
                                    {
                                      // State has to be last here otherwise it will be overwritten
                                      state: instanceParams,
                                    }
                                  )
                                );

                              case 13:
                                _context.next = 19;
                                break;

                              case 15:
                                _context.prev = 15;
                                _context.t0 = _context["catch"](0);
                                loglevel.error(_context.t0);
                                reject(_context.t0);

                              case 19:
                              case "end":
                                return _context.stop();
                            }
                          }
                        },
                        _callee,
                        null,
                        [[0, 15]]
                      );
                    })
                  );

                  return function handleData(_x) {
                    return _ref.apply(this, arguments);
                  };
                })();

                if (!_this.redirectToOpener) {
                  bc = new broadcast_channel_BroadcastChannel("redirect_channel_".concat(_this.nonce), broadcastChannelOptions);
                  bc.addEventListener(
                    "message",
                    /*#__PURE__*/ (function () {
                      var _ref3 = asyncToGenerator_default()(
                        /*#__PURE__*/ regenerator_default().mark(function _callee2(ev) {
                          return regenerator_default().wrap(function _callee2$(_context2) {
                            while (1) {
                              switch ((_context2.prev = _context2.next)) {
                                case 0:
                                  _context2.next = 2;
                                  return handleData(ev);

                                case 2:
                                  bc.close();
                                  verifierWindow.close();

                                case 4:
                                case "end":
                                  return _context2.stop();
                              }
                            }
                          }, _callee2);
                        })
                      );

                      return function (_x2) {
                        return _ref3.apply(this, arguments);
                      };
                    })()
                  );
                } else {
                  var postMessageEventHandler = /*#__PURE__*/ (function () {
                    var _ref4 = asyncToGenerator_default()(
                      /*#__PURE__*/ regenerator_default().mark(function _callee3(postMessageEvent) {
                        var ev;
                        return regenerator_default().wrap(function _callee3$(_context3) {
                          while (1) {
                            switch ((_context3.prev = _context3.next)) {
                              case 0:
                                if (postMessageEvent.data) {
                                  _context3.next = 2;
                                  break;
                                }

                                return _context3.abrupt("return");

                              case 2:
                                ev = postMessageEvent.data;

                                if (!(ev.channel !== "redirect_channel_".concat(_this.nonce))) {
                                  _context3.next = 5;
                                  break;
                                }

                                return _context3.abrupt("return");

                              case 5:
                                window.removeEventListener("message", postMessageEventHandler);
                                handleData(ev);
                                verifierWindow.close();

                              case 8:
                              case "end":
                                return _context3.stop();
                            }
                          }
                        }, _callee3);
                      })
                    );

                    return function postMessageEventHandler(_x3) {
                      return _ref4.apply(this, arguments);
                    };
                  })();

                  window.addEventListener("message", postMessageEventHandler);
                }

                verifierWindow.open();
                verifierWindow.once("close", function () {
                  if (bc) bc.close();
                  reject(new Error("user closed popup"));
                });
              });
            }

            return null;
          },
        },
      ]);

      return AbstractLoginHandler;
    })();

    /* harmony default export */ const handlers_AbstractLoginHandler = AbstractLoginHandler; // CONCATENATED MODULE: ./src/handlers/DiscordHandler.ts
    function DiscordHandler_createSuper(Derived) {
      var hasNativeReflectConstruct = DiscordHandler_isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = getPrototypeOf_default()(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = getPrototypeOf_default()(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return possibleConstructorReturn_default()(this, result);
      };
    }

    function DiscordHandler_isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    var DiscordHandler = /*#__PURE__*/ (function (_AbstractLoginHandler) {
      inherits_default()(DiscordHandler, _AbstractLoginHandler);

      var _super = DiscordHandler_createSuper(DiscordHandler);

      function DiscordHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState) {
        var _this;

        classCallCheck_default()(this, DiscordHandler);

        _this = _super.call(this, clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);
        _this.clientId = clientId;
        _this.verifier = verifier;
        _this.redirect_uri = redirect_uri;
        _this.typeOfLogin = typeOfLogin;
        _this.uxMode = uxMode;
        _this.redirectToOpener = redirectToOpener;
        _this.jwtParams = jwtParams;
        _this.customState = customState;

        defineProperty_default()(assertThisInitialized_default()(_this), "RESPONSE_TYPE", "token");

        defineProperty_default()(assertThisInitialized_default()(_this), "SCOPE", "identify email");

        _this.setFinalUrl();

        return _this;
      }

      createClass_default()(DiscordHandler, [
        {
          key: "setFinalUrl",
          value: function setFinalUrl() {
            var finalUrl = new URL("https://discord.com/api/oauth2/authorize");
            var clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));
            var finalJwtParams = external_lodash_merge_default()(
              {
                state: this.state,
                response_type: this.RESPONSE_TYPE,
                client_id: this.clientId,
                redirect_uri: this.redirect_uri,
                scope: this.SCOPE,
              },
              clonedParams
            );
            Object.keys(finalJwtParams).forEach(function (key) {
              if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);
            });
            this.finalURL = finalUrl;
          },
        },
        {
          key: "getUserInfo",
          value: (function () {
            var _getUserInfo = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee(params) {
                var accessToken,
                  userInfo,
                  id,
                  avatar,
                  _userInfo$email,
                  email,
                  _userInfo$username,
                  name,
                  _userInfo$discriminat,
                  discriminator,
                  profileImage;

                return regenerator_default().wrap(
                  function _callee$(_context) {
                    while (1) {
                      switch ((_context.prev = _context.next)) {
                        case 0:
                          accessToken = params.accessToken;
                          _context.next = 3;
                          return (0, http_helpers_namespaceObject.get)("https://discord.com/api/users/@me", {
                            headers: {
                              Authorization: "Bearer ".concat(accessToken),
                            },
                          });

                        case 3:
                          userInfo = _context.sent;
                          (id = userInfo.id),
                            (avatar = userInfo.avatar),
                            (_userInfo$email = userInfo.email),
                            (email = _userInfo$email === void 0 ? "" : _userInfo$email),
                            (_userInfo$username = userInfo.username),
                            (name = _userInfo$username === void 0 ? "" : _userInfo$username),
                            (_userInfo$discriminat = userInfo.discriminator),
                            (discriminator = _userInfo$discriminat === void 0 ? "" : _userInfo$discriminat);
                          profileImage =
                            avatar === null
                              ? "https://cdn.discord.com/embed/avatars/".concat(Number(discriminator) % 5, ".png")
                              : "https://cdn.discord.com/avatars/".concat(id, "/").concat(avatar, ".png?size=2048");
                          return _context.abrupt("return", {
                            profileImage: profileImage,
                            name: "".concat(name, "#").concat(discriminator),
                            email: email,
                            verifierId: id,
                            verifier: this.verifier,
                            typeOfLogin: this.typeOfLogin,
                          });

                        case 7:
                        case "end":
                          return _context.stop();
                      }
                    }
                  },
                  _callee,
                  this
                );
              })
            );

            function getUserInfo(_x) {
              return _getUserInfo.apply(this, arguments);
            }

            return getUserInfo;
          })(),
        },
      ]);

      return DiscordHandler;
    })(handlers_AbstractLoginHandler); // CONCATENATED MODULE: ./src/handlers/FacebookHandler.ts

    function FacebookHandler_createSuper(Derived) {
      var hasNativeReflectConstruct = FacebookHandler_isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = getPrototypeOf_default()(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = getPrototypeOf_default()(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return possibleConstructorReturn_default()(this, result);
      };
    }

    function FacebookHandler_isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    var FacebookHandler = /*#__PURE__*/ (function (_AbstractLoginHandler) {
      inherits_default()(FacebookHandler, _AbstractLoginHandler);

      var _super = FacebookHandler_createSuper(FacebookHandler);

      function FacebookHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState) {
        var _this;

        classCallCheck_default()(this, FacebookHandler);

        _this = _super.call(this, clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);
        _this.clientId = clientId;
        _this.verifier = verifier;
        _this.redirect_uri = redirect_uri;
        _this.typeOfLogin = typeOfLogin;
        _this.uxMode = uxMode;
        _this.redirectToOpener = redirectToOpener;
        _this.jwtParams = jwtParams;
        _this.customState = customState;

        defineProperty_default()(assertThisInitialized_default()(_this), "RESPONSE_TYPE", "token");

        defineProperty_default()(assertThisInitialized_default()(_this), "SCOPE", "public_profile email");

        _this.setFinalUrl();

        return _this;
      }

      createClass_default()(FacebookHandler, [
        {
          key: "setFinalUrl",
          value: function setFinalUrl() {
            var finalUrl = new URL("https://www.facebook.com/v15.0/dialog/oauth");
            var clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));
            var finalJwtParams = external_lodash_merge_default()(
              {
                state: this.state,
                response_type: this.RESPONSE_TYPE,
                client_id: this.clientId,
                redirect_uri: this.redirect_uri,
                scope: this.SCOPE,
              },
              clonedParams
            );
            Object.keys(finalJwtParams).forEach(function (key) {
              if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);
            });
            this.finalURL = finalUrl;
          },
        },
        {
          key: "getUserInfo",
          value: (function () {
            var _getUserInfo = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee(params) {
                var accessToken, userInfo, _userInfo$name, name, id, picture, _userInfo$email, email;

                return regenerator_default().wrap(
                  function _callee$(_context) {
                    while (1) {
                      switch ((_context.prev = _context.next)) {
                        case 0:
                          accessToken = params.accessToken;
                          _context.next = 3;
                          return (0, http_helpers_namespaceObject.get)("https://graph.facebook.com/me?fields=name,email,picture.type(large)", {
                            headers: {
                              Authorization: "Bearer ".concat(accessToken),
                            },
                          });

                        case 3:
                          userInfo = _context.sent;
                          (_userInfo$name = userInfo.name),
                            (name = _userInfo$name === void 0 ? "" : _userInfo$name),
                            (id = userInfo.id),
                            (picture = userInfo.picture),
                            (_userInfo$email = userInfo.email),
                            (email = _userInfo$email === void 0 ? "" : _userInfo$email);
                          return _context.abrupt("return", {
                            email: email,
                            name: name,
                            profileImage: picture.data.url || "",
                            verifier: this.verifier,
                            verifierId: id,
                            typeOfLogin: this.typeOfLogin,
                          });

                        case 6:
                        case "end":
                          return _context.stop();
                      }
                    }
                  },
                  _callee,
                  this
                );
              })
            );

            function getUserInfo(_x) {
              return _getUserInfo.apply(this, arguments);
            }

            return getUserInfo;
          })(),
        },
      ]);

      return FacebookHandler;
    })(handlers_AbstractLoginHandler); // CONCATENATED MODULE: ./src/handlers/GoogleHandler.ts

    function GoogleHandler_createSuper(Derived) {
      var hasNativeReflectConstruct = GoogleHandler_isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = getPrototypeOf_default()(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = getPrototypeOf_default()(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return possibleConstructorReturn_default()(this, result);
      };
    }

    function GoogleHandler_isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    var GoogleHandler = /*#__PURE__*/ (function (_AbstractLoginHandler) {
      inherits_default()(GoogleHandler, _AbstractLoginHandler);

      var _super = GoogleHandler_createSuper(GoogleHandler);

      function GoogleHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState) {
        var _this;

        classCallCheck_default()(this, GoogleHandler);

        _this = _super.call(this, clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);
        _this.clientId = clientId;
        _this.verifier = verifier;
        _this.redirect_uri = redirect_uri;
        _this.typeOfLogin = typeOfLogin;
        _this.uxMode = uxMode;
        _this.redirectToOpener = redirectToOpener;
        _this.jwtParams = jwtParams;
        _this.customState = customState;

        defineProperty_default()(assertThisInitialized_default()(_this), "RESPONSE_TYPE", "token id_token");

        defineProperty_default()(assertThisInitialized_default()(_this), "SCOPE", "profile email openid");

        defineProperty_default()(assertThisInitialized_default()(_this), "PROMPT", "consent select_account");

        _this.setFinalUrl();

        return _this;
      }

      createClass_default()(GoogleHandler, [
        {
          key: "setFinalUrl",
          value: function setFinalUrl() {
            var finalUrl = new URL("https://accounts.google.com/o/oauth2/v2/auth");
            var clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));
            var finalJwtParams = external_lodash_merge_default()(
              {
                state: this.state,
                response_type: this.RESPONSE_TYPE,
                client_id: this.clientId,
                prompt: this.PROMPT,
                redirect_uri: this.redirect_uri,
                scope: this.SCOPE,
                nonce: this.nonce,
              },
              clonedParams
            );
            Object.keys(finalJwtParams).forEach(function (key) {
              if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);
            });
            this.finalURL = finalUrl;
          },
        },
        {
          key: "getUserInfo",
          value: (function () {
            var _getUserInfo = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee(params) {
                var accessToken, userInfo, _userInfo$picture, profileImage, _userInfo$email, email, _userInfo$name, name;

                return regenerator_default().wrap(
                  function _callee$(_context) {
                    while (1) {
                      switch ((_context.prev = _context.next)) {
                        case 0:
                          accessToken = params.accessToken;
                          _context.next = 3;
                          return (0, http_helpers_namespaceObject.get)("https://www.googleapis.com/userinfo/v2/me", {
                            headers: {
                              Authorization: "Bearer ".concat(accessToken),
                            },
                          });

                        case 3:
                          userInfo = _context.sent;
                          (_userInfo$picture = userInfo.picture),
                            (profileImage = _userInfo$picture === void 0 ? "" : _userInfo$picture),
                            (_userInfo$email = userInfo.email),
                            (email = _userInfo$email === void 0 ? "" : _userInfo$email),
                            (_userInfo$name = userInfo.name),
                            (name = _userInfo$name === void 0 ? "" : _userInfo$name);
                          return _context.abrupt("return", {
                            email: email,
                            name: name,
                            profileImage: profileImage,
                            verifier: this.verifier,
                            verifierId: email.toLowerCase(),
                            typeOfLogin: this.typeOfLogin,
                          });

                        case 6:
                        case "end":
                          return _context.stop();
                      }
                    }
                  },
                  _callee,
                  this
                );
              })
            );

            function getUserInfo(_x) {
              return _getUserInfo.apply(this, arguments);
            }

            return getUserInfo;
          })(),
        },
      ]);

      return GoogleHandler;
    })(handlers_AbstractLoginHandler); // CONCATENATED MODULE: external "jwt-decode"

    const external_jwt_decode_namespaceObject = require("jwt-decode");
    var external_jwt_decode_default = /*#__PURE__*/ __webpack_require__.n(external_jwt_decode_namespaceObject); // CONCATENATED MODULE: ./src/handlers/JwtHandler.ts
    function JwtHandler_createSuper(Derived) {
      var hasNativeReflectConstruct = JwtHandler_isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = getPrototypeOf_default()(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = getPrototypeOf_default()(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return possibleConstructorReturn_default()(this, result);
      };
    }

    function JwtHandler_isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    var JwtHandler = /*#__PURE__*/ (function (_AbstractLoginHandler) {
      inherits_default()(JwtHandler, _AbstractLoginHandler);

      var _super = JwtHandler_createSuper(JwtHandler);

      function JwtHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState) {
        var _this;

        classCallCheck_default()(this, JwtHandler);

        _this = _super.call(this, clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);
        _this.clientId = clientId;
        _this.verifier = verifier;
        _this.redirect_uri = redirect_uri;
        _this.typeOfLogin = typeOfLogin;
        _this.uxMode = uxMode;
        _this.redirectToOpener = redirectToOpener;
        _this.jwtParams = jwtParams;
        _this.customState = customState;

        defineProperty_default()(assertThisInitialized_default()(_this), "SCOPE", "openid profile email");

        defineProperty_default()(assertThisInitialized_default()(_this), "RESPONSE_TYPE", "token id_token");

        defineProperty_default()(assertThisInitialized_default()(_this), "PROMPT", "login");

        _this.setFinalUrl();

        return _this;
      }

      createClass_default()(JwtHandler, [
        {
          key: "setFinalUrl",
          value: function setFinalUrl() {
            var domain = this.jwtParams.domain;
            var finalUrl = validateAndConstructUrl(domain);
            finalUrl.pathname += finalUrl.pathname.endsWith("/") ? "authorize" : "/authorize";
            var clonedParams = JSON.parse(JSON.stringify(this.jwtParams));
            delete clonedParams.domain;
            var finalJwtParams = external_lodash_merge_default()(
              {
                state: this.state,
                response_type: this.RESPONSE_TYPE,
                client_id: this.clientId,
                prompt: this.PROMPT,
                redirect_uri: this.redirect_uri,
                scope: this.SCOPE,
                connection: loginToConnectionMap[this.typeOfLogin],
                nonce: this.nonce,
              },
              clonedParams
            );
            Object.keys(finalJwtParams).forEach(function (key) {
              if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);
            });
            this.finalURL = finalUrl;
          },
        },
        {
          key: "getUserInfo",
          value: (function () {
            var _getUserInfo = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee(params) {
                var idToken,
                  accessToken,
                  _this$jwtParams,
                  domain,
                  verifierIdField,
                  isVerifierIdCaseSensitive,
                  _this$jwtParams$user_,
                  user_info_route,
                  domainUrl,
                  userInfo,
                  picture,
                  name,
                  email,
                  decodedToken,
                  _name,
                  _email,
                  _picture;

                return regenerator_default().wrap(
                  function _callee$(_context) {
                    while (1) {
                      switch ((_context.prev = _context.next)) {
                        case 0:
                          (idToken = params.idToken), (accessToken = params.accessToken);
                          (_this$jwtParams = this.jwtParams),
                            (domain = _this$jwtParams.domain),
                            (verifierIdField = _this$jwtParams.verifierIdField),
                            (isVerifierIdCaseSensitive = _this$jwtParams.isVerifierIdCaseSensitive),
                            (_this$jwtParams$user_ = _this$jwtParams.user_info_route),
                            (user_info_route = _this$jwtParams$user_ === void 0 ? "userinfo" : _this$jwtParams$user_);

                          if (!accessToken) {
                            _context.next = 15;
                            break;
                          }

                          _context.prev = 3;
                          domainUrl = new URL(domain);
                          _context.next = 7;
                          return (0, http_helpers_namespaceObject.get)("".concat(padUrlString(domainUrl)).concat(user_info_route), {
                            headers: {
                              Authorization: "Bearer ".concat(accessToken),
                            },
                          });

                        case 7:
                          userInfo = _context.sent;
                          (picture = userInfo.picture), (name = userInfo.name), (email = userInfo.email);
                          return _context.abrupt("return", {
                            email: email,
                            name: name,
                            profileImage: picture,
                            verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),
                            verifier: this.verifier,
                            typeOfLogin: this.typeOfLogin,
                          });

                        case 12:
                          _context.prev = 12;
                          _context.t0 = _context["catch"](3);
                          // ignore
                          external_loglevel_default().warn(_context.t0, "Unable to get userinfo from endpoint");

                        case 15:
                          if (!idToken) {
                            _context.next = 19;
                            break;
                          }

                          decodedToken = external_jwt_decode_default()(idToken);
                          (_name = decodedToken.name), (_email = decodedToken.email), (_picture = decodedToken.picture);
                          return _context.abrupt("return", {
                            profileImage: _picture,
                            name: _name,
                            email: _email,
                            verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),
                            verifier: this.verifier,
                            typeOfLogin: this.typeOfLogin,
                          });

                        case 19:
                          throw new Error("Access/id token not available");

                        case 20:
                        case "end":
                          return _context.stop();
                      }
                    }
                  },
                  _callee,
                  this,
                  [[3, 12]]
                );
              })
            );

            function getUserInfo(_x) {
              return _getUserInfo.apply(this, arguments);
            }

            return getUserInfo;
          })(),
        },
      ]);

      return JwtHandler;
    })(handlers_AbstractLoginHandler); // CONCATENATED MODULE: ./src/handlers/MockLoginHandler.ts

    function MockLoginHandler_createSuper(Derived) {
      var hasNativeReflectConstruct = MockLoginHandler_isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = getPrototypeOf_default()(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = getPrototypeOf_default()(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return possibleConstructorReturn_default()(this, result);
      };
    }

    function MockLoginHandler_isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    var MockLoginHandler = /*#__PURE__*/ (function (_AbstractLoginHandler) {
      inherits_default()(MockLoginHandler, _AbstractLoginHandler);

      var _super = MockLoginHandler_createSuper(MockLoginHandler);

      function MockLoginHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState) {
        var _this;

        classCallCheck_default()(this, MockLoginHandler);

        _this = _super.call(this, clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);
        _this.clientId = clientId;
        _this.verifier = verifier;
        _this.redirect_uri = redirect_uri;
        _this.typeOfLogin = typeOfLogin;
        _this.uxMode = uxMode;
        _this.redirectToOpener = redirectToOpener;
        _this.jwtParams = jwtParams;
        _this.customState = customState;

        _this.setFinalUrl();

        return _this;
      }

      createClass_default()(MockLoginHandler, [
        {
          key: "setFinalUrl",
          value: function setFinalUrl() {
            var clonedParams = JSON.parse(JSON.stringify(this.jwtParams));
            delete clonedParams.domain;
            var finalJwtParams = external_lodash_merge_default()(
              {
                state: this.state,
                client_id: this.clientId,
                nonce: this.nonce,
              },
              clonedParams
            );
            this.finalURL = new URL(
              constructURL({
                baseURL: this.redirect_uri,
                query: null,
                hash: finalJwtParams,
              })
            );
          },
        },
        {
          key: "getUserInfo",
          value: (function () {
            var _getUserInfo = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee(params) {
                var idToken,
                  accessToken,
                  _this$jwtParams,
                  domain,
                  verifierIdField,
                  isVerifierIdCaseSensitive,
                  _this$jwtParams$user_,
                  user_info_route,
                  domainUrl,
                  userInfo,
                  picture,
                  name,
                  email,
                  decodedToken,
                  _name,
                  _email,
                  _picture;

                return regenerator_default().wrap(
                  function _callee$(_context) {
                    while (1) {
                      switch ((_context.prev = _context.next)) {
                        case 0:
                          (idToken = params.idToken), (accessToken = params.accessToken);
                          (_this$jwtParams = this.jwtParams),
                            (domain = _this$jwtParams.domain),
                            (verifierIdField = _this$jwtParams.verifierIdField),
                            (isVerifierIdCaseSensitive = _this$jwtParams.isVerifierIdCaseSensitive),
                            (_this$jwtParams$user_ = _this$jwtParams.user_info_route),
                            (user_info_route = _this$jwtParams$user_ === void 0 ? "userinfo" : _this$jwtParams$user_);

                          if (!accessToken) {
                            _context.next = 15;
                            break;
                          }

                          _context.prev = 3;
                          domainUrl = new URL(domain);
                          _context.next = 7;
                          return (0, http_helpers_namespaceObject.get)("".concat(padUrlString(domainUrl)).concat(user_info_route), {
                            headers: {
                              Authorization: "Bearer ".concat(accessToken),
                            },
                          });

                        case 7:
                          userInfo = _context.sent;
                          (picture = userInfo.picture), (name = userInfo.name), (email = userInfo.email);
                          return _context.abrupt("return", {
                            email: email,
                            name: name,
                            profileImage: picture,
                            verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),
                            verifier: this.verifier,
                            typeOfLogin: this.typeOfLogin,
                          });

                        case 12:
                          _context.prev = 12;
                          _context.t0 = _context["catch"](3);
                          // ignore
                          external_loglevel_default().warn(_context.t0, "Unable to get userinfo from endpoint");

                        case 15:
                          if (!idToken) {
                            _context.next = 19;
                            break;
                          }

                          decodedToken = external_jwt_decode_default()(idToken);
                          (_name = decodedToken.name), (_email = decodedToken.email), (_picture = decodedToken.picture);
                          return _context.abrupt("return", {
                            profileImage: _picture,
                            name: _name,
                            email: _email,
                            verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),
                            verifier: this.verifier,
                            typeOfLogin: this.typeOfLogin,
                          });

                        case 19:
                          throw new Error("Access/id token not available");

                        case 20:
                        case "end":
                          return _context.stop();
                      }
                    }
                  },
                  _callee,
                  this,
                  [[3, 12]]
                );
              })
            );

            function getUserInfo(_x) {
              return _getUserInfo.apply(this, arguments);
            }

            return getUserInfo;
          })(),
        },
        {
          key: "handleLoginWindow",
          value: function handleLoginWindow(params) {
            var _this$jwtParams2 = this.jwtParams,
              idToken = _this$jwtParams2.id_token,
              accessToken = _this$jwtParams2.access_token;
            var verifierWindow = new utils_PopupHandler({
              url: this.finalURL,
              features: params.popupFeatures,
            });

            if (this.uxMode === UX_MODE.REDIRECT) {
              verifierWindow.redirect(params.locationReplaceOnRedirect);
            } else {
              return Promise.resolve({
                state: {},
                idToken: idToken,
                accessToken: accessToken,
              });
            }

            return null;
          },
        },
      ]);

      return MockLoginHandler;
    })(handlers_AbstractLoginHandler); // CONCATENATED MODULE: ./src/handlers/PasswordlessHandler.ts

    var PasswordlessHandler_excluded = ["access_token", "id_token"];

    function PasswordlessHandler_ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly &&
          (symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })),
          keys.push.apply(keys, symbols);
      }
      return keys;
    }

    function PasswordlessHandler_objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2
          ? PasswordlessHandler_ownKeys(Object(source), !0).forEach(function (key) {
              defineProperty_default()(target, key, source[key]);
            })
          : Object.getOwnPropertyDescriptors
          ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
          : PasswordlessHandler_ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
      }
      return target;
    }

    function PasswordlessHandler_createSuper(Derived) {
      var hasNativeReflectConstruct = PasswordlessHandler_isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = getPrototypeOf_default()(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = getPrototypeOf_default()(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return possibleConstructorReturn_default()(this, result);
      };
    }

    function PasswordlessHandler_isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    var PasswordlessHandler_JwtHandler = /*#__PURE__*/ (function (_AbstractLoginHandler) {
      inherits_default()(JwtHandler, _AbstractLoginHandler);

      var _super = PasswordlessHandler_createSuper(JwtHandler);

      function JwtHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState) {
        var _this;

        classCallCheck_default()(this, JwtHandler);

        _this = _super.call(this, clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);
        _this.clientId = clientId;
        _this.verifier = verifier;
        _this.redirect_uri = redirect_uri;
        _this.typeOfLogin = typeOfLogin;
        _this.uxMode = uxMode;
        _this.redirectToOpener = redirectToOpener;
        _this.jwtParams = jwtParams;
        _this.customState = customState;

        defineProperty_default()(assertThisInitialized_default()(_this), "SCOPE", "openid profile email");

        defineProperty_default()(assertThisInitialized_default()(_this), "RESPONSE_TYPE", "token id_token");

        defineProperty_default()(assertThisInitialized_default()(_this), "PROMPT", "login");

        _this.setFinalUrl();

        return _this;
      }

      createClass_default()(JwtHandler, [
        {
          key: "setFinalUrl",
          value: function setFinalUrl() {
            var domain = this.jwtParams.domain;
            var domainUrl = validateAndConstructUrl(domain);
            domainUrl.pathname = "/passwordless/start";
            this.finalURL = domainUrl;
          },
        },
        {
          key: "getUserInfo",
          value: (function () {
            var _getUserInfo = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee(params) {
                var idToken,
                  accessToken,
                  _this$jwtParams,
                  domain,
                  verifierIdField,
                  isVerifierIdCaseSensitive,
                  domainUrl,
                  userInfo,
                  picture,
                  name,
                  email,
                  decodedToken,
                  _name,
                  _email,
                  _picture;

                return regenerator_default().wrap(
                  function _callee$(_context) {
                    while (1) {
                      switch ((_context.prev = _context.next)) {
                        case 0:
                          (idToken = params.idToken), (accessToken = params.accessToken);
                          (_this$jwtParams = this.jwtParams),
                            (domain = _this$jwtParams.domain),
                            (verifierIdField = _this$jwtParams.verifierIdField),
                            (isVerifierIdCaseSensitive = _this$jwtParams.isVerifierIdCaseSensitive);
                          _context.prev = 2;
                          domainUrl = new URL(domain);
                          _context.next = 6;
                          return (0, http_helpers_namespaceObject.get)("".concat(padUrlString(domainUrl), "userinfo"), {
                            headers: {
                              Authorization: "Bearer ".concat(accessToken),
                            },
                          });

                        case 6:
                          userInfo = _context.sent;
                          (picture = userInfo.picture), (name = userInfo.name), (email = userInfo.email);
                          return _context.abrupt("return", {
                            email: email,
                            name: name,
                            profileImage: picture,
                            verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),
                            verifier: this.verifier,
                            typeOfLogin: this.typeOfLogin,
                          });

                        case 11:
                          _context.prev = 11;
                          _context.t0 = _context["catch"](2);
                          loglevel.error(_context.t0);
                          decodedToken = external_jwt_decode_default()(idToken);
                          (_name = decodedToken.name), (_email = decodedToken.email), (_picture = decodedToken.picture);
                          return _context.abrupt("return", {
                            profileImage: _picture,
                            name: _name,
                            email: _email,
                            verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),
                            verifier: this.verifier,
                            typeOfLogin: this.typeOfLogin,
                          });

                        case 17:
                        case "end":
                          return _context.stop();
                      }
                    }
                  },
                  _callee,
                  this,
                  [[2, 11]]
                );
              })
            );

            function getUserInfo(_x) {
              return _getUserInfo.apply(this, arguments);
            }

            return getUserInfo;
          })(),
        },
        {
          key: "handleLoginWindow",
          value: function handleLoginWindow() {
            var _this2 = this;

            return new Promise(function (resolve, reject) {
              if (_this2.redirectToOpener) {
                reject(new Error("Cannot use redirect to opener for passwordless"));
                return;
              }

              var handleData = function handleData(ev) {
                try {
                  var error = ev.error,
                    data = ev.data;

                  var _ref = data || {},
                    instanceParams = _ref.instanceParams,
                    _ref$hashParams = _ref.hashParams,
                    accessToken = _ref$hashParams.access_token,
                    idToken = _ref$hashParams.id_token,
                    rest = objectWithoutProperties_default()(_ref$hashParams, PasswordlessHandler_excluded);

                  if (error) {
                    loglevel.error(ev.error);
                    reject(new Error(error));
                    return;
                  }

                  if (ev.data && instanceParams.verifier === _this2.verifier) {
                    loglevel.info(ev.data);
                    resolve(
                      PasswordlessHandler_objectSpread(
                        PasswordlessHandler_objectSpread(
                          {
                            accessToken: accessToken,
                            idToken: idToken || "",
                          },
                          rest
                        ),
                        {},
                        {
                          state: instanceParams,
                        }
                      )
                    );
                  }
                } catch (error) {
                  loglevel.error(error);
                  reject(error);
                }
              };

              var bc = new broadcast_channel_BroadcastChannel("redirect_channel_".concat(_this2.nonce), broadcastChannelOptions);
              bc.addEventListener(
                "message",
                /*#__PURE__*/ (function () {
                  var _ref2 = asyncToGenerator_default()(
                    /*#__PURE__*/ regenerator_default().mark(function _callee2(ev) {
                      return regenerator_default().wrap(function _callee2$(_context2) {
                        while (1) {
                          switch ((_context2.prev = _context2.next)) {
                            case 0:
                              handleData(ev);
                              bc.close();

                            case 2:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    })
                  );

                  return function (_x2) {
                    return _ref2.apply(this, arguments);
                  };
                })()
              );

              try {
                var _this2$jwtParams = _this2.jwtParams,
                  _this2$jwtParams$conn = _this2$jwtParams.connection,
                  connection = _this2$jwtParams$conn === void 0 ? "email" : _this2$jwtParams$conn,
                  login_hint = _this2$jwtParams.login_hint;
                var finalJwtParams = external_lodash_merge_default()(
                  {
                    client_id: _this2.clientId,
                    connection: connection,
                    email: connection === "email" ? login_hint : undefined,
                    phone_number: connection === "sms" ? login_hint : undefined,
                    send: "link",
                    authParams: {
                      scope: _this2.SCOPE,
                      state: _this2.state,
                      response_type: _this2.RESPONSE_TYPE,
                      redirect_uri: _this2.redirect_uri,
                      nonce: _this2.nonce,
                      prompt: _this2.PROMPT,
                    },
                  },
                  {
                    authParams: _this2.jwtParams,
                  }
                ); // using stringify and parse to remove undefined params
                // This method is only resolved when the user clicks the email link

                (0, http_helpers_namespaceObject.post)(_this2.finalURL.href, JSON.parse(JSON.stringify(finalJwtParams)))
                  .then(function (response) {
                    loglevel.info("posted", response);
                    return undefined;
                  })
                  .catch(function (error) {
                    loglevel.error(error);
                    reject(error);
                  });
              } catch (error) {
                loglevel.error(error);
                reject(error);
              }
            });
          },
        },
      ]);

      return JwtHandler;
    })(handlers_AbstractLoginHandler); // CONCATENATED MODULE: ./src/handlers/RedditHandler.ts

    function RedditHandler_createSuper(Derived) {
      var hasNativeReflectConstruct = RedditHandler_isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = getPrototypeOf_default()(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = getPrototypeOf_default()(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return possibleConstructorReturn_default()(this, result);
      };
    }

    function RedditHandler_isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    var RedditHandler = /*#__PURE__*/ (function (_AbstractLoginHandler) {
      inherits_default()(RedditHandler, _AbstractLoginHandler);

      var _super = RedditHandler_createSuper(RedditHandler);

      function RedditHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState) {
        var _this;

        classCallCheck_default()(this, RedditHandler);

        _this = _super.call(this, clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);
        _this.clientId = clientId;
        _this.verifier = verifier;
        _this.redirect_uri = redirect_uri;
        _this.typeOfLogin = typeOfLogin;
        _this.uxMode = uxMode;
        _this.redirectToOpener = redirectToOpener;
        _this.jwtParams = jwtParams;
        _this.customState = customState;

        defineProperty_default()(assertThisInitialized_default()(_this), "RESPONSE_TYPE", "token");

        defineProperty_default()(assertThisInitialized_default()(_this), "SCOPE", "identity");

        _this.setFinalUrl();

        return _this;
      }

      createClass_default()(RedditHandler, [
        {
          key: "setFinalUrl",
          value: function setFinalUrl() {
            var finalUrl = new URL("https://www.reddit.com/api/v1/authorize".concat(window.innerWidth < 600 ? ".compact" : ""));
            var clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));
            var finalJwtParams = external_lodash_merge_default()(
              {
                state: this.state,
                response_type: this.RESPONSE_TYPE,
                client_id: this.clientId,
                redirect_uri: this.redirect_uri,
                scope: this.SCOPE,
              },
              clonedParams
            );
            Object.keys(finalJwtParams).forEach(function (key) {
              if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);
            });
            this.finalURL = finalUrl;
          },
        },
        {
          key: "getUserInfo",
          value: (function () {
            var _getUserInfo = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee(params) {
                var accessToken, userInfo, _userInfo$icon_img, profileImage, _userInfo$name, name;

                return regenerator_default().wrap(
                  function _callee$(_context) {
                    while (1) {
                      switch ((_context.prev = _context.next)) {
                        case 0:
                          accessToken = params.accessToken;
                          _context.next = 3;
                          return (0, http_helpers_namespaceObject.get)("https://oauth.reddit.com/api/v1/me", {
                            headers: {
                              Authorization: "Bearer ".concat(accessToken),
                            },
                          });

                        case 3:
                          userInfo = _context.sent;
                          (_userInfo$icon_img = userInfo.icon_img),
                            (profileImage = _userInfo$icon_img === void 0 ? "" : _userInfo$icon_img),
                            (_userInfo$name = userInfo.name),
                            (name = _userInfo$name === void 0 ? "" : _userInfo$name);
                          return _context.abrupt("return", {
                            email: "",
                            name: name,
                            profileImage: profileImage.split("?").length > 0 ? profileImage.split("?")[0] : profileImage,
                            verifier: this.verifier,
                            verifierId: name.toLowerCase(),
                            typeOfLogin: this.typeOfLogin,
                          });

                        case 6:
                        case "end":
                          return _context.stop();
                      }
                    }
                  },
                  _callee,
                  this
                );
              })
            );

            function getUserInfo(_x) {
              return _getUserInfo.apply(this, arguments);
            }

            return getUserInfo;
          })(),
        },
      ]);

      return RedditHandler;
    })(handlers_AbstractLoginHandler); // CONCATENATED MODULE: ./src/handlers/TwitchHandler.ts

    function TwitchHandler_createSuper(Derived) {
      var hasNativeReflectConstruct = TwitchHandler_isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = getPrototypeOf_default()(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = getPrototypeOf_default()(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return possibleConstructorReturn_default()(this, result);
      };
    }

    function TwitchHandler_isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    var TwitchHandler = /*#__PURE__*/ (function (_AbstractLoginHandler) {
      inherits_default()(TwitchHandler, _AbstractLoginHandler);

      var _super = TwitchHandler_createSuper(TwitchHandler);

      function TwitchHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState) {
        var _this;

        classCallCheck_default()(this, TwitchHandler);

        _this = _super.call(this, clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);
        _this.clientId = clientId;
        _this.verifier = verifier;
        _this.redirect_uri = redirect_uri;
        _this.typeOfLogin = typeOfLogin;
        _this.uxMode = uxMode;
        _this.redirectToOpener = redirectToOpener;
        _this.jwtParams = jwtParams;
        _this.customState = customState;

        defineProperty_default()(assertThisInitialized_default()(_this), "RESPONSE_TYPE", "token");

        defineProperty_default()(assertThisInitialized_default()(_this), "SCOPE", "user:read:email");

        _this.setFinalUrl();

        return _this;
      }

      createClass_default()(TwitchHandler, [
        {
          key: "setFinalUrl",
          value: function setFinalUrl() {
            var finalUrl = new URL("https://id.twitch.tv/oauth2/authorize");
            var clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));
            var finalJwtParams = external_lodash_merge_default()(
              {
                state: this.state,
                response_type: this.RESPONSE_TYPE,
                client_id: this.clientId,
                redirect_uri: this.redirect_uri,
                scope: this.SCOPE,
                force_verify: true,
              },
              clonedParams
            );
            Object.keys(finalJwtParams).forEach(function (key) {
              if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);
            });
            this.finalURL = finalUrl;
          },
        },
        {
          key: "getUserInfo",
          value: (function () {
            var _getUserInfo = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee(params) {
                var accessToken,
                  userInfo,
                  _ref,
                  _ref2,
                  _ref2$,
                  _ref2$$profile_image_,
                  profileImage,
                  _ref2$$display_name,
                  name,
                  _ref2$$email,
                  email,
                  verifierId;

                return regenerator_default().wrap(
                  function _callee$(_context) {
                    while (1) {
                      switch ((_context.prev = _context.next)) {
                        case 0:
                          accessToken = params.accessToken;
                          _context.next = 3;
                          return (0, http_helpers_namespaceObject.get)("https://api.twitch.tv/helix/users", {
                            headers: {
                              Authorization: "Bearer ".concat(accessToken),
                              "Client-ID": this.clientId,
                            },
                          });

                        case 3:
                          userInfo = _context.sent;
                          (_ref = userInfo.data || []),
                            (_ref2 = slicedToArray_default()(_ref, 1)),
                            (_ref2$ = _ref2[0]),
                            (_ref2$$profile_image_ = _ref2$.profile_image_url),
                            (profileImage = _ref2$$profile_image_ === void 0 ? "" : _ref2$$profile_image_),
                            (_ref2$$display_name = _ref2$.display_name),
                            (name = _ref2$$display_name === void 0 ? "" : _ref2$$display_name),
                            (_ref2$$email = _ref2$.email),
                            (email = _ref2$$email === void 0 ? "" : _ref2$$email),
                            (verifierId = _ref2$.id);
                          return _context.abrupt("return", {
                            profileImage: profileImage,
                            name: name,
                            email: email,
                            verifierId: verifierId,
                            verifier: this.verifier,
                            typeOfLogin: this.typeOfLogin,
                          });

                        case 6:
                        case "end":
                          return _context.stop();
                      }
                    }
                  },
                  _callee,
                  this
                );
              })
            );

            function getUserInfo(_x) {
              return _getUserInfo.apply(this, arguments);
            }

            return getUserInfo;
          })(),
        },
      ]);

      return TwitchHandler;
    })(handlers_AbstractLoginHandler); // CONCATENATED MODULE: ./src/handlers/WebAuthnHandler.ts

    function WebAuthnHandler_createSuper(Derived) {
      var hasNativeReflectConstruct = WebAuthnHandler_isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = getPrototypeOf_default()(Derived),
          result;
        if (hasNativeReflectConstruct) {
          var NewTarget = getPrototypeOf_default()(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return possibleConstructorReturn_default()(this, result);
      };
    }

    function WebAuthnHandler_isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
        return true;
      } catch (e) {
        return false;
      }
    }

    var WEBAUTHN_LOOKUP_SERVER = "https://api.webauthn.openlogin.com";

    var WebAuthnHandler = /*#__PURE__*/ (function (_AbstractLoginHandler) {
      inherits_default()(WebAuthnHandler, _AbstractLoginHandler);

      var _super = WebAuthnHandler_createSuper(WebAuthnHandler);

      function WebAuthnHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState, registerOnly) {
        var _this;

        classCallCheck_default()(this, WebAuthnHandler);

        _this = _super.call(this, clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);
        _this.clientId = clientId;
        _this.verifier = verifier;
        _this.redirect_uri = redirect_uri;
        _this.typeOfLogin = typeOfLogin;
        _this.uxMode = uxMode;
        _this.redirectToOpener = redirectToOpener;
        _this.jwtParams = jwtParams;
        _this.customState = customState;
        _this.registerOnly = registerOnly;

        _this.setFinalUrl();

        return _this;
      }

      createClass_default()(WebAuthnHandler, [
        {
          key: "setFinalUrl",
          value: function setFinalUrl() {
            var finalUrl = new URL("https://webauthn.openlogin.com");
            var clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));
            var finalJwtParams = external_lodash_merge_default()(
              {
                register_only: !!this.registerOnly,
                state: this.state,
                client_id: this.clientId,
                redirect_uri: this.redirect_uri,
              },
              clonedParams
            );
            Object.keys(finalJwtParams).forEach(function (key) {
              if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);
            });
            this.finalURL = finalUrl;
          },
        },
        {
          key: "getUserInfo",
          value: (function () {
            var _getUserInfo = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee(parameters) {
                var idToken,
                  ref,
                  extraParamsPassed,
                  extraParams,
                  verifierId,
                  signature,
                  clientDataJSON,
                  authenticatorData,
                  publicKey,
                  challenge,
                  rpOrigin,
                  credId,
                  _JSON$parse,
                  _yield$get,
                  _yield$get2;

                return regenerator_default().wrap(
                  function _callee$(_context) {
                    while (1) {
                      switch ((_context.prev = _context.next)) {
                        case 0:
                          (idToken = parameters.idToken),
                            (ref = parameters.ref),
                            (extraParamsPassed = parameters.extraParamsPassed),
                            (extraParams = parameters.extraParams);

                          if (!(extraParamsPassed === "true")) {
                            _context.next = 31;
                            break;
                          }

                          loglevel.debug("extraParamsPassed is true, using extraParams passed through hashParams");
                          _context.prev = 3;
                          _JSON$parse = JSON.parse(atob(extraParams));
                          verifierId = _JSON$parse.verifier_id;
                          signature = _JSON$parse.signature;
                          clientDataJSON = _JSON$parse.clientDataJSON;
                          authenticatorData = _JSON$parse.authenticatorData;
                          publicKey = _JSON$parse.publicKey;
                          challenge = _JSON$parse.challenge;
                          rpOrigin = _JSON$parse.rpOrigin;
                          credId = _JSON$parse.credId;
                          _context.next = 29;
                          break;

                        case 15:
                          _context.prev = 15;
                          _context.t0 = _context["catch"](3);
                          loglevel.warn("unable to parse extraParams", _context.t0);
                          _context.next = 20;
                          return (0, http_helpers_namespaceObject.get)("".concat(WEBAUTHN_LOOKUP_SERVER, "/signature/fetch/").concat(idToken));

                        case 20:
                          _yield$get = _context.sent;
                          verifierId = _yield$get.verifier_id;
                          signature = _yield$get.signature;
                          clientDataJSON = _yield$get.clientDataJSON;
                          authenticatorData = _yield$get.authenticatorData;
                          publicKey = _yield$get.publicKey;
                          challenge = _yield$get.challenge;
                          rpOrigin = _yield$get.rpOrigin;
                          credId = _yield$get.credId;

                        case 29:
                          _context.next = 43;
                          break;

                        case 31:
                          loglevel.debug("extraParamsPassed is false, using extraParams passed through bridge server");
                          _context.next = 34;
                          return (0, http_helpers_namespaceObject.get)("".concat(WEBAUTHN_LOOKUP_SERVER, "/signature/fetch/").concat(idToken));

                        case 34:
                          _yield$get2 = _context.sent;
                          verifierId = _yield$get2.verifier_id;
                          signature = _yield$get2.signature;
                          clientDataJSON = _yield$get2.clientDataJSON;
                          authenticatorData = _yield$get2.authenticatorData;
                          publicKey = _yield$get2.publicKey;
                          challenge = _yield$get2.challenge;
                          rpOrigin = _yield$get2.rpOrigin;
                          credId = _yield$get2.credId;

                        case 43:
                          if (!(signature !== idToken)) {
                            _context.next = 45;
                            break;
                          }

                          throw new Error("idtoken should be equal to signature");

                        case 45:
                          return _context.abrupt("return", {
                            email: "",
                            name: "WebAuthn Login",
                            profileImage: "",
                            verifier: this.verifier,
                            verifierId: verifierId,
                            typeOfLogin: this.typeOfLogin,
                            ref: ref,
                            registerOnly: this.registerOnly,
                            extraVerifierParams: {
                              signature: signature,
                              clientDataJSON: clientDataJSON,
                              authenticatorData: authenticatorData,
                              publicKey: publicKey,
                              challenge: challenge,
                              rpOrigin: rpOrigin,
                              credId: credId,
                            },
                          });

                        case 46:
                        case "end":
                          return _context.stop();
                      }
                    }
                  },
                  _callee,
                  this,
                  [[3, 15]]
                );
              })
            );

            function getUserInfo(_x) {
              return _getUserInfo.apply(this, arguments);
            }

            return getUserInfo;
          })(),
        },
      ]);

      return WebAuthnHandler;
    })(handlers_AbstractLoginHandler); // CONCATENATED MODULE: ./src/handlers/HandlerFactory.ts

    var createHandler = function createHandler(_ref) {
      var clientId = _ref.clientId,
        redirect_uri = _ref.redirect_uri,
        typeOfLogin = _ref.typeOfLogin,
        verifier = _ref.verifier,
        jwtParams = _ref.jwtParams,
        redirectToOpener = _ref.redirectToOpener,
        uxMode = _ref.uxMode,
        customState = _ref.customState,
        registerOnly = _ref.registerOnly;

      if (!verifier || !typeOfLogin || !clientId) {
        throw new Error("Invalid params");
      }

      var _ref2 = jwtParams || {},
        domain = _ref2.domain,
        login_hint = _ref2.login_hint,
        id_token = _ref2.id_token,
        access_token = _ref2.access_token;

      switch (typeOfLogin) {
        case LOGIN.GOOGLE:
          return new GoogleHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);

        case LOGIN.FACEBOOK:
          return new FacebookHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);

        case LOGIN.TWITCH:
          return new TwitchHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);

        case LOGIN.REDDIT:
          return new RedditHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);

        case LOGIN.DISCORD:
          return new DiscordHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);

        case LOGIN.PASSWORDLESS:
          if (!domain || !login_hint) throw new Error("Invalid params");
          return new PasswordlessHandler_JwtHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);

        case LOGIN.APPLE:
        case LOGIN.GITHUB:
        case LOGIN.LINKEDIN:
        case LOGIN.TWITTER:
        case LOGIN.WEIBO:
        case LOGIN.LINE:
        case LOGIN.EMAIL_PASSWORD:
        case LOGIN.JWT:
          if (!domain) throw new Error("Invalid params");

          if (id_token || access_token) {
            return new MockLoginHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);
          }

          return new JwtHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);

        case LOGIN.WEBAUTHN:
          return new WebAuthnHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState, registerOnly);

        default:
          throw new Error("Invalid login type");
      }
    };

    /* harmony default export */ const HandlerFactory = createHandler; // CONCATENATED MODULE: ./src/handlers/interfaces.ts
    var SkipTorusKey;

    (function (SkipTorusKey) {
      SkipTorusKey[(SkipTorusKey["Never"] = 0)] = "Never";
      SkipTorusKey[(SkipTorusKey["IfNew"] = 1)] = "IfNew";
      SkipTorusKey[(SkipTorusKey["Always"] = 2)] = "Always";
    })(SkipTorusKey || (SkipTorusKey = {}));
    // EXTERNAL MODULE: ./node_modules/bn.js/lib/bn.js
    var bn = __webpack_require__(3550);
    var bn_default = /*#__PURE__*/ __webpack_require__.n(bn);
    // EXTERNAL MODULE: ./node_modules/elliptic/lib/elliptic.js
    var elliptic = __webpack_require__(6266);
    // EXTERNAL MODULE: ./node_modules/json-stable-stringify/index.js
    var json_stable_stringify = __webpack_require__(7266);
    var json_stable_stringify_default = /*#__PURE__*/ __webpack_require__.n(json_stable_stringify); // CONCATENATED MODULE: ./node_modules/@toruslabs/torus.js/dist/torusUtils.esm.js
    /* provided dependency */ var torusUtils_esm_Buffer = __webpack_require__(8764)["Buffer"];

    const torusUtils_esm_log = external_loglevel_default().getLogger("torus.js");
    torusUtils_esm_log.disableAll();

    function capitalizeFirstLetter(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }

    class SomeError extends Error {
      constructor(_ref) {
        let { errors, responses, predicate } = _ref;
        super("Unable to resolve enough promises.");

        defineProperty_default()(this, "errors", void 0);

        defineProperty_default()(this, "responses", void 0);

        defineProperty_default()(this, "predicate", void 0);

        this.errors = errors;
        this.responses = responses;
        this.predicate = predicate;
      }
    }
    const Some = (promises, predicate) =>
      new Promise((resolve, reject) => {
        let finishedCount = 0;
        const sharedState = {
          resolved: false,
        };
        const errorArr = new Array(promises.length).fill(undefined);
        const resultArr = new Array(promises.length).fill(undefined);
        let predicateError;
        return promises.forEach((x, index) => {
          return x
            .then((resp) => {
              resultArr[index] = resp;
              return undefined;
            })
            .catch((error) => {
              errorArr[index] = error;
            }) // eslint-disable-next-line promise/no-return-in-finally
            .finally(() => {
              if (sharedState.resolved) return;
              return predicate(resultArr.slice(0), sharedState)
                .then((data) => {
                  sharedState.resolved = true;
                  resolve(data);
                  return undefined;
                })
                .catch((error) => {
                  // log only the last predicate error
                  predicateError = error;
                })
                .finally(() => {
                  finishedCount += 1;

                  if (finishedCount === promises.length) {
                    const errors = Object.values(
                      resultArr.reduce((acc, z) => {
                        if (z) {
                          var _error$data;

                          const { id, error } = z;

                          if (
                            (error === null || error === void 0
                              ? void 0
                              : (_error$data = error.data) === null || _error$data === void 0
                              ? void 0
                              : _error$data.length) > 0
                          ) {
                            if (error.data.startsWith("Error occurred while verifying params")) acc[id] = capitalizeFirstLetter(error.data);
                            else acc[id] = error.data;
                          }
                        }

                        return acc;
                      }, {})
                    );

                    if (errors.length > 0) {
                      // Format-able errors
                      const msg = errors.length > 1 ? `\n${errors.map((it) => `• ${it}`).join("\n")}` : errors[0];
                      reject(new Error(msg));
                    } else {
                      var _predicateError;

                      reject(
                        new SomeError({
                          errors: errorArr,
                          responses: resultArr,
                          predicate:
                            ((_predicateError = predicateError) === null || _predicateError === void 0 ? void 0 : _predicateError.message) ||
                            predicateError,
                        })
                      );
                    }
                  }
                });
            });
        });
      });

    function ownKeys$1(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly &&
          (symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })),
          keys.push.apply(keys, symbols);
      }
      return keys;
    }

    function _objectSpread$1(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2
          ? ownKeys$1(Object(source), !0).forEach(function (key) {
              defineProperty_default()(target, key, source[key]);
            })
          : Object.getOwnPropertyDescriptors
          ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
          : ownKeys$1(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
      }
      return target;
    }
    class GetOrSetNonceError extends Error {}
    const kCombinations = (s, k) => {
      let set = s;

      if (typeof set === "number") {
        set = Array.from(
          {
            length: set,
          },
          (_, i) => i
        );
      }

      if (k > set.length || k <= 0) {
        return [];
      }

      if (k === set.length) {
        return [set];
      }

      if (k === 1) {
        return set.reduce((acc, cur) => [...acc, [cur]], []);
      }

      const combs = [];
      let tailCombs = [];

      for (let i = 0; i <= set.length - k + 1; i += 1) {
        tailCombs = kCombinations(set.slice(i + 1), k - 1);

        for (let j = 0; j < tailCombs.length; j += 1) {
          combs.push([set[i], ...tailCombs[j]]);
        }
      }

      return combs;
    };
    const thresholdSame = (arr, t) => {
      const hashMap = {};

      for (let i = 0; i < arr.length; i += 1) {
        const str = json_stable_stringify_default()(arr[i]);
        hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1;

        if (hashMap[str] === t) {
          return arr[i];
        }
      }

      return undefined;
    };
    const keyLookup = async (endpoints, verifier, verifierId) => {
      const lookupPromises = endpoints.map((x) =>
        (0, http_helpers_namespaceObject.post)(
          x,
          (0, http_helpers_namespaceObject.generateJsonRPCObject)("VerifierLookupRequest", {
            verifier,
            verifier_id: verifierId.toString(),
          })
        ).catch((err) => torusUtils_esm_log.error("lookup request failed", err))
      );
      return Some(lookupPromises, (lookupResults) => {
        const lookupShares = lookupResults.filter((x1) => x1);
        const errorResult = thresholdSame(
          lookupShares.map((x2) => x2 && x2.error),
          ~~(endpoints.length / 2) + 1
        );
        const keyResult = thresholdSame(
          lookupShares.map((x3) => x3 && x3.result),
          ~~(endpoints.length / 2) + 1
        );

        if (keyResult || errorResult) {
          return Promise.resolve({
            keyResult,
            errorResult,
          });
        }

        return Promise.reject(new Error(`invalid results ${JSON.stringify(lookupResults)}`));
      });
    };
    const waitKeyLookup = (endpoints, verifier, verifierId, timeout) =>
      new Promise((resolve, reject) => {
        setTimeout(() => {
          keyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject);
        }, timeout);
      });
    const keyAssign = async (_ref) => {
      let { endpoints, torusNodePubs, lastPoint, firstPoint, verifier, verifierId, signerHost, network } = _ref;
      let nodeNum;
      let initialPoint;

      if (lastPoint === undefined) {
        nodeNum = Math.floor(Math.random() * endpoints.length);
        initialPoint = nodeNum;
      } else {
        nodeNum = lastPoint % endpoints.length;
      }

      if (nodeNum === firstPoint) throw new Error("Looped through all");
      if (firstPoint !== undefined) initialPoint = firstPoint;
      const data = (0, http_helpers_namespaceObject.generateJsonRPCObject)("KeyAssign", {
        verifier,
        verifier_id: verifierId.toString(),
      });

      try {
        const signedData = await (0, http_helpers_namespaceObject.post)(
          signerHost,
          data,
          {
            headers: {
              pubKeyX: torusNodePubs[nodeNum].X,
              pubKeyY: torusNodePubs[nodeNum].Y,
              network,
            },
          },
          {
            useAPIKey: true,
          }
        );
        return await (0, http_helpers_namespaceObject.post)(endpoints[nodeNum], _objectSpread$1(_objectSpread$1({}, data), signedData), {
          headers: {
            "Content-Type": "application/json; charset=utf-8",
          },
        });
      } catch (error) {
        torusUtils_esm_log.error(error);
        const acceptedErrorMsgs = [
          // Slow node
          "Timed out", // Happens when the node is not reachable (dns issue etc)
          "TypeError: Failed to fetch",
          "TypeError: cancelled",
          "TypeError: NetworkError when attempting to fetch resource.", // Firefox
        ];
        if (acceptedErrorMsgs.includes(error.message))
          return keyAssign({
            endpoints,
            torusNodePubs,
            lastPoint: nodeNum + 1,
            firstPoint: initialPoint,
            verifier,
            verifierId,
            signerHost,
            network,
          });
        throw new Error(`Sorry, the Torus Network that powers Web3Auth is currently very busy.
    We will generate your key in time. Pls try again later. \n
    ${error.message || ""}`);
      }
    };
    function torusUtils_esm_keccak256(a) {
      const hash = js_default()("keccak256").update(a).digest().toString("hex");
      return `0x${hash}`;
    }

    function torusUtils_esm_ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly &&
          (symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })),
          keys.push.apply(keys, symbols);
      }
      return keys;
    }

    function torusUtils_esm_objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2
          ? torusUtils_esm_ownKeys(Object(source), !0).forEach(function (key) {
              defineProperty_default()(target, key, source[key]);
            })
          : Object.getOwnPropertyDescriptors
          ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
          : torusUtils_esm_ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
      }
      return target;
    }
    // of Torus nodes to handle malicious node responses

    class Torus {
      constructor() {
        let {
          enableOneKey = false,
          metadataHost = "https://metadata.tor.us",
          allowHost = "https://signer.tor.us/api/allow",
          signerHost = "https://signer.tor.us/api/sign",
          serverTimeOffset = 0,
          network = "mainnet",
        } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        defineProperty_default()(this, "metadataHost", void 0);

        defineProperty_default()(this, "allowHost", void 0);

        defineProperty_default()(this, "serverTimeOffset", void 0);

        defineProperty_default()(this, "enableOneKey", void 0);

        defineProperty_default()(this, "signerHost", void 0);

        defineProperty_default()(this, "network", void 0);

        defineProperty_default()(this, "ec", void 0);

        this.ec = new elliptic.ec("secp256k1");
        this.metadataHost = metadataHost;
        this.allowHost = allowHost;
        this.enableOneKey = enableOneKey;
        this.serverTimeOffset = serverTimeOffset || 0; // ms

        this.signerHost = signerHost;
        this.network = network;
      }

      static enableLogging() {
        let v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        if (v) torusUtils_esm_log.enableAll();
        else torusUtils_esm_log.disableAll();
      }

      static setAPIKey(apiKey) {
        (0, http_helpers_namespaceObject.setAPIKey)(apiKey);
      }

      static setEmbedHost(embedHost) {
        (0, http_helpers_namespaceObject.setEmbedHost)(embedHost);
      }

      static isGetOrSetNonceError(err) {
        return err instanceof GetOrSetNonceError;
      }
      /**
       * Note: use this function only for openlogin tkey account lookups.
       */

      async getUserTypeAndAddress(endpoints, torusNodePubs, _ref) {
        let { verifier, verifierId } = _ref;
        let doesKeyAssign = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {};
        let isNewKey = false;
        let finalKeyResult;

        if (errorResult && JSON.stringify(errorResult).includes("Verifier + VerifierID has not yet been assigned")) {
          if (!doesKeyAssign) {
            throw new Error("Verifier + VerifierID has not yet been assigned");
          }

          await keyAssign({
            endpoints,
            torusNodePubs,
            lastPoint: undefined,
            firstPoint: undefined,
            verifier,
            verifierId,
            signerHost: this.signerHost,
            network: this.network,
          });
          const assignResult = await waitKeyLookup(endpoints, verifier, verifierId, 1000);
          finalKeyResult = assignResult === null || assignResult === void 0 ? void 0 : assignResult.keyResult;
          isNewKey = true;
        } else if (keyResult) {
          finalKeyResult = keyResult;
        } else {
          throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);
        }

        if (finalKeyResult) {
          const { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0];
          let nonceResult;
          let nonce;
          let modifiedPubKey;

          try {
            nonceResult = await this.getOrSetNonce(X, Y, undefined, !isNewKey);
            nonce = new (bn_default())(nonceResult.nonce || "0", 16);
          } catch {
            throw new GetOrSetNonceError();
          }

          if (nonceResult.typeOfUser === "v1") {
            modifiedPubKey = this.ec
              .keyFromPublic({
                x: X,
                y: Y,
              })
              .getPublic()
              .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());
          } else if (nonceResult.typeOfUser === "v2") {
            modifiedPubKey = this.ec
              .keyFromPublic({
                x: X,
                y: Y,
              })
              .getPublic()
              .add(
                this.ec
                  .keyFromPublic({
                    x: nonceResult.pubNonce.x,
                    y: nonceResult.pubNonce.y,
                  })
                  .getPublic()
              );
          } else {
            throw new Error("getOrSetNonce should always return typeOfUser.");
          }

          const finalX = modifiedPubKey.getX().toString(16);
          const finalY = modifiedPubKey.getY().toString(16);
          const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());
          if (nonceResult.typeOfUser === "v1")
            return {
              typeOfUser: nonceResult.typeOfUser,
              nonce,
              X: finalX,
              Y: finalY,
              address,
            };
          else if (nonceResult.typeOfUser === "v2") {
            return {
              typeOfUser: nonceResult.typeOfUser,
              nonce,
              pubNonce: nonceResult.pubNonce,
              upgraded: nonceResult.upgraded,
              X: finalX,
              Y: finalY,
              address,
            };
          }
        }

        throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);
      }

      async setCustomKey(_ref2) {
        let { privKeyHex, metadataNonce, torusKeyHex, customKeyHex } = _ref2;
        let torusKey;

        if (torusKeyHex) {
          torusKey = new (bn_default())(torusKeyHex, 16);
        } else {
          const privKey = new (bn_default())(privKeyHex, 16);
          torusKey = privKey.sub(metadataNonce).umod(this.ec.curve.n);
        }

        const customKey = new (bn_default())(customKeyHex, 16);
        const newMetadataNonce = customKey.sub(torusKey).umod(this.ec.curve.n);
        const data = this.generateMetadataParams(newMetadataNonce.toString(16), torusKey);
        await this.setMetadata(data);
      }

      async retrieveShares(endpoints, indexes, verifier, verifierParams, idToken) {
        let extraParams = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
        const promiseArr = [];
        await (0, http_helpers_namespaceObject.get)(
          this.allowHost,
          {
            headers: {
              verifier,
              verifier_id: verifierParams.verifier_id,
              network: this.network,
            },
          },
          {
            useAPIKey: true,
          }
        );
        /*
      CommitmentRequestParams struct {
        MessagePrefix      string `json:"messageprefix"`
        TokenCommitment    string `json:"tokencommitment"`
        TempPubX           string `json:"temppubx"`
        TempPubY           string `json:"temppuby"`
        VerifierIdentifier string `json:"verifieridentifier"`
      }
      */
        // generate temporary private and public key that is used to secure receive shares

        const tmpKey = (0, eccrypto_namespaceObject.generatePrivate)();
        const pubKey = (0, eccrypto_namespaceObject.getPublic)(tmpKey).toString("hex");
        const pubKeyX = pubKey.slice(2, 66);
        const pubKeyY = pubKey.slice(66);
        const tokenCommitment = torusUtils_esm_keccak256(idToken); // make commitment requests to endpoints

        for (let i = 0; i < endpoints.length; i += 1) {
          const p = (0, http_helpers_namespaceObject.post)(
            endpoints[i],
            (0, http_helpers_namespaceObject.generateJsonRPCObject)("CommitmentRequest", {
              messageprefix: "mug00",
              tokencommitment: tokenCommitment.slice(2),
              temppubx: pubKeyX,
              temppuby: pubKeyY,
              verifieridentifier: verifier,
            })
          ).catch((err) => {
            torusUtils_esm_log.error("commitment", err);
          });
          promiseArr.push(p);
        }
        /*
      ShareRequestParams struct {
        Item []bijson.RawMessage `json:"item"`
      }
      ShareRequestItem struct {
        IDToken            string          `json:"idtoken"`
        NodeSignatures     []NodeSignature `json:"nodesignatures"`
        VerifierIdentifier string          `json:"verifieridentifier"`
      }
      NodeSignature struct {
        Signature   string
        Data        string
        NodePubKeyX string
        NodePubKeyY string
      }
      CommitmentRequestResult struct {
        Signature string `json:"signature"`
        Data      string `json:"data"`
        NodePubX  string `json:"nodepubx"`
        NodePubY  string `json:"nodepuby"`
      }
      */
        // send share request once k + t number of commitment requests have completed

        return Some(promiseArr, (resultArr) => {
          const completedRequests = resultArr.filter((x) => {
            if (!x || typeof x !== "object") {
              return false;
            }

            if (x.error) {
              return false;
            }

            return true;
          });

          if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {
            return Promise.resolve(resultArr);
          }

          return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`));
        })
          .then((responses) => {
            const promiseArrRequest = [];
            const nodeSigs = [];

            for (let i = 0; i < responses.length; i += 1) {
              if (responses[i]) nodeSigs.push(responses[i].result);
            }

            for (let i = 0; i < endpoints.length; i += 1) {
              // eslint-disable-next-line promise/no-nesting
              const p = (0, http_helpers_namespaceObject.post)(
                endpoints[i],
                (0, http_helpers_namespaceObject.generateJsonRPCObject)("ShareRequest", {
                  encrypted: "yes",
                  item: [
                    torusUtils_esm_objectSpread(
                      torusUtils_esm_objectSpread({}, verifierParams),
                      {},
                      {
                        idtoken: idToken,
                        nodesignatures: nodeSigs,
                        verifieridentifier: verifier,
                      },
                      extraParams
                    ),
                  ],
                })
              ).catch((err) => torusUtils_esm_log.error("share req", err));
              promiseArrRequest.push(p);
            }

            return Some(promiseArrRequest, async (shareResponses, sharedState) => {
              /*
            ShareRequestResult struct {
              Keys []KeyAssignment
            }
                    / KeyAssignmentPublic -
            type KeyAssignmentPublic struct {
              Index     big.Int
              PublicKey common.Point
              Threshold int
              Verifiers map[string][]string // Verifier => VerifierID
            }
                   // KeyAssignment -
            type KeyAssignment struct {
              KeyAssignmentPublic
              Share big.Int // Or Si
            }
          */
              // check if threshold number of nodes have returned the same user public key
              const completedRequests = shareResponses.filter((x) => x);
              const thresholdPublicKey = thresholdSame(
                shareResponses.map((x) => x && x.result && x.result.keys[0].PublicKey),
                ~~(endpoints.length / 2) + 1
              ); // optimistically run lagrange interpolation once threshold number of shares have been received
              // this is matched against the user public key to ensure that shares are consistent

              if (completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey) {
                const sharePromises = [];
                const nodeIndexes = [];

                for (let i = 0; i < shareResponses.length; i += 1) {
                  var _currentShareResponse, _currentShareResponse2;

                  const currentShareResponse = shareResponses[i];

                  if (
                    (currentShareResponse === null || currentShareResponse === void 0
                      ? void 0
                      : (_currentShareResponse = currentShareResponse.result) === null || _currentShareResponse === void 0
                      ? void 0
                      : (_currentShareResponse2 = _currentShareResponse.keys) === null || _currentShareResponse2 === void 0
                      ? void 0
                      : _currentShareResponse2.length) > 0
                  ) {
                    currentShareResponse.result.keys.sort((a, b) => new (bn_default())(a.Index, 16).cmp(new (bn_default())(b.Index, 16)));
                    const firstKey = currentShareResponse.result.keys[0];

                    if (firstKey.Metadata) {
                      const metadata = {
                        ephemPublicKey: torusUtils_esm_Buffer.from(firstKey.Metadata.ephemPublicKey, "hex"),
                        iv: torusUtils_esm_Buffer.from(firstKey.Metadata.iv, "hex"),
                        mac: torusUtils_esm_Buffer.from(firstKey.Metadata.mac, "hex"), // mode: Buffer.from(firstKey.Metadata.mode, "hex"),
                      };
                      sharePromises.push(
                        // eslint-disable-next-line promise/no-nesting
                        (0, eccrypto_namespaceObject.decrypt)(
                          tmpKey,
                          torusUtils_esm_objectSpread(
                            torusUtils_esm_objectSpread({}, metadata),
                            {},
                            {
                              ciphertext: torusUtils_esm_Buffer.from(
                                torusUtils_esm_Buffer.from(firstKey.Share, "base64").toString("binary").padStart(64, "0"),
                                "hex"
                              ),
                            }
                          )
                        ).catch((err) => torusUtils_esm_log.debug("share decryption", err))
                      );
                    } else {
                      sharePromises.push(Promise.resolve(torusUtils_esm_Buffer.from(firstKey.Share.padStart(64, "0"), "hex")));
                    }
                  } else {
                    sharePromises.push(Promise.resolve(undefined));
                  }

                  nodeIndexes.push(new (bn_default())(indexes[i], 16));
                }

                const sharesResolved = await Promise.all(sharePromises);
                if (sharedState.resolved) return undefined;
                const decryptedShares = sharesResolved.reduce((acc, curr, index) => {
                  if (curr)
                    acc.push({
                      index: nodeIndexes[index],
                      value: new (bn_default())(curr),
                    });
                  return acc;
                }, []); // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit

                const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);
                let privateKey = null;

                for (let j = 0; j < allCombis.length; j += 1) {
                  const currentCombi = allCombis[j];
                  const currentCombiShares = decryptedShares.filter((v, index) => currentCombi.includes(index));
                  const shares = currentCombiShares.map((x) => x.value);
                  const indices = currentCombiShares.map((x) => x.index);
                  const derivedPrivateKey = this.lagrangeInterpolation(shares, indices);
                  if (!derivedPrivateKey) continue;
                  const decryptedPubKey = (0, eccrypto_namespaceObject.getPublic)(
                    torusUtils_esm_Buffer.from(derivedPrivateKey.toString(16, 64), "hex")
                  ).toString("hex");
                  const decryptedPubKeyX = decryptedPubKey.slice(2, 66);
                  const decryptedPubKeyY = decryptedPubKey.slice(66);

                  if (
                    new (bn_default())(decryptedPubKeyX, 16).cmp(new (bn_default())(thresholdPublicKey.X, 16)) === 0 &&
                    new (bn_default())(decryptedPubKeyY, 16).cmp(new (bn_default())(thresholdPublicKey.Y, 16)) === 0
                  ) {
                    privateKey = derivedPrivateKey;
                    break;
                  }
                }

                if (privateKey === undefined || privateKey === null) {
                  throw new Error("could not derive private key");
                }

                return privateKey;
              }

              throw new Error("invalid");
            });
          })
          .then(async (returnedKey) => {
            let privateKey = returnedKey;
            if (!privateKey) throw new Error("Invalid private key returned");
            const decryptedPubKey = (0, eccrypto_namespaceObject.getPublic)(torusUtils_esm_Buffer.from(privateKey.toString(16, 64), "hex")).toString(
              "hex"
            );
            const decryptedPubKeyX = decryptedPubKey.slice(2, 66);
            const decryptedPubKeyY = decryptedPubKey.slice(66);
            let metadataNonce;

            if (this.enableOneKey) {
              const { nonce } = await this.getNonce(decryptedPubKeyX, decryptedPubKeyY, privateKey);
              metadataNonce = new (bn_default())(nonce || "0", 16);
            } else {
              metadataNonce = await this.getMetadata({
                pub_key_X: decryptedPubKeyX,
                pub_key_Y: decryptedPubKeyY,
              });
            }

            torusUtils_esm_log.debug("> torus.js/retrieveShares", {
              privKey: privateKey.toString(16),
              metadataNonce: metadataNonce.toString(16),
            });
            privateKey = privateKey.add(metadataNonce).umod(this.ec.curve.n);
            const ethAddress = this.generateAddressFromPrivKey(privateKey);
            torusUtils_esm_log.debug("> torus.js/retrieveShares", {
              ethAddress,
              privKey: privateKey.toString(16),
            }); // return reconstructed private key and ethereum address

            return {
              ethAddress,
              privKey: privateKey.toString("hex", 64),
              metadataNonce,
            };
          });
      }

      async getMetadata(data) {
        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        try {
          const metadataResponse = await (0, http_helpers_namespaceObject.post)(`${this.metadataHost}/get`, data, options, {
            useAPIKey: true,
          });

          if (!metadataResponse || !metadataResponse.message) {
            return new (bn_default())(0);
          }

          return new (bn_default())(metadataResponse.message, 16); // nonce
        } catch (error) {
          torusUtils_esm_log.error("get metadata error", error);
          return new (bn_default())(0);
        }
      }

      generateMetadataParams(message, privateKey) {
        const key = this.ec.keyFromPrivate(privateKey.toString("hex", 64));
        const setData = {
          data: message,
          timestamp: new (bn_default())(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16),
        };
        const sig = key.sign(torusUtils_esm_keccak256(json_stable_stringify_default()(setData)).slice(2));
        return {
          pub_key_X: key.getPublic().getX().toString("hex"),
          pub_key_Y: key.getPublic().getY().toString("hex"),
          set_data: setData,
          signature: torusUtils_esm_Buffer
            .from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new (bn_default())("").toString(16, 2), "hex")
            .toString("base64"),
        };
      }

      async setMetadata(data) {
        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        try {
          const metadataResponse = await (0, http_helpers_namespaceObject.post)(`${this.metadataHost}/set`, data, options, {
            useAPIKey: true,
          });
          return metadataResponse.message; // IPFS hash
        } catch (error) {
          torusUtils_esm_log.error("set metadata error", error);
          return "";
        }
      }

      lagrangeInterpolation(shares, nodeIndex) {
        if (shares.length !== nodeIndex.length) {
          return null;
        }

        let secret = new (bn_default())(0);

        for (let i = 0; i < shares.length; i += 1) {
          let upper = new (bn_default())(1);
          let lower = new (bn_default())(1);

          for (let j = 0; j < shares.length; j += 1) {
            if (i !== j) {
              upper = upper.mul(nodeIndex[j].neg());
              upper = upper.umod(this.ec.curve.n);
              let temp = nodeIndex[i].sub(nodeIndex[j]);
              temp = temp.umod(this.ec.curve.n);
              lower = lower.mul(temp).umod(this.ec.curve.n);
            }
          }

          let delta = upper.mul(lower.invm(this.ec.curve.n)).umod(this.ec.curve.n);
          delta = delta.mul(shares[i]).umod(this.ec.curve.n);
          secret = secret.add(delta);
        }

        return secret.umod(this.ec.curve.n);
      }

      generateAddressFromPrivKey(privateKey) {
        const key = this.ec.keyFromPrivate(privateKey.toString("hex", 64), "hex");
        const publicKey = key.getPublic().encode("hex", false).slice(2);
        torusUtils_esm_log.info(publicKey, "public key");
        const ethAddressLower = `0x${torusUtils_esm_keccak256(torusUtils_esm_Buffer.from(publicKey, "hex")).slice(64 - 38)}`;
        return (0, external_web3_utils_.toChecksumAddress)(ethAddressLower);
      }

      generateAddressFromPubKey(publicKeyX, publicKeyY) {
        const key = this.ec.keyFromPublic({
          x: publicKeyX.toString("hex", 64),
          y: publicKeyY.toString("hex", 64),
        });
        const publicKey = key.getPublic().encode("hex", false).slice(2);
        torusUtils_esm_log.info(key.getPublic().encode("hex", false), "public key");
        const ethAddressLower = `0x${torusUtils_esm_keccak256(torusUtils_esm_Buffer.from(publicKey, "hex")).slice(64 - 38)}`;
        return (0, external_web3_utils_.toChecksumAddress)(ethAddressLower);
      }
      /**
       * Note: use this function only with custom auth, don't use to lookup openlogin accounts.
       */

      async getPublicAddress(endpoints, torusNodePubs, _ref3) {
        let { verifier, verifierId } = _ref3;
        let isExtended = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        torusUtils_esm_log.debug("> torus.js/getPublicAddress", {
          endpoints,
          torusNodePubs,
          verifier,
          verifierId,
          isExtended,
        });
        let finalKeyResult;
        let isNewKey = false;
        const { keyResult, errorResult } = (await keyLookup(endpoints, verifier, verifierId)) || {};

        if (errorResult && JSON.stringify(errorResult).includes("Verifier not supported")) {
          // change error msg
          throw new Error(`Verifier not supported. Check if you: \n
      1. Are on the right network (Torus testnet/mainnet) \n
      2. Have setup a verifier on dashboard.web3auth.io?`);
        } else if (errorResult && JSON.stringify(errorResult).includes("Verifier + VerifierID has not yet been assigned")) {
          await keyAssign({
            endpoints,
            torusNodePubs,
            lastPoint: undefined,
            firstPoint: undefined,
            verifier,
            verifierId,
            signerHost: this.signerHost,
            network: this.network,
          });
          const assignResult = await waitKeyLookup(endpoints, verifier, verifierId, 1000);
          finalKeyResult = assignResult === null || assignResult === void 0 ? void 0 : assignResult.keyResult;
          isNewKey = true;
        } else if (keyResult) {
          finalKeyResult = keyResult;
        } else {
          throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);
        }

        torusUtils_esm_log.debug("> torus.js/getPublicAddress", {
          finalKeyResult,
          isNewKey,
        });

        if (finalKeyResult) {
          var _nonce;

          let { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0];
          let nonceResult;
          let nonce;
          let modifiedPubKey;
          let typeOfUser;
          let pubNonce;

          if (this.enableOneKey) {
            try {
              nonceResult = await this.getOrSetNonce(X, Y, undefined, !isNewKey);
              nonce = new (bn_default())(nonceResult.nonce || "0", 16);
              typeOfUser = nonceResult.typeOfUser;
            } catch {
              throw new GetOrSetNonceError();
            }

            if (nonceResult.typeOfUser === "v1") {
              modifiedPubKey = this.ec
                .keyFromPublic({
                  x: X,
                  y: Y,
                })
                .getPublic()
                .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());
            } else if (nonceResult.typeOfUser === "v2") {
              if (nonceResult.upgraded) {
                // OneKey is upgraded to 2/n, returned address is address of Torus key (postbox key), not tKey
                modifiedPubKey = this.ec
                  .keyFromPublic({
                    x: X,
                    y: Y,
                  })
                  .getPublic();
              } else {
                modifiedPubKey = this.ec
                  .keyFromPublic({
                    x: X,
                    y: Y,
                  })
                  .getPublic()
                  .add(
                    this.ec
                      .keyFromPublic({
                        x: nonceResult.pubNonce.x,
                        y: nonceResult.pubNonce.y,
                      })
                      .getPublic()
                  );
                pubNonce = nonceResult.pubNonce;
              }
            } else {
              throw new Error("getOrSetNonce should always return typeOfUser.");
            }
          } else {
            typeOfUser = "v1";
            nonce = await this.getMetadata({
              pub_key_X: X,
              pub_key_Y: Y,
            });
            modifiedPubKey = this.ec
              .keyFromPublic({
                x: X,
                y: Y,
              })
              .getPublic()
              .add(this.ec.keyFromPrivate(nonce.toString(16)).getPublic());
          }

          X = modifiedPubKey.getX().toString(16);
          Y = modifiedPubKey.getY().toString(16);
          const address = this.generateAddressFromPubKey(modifiedPubKey.getX(), modifiedPubKey.getY());
          torusUtils_esm_log.debug("> torus.js/getPublicAddress", {
            X,
            Y,
            address,
            typeOfUser,
            nonce: (_nonce = nonce) === null || _nonce === void 0 ? void 0 : _nonce.toString(16),
            pubNonce,
          });
          if (!isExtended) return address;
          return {
            typeOfUser,
            address,
            X,
            Y,
            metadataNonce: nonce,
            pubNonce,
          };
        }

        throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);
      }
      /**
       * Internal functions for OneKey (OpenLogin v2), only call these functions if you know what you're doing
       */

      async getOrSetNonce(X, Y, privKey) {
        let getOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        let data;
        const msg = getOnly ? "getNonce" : "getOrSetNonce";

        if (privKey) {
          data = this.generateMetadataParams(msg, privKey);
        } else {
          data = {
            pub_key_X: X,
            pub_key_Y: Y,
            set_data: {
              data: msg,
            },
          };
        }

        return (0, http_helpers_namespaceObject.post)(`${this.metadataHost}/get_or_set_nonce`, data, undefined, {
          useAPIKey: true,
        });
      }

      async getNonce(X, Y, privKey) {
        return this.getOrSetNonce(X, Y, privKey, true);
      }

      getPostboxKeyFrom1OutOf1(privKey, nonce) {
        const privKeyBN = new (bn_default())(privKey, 16);
        const nonceBN = new (bn_default())(nonce, 16);
        return privKeyBN.sub(nonceBN).umod(this.ec.curve.n).toString("hex");
      }
    } // CONCATENATED MODULE: external "@chaitanyapotti/register-service-worker"

    //# sourceMappingURL=torusUtils.esm.js.map

    const register_service_worker_namespaceObject = require("@chaitanyapotti/register-service-worker"); // CONCATENATED MODULE: ./src/registerServiceWorker.ts
    var registerServiceWorker = function registerServiceWorker(baseUrl) {
      return new Promise(function (resolve, reject) {
        var swUrl = "".concat(baseUrl, "sw.js");

        if ("serviceWorker" in window.navigator) {
          // if swIntegrity is not calculated
          (0, register_service_worker_namespaceObject.register)(swUrl, {
            ready: function ready() {
              loglevel.info("App is being served from cache by a service worker.\n For more details, visit https://goo.gl/AFskqB");
              resolve(undefined);
            },
            registered: function registered() {
              loglevel.info("Service worker has been registered.");
              resolve(undefined);
            },
            cached: function cached() {
              loglevel.info("Content has been cached for offline use.");
              resolve(undefined);
            },
            updatefound: function updatefound() {
              loglevel.info("New content is downloading.");
            },
            updated: function updated() {
              loglevel.info("New content is available; please refresh.");
            },
            offline: function offline() {
              loglevel.info("No internet connection found. App is running in offline mode.");
              reject(new Error("App is offline"));
            },
            error: function error(_error) {
              loglevel.error("Error during service worker registration:", _error);
              reject(_error);
            },
          });
        } else {
          reject(new Error("Service workers are not supported"));
        }
      });
    }; // CONCATENATED MODULE: ./src/sentry.ts
    var SentryHandler = /*#__PURE__*/ (function () {
      function SentryHandler(sentry, chainUrl) {
        classCallCheck_default()(this, SentryHandler);

        defineProperty_default()(this, "sentry", null);

        defineProperty_default()(this, "chainUrl", "");

        this.sentry = sentry;
        this.chainUrl = chainUrl;
      }

      createClass_default()(SentryHandler, [
        {
          key: "startTransaction",
          value: function startTransaction(context) {
            if (this.sentry) {
              if (context.name === SENTRY_TXNS.FETCH_NODE_DETAILS && this.chainUrl) {
                context.name += this.chainUrl;
              }

              return this.sentry.startTransaction(context);
            }
          },
        },
        {
          key: "finishTransaction",
          value: function finishTransaction(tx) {
            if (tx) {
              tx.finish();
            }
          },
        },
      ]);

      return SentryHandler;
    })(); // CONCATENATED MODULE: ./src/utils/StorageHelper.ts

    var StorageHelper = /*#__PURE__*/ (function () {
      function StorageHelper(serverUrl) {
        classCallCheck_default()(this, StorageHelper);

        defineProperty_default()(this, "currentStorageMethod", REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE);

        defineProperty_default()(this, "isInitialized", false);

        defineProperty_default()(this, "storageServerUrl", "https://broadcast-server.tor.us");

        this.storageServerUrl = serverUrl;
      }

      createClass_default()(StorageHelper, [
        {
          key: "init",
          value: function init() {
            var support = helpers_are3PCSupported();
            var localStorageAvailable = storageAvailable(REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE);

            if (support && localStorageAvailable) {
              // use local storage as default for storing stuff
              this.currentStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE;
            } else {
              // use server store as default for storing stuff
              this.currentStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.SERVER;
            }

            this.isInitialized = true;
          },
        },
        {
          key: "storeLoginDetails",
          value: (function () {
            var _storeLoginDetails = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee(params, scope) {
                var privKey, privKeyHex, publicKeyHex, encData, signature;
                return regenerator_default().wrap(
                  function _callee$(_context) {
                    while (1) {
                      switch ((_context.prev = _context.next)) {
                        case 0:
                          if (this.isInitialized) {
                            _context.next = 2;
                            break;
                          }

                          throw new Error("StorageHelper is not initialized");

                        case 2:
                          if (!(this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.SERVER)) {
                            _context.next = 16;
                            break;
                          }

                          privKey = (0, metadata_helpers_namespaceObject.keccak256)(scope);
                          privKeyHex = privKey.toString("hex");
                          publicKeyHex = (0, eccrypto_namespaceObject.getPublic)(privKey).toString("hex");
                          _context.next = 8;
                          return (0, metadata_helpers_namespaceObject.encryptData)(privKeyHex, params);

                        case 8:
                          encData = _context.sent;
                          _context.next = 11;
                          return (0, eccrypto_namespaceObject.sign)(privKey, (0, metadata_helpers_namespaceObject.keccak256)(encData));

                        case 11:
                          signature = _context.sent.toString("hex");
                          _context.next = 14;
                          return (0, http_helpers_namespaceObject.post)("".concat(this.storageServerUrl, "/store/set"), {
                            key: publicKeyHex,
                            data: encData,
                            signature: signature,
                          });

                        case 14:
                          _context.next = 17;
                          break;

                        case 16:
                          window.localStorage.setItem("torus_login_".concat(scope), JSON.stringify(params));

                        case 17:
                        case "end":
                          return _context.stop();
                      }
                    }
                  },
                  _callee,
                  this
                );
              })
            );

            function storeLoginDetails(_x, _x2) {
              return _storeLoginDetails.apply(this, arguments);
            }

            return storeLoginDetails;
          })(),
        },
        {
          key: "retrieveLoginDetails",
          value: (function () {
            var _retrieveLoginDetails = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee2(scope) {
                var privKey, privKeyHex, publicKeyHex, encData, _loginDetails, loginDetails;

                return regenerator_default().wrap(
                  function _callee2$(_context2) {
                    while (1) {
                      switch ((_context2.prev = _context2.next)) {
                        case 0:
                          if (this.isInitialized) {
                            _context2.next = 2;
                            break;
                          }

                          throw new Error("StorageHelper is not initialized");

                        case 2:
                          if (!(this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.SERVER)) {
                            _context2.next = 13;
                            break;
                          }

                          privKey = (0, metadata_helpers_namespaceObject.keccak256)(scope);
                          privKeyHex = privKey.toString("hex");
                          publicKeyHex = (0, eccrypto_namespaceObject.getPublic)(privKey).toString("hex");
                          _context2.next = 8;
                          return (0, http_helpers_namespaceObject.get)("".concat(this.storageServerUrl, "/store/get?key=").concat(publicKeyHex));

                        case 8:
                          encData = _context2.sent;
                          _context2.next = 11;
                          return (0, metadata_helpers_namespaceObject.decryptData)(privKeyHex, encData.message);

                        case 11:
                          _loginDetails = _context2.sent;
                          return _context2.abrupt("return", _loginDetails);

                        case 13:
                          loginDetails = window.localStorage.getItem("torus_login_".concat(scope));
                          return _context2.abrupt("return", JSON.parse(loginDetails || "{}"));

                        case 15:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  },
                  _callee2,
                  this
                );
              })
            );

            function retrieveLoginDetails(_x3) {
              return _retrieveLoginDetails.apply(this, arguments);
            }

            return retrieveLoginDetails;
          })(),
        },
        {
          key: "clearLoginDetailsStorage",
          value: function clearLoginDetailsStorage(scope) {
            if (!this.isInitialized) throw new Error("StorageHelper is not initialized");

            if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE) {
              window.localStorage.removeItem("torus_login_".concat(scope));
            } // No need to clear server details cause they auto expire and scope is never re-used for different login attempts
          },
        },
        {
          key: "clearOrphanedLoginDetails",
          value: function clearOrphanedLoginDetails() {
            if (!this.isInitialized) throw new Error("StorageHelper is not initialized");

            if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE) {
              var allStorageKeys = Object.keys(window.localStorage);
              allStorageKeys.forEach(function (key) {
                if (key.startsWith("torus_login_")) {
                  window.localStorage.removeItem(key);
                }
              });
            } // No need to clear server details cause they auto expire and scope is never re-used for different login attempts
          },
        },
      ]);

      return StorageHelper;
    })();

    /* harmony default export */ const utils_StorageHelper = StorageHelper; // CONCATENATED MODULE: ./src/login.ts
    var login_excluded = ["access_token", "id_token"],
      _excluded2 = ["access_token", "id_token"],
      _excluded3 = ["access_token", "id_token"],
      _excluded4 = ["args", "method"];

    function _createForOfIteratorHelper(o, allowArrayLike) {
      var it = (typeof Symbol !== "undefined" && o[Symbol.iterator]) || o["@@iterator"];
      if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || (allowArrayLike && o && typeof o.length === "number")) {
          if (it) o = it;
          var i = 0;
          var F = function F() {};
          return {
            s: F,
            n: function n() {
              if (i >= o.length) return { done: true };
              return { done: false, value: o[i++] };
            },
            e: function e(_e) {
              throw _e;
            },
            f: F,
          };
        }
        throw new TypeError(
          "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
        );
      }
      var normalCompletion = true,
        didErr = false,
        err;
      return {
        s: function s() {
          it = it.call(o);
        },
        n: function n() {
          var step = it.next();
          normalCompletion = step.done;
          return step;
        },
        e: function e(_e2) {
          didErr = true;
          err = _e2;
        },
        f: function f() {
          try {
            if (!normalCompletion && it.return != null) it.return();
          } finally {
            if (didErr) throw err;
          }
        },
      };
    }

    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n = Object.prototype.toString.call(o).slice(8, -1);
      if (n === "Object" && o.constructor) n = o.constructor.name;
      if (n === "Map" || n === "Set") return Array.from(o);
      if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }

    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }

    function login_ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly &&
          (symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          })),
          keys.push.apply(keys, symbols);
      }
      return keys;
    }

    function login_objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2
          ? login_ownKeys(Object(source), !0).forEach(function (key) {
              defineProperty_default()(target, key, source[key]);
            })
          : Object.getOwnPropertyDescriptors
          ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))
          : login_ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
      }
      return target;
    }

    var CustomAuth = /*#__PURE__*/ (function () {
      function CustomAuth(_ref) {
        var baseUrl = _ref.baseUrl,
          _ref$network = _ref.network,
          network = _ref$network === void 0 ? TORUS_NETWORK.MAINNET : _ref$network,
          _ref$enableLogging = _ref.enableLogging,
          enableLogging = _ref$enableLogging === void 0 ? false : _ref$enableLogging,
          _ref$enableOneKey = _ref.enableOneKey,
          enableOneKey = _ref$enableOneKey === void 0 ? false : _ref$enableOneKey,
          _ref$redirectToOpener = _ref.redirectToOpener,
          redirectToOpener = _ref$redirectToOpener === void 0 ? false : _ref$redirectToOpener,
          _ref$redirectPathName = _ref.redirectPathName,
          redirectPathName = _ref$redirectPathName === void 0 ? "redirect" : _ref$redirectPathName,
          _ref$apiKey = _ref.apiKey,
          apiKey = _ref$apiKey === void 0 ? "torus-default" : _ref$apiKey,
          _ref$uxMode = _ref.uxMode,
          uxMode = _ref$uxMode === void 0 ? UX_MODE.POPUP : _ref$uxMode,
          _ref$locationReplaceO = _ref.locationReplaceOnRedirect,
          locationReplaceOnRedirect = _ref$locationReplaceO === void 0 ? false : _ref$locationReplaceO,
          popupFeatures = _ref.popupFeatures,
          _ref$metadataUrl = _ref.metadataUrl,
          metadataUrl = _ref$metadataUrl === void 0 ? "https://metadata.tor.us" : _ref$metadataUrl,
          _ref$storageServerUrl = _ref.storageServerUrl,
          storageServerUrl = _ref$storageServerUrl === void 0 ? "https://broadcast-server.tor.us" : _ref$storageServerUrl,
          networkUrl = _ref.networkUrl,
          sentry = _ref.sentry;

        classCallCheck_default()(this, CustomAuth);

        defineProperty_default()(this, "isInitialized", void 0);

        defineProperty_default()(this, "config", void 0);

        defineProperty_default()(this, "torus", void 0);

        defineProperty_default()(this, "nodeDetailManager", void 0);

        defineProperty_default()(this, "storageHelper", void 0);

        defineProperty_default()(this, "sentryHandler", void 0);

        this.isInitialized = false;
        var baseUri = new URL(baseUrl);
        this.config = {
          baseUrl: padUrlString(baseUri),

          get redirect_uri() {
            return "".concat(this.baseUrl).concat(redirectPathName);
          },

          redirectToOpener: redirectToOpener,
          uxMode: uxMode,
          locationReplaceOnRedirect: locationReplaceOnRedirect,
          popupFeatures: popupFeatures,
        };
        var torus = new Torus({
          enableOneKey: enableOneKey,
          metadataHost: metadataUrl,
          allowHost: "".concat(SIGNER_MAP[network], "/api/allow"),
          signerHost: "".concat(SIGNER_MAP[network], "/api/sign"),
          network: network,
        });
        Torus.setAPIKey(apiKey);
        this.torus = torus;
        this.nodeDetailManager = new NodeDetailManager({
          network: networkUrl || network,
          proxyAddress: CONTRACT_MAP[network],
        });

        if (enableLogging) {
          loglevel.enableAll();
          loglevel.debug("enabled logging", true);
        } else loglevel.disableAll();

        this.storageHelper = new utils_StorageHelper(storageServerUrl);
        this.sentryHandler = new SentryHandler(sentry, networkUrl);
      }

      createClass_default()(CustomAuth, [
        {
          key: "init",
          value: (function () {
            var _init = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee() {
                var _ref2,
                  _ref2$skipSw,
                  skipSw,
                  _ref2$skipInit,
                  skipInit,
                  _ref2$skipPrefetch,
                  skipPrefetch,
                  fetchSwResponse,
                  _args = arguments;

                return regenerator_default().wrap(
                  function _callee$(_context) {
                    while (1) {
                      switch ((_context.prev = _context.next)) {
                        case 0:
                          (_ref2 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}),
                            (_ref2$skipSw = _ref2.skipSw),
                            (skipSw = _ref2$skipSw === void 0 ? false : _ref2$skipSw),
                            (_ref2$skipInit = _ref2.skipInit),
                            (skipInit = _ref2$skipInit === void 0 ? false : _ref2$skipInit),
                            (_ref2$skipPrefetch = _ref2.skipPrefetch),
                            (skipPrefetch = _ref2$skipPrefetch === void 0 ? false : _ref2$skipPrefetch);
                          this.storageHelper.init();

                          if (!skipInit) {
                            _context.next = 5;
                            break;
                          }

                          this.isInitialized = true;
                          return _context.abrupt("return");

                        case 5:
                          if (skipSw) {
                            _context.next = 23;
                            break;
                          }

                          _context.next = 8;
                          return fetch("".concat(this.config.baseUrl, "sw.js"), {
                            cache: "reload",
                          });

                        case 8:
                          fetchSwResponse = _context.sent;

                          if (!fetchSwResponse.ok) {
                            _context.next = 22;
                            break;
                          }

                          _context.prev = 10;
                          _context.next = 13;
                          return registerServiceWorker(this.config.baseUrl);

                        case 13:
                          this.isInitialized = true;
                          return _context.abrupt("return");

                        case 17:
                          _context.prev = 17;
                          _context.t0 = _context["catch"](10);
                          loglevel.warn(_context.t0);

                        case 20:
                          _context.next = 23;
                          break;

                        case 22:
                          throw new Error("Service worker is not being served. Please serve it");

                        case 23:
                          if (skipPrefetch) {
                            _context.next = 30;
                            break;
                          }

                          if (!isFirefox()) {
                            _context.next = 27;
                            break;
                          }

                          this.isInitialized = true;
                          return _context.abrupt("return");

                        case 27:
                          _context.next = 29;
                          return this.handlePrefetchRedirectUri();

                        case 29:
                          return _context.abrupt("return");

                        case 30:
                          this.isInitialized = true;

                        case 31:
                        case "end":
                          return _context.stop();
                      }
                    }
                  },
                  _callee,
                  this,
                  [[10, 17]]
                );
              })
            );

            function init() {
              return _init.apply(this, arguments);
            }

            return init;
          })(),
        },
        {
          key: "triggerLogin",
          value: (function () {
            var _triggerLogin = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee2(args) {
                var verifier,
                  typeOfLogin,
                  clientId,
                  jwtParams,
                  hash,
                  queryParameters,
                  customState,
                  registerOnly,
                  _args$skipTorusKey,
                  skipTorusKey,
                  _args$checkIfNewKey,
                  checkIfNewKey,
                  loginHandler,
                  loginParams,
                  _handleRedirectParame,
                  error,
                  hashParameters,
                  instanceParameters,
                  accessToken,
                  idToken,
                  rest,
                  userInfo,
                  nodeTx,
                  _yield$this$nodeDetai,
                  torusNodeEndpoints,
                  torusNodePub,
                  lookupTx,
                  torusPubKey,
                  res,
                  _torusKey,
                  skip,
                  existingPk,
                  _lookupData$keyResult,
                  _lookupData$keyResult2,
                  _lookupData$keyResult3,
                  _lookupData$keyResult4,
                  _yield$this$nodeDetai2,
                  _torusNodeEndpoints,
                  lookupData,
                  torusKey;

                return regenerator_default().wrap(
                  function _callee2$(_context2) {
                    while (1) {
                      switch ((_context2.prev = _context2.next)) {
                        case 0:
                          loglevel.debug("start", Date.now() - 1665658000000);
                          (verifier = args.verifier),
                            (typeOfLogin = args.typeOfLogin),
                            (clientId = args.clientId),
                            (jwtParams = args.jwtParams),
                            (hash = args.hash),
                            (queryParameters = args.queryParameters),
                            (customState = args.customState),
                            (registerOnly = args.registerOnly),
                            (_args$skipTorusKey = args.skipTorusKey),
                            (skipTorusKey = _args$skipTorusKey === void 0 ? SkipTorusKey.Never : _args$skipTorusKey),
                            (_args$checkIfNewKey = args.checkIfNewKey),
                            (checkIfNewKey = _args$checkIfNewKey === void 0 ? false : _args$checkIfNewKey);
                          loglevel.debug("Verifier: ", verifier);

                          if (this.isInitialized) {
                            _context2.next = 5;
                            break;
                          }

                          throw new Error("Not initialized yet");

                        case 5:
                          if (!(registerOnly && typeOfLogin !== LOGIN.WEBAUTHN)) {
                            _context2.next = 7;
                            break;
                          }

                          throw new Error("registerOnly flag can only be passed for webauthn");

                        case 7:
                          loginHandler = HandlerFactory({
                            typeOfLogin: typeOfLogin,
                            clientId: clientId,
                            verifier: verifier,
                            redirect_uri: this.config.redirect_uri,
                            redirectToOpener: this.config.redirectToOpener,
                            jwtParams: jwtParams,
                            uxMode: this.config.uxMode,
                            customState: customState,
                            registerOnly: registerOnly,
                          });

                          if (!(hash && queryParameters)) {
                            _context2.next = 16;
                            break;
                          }

                          (_handleRedirectParame = handleRedirectParameters(hash, queryParameters)),
                            (error = _handleRedirectParame.error),
                            (hashParameters = _handleRedirectParame.hashParameters),
                            (instanceParameters = _handleRedirectParame.instanceParameters);

                          if (!error) {
                            _context2.next = 12;
                            break;
                          }

                          throw new Error(error);

                        case 12:
                          (accessToken = hashParameters.access_token),
                            (idToken = hashParameters.id_token),
                            (rest = objectWithoutProperties_default()(hashParameters, login_excluded)); // State has to be last here otherwise it will be overwritten

                          loginParams = login_objectSpread(
                            login_objectSpread(
                              {
                                accessToken: accessToken,
                                idToken: idToken,
                              },
                              rest
                            ),
                            {},
                            {
                              state: instanceParameters,
                            }
                          );
                          _context2.next = 24;
                          break;

                        case 16:
                          this.storageHelper.clearOrphanedLoginDetails();
                          _context2.next = 19;
                          return this.storageHelper.storeLoginDetails(
                            {
                              method: TORUS_METHOD.TRIGGER_LOGIN,
                              args: args,
                            },
                            loginHandler.nonce
                          );

                        case 19:
                          _context2.next = 21;
                          return loginHandler.handleLoginWindow({
                            locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,
                            popupFeatures: this.config.popupFeatures,
                          });

                        case 21:
                          loginParams = _context2.sent;

                          if (!(this.config.uxMode === UX_MODE.REDIRECT)) {
                            _context2.next = 24;
                            break;
                          }

                          return _context2.abrupt("return", null);

                        case 24:
                          _context2.next = 26;
                          return loginHandler.getUserInfo(loginParams);

                        case 26:
                          userInfo = _context2.sent;

                          if (!registerOnly) {
                            _context2.next = 45;
                            break;
                          }

                          nodeTx = this.sentryHandler.startTransaction({
                            name: SENTRY_TXNS.FETCH_NODE_DETAILS,
                          });
                          _context2.next = 31;
                          return this.nodeDetailManager.getNodeDetails({
                            verifier: verifier,
                            verifierId: userInfo.verifierId,
                          });

                        case 31:
                          _yield$this$nodeDetai = _context2.sent;
                          torusNodeEndpoints = _yield$this$nodeDetai.torusNodeEndpoints;
                          torusNodePub = _yield$this$nodeDetai.torusNodePub;
                          this.sentryHandler.finishTransaction(nodeTx);
                          lookupTx = this.sentryHandler.startTransaction({
                            name: SENTRY_TXNS.PUB_ADDRESS_LOOKUP,
                          });
                          _context2.next = 38;
                          return this.torus.getPublicAddress(
                            torusNodeEndpoints,
                            torusNodePub,
                            {
                              verifier: verifier,
                              verifierId: userInfo.verifierId,
                            },
                            true
                          );

                        case 38:
                          torusPubKey = _context2.sent;
                          this.sentryHandler.finishTransaction(lookupTx);
                          res = {
                            userInfo: login_objectSpread(login_objectSpread({}, userInfo), loginParams),
                          };

                          if (!(typeof torusPubKey === "string")) {
                            _context2.next = 43;
                            break;
                          }

                          throw new Error("should have returned extended pub key");

                        case 43:
                          _torusKey = {
                            typeOfUser: torusPubKey.typeOfUser,
                            pubKey: {
                              pub_key_X: torusPubKey.X,
                              pub_key_Y: torusPubKey.Y,
                            },
                            publicAddress: torusPubKey.address,
                            privateKey: null,
                            metadataNonce: null,
                          };
                          return _context2.abrupt("return", login_objectSpread(login_objectSpread({}, res), _torusKey));

                        case 45:
                          skip = true;

                          if (!(checkIfNewKey || skipTorusKey === SkipTorusKey.IfNew)) {
                            _context2.next = 55;
                            break;
                          }

                          _context2.next = 49;
                          return this.nodeDetailManager.getNodeDetails({
                            verifier: verifier,
                            verifierId: userInfo.verifierId,
                          });

                        case 49:
                          _yield$this$nodeDetai2 = _context2.sent;
                          _torusNodeEndpoints = _yield$this$nodeDetai2.torusNodeEndpoints;
                          _context2.next = 53;
                          return keyLookup(_torusNodeEndpoints, verifier, userInfo.verifierId);

                        case 53:
                          lookupData = _context2.sent;
                          existingPk =
                            lookupData !== null &&
                            lookupData !== void 0 &&
                            (_lookupData$keyResult = lookupData.keyResult) !== null &&
                            _lookupData$keyResult !== void 0 &&
                            (_lookupData$keyResult2 = _lookupData$keyResult.keys) !== null &&
                            _lookupData$keyResult2 !== void 0 &&
                            _lookupData$keyResult2.length
                              ? {
                                  X:
                                    lookupData === null || lookupData === void 0
                                      ? void 0
                                      : (_lookupData$keyResult3 = lookupData.keyResult) === null || _lookupData$keyResult3 === void 0
                                      ? void 0
                                      : _lookupData$keyResult3.keys[0].pub_key_X,
                                  Y:
                                    lookupData === null || lookupData === void 0
                                      ? void 0
                                      : (_lookupData$keyResult4 = lookupData.keyResult) === null || _lookupData$keyResult4 === void 0
                                      ? void 0
                                      : _lookupData$keyResult4.keys[0].pub_key_Y,
                                }
                              : undefined;

                        case 55:
                          _context2.t0 = skipTorusKey;
                          _context2.next =
                            _context2.t0 === SkipTorusKey.IfNew
                              ? 58
                              : _context2.t0 === SkipTorusKey.Always
                              ? 60
                              : _context2.t0 === SkipTorusKey.Never
                              ? 62
                              : 64;
                          break;

                        case 58:
                          skip = !existingPk;
                          return _context2.abrupt("break", 65);

                        case 60:
                          skip = true;
                          return _context2.abrupt("break", 65);

                        case 62:
                          skip = false;
                          return _context2.abrupt("break", 65);

                        case 64:
                          throw new Error("Invalid SkipTorusKey");

                        case 65:
                          if (!skip) {
                            _context2.next = 69;
                            break;
                          }

                          _context2.t1 = undefined;
                          _context2.next = 72;
                          break;

                        case 69:
                          _context2.next = 71;
                          return this.getTorusKey(
                            verifier,
                            userInfo.verifierId,
                            {
                              verifier_id: userInfo.verifierId,
                            },
                            loginParams.idToken || loginParams.accessToken,
                            userInfo.extraVerifierParams
                          );

                        case 71:
                          _context2.t1 = _context2.sent;

                        case 72:
                          torusKey = _context2.t1;
                          loglevel.info("end", Date.now() - 1665658000000);
                          return _context2.abrupt(
                            "return",
                            login_objectSpread(
                              login_objectSpread({}, torusKey),
                              {},
                              {
                                existingPk: existingPk,
                                userInfo: login_objectSpread(login_objectSpread({}, userInfo), loginParams),
                              }
                            )
                          );

                        case 75:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  },
                  _callee2,
                  this
                );
              })
            );

            function triggerLogin(_x) {
              return _triggerLogin.apply(this, arguments);
            }

            return triggerLogin;
          })(),
        },
        {
          key: "triggerAggregateLogin",
          value: (function () {
            var _triggerAggregateLogin = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee3(args) {
                var aggregateVerifierType,
                  verifierIdentifier,
                  subVerifierDetailsArray,
                  _args$skipTorusKey2,
                  skipTorusKey,
                  _args$checkIfNewKey2,
                  checkIfNewKey,
                  userInfoPromises,
                  loginParamsArray,
                  _iterator,
                  _step,
                  subVerifierDetail,
                  clientId,
                  typeOfLogin,
                  verifier,
                  jwtParams,
                  hash,
                  queryParameters,
                  customState,
                  loginHandler,
                  _loginParams,
                  _handleRedirectParame2,
                  error,
                  hashParameters,
                  instanceParameters,
                  _accessToken,
                  _idToken,
                  rest,
                  _userInfoArray,
                  userInfoArray,
                  aggregateVerifierParams,
                  aggregateIdTokenSeeds,
                  aggregateVerifierId,
                  extraVerifierParams,
                  index,
                  loginParams,
                  idToken,
                  accessToken,
                  userInfo,
                  aggregateIdToken,
                  userInfoData,
                  skip,
                  existingPk,
                  _lookupData$keyResult5,
                  _lookupData$keyResult6,
                  _lookupData$keyResult7,
                  _lookupData$keyResult8,
                  _yield$this$nodeDetai3,
                  torusNodeEndpoints,
                  lookupData,
                  torusKey;

                return regenerator_default().wrap(
                  function _callee3$(_context3) {
                    while (1) {
                      switch ((_context3.prev = _context3.next)) {
                        case 0:
                          loglevel.debug("start", Date.now() - 1665658000000); // This method shall break if any of the promises fail. This behaviour is intended

                          (aggregateVerifierType = args.aggregateVerifierType),
                            (verifierIdentifier = args.verifierIdentifier),
                            (subVerifierDetailsArray = args.subVerifierDetailsArray),
                            (_args$skipTorusKey2 = args.skipTorusKey),
                            (skipTorusKey = _args$skipTorusKey2 === void 0 ? SkipTorusKey.Never : _args$skipTorusKey2),
                            (_args$checkIfNewKey2 = args.checkIfNewKey),
                            (checkIfNewKey = _args$checkIfNewKey2 === void 0 ? false : _args$checkIfNewKey2);

                          if (this.isInitialized) {
                            _context3.next = 4;
                            break;
                          }

                          throw new Error("Not initialized yet");

                        case 4:
                          if (!(!aggregateVerifierType || !verifierIdentifier || !Array.isArray(subVerifierDetailsArray))) {
                            _context3.next = 6;
                            break;
                          }

                          throw new Error("Invalid params");

                        case 6:
                          if (!(aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID && subVerifierDetailsArray.length !== 1)) {
                            _context3.next = 8;
                            break;
                          }

                          throw new Error("Single id verifier can only have one sub verifier");

                        case 8:
                          userInfoPromises = [];
                          loginParamsArray = [];
                          _iterator = _createForOfIteratorHelper(subVerifierDetailsArray);
                          _context3.prev = 11;

                          _iterator.s();

                        case 13:
                          if ((_step = _iterator.n()).done) {
                            _context3.next = 38;
                            break;
                          }

                          subVerifierDetail = _step.value;
                          (clientId = subVerifierDetail.clientId),
                            (typeOfLogin = subVerifierDetail.typeOfLogin),
                            (verifier = subVerifierDetail.verifier),
                            (jwtParams = subVerifierDetail.jwtParams),
                            (hash = subVerifierDetail.hash),
                            (queryParameters = subVerifierDetail.queryParameters),
                            (customState = subVerifierDetail.customState);
                          loginHandler = HandlerFactory({
                            typeOfLogin: typeOfLogin,
                            clientId: clientId,
                            verifier: verifier,
                            redirect_uri: this.config.redirect_uri,
                            redirectToOpener: this.config.redirectToOpener,
                            jwtParams: jwtParams,
                            uxMode: this.config.uxMode,
                            customState: customState,
                          }); // We let the user login to each verifier in a loop. Don't wait for key derivation here.!

                          _loginParams = void 0;

                          if (!(hash && queryParameters)) {
                            _context3.next = 26;
                            break;
                          }

                          (_handleRedirectParame2 = handleRedirectParameters(hash, queryParameters)),
                            (error = _handleRedirectParame2.error),
                            (hashParameters = _handleRedirectParame2.hashParameters),
                            (instanceParameters = _handleRedirectParame2.instanceParameters);

                          if (!error) {
                            _context3.next = 22;
                            break;
                          }

                          throw new Error(error);

                        case 22:
                          (_accessToken = hashParameters.access_token),
                            (_idToken = hashParameters.id_token),
                            (rest = objectWithoutProperties_default()(hashParameters, _excluded2)); // State has to be last here otherwise it will be overwritten

                          _loginParams = login_objectSpread(
                            login_objectSpread(
                              {
                                accessToken: _accessToken,
                                idToken: _idToken,
                              },
                              rest
                            ),
                            {},
                            {
                              state: instanceParameters,
                            }
                          );
                          _context3.next = 34;
                          break;

                        case 26:
                          this.storageHelper.clearOrphanedLoginDetails();
                          _context3.next = 29;
                          return this.storageHelper.storeLoginDetails(
                            {
                              method: TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN,
                              args: args,
                            },
                            loginHandler.nonce
                          );

                        case 29:
                          _context3.next = 31;
                          return loginHandler.handleLoginWindow({
                            locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,
                            popupFeatures: this.config.popupFeatures,
                          });

                        case 31:
                          _loginParams = _context3.sent;

                          if (!(this.config.uxMode === UX_MODE.REDIRECT)) {
                            _context3.next = 34;
                            break;
                          }

                          return _context3.abrupt("return", null);

                        case 34:
                          // Fail the method even if one promise fails
                          userInfoPromises.push(loginHandler.getUserInfo(_loginParams));
                          loginParamsArray.push(_loginParams);

                        case 36:
                          _context3.next = 13;
                          break;

                        case 38:
                          _context3.next = 43;
                          break;

                        case 40:
                          _context3.prev = 40;
                          _context3.t0 = _context3["catch"](11);

                          _iterator.e(_context3.t0);

                        case 43:
                          _context3.prev = 43;

                          _iterator.f();

                          return _context3.finish(43);

                        case 46:
                          _context3.next = 48;
                          return Promise.all(userInfoPromises);

                        case 48:
                          _userInfoArray = _context3.sent;
                          userInfoArray = _userInfoArray.map(function (userInfo) {
                            return login_objectSpread(
                              login_objectSpread({}, userInfo),
                              {},
                              {
                                aggregateVerifier: verifierIdentifier,
                              }
                            );
                          });
                          aggregateVerifierParams = {
                            verify_params: [],
                            sub_verifier_ids: [],
                            verifier_id: "",
                          };
                          aggregateIdTokenSeeds = [];
                          aggregateVerifierId = "";
                          extraVerifierParams = {};

                          for (index = 0; index < subVerifierDetailsArray.length; index += 1) {
                            loginParams = loginParamsArray[index];
                            (idToken = loginParams.idToken), (accessToken = loginParams.accessToken);
                            userInfo = userInfoArray[index];
                            aggregateVerifierParams.verify_params.push({
                              verifier_id: userInfo.verifierId,
                              idtoken: idToken || accessToken,
                            });
                            aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);
                            aggregateIdTokenSeeds.push(idToken || accessToken);
                            aggregateVerifierId = userInfo.verifierId; // using last because idk

                            extraVerifierParams = userInfo.extraVerifierParams;
                          }

                          aggregateIdTokenSeeds.sort();
                          aggregateIdToken = (0, external_web3_utils_.keccak256)(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);
                          aggregateVerifierParams.verifier_id = aggregateVerifierId;
                          userInfoData = userInfoArray.map(function (x, index) {
                            return login_objectSpread(login_objectSpread({}, x), loginParamsArray[index]);
                          });
                          skip = true;

                          if (!(checkIfNewKey || skipTorusKey === SkipTorusKey.IfNew)) {
                            _context3.next = 69;
                            break;
                          }

                          _context3.next = 63;
                          return this.nodeDetailManager.getNodeDetails({
                            verifier: args.verifierIdentifier,
                            verifierId: userInfoData[0].verifierId,
                          });

                        case 63:
                          _yield$this$nodeDetai3 = _context3.sent;
                          torusNodeEndpoints = _yield$this$nodeDetai3.torusNodeEndpoints;
                          _context3.next = 67;
                          return keyLookup(torusNodeEndpoints, args.verifierIdentifier, userInfoData[0].verifierId);

                        case 67:
                          lookupData = _context3.sent;
                          existingPk =
                            lookupData !== null &&
                            lookupData !== void 0 &&
                            (_lookupData$keyResult5 = lookupData.keyResult) !== null &&
                            _lookupData$keyResult5 !== void 0 &&
                            (_lookupData$keyResult6 = _lookupData$keyResult5.keys) !== null &&
                            _lookupData$keyResult6 !== void 0 &&
                            _lookupData$keyResult6.length
                              ? {
                                  X:
                                    lookupData === null || lookupData === void 0
                                      ? void 0
                                      : (_lookupData$keyResult7 = lookupData.keyResult) === null || _lookupData$keyResult7 === void 0
                                      ? void 0
                                      : _lookupData$keyResult7.keys[0].pub_key_X,
                                  Y:
                                    lookupData === null || lookupData === void 0
                                      ? void 0
                                      : (_lookupData$keyResult8 = lookupData.keyResult) === null || _lookupData$keyResult8 === void 0
                                      ? void 0
                                      : _lookupData$keyResult8.keys[0].pub_key_Y,
                                }
                              : undefined;

                        case 69:
                          _context3.t1 = skipTorusKey;
                          _context3.next =
                            _context3.t1 === SkipTorusKey.IfNew
                              ? 72
                              : _context3.t1 === SkipTorusKey.Always
                              ? 74
                              : _context3.t1 === SkipTorusKey.Never
                              ? 76
                              : 78;
                          break;

                        case 72:
                          skip = !existingPk;
                          return _context3.abrupt("break", 79);

                        case 74:
                          skip = true;
                          return _context3.abrupt("break", 79);

                        case 76:
                          skip = false;
                          return _context3.abrupt("break", 79);

                        case 78:
                          throw new Error("Invalid SkipTorusKey");

                        case 79:
                          if (!skip) {
                            _context3.next = 83;
                            break;
                          }

                          _context3.t2 = undefined;
                          _context3.next = 86;
                          break;

                        case 83:
                          _context3.next = 85;
                          return this.getTorusKey(
                            verifierIdentifier,
                            aggregateVerifierId,
                            aggregateVerifierParams,
                            aggregateIdToken,
                            extraVerifierParams
                          );

                        case 85:
                          _context3.t2 = _context3.sent;

                        case 86:
                          torusKey = _context3.t2;
                          loglevel.debug("end", Date.now() - 1665658000000);
                          return _context3.abrupt(
                            "return",
                            login_objectSpread(
                              login_objectSpread({}, torusKey),
                              {},
                              {
                                existingPk: existingPk,
                                userInfo: userInfoArray.map(function (x, index) {
                                  return login_objectSpread(login_objectSpread({}, x), loginParamsArray[index]);
                                }),
                              }
                            )
                          );

                        case 89:
                        case "end":
                          return _context3.stop();
                      }
                    }
                  },
                  _callee3,
                  this,
                  [[11, 40, 43, 46]]
                );
              })
            );

            function triggerAggregateLogin(_x2) {
              return _triggerAggregateLogin.apply(this, arguments);
            }

            return triggerAggregateLogin;
          })(),
        },
        {
          key: "triggerHybridAggregateLogin",
          value: (function () {
            var _triggerHybridAggregateLogin = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee4(args) {
                var singleLogin,
                  aggregateLoginParams,
                  typeOfLogin,
                  clientId,
                  verifier,
                  jwtParams,
                  hash,
                  queryParameters,
                  customState,
                  loginHandler,
                  loginParams,
                  _handleRedirectParame3,
                  error,
                  hashParameters,
                  instanceParameters,
                  accessToken,
                  idToken,
                  rest,
                  userInfo,
                  torusKey1Promise,
                  verifierIdentifier,
                  subVerifierDetailsArray,
                  aggregateVerifierParams,
                  aggregateIdTokenSeeds,
                  aggregateVerifierId,
                  index,
                  sub,
                  _loginParams2,
                  _idToken2,
                  _accessToken2,
                  aggregateIdToken,
                  torusKey2Promise,
                  _yield$Promise$all,
                  _yield$Promise$all2,
                  torusKey1,
                  torusKey2;

                return regenerator_default().wrap(
                  function _callee4$(_context4) {
                    while (1) {
                      switch ((_context4.prev = _context4.next)) {
                        case 0:
                          (singleLogin = args.singleLogin), (aggregateLoginParams = args.aggregateLoginParams); // This method shall break if any of the promises fail. This behaviour is intended

                          if (this.isInitialized) {
                            _context4.next = 3;
                            break;
                          }

                          throw new Error("Not initialized yet");

                        case 3:
                          if (
                            !(
                              !aggregateLoginParams.aggregateVerifierType ||
                              !aggregateLoginParams.verifierIdentifier ||
                              !Array.isArray(aggregateLoginParams.subVerifierDetailsArray)
                            )
                          ) {
                            _context4.next = 5;
                            break;
                          }

                          throw new Error("Invalid params");

                        case 5:
                          if (
                            !(
                              aggregateLoginParams.aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID &&
                              aggregateLoginParams.subVerifierDetailsArray.length !== 1
                            )
                          ) {
                            _context4.next = 7;
                            break;
                          }

                          throw new Error("Single id verifier can only have one sub verifier");

                        case 7:
                          (typeOfLogin = singleLogin.typeOfLogin),
                            (clientId = singleLogin.clientId),
                            (verifier = singleLogin.verifier),
                            (jwtParams = singleLogin.jwtParams),
                            (hash = singleLogin.hash),
                            (queryParameters = singleLogin.queryParameters),
                            (customState = singleLogin.customState);
                          loginHandler = HandlerFactory({
                            typeOfLogin: typeOfLogin,
                            clientId: clientId,
                            verifier: verifier,
                            redirect_uri: this.config.redirect_uri,
                            redirectToOpener: this.config.redirectToOpener,
                            jwtParams: jwtParams,
                            uxMode: this.config.uxMode,
                            customState: customState,
                          });

                          if (!(hash && queryParameters)) {
                            _context4.next = 17;
                            break;
                          }

                          (_handleRedirectParame3 = handleRedirectParameters(hash, queryParameters)),
                            (error = _handleRedirectParame3.error),
                            (hashParameters = _handleRedirectParame3.hashParameters),
                            (instanceParameters = _handleRedirectParame3.instanceParameters);

                          if (!error) {
                            _context4.next = 13;
                            break;
                          }

                          throw new Error(error);

                        case 13:
                          (accessToken = hashParameters.access_token),
                            (idToken = hashParameters.id_token),
                            (rest = objectWithoutProperties_default()(hashParameters, _excluded3)); // State has to be last here otherwise it will be overwritten

                          loginParams = login_objectSpread(
                            login_objectSpread(
                              {
                                accessToken: accessToken,
                                idToken: idToken,
                              },
                              rest
                            ),
                            {},
                            {
                              state: instanceParameters,
                            }
                          );
                          _context4.next = 25;
                          break;

                        case 17:
                          this.storageHelper.clearOrphanedLoginDetails();
                          _context4.next = 20;
                          return this.storageHelper.storeLoginDetails(
                            {
                              method: TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN,
                              args: args,
                            },
                            loginHandler.nonce
                          );

                        case 20:
                          _context4.next = 22;
                          return loginHandler.handleLoginWindow({
                            locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,
                            popupFeatures: this.config.popupFeatures,
                          });

                        case 22:
                          loginParams = _context4.sent;

                          if (!(this.config.uxMode === UX_MODE.REDIRECT)) {
                            _context4.next = 25;
                            break;
                          }

                          return _context4.abrupt("return", null);

                        case 25:
                          _context4.next = 27;
                          return loginHandler.getUserInfo(loginParams);

                        case 27:
                          userInfo = _context4.sent;
                          torusKey1Promise = this.getTorusKey(
                            verifier,
                            userInfo.verifierId,
                            {
                              verifier_id: userInfo.verifierId,
                            },
                            loginParams.idToken || loginParams.accessToken,
                            userInfo.extraVerifierParams
                          );
                          (verifierIdentifier = aggregateLoginParams.verifierIdentifier),
                            (subVerifierDetailsArray = aggregateLoginParams.subVerifierDetailsArray);
                          aggregateVerifierParams = {
                            verify_params: [],
                            sub_verifier_ids: [],
                            verifier_id: "",
                          };
                          aggregateIdTokenSeeds = [];
                          aggregateVerifierId = "";

                          for (index = 0; index < subVerifierDetailsArray.length; index += 1) {
                            sub = subVerifierDetailsArray[index];
                            (_loginParams2 = loginParams), (_idToken2 = _loginParams2.idToken), (_accessToken2 = _loginParams2.accessToken);
                            aggregateVerifierParams.verify_params.push({
                              verifier_id: userInfo.verifierId,
                              idtoken: _idToken2 || _accessToken2,
                            });
                            aggregateVerifierParams.sub_verifier_ids.push(sub.verifier);
                            aggregateIdTokenSeeds.push(_idToken2 || _accessToken2);
                            aggregateVerifierId = userInfo.verifierId; // using last because idk
                          }

                          aggregateIdTokenSeeds.sort();
                          aggregateIdToken = (0, external_web3_utils_.keccak256)(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);
                          aggregateVerifierParams.verifier_id = aggregateVerifierId;
                          torusKey2Promise = this.getTorusKey(
                            verifierIdentifier,
                            aggregateVerifierId,
                            aggregateVerifierParams,
                            aggregateIdToken,
                            userInfo.extraVerifierParams
                          );
                          _context4.next = 40;
                          return Promise.all([torusKey1Promise, torusKey2Promise]);

                        case 40:
                          _yield$Promise$all = _context4.sent;
                          _yield$Promise$all2 = slicedToArray_default()(_yield$Promise$all, 2);
                          torusKey1 = _yield$Promise$all2[0];
                          torusKey2 = _yield$Promise$all2[1];
                          return _context4.abrupt("return", {
                            singleLogin: login_objectSpread(
                              {
                                userInfo: login_objectSpread(login_objectSpread({}, userInfo), loginParams),
                              },
                              torusKey1
                            ),
                            aggregateLogins: [torusKey2],
                          });

                        case 45:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  },
                  _callee4,
                  this
                );
              })
            );

            function triggerHybridAggregateLogin(_x3) {
              return _triggerHybridAggregateLogin.apply(this, arguments);
            }

            return triggerHybridAggregateLogin;
          })(),
        },
        {
          key: "getTorusKey",
          value: (function () {
            var _getTorusKey = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee5(verifier, verifierId, verifierParams, idToken, additionalParams) {
                var nodeTx, _yield$this$nodeDetai4, torusNodeEndpoints, torusNodePub, torusIndexes, pubLookupTx, address, sharesTx, shares;

                return regenerator_default().wrap(
                  function _callee5$(_context5) {
                    while (1) {
                      switch ((_context5.prev = _context5.next)) {
                        case 0:
                          nodeTx = this.sentryHandler.startTransaction({
                            name: SENTRY_TXNS.FETCH_NODE_DETAILS,
                          });
                          _context5.next = 3;
                          return this.nodeDetailManager.getNodeDetails({
                            verifier: verifier,
                            verifierId: verifierId,
                          });

                        case 3:
                          _yield$this$nodeDetai4 = _context5.sent;
                          torusNodeEndpoints = _yield$this$nodeDetai4.torusNodeEndpoints;
                          torusNodePub = _yield$this$nodeDetai4.torusNodePub;
                          torusIndexes = _yield$this$nodeDetai4.torusIndexes;
                          this.sentryHandler.finishTransaction(nodeTx);
                          loglevel.debug("torus-direct/getTorusKey", {
                            torusNodeEndpoints: torusNodeEndpoints,
                            torusNodePub: torusNodePub,
                            torusIndexes: torusIndexes,
                          });
                          pubLookupTx = this.sentryHandler.startTransaction({
                            name: SENTRY_TXNS.PUB_ADDRESS_LOOKUP,
                          });
                          _context5.next = 12;
                          return this.torus.getPublicAddress(
                            torusNodeEndpoints,
                            torusNodePub,
                            {
                              verifier: verifier,
                              verifierId: verifierId,
                            },
                            true
                          );

                        case 12:
                          address = _context5.sent;
                          this.sentryHandler.finishTransaction(pubLookupTx);

                          if (!(typeof address === "string")) {
                            _context5.next = 16;
                            break;
                          }

                          throw new Error("must use extended pub key");

                        case 16:
                          loglevel.debug("torus-direct/getTorusKey", {
                            getPublicAddress: address,
                          });
                          sharesTx = this.sentryHandler.startTransaction({
                            name: SENTRY_TXNS.FETCH_SHARES,
                          });
                          _context5.next = 20;
                          return this.torus.retrieveShares(torusNodeEndpoints, torusIndexes, verifier, verifierParams, idToken, additionalParams);

                        case 20:
                          shares = _context5.sent;
                          this.sentryHandler.finishTransaction(sharesTx);

                          if (!(shares.ethAddress.toLowerCase() !== address.address.toLowerCase())) {
                            _context5.next = 24;
                            break;
                          }

                          throw new Error("data ethAddress does not match response address");

                        case 24:
                          loglevel.debug("torus-direct/getTorusKey", {
                            retrieveShares: shares,
                          });
                          return _context5.abrupt("return", {
                            publicAddress: shares.ethAddress.toString(),
                            privateKey: shares.privKey.toString(),
                            metadataNonce: shares.metadataNonce.toString("hex"),
                            typeOfUser: address.typeOfUser,
                            pubKey: {
                              pub_key_X: address.X,
                              pub_key_Y: address.Y,
                            },
                          });

                        case 26:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  },
                  _callee5,
                  this
                );
              })
            );

            function getTorusKey(_x4, _x5, _x6, _x7, _x8) {
              return _getTorusKey.apply(this, arguments);
            }

            return getTorusKey;
          })(),
        },
        {
          key: "getAggregateTorusKey",
          value: (function () {
            var _getAggregateTorusKey = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee6(
                verifier,
                verifierId, // unique identifier for user e.g. sub on jwt
                subVerifierInfoArray
              ) {
                var aggregateVerifierParams, aggregateIdTokenSeeds, extraVerifierParams, index, userInfo, aggregateIdToken;
                return regenerator_default().wrap(
                  function _callee6$(_context6) {
                    while (1) {
                      switch ((_context6.prev = _context6.next)) {
                        case 0:
                          aggregateVerifierParams = {
                            verify_params: [],
                            sub_verifier_ids: [],
                            verifier_id: "",
                          };
                          aggregateIdTokenSeeds = [];
                          extraVerifierParams = {};

                          for (index = 0; index < subVerifierInfoArray.length; index += 1) {
                            userInfo = subVerifierInfoArray[index];
                            aggregateVerifierParams.verify_params.push({
                              verifier_id: verifierId,
                              idtoken: userInfo.idToken,
                            });
                            aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);
                            aggregateIdTokenSeeds.push(userInfo.idToken);
                            extraVerifierParams = userInfo.extraVerifierParams;
                          }

                          aggregateIdTokenSeeds.sort();
                          aggregateIdToken = (0, external_web3_utils_.keccak256)(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);
                          aggregateVerifierParams.verifier_id = verifierId;
                          return _context6.abrupt(
                            "return",
                            this.getTorusKey(verifier, verifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams)
                          );

                        case 8:
                        case "end":
                          return _context6.stop();
                      }
                    }
                  },
                  _callee6,
                  this
                );
              })
            );

            function getAggregateTorusKey(_x9, _x10, _x11) {
              return _getAggregateTorusKey.apply(this, arguments);
            }

            return getAggregateTorusKey;
          })(),
        },
        {
          key: "getPostboxKeyFrom1OutOf1",
          value: function getPostboxKeyFrom1OutOf1(privKey, nonce) {
            return this.torus.getPostboxKeyFrom1OutOf1(privKey, nonce);
          },
        },
        {
          key: "getRedirectResult",
          value: (function () {
            var _getRedirectResult = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee7() {
                var _ref3,
                  _ref3$replaceUrl,
                  replaceUrl,
                  _ref3$clearLoginDetai,
                  clearLoginDetails,
                  url,
                  hash,
                  queryParams,
                  cleanUrl,
                  _handleRedirectParame4,
                  error,
                  instanceParameters,
                  hashParameters,
                  instanceId,
                  _yield$this$storageHe,
                  args,
                  method,
                  rest,
                  result,
                  methodArgs,
                  _methodArgs,
                  _methodArgs2,
                  _args7 = arguments;

                return regenerator_default().wrap(
                  function _callee7$(_context7) {
                    while (1) {
                      switch ((_context7.prev = _context7.next)) {
                        case 0:
                          (_ref3 = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {}),
                            (_ref3$replaceUrl = _ref3.replaceUrl),
                            (replaceUrl = _ref3$replaceUrl === void 0 ? true : _ref3$replaceUrl),
                            (_ref3$clearLoginDetai = _ref3.clearLoginDetails),
                            (clearLoginDetails = _ref3$clearLoginDetai === void 0 ? true : _ref3$clearLoginDetai);
                          _context7.next = 3;
                          return this.init({
                            skipInit: true,
                          });

                        case 3:
                          url = new URL(window.location.href);
                          hash = url.hash.substring(1);
                          queryParams = {};
                          url.searchParams.forEach(function (value, key) {
                            queryParams[key] = value;
                          });

                          if (replaceUrl) {
                            cleanUrl = window.location.origin + window.location.pathname;
                            window.history.replaceState(null, "", cleanUrl);
                          }

                          if (!(!hash && Object.keys(queryParams).length === 0)) {
                            _context7.next = 10;
                            break;
                          }

                          throw new Error("Unable to fetch result from OAuth login");

                        case 10:
                          (_handleRedirectParame4 = handleRedirectParameters(hash, queryParams)),
                            (error = _handleRedirectParame4.error),
                            (instanceParameters = _handleRedirectParame4.instanceParameters),
                            (hashParameters = _handleRedirectParame4.hashParameters);
                          instanceId = instanceParameters.instanceId;
                          loglevel.info(instanceId, "instanceId");
                          _context7.next = 15;
                          return this.storageHelper.retrieveLoginDetails(instanceId);

                        case 15:
                          _yield$this$storageHe = _context7.sent;
                          args = _yield$this$storageHe.args;
                          method = _yield$this$storageHe.method;
                          rest = objectWithoutProperties_default()(_yield$this$storageHe, _excluded4);
                          loglevel.info(args, method);

                          if (clearLoginDetails) {
                            this.storageHelper.clearLoginDetailsStorage(instanceId);
                          }

                          if (!error) {
                            _context7.next = 23;
                            break;
                          }

                          return _context7.abrupt("return", {
                            error: error,
                            state: instanceParameters || {},
                            method: method,
                            result: {},
                            hashParameters: hashParameters,
                            args: args,
                          });

                        case 23:
                          _context7.prev = 23;

                          if (!(method === TORUS_METHOD.TRIGGER_LOGIN)) {
                            _context7.next = 33;
                            break;
                          }

                          methodArgs = args;
                          methodArgs.hash = hash;
                          methodArgs.queryParameters = queryParams;
                          _context7.next = 30;
                          return this.triggerLogin(methodArgs);

                        case 30:
                          result = _context7.sent;
                          _context7.next = 48;
                          break;

                        case 33:
                          if (!(method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN)) {
                            _context7.next = 41;
                            break;
                          }

                          _methodArgs = args;

                          _methodArgs.subVerifierDetailsArray.forEach(function (x) {
                            x.hash = hash;
                            x.queryParameters = queryParams;
                          });

                          _context7.next = 38;
                          return this.triggerAggregateLogin(_methodArgs);

                        case 38:
                          result = _context7.sent;
                          _context7.next = 48;
                          break;

                        case 41:
                          if (!(method === TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN)) {
                            _context7.next = 48;
                            break;
                          }

                          _methodArgs2 = args;
                          _methodArgs2.singleLogin.hash = hash;
                          _methodArgs2.singleLogin.queryParameters = queryParams;
                          _context7.next = 47;
                          return this.triggerHybridAggregateLogin(_methodArgs2);

                        case 47:
                          result = _context7.sent;

                        case 48:
                          _context7.next = 54;
                          break;

                        case 50:
                          _context7.prev = 50;
                          _context7.t0 = _context7["catch"](23);
                          loglevel.error(_context7.t0);
                          return _context7.abrupt(
                            "return",
                            login_objectSpread(
                              {
                                error: "Could not get result from torus nodes \n ".concat(
                                  (_context7.t0 === null || _context7.t0 === void 0 ? void 0 : _context7.t0.message) || ""
                                ),
                                state: instanceParameters || {},
                                method: method,
                                result: {},
                                hashParameters: hashParameters,
                                args: args,
                              },
                              rest
                            )
                          );

                        case 54:
                          if (result) {
                            _context7.next = 56;
                            break;
                          }

                          return _context7.abrupt(
                            "return",
                            login_objectSpread(
                              {
                                error: "Unsupported method type",
                                state: instanceParameters || {},
                                method: method,
                                result: {},
                                hashParameters: hashParameters,
                                args: args,
                              },
                              rest
                            )
                          );

                        case 56:
                          return _context7.abrupt(
                            "return",
                            login_objectSpread(
                              {
                                method: method,
                                result: result,
                                state: instanceParameters || {},
                                hashParameters: hashParameters,
                                args: args,
                              },
                              rest
                            )
                          );

                        case 57:
                        case "end":
                          return _context7.stop();
                      }
                    }
                  },
                  _callee7,
                  this,
                  [[23, 50]]
                );
              })
            );

            function getRedirectResult() {
              return _getRedirectResult.apply(this, arguments);
            }

            return getRedirectResult;
          })(),
        },
        {
          key: "handlePrefetchRedirectUri",
          value: (function () {
            var _handlePrefetchRedirectUri = asyncToGenerator_default()(
              /*#__PURE__*/ regenerator_default().mark(function _callee8() {
                var _this = this;

                return regenerator_default().wrap(function _callee8$(_context8) {
                  while (1) {
                    switch ((_context8.prev = _context8.next)) {
                      case 0:
                        if (document) {
                          _context8.next = 2;
                          break;
                        }

                        return _context8.abrupt("return", Promise.resolve());

                      case 2:
                        return _context8.abrupt(
                          "return",
                          new Promise(function (resolve, reject) {
                            var redirectHtml = document.createElement("link");
                            redirectHtml.href = _this.config.redirect_uri;
                            if (window.location.origin !== new URL(_this.config.redirect_uri).origin) redirectHtml.crossOrigin = "anonymous";
                            redirectHtml.type = "text/html";
                            redirectHtml.rel = "prefetch";

                            var resolveFn = function resolveFn() {
                              _this.isInitialized = true;
                              resolve();
                            };

                            try {
                              if (redirectHtml.relList && redirectHtml.relList.supports) {
                                if (redirectHtml.relList.supports("prefetch")) {
                                  redirectHtml.onload = resolveFn;

                                  redirectHtml.onerror = function () {
                                    reject(
                                      new Error(
                                        "Please serve redirect.html present in serviceworker folder of this package on ".concat(
                                          _this.config.redirect_uri
                                        )
                                      )
                                    );
                                  };

                                  document.head.appendChild(redirectHtml);
                                } else {
                                  // Link prefetch is not supported. pass through
                                  resolveFn();
                                }
                              } else {
                                // Link prefetch is not detectable. pass through
                                resolveFn();
                              }
                            } catch (err) {
                              resolveFn();
                            }
                          })
                        );

                      case 3:
                      case "end":
                        return _context8.stop();
                    }
                  }
                }, _callee8);
              })
            );

            function handlePrefetchRedirectUri() {
              return _handlePrefetchRedirectUri.apply(this, arguments);
            }

            return handlePrefetchRedirectUri;
          })(),
        },
      ]);

      return CustomAuth;
    })();

    /* harmony default export */ const login = CustomAuth; // CONCATENATED MODULE: ./src/index.ts
  })();

  module.exports = __webpack_exports__;
  /******/
})();
//# sourceMappingURL=customauth-bundled.cjs.js.map
