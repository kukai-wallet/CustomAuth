{"version":3,"file":"customauth.cjs.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA,MAAM,8BAA4B;;;ACAlC,MAAM,kCAA4B;;;;;;;ACAlC;AAEO,IAAME,KAAK,GAAG;EACnBC,MAAM,EAAE,QADW;EAEnBC,QAAQ,EAAE,UAFS;EAGnBC,MAAM,EAAE,QAHW;EAInBC,OAAO,EAAE,SAJU;EAKnBC,MAAM,EAAE,QALW;EAMnBC,KAAK,EAAE,OANY;EAOnBC,MAAM,EAAE,QAPW;EAQnBC,QAAQ,EAAE,UARS;EASnBC,OAAO,EAAE,SATU;EAUnBC,KAAK,EAAE,OAVY;EAWnBC,IAAI,EAAE,MAXa;EAYnBC,cAAc,EAAE,gBAZG;EAanBC,YAAY,EAAE,cAbK;EAcnBC,GAAG,EAAE,KAdc;EAenBC,QAAQ,EAAE;AAfS,CAAd;AAkBA,IAAMC,kBAAkB,GAAG;EAChCC,kBAAkB,EAAE,oBADY,CAEhC;EACA;;AAHgC,CAA3B;AAMA,IAAMC,OAAO,GAAG;EACrBC,KAAK,EAAE,OADc;EAErBC,QAAQ,EAAE;AAFW,CAAhB;AAKA,IAAMC,8BAA8B,GAAG;EAC5CC,aAAa,EAAE,cAD6B;EAE5CC,eAAe,EAAE,gBAF2B;EAG5CC,MAAM,EAAE;AAHoC,CAAvC;AAMA,IAAMC,YAAY,GAAG;EAC1BC,aAAa,EAAE,cADW;EAE1BC,uBAAuB,EAAE,uBAFC;EAG1BC,8BAA8B,EAAE;AAHN,CAArB;AAYA,IAAMC,YAAY,gEACtB9B,wDADsB,EACED,oDADF,2CAEtBC,wDAFsB,EAEED,oDAFF,2CAGtBC,qDAHsB,EAGDD,iDAHC,2CAItBC,qDAJsB,EAIDD,iDAJC,iBAAlB;AAOA,IAAMwC,UAAU,4DACpBvC,wDADoB,EACI,uBADJ,yCAEpBA,wDAFoB,EAEI,uBAFJ,yCAGpBA,qDAHoB,EAGC,+BAHD,yCAIpBA,qDAJoB,EAIC,+BAJD,eAAhB;AAOA,IAAMwC,WAAW,GAAG;EACzBC,kBAAkB,EAAE,kBADK;EAEzBC,kBAAkB,EAAE,kBAFK;EAGzBC,YAAY,EAAE;AAHW,CAApB;;AC/DP,MAAM,gCAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,2BAA4B;;;ACAlC,MAAM,qCAA4B;;;ACAlC,MAAM,wBAA4B;;;ACAlC,MAAM,yCAA4B;;;ACAlC,MAAM,8BAA4B;;;ACAlC,MAAM,2BAA4B;;;ACAlC,MAAM,4BAA4B;;ACAlC,MAAM,qCAA4B;;;ACAlC,MAAM,uCAA4B;;;ACAlC,MAAM,iCAA4B;;ACAlC,MAAM,6BAA4B;;;ACAlC,MAAM,+BAA4B;;;ACAlC,MAAM,iCAA4B;;;ACAlC;AAEA,+CAAeC,qCAAA,CAAmB,YAAnB,CAAf;;;;;;;ACFA;AAGA;AACA;AAWO,SAASK,cAAT,CAA2BC,OAA3B,EAA6D;EAClE,OAAO,IAAIC,OAAJ,CAAe,UAACC,OAAD,EAAUC,MAAV,EAAqB;IACzC,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,EAAD,EAA4B;MAC1C,gBAA6BA,EAA7B,CAAQC,KAAR;MAAA,IAAQA,KAAR,0BAAgB,EAAhB;MAAA,IAAoBC,IAApB,GAA6BF,EAA7B,CAAoBE,IAApB;MACAP,OAAO,CAACQ,mBAAR,CAA4B,SAA5B,EAAuCJ,OAAvC;MACA,IAAIE,KAAJ,EAAW,OAAOH,MAAM,CAAC,IAAIM,KAAJ,CAAUH,KAAV,CAAD,CAAb;MACX,OAAOJ,OAAO,CAACK,IAAD,CAAd;IACD,CALD;;IAMAP,OAAO,CAACU,gBAAR,CAAyB,SAAzB,EAAoCN,OAApC;EACD,CARM,CAAP;AASD,EAED;;AACO,IAAMO,oBAAoB,gFAC9B5D,WAD8B,EAChB,OADgB,mDAE9BA,YAF8B,EAEf,QAFe,mDAG9BA,cAH8B,EAGb,UAHa,mDAI9BA,aAJ8B,EAId,SAJc,mDAK9BA,WAL8B,EAKhB,OALgB,mDAM9BA,UAN8B,EAMjB,MANiB,mDAO9BA,oBAP8B,EAOP,kCAPO,mDAQ9BA,kBAR8B,EAQT,OARS,yBAA1B;AAWA,IAAM6D,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD;EAAA,OAAuBA,GAAG,CAACC,IAAJ,CAASC,QAAT,CAAkB,GAAlB,IAAyBF,GAAG,CAACC,IAA7B,aAAuCD,GAAG,CAACC,IAA3C,MAAvB;AAAA,CAArB;AAEP;AACA;AACA;AACA;;AACO,IAAME,QAAQ,GAAG,SAAXA,QAAW;EAAA,OAAcC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC,CAAd;AAAA,CAAjB;AAEA,IAAMC,uBAAuB,GAAG;EACrC;EACAC,gBAAgB,EAAE,KAFmB,CAEZ;;AAFY,CAAhC;;AAKP,SAASC,kBAAT,CAA4BC,KAA5B,EAA2CC,eAA3C,EAA8E;EAC5E,OAAOA,eAAe,GAAGD,KAAH,GAAWA,KAAK,CAACE,WAAN,EAAjC;AACD;;AAEM,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAC3BC,QAD2B,EAE3BC,WAF2B,EAG3BC,eAH2B,EAKhB;EAAA,IADXC,yBACW,uEADiB,IACjB;EACX,IAAQC,IAAR,GAAsBJ,QAAtB,CAAQI,IAAR;EAAA,IAAcC,GAAd,GAAsBL,QAAtB,CAAcK,GAAd;EACA,IAAIH,eAAJ,EAAqB,OAAOP,kBAAkB,CAACK,QAAQ,CAACE,eAAD,CAAT,EAA4BC,yBAA5B,CAAzB;;EACrB,QAAQF,WAAR;IACE,KAAK9E,kBAAL;IACA,KAAKA,oBAAL;MACE,OAAOwE,kBAAkB,CAACS,IAAD,EAAOD,yBAAP,CAAzB;;IACF,KAAKhF,WAAL;IACA,KAAKA,YAAL;IACA,KAAKA,aAAL;IACA,KAAKA,WAAL;IACA,KAAKA,cAAL;IACA,KAAKA,UAAL;IACA,KAAKA,SAAL;MACE,OAAOwE,kBAAkB,CAACU,GAAD,EAAMF,yBAAN,CAAzB;;IACF;MACE,MAAM,IAAItB,KAAJ,CAAU,oBAAV,CAAN;EAbJ;AAeD,CAvBM;AAyBA,IAAMyB,wBAAwB,GAAG,SAA3BA,wBAA2B,CACtCC,IADsC,EAEtCC,eAFsC,EAG4D;EAClG,IAAMC,cAAkC,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuB,UAACC,MAAD,EAASC,IAAT,EAAkB;IAClF,kBAAuBA,IAAI,CAACH,KAAL,CAAW,GAAX,CAAvB;IAAA;IAAA,IAAOI,KAAP;IAAA,IAAcC,KAAd;;IACAH,MAAM,CAACE,KAAD,CAAN,GAAgBC,KAAhB;IACA,OAAOH,MAAP;EACD,CAJ0C,EAIxC,EAJwC,CAA3C;EAKA1C,aAAA,CAASuC,cAAT,EAAyBD,eAAzB;EACA,IAAIS,kBAAsC,GAAG,EAA7C;EACA,IAAIvC,KAAK,GAAG,EAAZ;;EACA,IAAIwC,MAAM,CAACC,IAAP,CAAYV,cAAZ,EAA4BW,MAA5B,GAAqC,CAArC,IAA0CX,cAAc,CAACY,KAA7D,EAAoE;IAClEJ,kBAAkB,GAAGK,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,kBAAkB,CAACA,kBAAkB,CAAChB,cAAc,CAACY,KAAhB,CAAnB,CAAnB,CAAf,KAAkF,EAAvG;IACA3C,KAAK,GAAG+B,cAAc,CAACiB,iBAAf,IAAoCjB,cAAc,CAAC/B,KAAnD,IAA4DA,KAApE;EACD,CAHD,MAGO,IAAIwC,MAAM,CAACC,IAAP,CAAYX,eAAZ,EAA6BY,MAA7B,GAAsC,CAAtC,IAA2CZ,eAAe,CAACa,KAA/D,EAAsE;IAC3EJ,kBAAkB,GAAGK,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,kBAAkB,CAACA,kBAAkB,CAACjB,eAAe,CAACa,KAAjB,CAAnB,CAAnB,CAAf,KAAmF,EAAxG;IACA,IAAIb,eAAe,CAAC9B,KAApB,EAA2BA,KAAK,GAAG8B,eAAe,CAAC9B,KAAxB;EAC5B;;EACD,OAAO;IAAEA,KAAK,EAALA,KAAF;IAASuC,kBAAkB,EAAlBA,kBAAT;IAA6BR,cAAc,EAAdA;EAA7B,CAAP;AACD,CApBM;AAsBA,SAASkB,gBAAT,CAA0BC,IAA1B,EAA8E;EACnF,IAAIC,OAAJ;;EACA,IAAI;IACFA,OAAO,GAAGC,MAAM,CAACF,IAAD,CAAhB;IACA,IAAMG,CAAC,GAAG,kBAAV;IACAF,OAAO,CAACG,OAAR,CAAgBD,CAAhB,EAAmBA,CAAnB;IACAF,OAAO,CAACI,UAAR,CAAmBF,CAAnB;IACA,OAAO,IAAP;EACD,CAND,CAME,OAAOG,CAAP,EAAU;IACV,OACEA,CAAC,MACD;IACCA,CAAC,CAACC,IAAF,KAAW,EAAX,IACC;IACAD,CAAC,CAACC,IAAF,KAAW,IAFZ,IAGC;IACA;IACAD,CAAC,CAAC9B,IAAF,KAAW,oBALZ,IAMC;IACA8B,CAAC,CAAC9B,IAAF,KAAW,4BATZ,CAAD,IAUA;IACAyB,OAXA,IAYAA,OAAO,CAACT,MAAR,KAAmB,CAbrB;EAeD;AACF;AAEM,SAASgB,gBAAT,GAAoC;EACzC;EACA,IAAMC,cAAc,GAAGP,MAAM,CAACQ,UAAP,KAAsBC,SAAtB,GAAkCT,MAAM,CAACQ,UAAzC,GAAsDR,MAAM,CAACU,OAApF;EACA,IAAMC,aAAa,GAAGX,MAAM,CAACY,SAAP,KAAqBH,SAArB,GAAiCT,MAAM,CAACY,SAAxC,GAAoDZ,MAAM,CAACa,OAAjF;EAEA,IAAMC,CAAC,GAAG,IAAV;EACA,IAAMC,CAAC,GAAG,GAAV;EAEA,IAAMC,KAAK,GAAGhB,MAAM,CAACiB,UAAP,GACVjB,MAAM,CAACiB,UADG,GAEVC,QAAQ,CAACC,eAAT,CAAyBC,WAAzB,GACAF,QAAQ,CAACC,eAAT,CAAyBC,WADzB,GAEApB,MAAM,CAACqB,MAAP,CAAcL,KAJlB;EAMA,IAAMM,MAAM,GAAGtB,MAAM,CAACuB,WAAP,GACXvB,MAAM,CAACuB,WADI,GAEXL,QAAQ,CAACC,eAAT,CAAyBK,YAAzB,GACAN,QAAQ,CAACC,eAAT,CAAyBK,YADzB,GAEAxB,MAAM,CAACqB,MAAP,CAAcC,MAJlB;EAMA,IAAMG,UAAU,GAAG,CAAnB,CApByC,CAoBnB;;EAEtB,IAAMC,IAAI,GAAGnE,IAAI,CAACoE,GAAL,CAAS,CAACX,KAAK,GAAGF,CAAT,IAAc,CAAd,GAAkBW,UAAlB,GAA+BlB,cAAxC,CAAb;EACA,IAAMqB,GAAG,GAAGrE,IAAI,CAACoE,GAAL,CAAS,CAACL,MAAM,GAAGP,CAAV,IAAe,CAAf,GAAmBU,UAAnB,GAAgCd,aAAzC,CAAZ;EACA,IAAMkB,QAAQ,uEAAgEd,CAAC,GAAGU,UAApE,oBAAwFX,CAAC,GAAGW,UAA5F,kBAA8GG,GAA9G,mBAA0HF,IAA1H,CAAd;EACA,OAAOG,QAAP;AACD;AAEM,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA;;EAAA,OAAe,YAAA9B,MAAM,UAAN,+DAAQ+B,SAAR,wEAAmBC,SAAnB,CAA6BhE,WAA7B,GAA2CiE,OAA3C,CAAmD,SAAnD,KAAgE,CAAC,CAAjE,IAAsE,KAArF;AAAA,CAAlB;AAEA,SAASC,YAAT,CAAsBC,MAAtB,EAA4H;EACjI,IAAQC,OAAR,GAAiCD,MAAjC,CAAQC,OAAR;EAAA,IAAiBC,KAAjB,GAAiCF,MAAjC,CAAiBE,KAAjB;EAAA,IAAwB5D,IAAxB,GAAiC0D,MAAjC,CAAwB1D,IAAxB;EAEA,IAAMtB,GAAG,GAAG,IAAImF,GAAJ,CAAQF,OAAR,CAAZ;;EACA,IAAIC,KAAJ,EAAW;IACTjD,MAAM,CAACC,IAAP,CAAYgD,KAAZ,EAAmBE,OAAnB,CAA2B,UAACC,GAAD,EAAS;MAClCrF,GAAG,CAACsF,YAAJ,CAAiBC,MAAjB,CAAwBF,GAAxB,EAA6BH,KAAK,CAACG,GAAD,CAAlC;IACD,CAFD;EAGD;;EACD,IAAI/D,IAAJ,EAAU;IACR,IAAMsC,CAAC,GAAG,IAAIuB,GAAJ,CAAQJ,YAAY,CAAC;MAAEE,OAAO,EAAPA,OAAF;MAAWC,KAAK,EAAE5D;IAAlB,CAAD,CAApB,EAAgDgE,YAAhD,CAA6DhF,QAA7D,EAAV;IACAN,GAAG,CAACsB,IAAJ,GAAWsC,CAAX;EACD;;EACD,OAAO5D,GAAG,CAACM,QAAJ,EAAP;AACD;AAEM,SAASkF,eAAT,GAAoC;EAAA;;EACzC,IAAMC,WAAW,GAAG1G,+BAAA,CAAa6F,SAAS,CAACC,SAAvB,CAApB;EACA5F,aAAA,CAASoD,IAAI,CAACqD,SAAL,CAAeD,WAAf,CAAT,EAAsC,sBAAtC;EAEA,IAAIE,uBAAuB,GAAG,IAA9B,CAJyC,CAKzC;;EACA,kBAAKf,SAAL,uCAAI,WAA8CgB,KAAlD,EAAyD;IACvDD,uBAAuB,GAAG,KAA1B;EACD,CARwC,CASzC;EACA;;;EACA,IAAIF,WAAW,CAACI,MAAZ,CAAmB1E,IAAnB,KAA4BnC,iDAA5B,IAAiDyG,WAAW,CAACI,MAAZ,CAAmB1E,IAAnB,KAA4BnC,gDAAjF,EAAmG;IACjG2G,uBAAuB,GAAG,KAA1B;EACD;;EAED,OAAOA,uBAAP;AACD;AAEM,IAAMK,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,MAAD,EAAyB;EAC9D,IAAI;IACF,IAAMjG,GAAG,GAAG,IAAImF,GAAJ,CAAQ3C,kBAAkB,CAACyD,MAAD,CAA1B,CAAZ;IACA,OAAOjG,GAAP;EACD,CAHD,CAGE,OAAOP,KAAP,EAAc;IACd,MAAM,IAAIG,KAAJ,WAAa,CAAAH,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEyG,OAAP,KAAkB,EAA/B,2CAAkED,MAAlE,4CAAN;EACD;AACF,CAPM;;AClMP,MAAM,+BAA4B;;;;;;;;;;;;;;ACAlC;AAEA;;IAEMG;;;;;EAaJ,4BAAyF;IAAA;;IAAA,IAA3EpG,GAA2E,QAA3EA,GAA2E;IAAA,IAAtEqG,MAAsE,QAAtEA,MAAsE;IAAA,IAA9D3B,QAA8D,QAA9DA,QAA8D;;IAAA;;IACvF;;IADuF;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAEvF,MAAK1E,GAAL,GAAWA,GAAX;IACA,MAAKqG,MAAL,GAAcA,MAAM,IAAI,QAAxB;IACA,MAAK3B,QAAL,GAAgBA,QAAQ,IAAIvB,gBAAgB,EAA5C;IACA,MAAKN,MAAL,GAAcS,SAAd;IACA,MAAKgD,WAAL,GAAmBhD,SAAnB;IACA,MAAKiD,aAAL,GAAqB,KAArB;;IACA,MAAKC,WAAL;;IARuF;EASxF;;;;WAED,uBAAoB;MAAA;;MAClB,KAAKF,WAAL,GAAmBG,MAAM,CACvBC,WAAW,CAAC,YAAM;QAChB,IAAI,MAAI,CAAC7D,MAAL,IAAe,MAAI,CAACA,MAAL,CAAY8D,MAA/B,EAAuC;UACrCC,aAAa,CAAC,MAAI,CAACN,WAAN,CAAb;;UACA,IAAI,CAAC,MAAI,CAACC,aAAV,EAAyB;YACvB,MAAI,CAACM,IAAL,CAAU,OAAV;UACD;;UACD,MAAI,CAACN,aAAL,GAAqB,KAArB;UACA,MAAI,CAAC1D,MAAL,GAAcS,SAAd;QACD;;QACD,IAAI,MAAI,CAACT,MAAL,KAAgBS,SAApB,EAA+BsD,aAAa,CAAC,MAAI,CAACN,WAAN,CAAb;MAChC,CAVU,EAUR,GAVQ,CADY,CAAzB;IAaD;;;WAED,gBAAsB;MAAA;;MACpB,KAAKzD,MAAL,GAAcA,MAAM,CAACiE,IAAP,CAAY,KAAK9G,GAAL,CAASC,IAArB,EAA2B,KAAKoG,MAAhC,EAAwC,KAAK3B,QAA7C,CAAd;MACA,oBAAI,KAAK7B,MAAT,yCAAI,aAAakE,KAAjB,EAAwB,KAAKlE,MAAL,CAAYkE,KAAZ;MACxB,OAAO3H,OAAO,CAACC,OAAR,EAAP;IACD;;;WAED,iBAAc;MACZ,KAAKkH,aAAL,GAAqB,IAArB;MACA,IAAI,KAAK1D,MAAT,EAAiB,KAAKA,MAAL,CAAYmE,KAAZ;IAClB;;;WAED,kBAASC,yBAAT,EAAmD;MACjD,IAAIA,yBAAJ,EAA+B;QAC7BpE,MAAM,CAACqE,QAAP,CAAgBC,OAAhB,CAAwB,KAAKnH,GAAL,CAASC,IAAjC;MACD,CAFD,MAEO;QACL4C,MAAM,CAACqE,QAAP,CAAgBjH,IAAhB,GAAuB,KAAKD,GAAL,CAASC,IAAhC;MACD;IACF;;;;EAzDwBkG;;AA4D3B,yDAAeC,YAAf;;;;;;;;;;;;;;AChEA;AAEA;AACA;AACA;AACA;;IAGeiB;EAKb;EACA;EACA,8BACWC,QADX,EAEWC,QAFX,EAGWC,YAHX,EAIWxG,WAJX,EAKWyG,MALX,EAMWC,gBANX,EAOWC,SAPX,EAQWC,WARX,EASE;IAAA;;IAAA,KARSN,QAQT,GARSA,QAQT;IAAA,KAPSC,QAOT,GAPSA,QAOT;IAAA,KANSC,YAMT,GANSA,YAMT;IAAA,KALSxG,WAKT,GALSA,WAKT;IAAA,KAJSyG,MAIT,GAJSA,MAIT;IAAA,KAHSC,gBAGT,GAHSA,gBAGT;IAAA,KAFSC,SAET,GAFSA,SAET;IAAA,KADSC,WACT,GADSA,WACT;;IAAA,wCAfqBzH,QAAQ,EAe7B;;IAAA;EAAE;;;;SAEJ,eAAoB;MAClB,OAAO0H,kBAAkB,CACvBhF,MAAM,CAACiF,IAAP,CACEzF,IAAI,CAACqD,SAAL,iCACM,KAAKkC,WAAL,IAAoB,EAD1B;QAEEG,UAAU,EAAE,KAAKC,KAFnB;QAGET,QAAQ,EAAE,KAAKA,QAHjB;QAIEvG,WAAW,EAAE,KAAKA,WAJpB;QAKE0G,gBAAgB,EAAE,KAAKA,gBAAL,IAAyB;MAL7C,GADF,CADuB,CAAzB;IAWD;;;WAED,2BAAkB1C,MAAlB,EAAyH;MAAA;;MACvH,IAAMiD,cAAc,GAAG,IAAI7B,kBAAJ,CAAiB;QAAEpG,GAAG,EAAE,KAAKkI,QAAZ;QAAsBxD,QAAQ,EAAEM,MAAM,CAACmD;MAAvC,CAAjB,CAAvB;;MACA,IAAI,KAAKV,MAAL,KAAgBrK,gBAApB,EAAsC;QACpC6K,cAAc,CAACG,QAAf,CAAwBpD,MAAM,CAACiC,yBAA/B;MACD,CAFD,MAEO;QACL,OAAO,IAAI7H,OAAJ,CAAiC,UAACC,OAAD,EAAUC,MAAV,EAAqB;UAC3D,IAAI+I,EAAJ;;UACA,IAAMC,UAAU;YAAA,+EAAG,iBAAO9I,EAAP;cAAA;;cAAA;gBAAA;kBAAA;oBAAA;sBAAA;sBAEPC,KAFO,GAESD,EAFT,CAEPC,KAFO,EAEAC,IAFA,GAESF,EAFT,CAEAE,IAFA;sBAAA,QAMXA,IAAI,IAAI,EANG,EAIb6I,cAJa,SAIbA,cAJa,2BAKbC,UALa,EAKeC,WALf,oBAKCC,YALD,EAKsCC,OALtC,oBAK4BC,QAL5B,EAKkDC,IALlD;;sBAAA,KAOXpJ,KAPW;wBAAA;wBAAA;sBAAA;;sBAQbR,cAAA,CAAUO,EAAV;sBACAF,MAAM,CAAC,IAAIM,KAAJ,kBAAoBH,KAApB,qBAAoC4C,IAAI,CAACqD,SAAL,CAAelG,EAAE,CAACE,IAAH,IAAW,EAA1B,CAApC,EAAD,CAAN;sBATa;;oBAAA;sBAAA,MAYXF,EAAE,CAACE,IAAH,IAAW6I,cAAc,CAAChB,QAAf,KAA4B,KAAI,CAACA,QAZjC;wBAAA;wBAAA;sBAAA;;sBAabtI,aAAA,CAASO,EAAE,CAACE,IAAZ;;sBAba,MAcT,CAAC,KAAI,CAACgI,gBAAN,IAA0BW,EAdjB;wBAAA;wBAAA;sBAAA;;sBAAA;sBAAA,OAc2BA,EAAE,CAACS,WAAH,CAAe;wBAAEC,OAAO,EAAE;sBAAX,CAAf,CAd3B;;oBAAA;sBAeb1J,OAAO;wBACLoJ,WAAW,EAAXA,WADK;wBAELE,OAAO,EAAEA,OAAO,IAAI;sBAFf,GAGFE,IAHE;wBAIL;wBACAzG,KAAK,EAAEmG;sBALF,GAAP;;oBAfa;sBAAA;sBAAA;;oBAAA;sBAAA;sBAAA;sBAwBftJ,cAAA;sBACAK,MAAM,aAAN;;oBAzBe;oBAAA;sBAAA;kBAAA;gBAAA;cAAA;YAAA,CAAH;;YAAA,gBAAVgJ,UAAU;cAAA;YAAA;UAAA,GAAhB;;UA6BA,IAAI,CAAC,KAAI,CAACZ,gBAAV,EAA4B;YAC1BW,EAAE,GAAG,IAAIjB,kDAAJ,4BAAyC,KAAI,CAACY,KAA9C,GAAuDxH,uBAAvD,CAAL;YACA6H,EAAE,CAACxI,gBAAH,CAAoB,SAApB;cAAA,gFAA+B,kBAAOL,EAAP;gBAAA;kBAAA;oBAAA;sBAAA;wBAAA;wBAAA,OACvB8I,UAAU,CAAC9I,EAAD,CADa;;sBAAA;wBAE7B6I,EAAE,CAACrB,KAAH;wBACAiB,cAAc,CAACjB,KAAf;;sBAH6B;sBAAA;wBAAA;oBAAA;kBAAA;gBAAA;cAAA,CAA/B;;cAAA;gBAAA;cAAA;YAAA;UAKD,CAPD,MAOO;YACL,IAAMgC,uBAAuB;cAAA,gFAAG,kBAAOC,gBAAP;gBAAA;gBAAA;kBAAA;oBAAA;sBAAA;wBAAA,IACzBA,gBAAgB,CAACvJ,IADQ;0BAAA;0BAAA;wBAAA;;wBAAA;;sBAAA;wBAExBF,EAFwB,GAEnByJ,gBAAgB,CAACvJ,IAFE;;wBAAA,MAG1BF,EAAE,CAAC0J,OAAH,gCAAmC,KAAI,CAAClB,KAAxC,CAH0B;0BAAA;0BAAA;wBAAA;;wBAAA;;sBAAA;wBAI9BnF,MAAM,CAAClD,mBAAP,CAA2B,SAA3B,EAAsCqJ,uBAAtC;wBACAV,UAAU,CAAC9I,EAAD,CAAV;wBACAyI,cAAc,CAACjB,KAAf;;sBAN8B;sBAAA;wBAAA;oBAAA;kBAAA;gBAAA;cAAA,CAAH;;cAAA,gBAAvBgC,uBAAuB;gBAAA;cAAA;YAAA,GAA7B;;YAQAnG,MAAM,CAAChD,gBAAP,CAAwB,SAAxB,EAAmCmJ,uBAAnC;UACD;;UACDf,cAAc,CAACnB,IAAf;UACAmB,cAAc,CAACkB,IAAf,CAAoB,OAApB,EAA6B,YAAM;YACjC,IAAId,EAAJ,EAAQA,EAAE,CAACrB,KAAH;YACR1H,MAAM,CAAC,IAAIM,KAAJ,CAAU,mBAAV,CAAD,CAAN;UACD,CAHD;QAID,CAtDM,CAAP;MAuDD;;MACD,OAAO,IAAP;IACD;;;;;;AAOH,oEAAeyH,oBAAf;;;;;;;;;;;;;;;;AC7GA;AACA;AAGA;;IAGqBiC;;;;;EAKnB,wBACWhC,QADX,EAEWC,QAFX,EAGWC,YAHX,EAIWxG,WAJX,EAKWyG,MALX,EAMWC,gBANX,EAOWC,SAPX,EAQWC,WARX,EASE;IAAA;;IAAA;;IACA,0BAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwCxG,WAAxC,EAAqDyG,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;IADA,MARSN,QAQT,GARSA,QAQT;IAAA,MAPSC,QAOT,GAPSA,QAOT;IAAA,MANSC,YAMT,GANSA,YAMT;IAAA,MALSxG,WAKT,GALSA,WAKT;IAAA,MAJSyG,MAIT,GAJSA,MAIT;IAAA,MAHSC,gBAGT,GAHSA,gBAGT;IAAA,MAFSC,SAET,GAFSA,SAET;IAAA,MADSC,WACT,GADSA,WACT;;IAAA,kFAbuC,OAavC;;IAAA,0EAX+B,gBAW/B;;IAEA,MAAK2B,WAAL;;IAFA;EAGD;;;;WAED,uBAAoB;MAClB,IAAMC,QAAQ,GAAG,IAAIrE,GAAJ,CAAQ,0CAAR,CAAjB;MACA,IAAMsE,YAAY,GAAGpH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACqD,SAAL,CAAe,KAAKiC,SAAL,IAAkB,EAAjC,CAAX,CAArB;MACA,IAAM+B,cAAc,GAAGL,+BAAS,CAC9B;QACEjH,KAAK,EAAE,KAAKA,KADd;QAEEuH,aAAa,EAAE,KAAKC,aAFtB;QAGEC,SAAS,EAAE,KAAKvC,QAHlB;QAIEE,YAAY,EAAE,KAAKA,YAJrB;QAKEsC,KAAK,EAAE,KAAKC;MALd,CAD8B,EAQ9BN,YAR8B,CAAhC;MAUAxH,MAAM,CAACC,IAAP,CAAYwH,cAAZ,EAA4BtE,OAA5B,CAAoC,UAACC,GAAD,EAAS;QAC3C,IAAIqE,cAAc,CAACrE,GAAD,CAAlB,EAAyBmE,QAAQ,CAAClE,YAAT,CAAsBC,MAAtB,CAA6BF,GAA7B,EAAkCqE,cAAc,CAACrE,GAAD,CAAhD;MAC1B,CAFD;MAGA,KAAK6C,QAAL,GAAgBsB,QAAhB;IACD;;;;6FAED,iBAAkBxE,MAAlB;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACUyD,WADV,GAC0BzD,MAD1B,CACUyD,WADV;gBAAA;gBAAA,OAEyBW,oCAAG,CACxB,mCADwB,EAExB;kBACEY,OAAO,EAAE;oBACPC,aAAa,mBAAYxB,WAAZ;kBADN;gBADX,CAFwB,CAF5B;;cAAA;gBAEQ1H,QAFR;gBAUUmJ,EAVV,GAU8EnJ,QAV9E,CAUUmJ,EAVV,EAUcC,MAVd,GAU8EpJ,QAV9E,CAUcoJ,MAVd,oBAU8EpJ,QAV9E,CAUsBqJ,KAVtB,EAUsBA,KAVtB,gCAU8B,EAV9B,yCAU8ErJ,QAV9E,CAUkCsJ,QAVlC,EAU4ClJ,IAV5C,mCAUmD,EAVnD,+CAU8EJ,QAV9E,CAUuDuJ,aAVvD,EAUuDA,aAVvD,sCAUuE,EAVvE;gBAWQC,YAXR,GAYIJ,MAAM,KAAK,IAAX,mDAC6C1D,MAAM,CAAC6D,aAAD,CAAN,GAAwB,CADrE,sDAEuCJ,EAFvC,cAE6CC,MAF7C,mBAZJ;gBAAA,iCAeS;kBACLI,YAAY,EAAZA,YADK;kBAELpJ,IAAI,YAAKA,IAAL,cAAamJ,aAAb,CAFC;kBAGLF,KAAK,EAALA,KAHK;kBAILI,UAAU,EAAEN,EAJP;kBAKL3C,QAAQ,EAAE,KAAKA,QALV;kBAMLvG,WAAW,EAAE,KAAKA;gBANb,CAfT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;EAtC0CqG;;;;;;;;;;;;;;;;;;ACP5C;AACA;AAGA;;IAGqBoD;;;;;EAKnB,yBACWnD,QADX,EAEWC,QAFX,EAGWC,YAHX,EAIWxG,WAJX,EAKWyG,MALX,EAMWC,gBANX,EAOWC,SAPX,EAQWC,WARX,EASE;IAAA;;IAAA;;IACA,0BAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwCxG,WAAxC,EAAqDyG,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;IADA,MARSN,QAQT,GARSA,QAQT;IAAA,MAPSC,QAOT,GAPSA,QAOT;IAAA,MANSC,YAMT,GANSA,YAMT;IAAA,MALSxG,WAKT,GALSA,WAKT;IAAA,MAJSyG,MAIT,GAJSA,MAIT;IAAA,MAHSC,gBAGT,GAHSA,gBAGT;IAAA,MAFSC,SAET,GAFSA,SAET;IAAA,MADSC,WACT,GADSA,WACT;;IAAA,kFAbuC,OAavC;;IAAA,0EAX+B,sBAW/B;;IAEA,MAAK2B,WAAL;;IAFA;EAGD;;;;WAED,uBAAoB;MAClB,IAAMC,QAAQ,GAAG,IAAIrE,GAAJ,CAAQ,6CAAR,CAAjB;MACA,IAAMsE,YAAY,GAAGpH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACqD,SAAL,CAAe,KAAKiC,SAAL,IAAkB,EAAjC,CAAX,CAArB;MACA,IAAM+B,cAAc,GAAGL,+BAAS,CAC9B;QACEjH,KAAK,EAAE,KAAKA,KADd;QAEEuH,aAAa,EAAE,KAAKC,aAFtB;QAGEC,SAAS,EAAE,KAAKvC,QAHlB;QAIEE,YAAY,EAAE,KAAKA,YAJrB;QAKEsC,KAAK,EAAE,KAAKC;MALd,CAD8B,EAQ9BN,YAR8B,CAAhC;MAUAxH,MAAM,CAACC,IAAP,CAAYwH,cAAZ,EAA4BtE,OAA5B,CAAoC,UAACC,GAAD,EAAS;QAC3C,IAAIqE,cAAc,CAACrE,GAAD,CAAlB,EAAyBmE,QAAQ,CAAClE,YAAT,CAAsBC,MAAtB,CAA6BF,GAA7B,EAAkCqE,cAAc,CAACrE,GAAD,CAAhD;MAC1B,CAFD;MAGA,KAAK6C,QAAL,GAAgBsB,QAAhB;IACD;;;;6FAED,iBAAkBxE,MAAlB;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACUyD,WADV,GAC0BzD,MAD1B,CACUyD,WADV;gBAAA;gBAAA,OAEyBW,oCAAG,CACxB,qEADwB,EAExB;kBACEY,OAAO,EAAE;oBACPC,aAAa,mBAAYxB,WAAZ;kBADN;gBADX,CAFwB,CAF5B;;cAAA;gBAEQ1H,QAFR;gBAAA,iBAUiDA,QAVjD,CAUUI,IAVV,EAUUA,IAVV,+BAUiB,EAVjB,mBAUqB+I,EAVrB,GAUiDnJ,QAVjD,CAUqBmJ,EAVrB,EAUyBQ,OAVzB,GAUiD3J,QAVjD,CAUyB2J,OAVzB,oBAUiD3J,QAVjD,CAUkCqJ,KAVlC,EAUkCA,KAVlC,gCAU0C,EAV1C;gBAAA,iCAWS;kBACLA,KAAK,EAALA,KADK;kBAELjJ,IAAI,EAAJA,IAFK;kBAGLoJ,YAAY,EAAEG,OAAO,CAAChL,IAAR,CAAaM,GAAb,IAAoB,EAH7B;kBAILuH,QAAQ,EAAE,KAAKA,QAJV;kBAKLiD,UAAU,EAAEN,EALP;kBAMLlJ,WAAW,EAAE,KAAKA;gBANb,CAXT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;EAtC2CqG;;;;;;;;;;;;;;;;;;ACP7C;AACA;AAGA;;IAGqBsD;;;;;EAOnB,uBACWrD,QADX,EAEWC,QAFX,EAGWC,YAHX,EAIWxG,WAJX,EAKWyG,MALX,EAMWC,gBANX,EAOWC,SAPX,EAQWC,WARX,EASE;IAAA;;IAAA;;IACA,0BAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwCxG,WAAxC,EAAqDyG,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;IADA,MARSN,QAQT,GARSA,QAQT;IAAA,MAPSC,QAOT,GAPSA,QAOT;IAAA,MANSC,YAMT,GANSA,YAMT;IAAA,MALSxG,WAKT,GALSA,WAKT;IAAA,MAJSyG,MAIT,GAJSA,MAIT;IAAA,MAHSC,gBAGT,GAHSA,gBAGT;IAAA,MAFSC,SAET,GAFSA,SAET;IAAA,MADSC,WACT,GADSA,WACT;;IAAA,kFAfuC,gBAevC;;IAAA,0EAb+B,sBAa/B;;IAAA,2EAXgC,wBAWhC;;IAEA,MAAK2B,WAAL;;IAFA;EAGD;;;;WAED,uBAAoB;MAClB,IAAMC,QAAQ,GAAG,IAAIrE,GAAJ,CAAQ,8CAAR,CAAjB;MACA,IAAMsE,YAAY,GAAGpH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACqD,SAAL,CAAe,KAAKiC,SAAL,IAAkB,EAAjC,CAAX,CAArB;MACA,IAAM+B,cAAc,GAAGL,+BAAS,CAC9B;QACEjH,KAAK,EAAE,KAAKA,KADd;QAEEuH,aAAa,EAAE,KAAKC,aAFtB;QAGEC,SAAS,EAAE,KAAKvC,QAHlB;QAIEsD,MAAM,EAAE,KAAKC,MAJf;QAKErD,YAAY,EAAE,KAAKA,YALrB;QAMEsC,KAAK,EAAE,KAAKC,KANd;QAOE/B,KAAK,EAAE,KAAKA;MAPd,CAD8B,EAU9ByB,YAV8B,CAAhC;MAYAxH,MAAM,CAACC,IAAP,CAAYwH,cAAZ,EAA4BtE,OAA5B,CAAoC,UAACC,GAAD,EAAS;QAC3C,IAAIqE,cAAc,CAACrE,GAAD,CAAlB,EAAyBmE,QAAQ,CAAClE,YAAT,CAAsBC,MAAtB,CAA6BF,GAA7B,EAAkCqE,cAAc,CAACrE,GAAD,CAAhD;MAC1B,CAFD;MAGA,KAAK6C,QAAL,GAAgBsB,QAAhB;IACD;;;;6FAED,iBAAkBxE,MAAlB;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACUyD,WADV,GAC0BzD,MAD1B,CACUyD,WADV;gBAAA;gBAAA,OAEyBW,oCAAG,CAAmD,2CAAnD,EAAgG;kBACxHY,OAAO,EAAE;oBACPC,aAAa,mBAAYxB,WAAZ;kBADN;gBAD+G,CAAhG,CAF5B;;cAAA;gBAEQ1H,QAFR;gBAAA,oBAOgEA,QAPhE,CAOU2J,OAPV,EAOmBH,YAPnB,kCAOkC,EAPlC,wCAOgExJ,QAPhE,CAOsCqJ,KAPtC,EAOsCA,KAPtC,gCAO8C,EAP9C,qCAOgErJ,QAPhE,CAOkDI,IAPlD,EAOkDA,IAPlD,+BAOyD,EAPzD;gBAAA,iCAQS;kBACLiJ,KAAK,EAALA,KADK;kBAELjJ,IAAI,EAAJA,IAFK;kBAGLoJ,YAAY,EAAZA,YAHK;kBAILhD,QAAQ,EAAE,KAAKA,QAJV;kBAKLiD,UAAU,EAAEJ,KAAK,CAACvJ,WAAN,EALP;kBAMLG,WAAW,EAAE,KAAKA;gBANb,CART;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;EA1CyCqG;;;;ACP3C,MAAM,mCAA4B;;;;;;;;;;;;;;;;;ACAlC;AACA;AACA;AACA;AAGA;AACA;;IAGqB0D;;;;;EAOnB,oBACWzD,QADX,EAEWC,QAFX,EAGWC,YAHX,EAIWxG,WAJX,EAKWyG,MALX,EAMWC,gBANX,EAOWC,SAPX,EAQWC,WARX,EASE;IAAA;;IAAA;;IACA,0BAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwCxG,WAAxC,EAAqDyG,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;IADA,MARSN,QAQT,GARSA,QAQT;IAAA,MAPSC,QAOT,GAPSA,QAOT;IAAA,MANSC,YAMT,GANSA,YAMT;IAAA,MALSxG,WAKT,GALSA,WAKT;IAAA,MAJSyG,MAIT,GAJSA,MAIT;IAAA,MAHSC,gBAGT,GAHSA,gBAGT;IAAA,MAFSC,SAET,GAFSA,SAET;IAAA,MADSC,WACT,GADSA,WACT;;IAAA,0EAf+B,sBAe/B;;IAAA,kFAbuC,gBAavC;;IAAA,2EAXgC,OAWhC;;IAEA,MAAK2B,WAAL;;IAFA;EAGD;;;;WAED,uBAAoB;MAClB,IAAQtD,MAAR,GAAmB,KAAK0B,SAAxB,CAAQ1B,MAAR;MACA,IAAMuD,QAAQ,GAAGxD,uBAAuB,CAACC,MAAD,CAAxC;MACAuD,QAAQ,CAACwB,QAAT,IAAqBxB,QAAQ,CAACwB,QAAT,CAAkB9K,QAAlB,CAA2B,GAA3B,IAAkC,WAAlC,GAAgD,YAArE;MACA,IAAMuJ,YAAY,GAAGpH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACqD,SAAL,CAAe,KAAKiC,SAApB,CAAX,CAArB;MACA,OAAO8B,YAAY,CAACxD,MAApB;MACA,IAAMyD,cAAc,GAAGL,+BAAS,CAC9B;QACEjH,KAAK,EAAE,KAAKA,KADd;QAEEuH,aAAa,EAAE,KAAKC,aAFtB;QAGEC,SAAS,EAAE,KAAKvC,QAHlB;QAIEsD,MAAM,EAAE,KAAKC,MAJf;QAKErD,YAAY,EAAE,KAAKA,YALrB;QAMEsC,KAAK,EAAE,KAAKC,KANd;QAOEkB,UAAU,EAAEnL,oBAAoB,CAAC,KAAKkB,WAAN,CAPlC;QAQEgH,KAAK,EAAE,KAAKA;MARd,CAD8B,EAW9ByB,YAX8B,CAAhC;MAaAxH,MAAM,CAACC,IAAP,CAAYwH,cAAZ,EAA4BtE,OAA5B,CAAoC,UAACC,GAAD,EAAS;QAC3C,IAAIqE,cAAc,CAACrE,GAAD,CAAlB,EAAyBmE,QAAQ,CAAClE,YAAT,CAAsBC,MAAtB,CAA6BF,GAA7B,EAAkCqE,cAAc,CAACrE,GAAD,CAAhD;MAC1B,CAFD;MAGA,KAAK6C,QAAL,GAAgBsB,QAAhB;IACD;;;;6FAED,iBAAkBxE,MAAlB;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACU2D,OADV,GACmC3D,MADnC,CACU2D,OADV,EACmBF,WADnB,GACmCzD,MADnC,CACmByD,WADnB;gBAAA,kBAE+F,KAAKd,SAFpG,EAEU1B,MAFV,mBAEUA,MAFV,EAEkBhF,eAFlB,mBAEkBA,eAFlB,EAEmCC,yBAFnC,mBAEmCA,yBAFnC,0CAE8DgK,eAF9D,EAE8DA,eAF9D,sCAEgF,UAFhF;;gBAAA,KAGMzC,WAHN;kBAAA;kBAAA;gBAAA;;gBAAA;gBAKY0C,SALZ,GAKwB,IAAIhG,GAAJ,CAAQc,MAAR,CALxB;gBAAA;gBAAA,OAM6BmD,oCAAG,WAAmBrJ,YAAY,CAACoL,SAAD,CAA/B,SAA6CD,eAA7C,GAAgE;kBACxFlB,OAAO,EAAE;oBACPC,aAAa,mBAAYxB,WAAZ;kBADN;gBAD+E,CAAhE,CANhC;;cAAA;gBAMY1H,QANZ;gBAWc2J,OAXd,GAWuC3J,QAXvC,CAWc2J,OAXd,EAWuBvJ,IAXvB,GAWuCJ,QAXvC,CAWuBI,IAXvB,EAW6BiJ,KAX7B,GAWuCrJ,QAXvC,CAW6BqJ,KAX7B;gBAAA,iCAYa;kBACLA,KAAK,EAALA,KADK;kBAELjJ,IAAI,EAAJA,IAFK;kBAGLoJ,YAAY,EAAEG,OAHT;kBAILF,UAAU,EAAE1J,aAAa,CAACC,QAAD,EAAW,KAAKC,WAAhB,EAA6BC,eAA7B,EAA8CC,yBAA9C,CAJpB;kBAKLqG,QAAQ,EAAE,KAAKA,QALV;kBAMLvG,WAAW,EAAE,KAAKA;gBANb,CAZb;;cAAA;gBAAA;gBAAA;gBAqBM;gBACA/B,gCAAA,cAAgB,sCAAhB;;cAtBN;gBAAA,KAyBM0J,OAzBN;kBAAA;kBAAA;gBAAA;;gBA0BU0C,YA1BV,GA0ByBP,6BAAS,CAAgBnC,OAAhB,CA1BlC;gBA2BYxH,KA3BZ,GA2BqCkK,YA3BrC,CA2BYlK,IA3BZ,EA2BkBiJ,MA3BlB,GA2BqCiB,YA3BrC,CA2BkBjB,KA3BlB,EA2ByBM,QA3BzB,GA2BqCW,YA3BrC,CA2ByBX,OA3BzB;gBAAA,iCA4BW;kBACLH,YAAY,EAAEG,QADT;kBAELvJ,IAAI,EAAJA,KAFK;kBAGLiJ,KAAK,EAALA,MAHK;kBAILI,UAAU,EAAE1J,aAAa,CAACuK,YAAD,EAAe,KAAKrK,WAApB,EAAiCC,eAAjC,EAAkDC,yBAAlD,CAJpB;kBAKLqG,QAAQ,EAAE,KAAKA,QALV;kBAMLvG,WAAW,EAAE,KAAKA;gBANb,CA5BX;;cAAA;gBAAA,MAqCQ,IAAIpB,KAAJ,CAAU,+BAAV,CArCR;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;EA9CsCyH;;;;;;;;;;;;;;;;ACVxC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;IAGqBiE;;;;;EACnB,0BACWhE,QADX,EAEWC,QAFX,EAGWC,YAHX,EAIWxG,WAJX,EAKWyG,MALX,EAMWC,gBANX,EAOWC,SAPX,EAQWC,WARX,EASE;IAAA;;IAAA;;IACA,0BAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwCxG,WAAxC,EAAqDyG,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;IADA,MARSN,QAQT,GARSA,QAQT;IAAA,MAPSC,QAOT,GAPSA,QAOT;IAAA,MANSC,YAMT,GANSA,YAMT;IAAA,MALSxG,WAKT,GALSA,WAKT;IAAA,MAJSyG,MAIT,GAJSA,MAIT;IAAA,MAHSC,gBAGT,GAHSA,gBAGT;IAAA,MAFSC,SAET,GAFSA,SAET;IAAA,MADSC,WACT,GADSA,WACT;;IAEA,MAAK2B,WAAL;;IAFA;EAGD;;;;WAED,uBAAoB;MAClB,IAAME,YAAY,GAAGpH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACqD,SAAL,CAAe,KAAKiC,SAApB,CAAX,CAArB;MACA,OAAO8B,YAAY,CAACxD,MAApB;MACA,IAAMyD,cAAc,GAAGL,+BAAS,CAC9B;QACEjH,KAAK,EAAE,KAAKA,KADd;QAEEyH,SAAS,EAAE,KAAKvC,QAFlB;QAGEU,KAAK,EAAE,KAAKA;MAHd,CAD8B,EAM9ByB,YAN8B,CAAhC;MASA,KAAKvB,QAAL,GAAgB,IAAI/C,GAAJ,CAAQJ,YAAY,CAAC;QAAEE,OAAO,EAAE,KAAKuC,YAAhB;QAA8BtC,KAAK,EAAE,IAArC;QAA2C5D,IAAI,EAAEoI;MAAjD,CAAD,CAApB,CAAhB;IACD;;;;6FAED,iBAAkB1E,MAAlB;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACU2D,OADV,GACmC3D,MADnC,CACU2D,OADV,EACmBF,WADnB,GACmCzD,MADnC,CACmByD,WADnB;gBAAA,kBAE+F,KAAKd,SAFpG,EAEU1B,MAFV,mBAEUA,MAFV,EAEkBhF,eAFlB,mBAEkBA,eAFlB,EAEmCC,yBAFnC,mBAEmCA,yBAFnC,0CAE8DgK,eAF9D,EAE8DA,eAF9D,sCAEgF,UAFhF;;gBAAA,KAGMzC,WAHN;kBAAA;kBAAA;gBAAA;;gBAAA;gBAKY0C,SALZ,GAKwB,IAAIhG,GAAJ,CAAQc,MAAR,CALxB;gBAAA;gBAAA,OAM6BmD,oCAAG,WAAmBrJ,YAAY,CAACoL,SAAD,CAA/B,SAA6CD,eAA7C,GAAgE;kBACxFlB,OAAO,EAAE;oBACPC,aAAa,mBAAYxB,WAAZ;kBADN;gBAD+E,CAAhE,CANhC;;cAAA;gBAMY1H,QANZ;gBAWc2J,OAXd,GAWuC3J,QAXvC,CAWc2J,OAXd,EAWuBvJ,IAXvB,GAWuCJ,QAXvC,CAWuBI,IAXvB,EAW6BiJ,KAX7B,GAWuCrJ,QAXvC,CAW6BqJ,KAX7B;gBAAA,iCAYa;kBACLA,KAAK,EAALA,KADK;kBAELjJ,IAAI,EAAJA,IAFK;kBAGLoJ,YAAY,EAAEG,OAHT;kBAILF,UAAU,EAAE1J,aAAa,CAACC,QAAD,EAAW,KAAKC,WAAhB,EAA6BC,eAA7B,EAA8CC,yBAA9C,CAJpB;kBAKLqG,QAAQ,EAAE,KAAKA,QALV;kBAMLvG,WAAW,EAAE,KAAKA;gBANb,CAZb;;cAAA;gBAAA;gBAAA;gBAqBM;gBACA/B,gCAAA,cAAgB,sCAAhB;;cAtBN;gBAAA,KAyBM0J,OAzBN;kBAAA;kBAAA;gBAAA;;gBA0BU0C,YA1BV,GA0ByBP,6BAAS,CAAgBnC,OAAhB,CA1BlC;gBA2BYxH,KA3BZ,GA2BqCkK,YA3BrC,CA2BYlK,IA3BZ,EA2BkBiJ,MA3BlB,GA2BqCiB,YA3BrC,CA2BkBjB,KA3BlB,EA2ByBM,QA3BzB,GA2BqCW,YA3BrC,CA2ByBX,OA3BzB;gBAAA,iCA4BW;kBACLH,YAAY,EAAEG,QADT;kBAELvJ,IAAI,EAAJA,KAFK;kBAGLiJ,KAAK,EAALA,MAHK;kBAILI,UAAU,EAAE1J,aAAa,CAACuK,YAAD,EAAe,KAAKrK,WAApB,EAAiCC,eAAjC,EAAkDC,yBAAlD,CAJpB;kBAKLqG,QAAQ,EAAE,KAAKA,QALV;kBAMLvG,WAAW,EAAE,KAAKA;gBANb,CA5BX;;cAAA;gBAAA,MAqCQ,IAAIpB,KAAJ,CAAU,+BAAV,CArCR;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;WAwCA,2BAAkBoF,MAAlB,EAAyH;MACvH,uBAAyD,KAAK2C,SAA9D;MAAA,IAAkBgB,OAAlB,oBAAQC,QAAR;MAAA,IAAyCH,WAAzC,oBAA2BC,YAA3B;MACA,IAAMT,cAAc,GAAG,IAAI7B,kBAAJ,CAAiB;QAAEpG,GAAG,EAAE,KAAKkI,QAAZ;QAAsBxD,QAAQ,EAAEM,MAAM,CAACmD;MAAvC,CAAjB,CAAvB;;MACA,IAAI,KAAKV,MAAL,KAAgBrK,gBAApB,EAAsC;QACpC6K,cAAc,CAACG,QAAf,CAAwBpD,MAAM,CAACiC,yBAA/B;MACD,CAFD,MAEO;QACL,OAAO7H,OAAO,CAACC,OAAR,CAAgB;UACrB+C,KAAK,EAAE,EADc;UAErBuG,OAAO,EAAPA,OAFqB;UAGrBF,WAAW,EAAXA;QAHqB,CAAhB,CAAP;MAKD;;MACD,OAAO,IAAP;IACD;;;;EAnF2CpB;;;;;;;;;;;;;;;;;;;;;;;;;ACX9C;AACA;AACA;AACA;AAGA;AACA;AACA;;IAGqB0D;;;;;EAOnB,oBACWzD,QADX,EAEWC,QAFX,EAGWC,YAHX,EAIWxG,WAJX,EAKWyG,MALX,EAMWC,gBANX,EAOWC,SAPX,EAQWC,WARX,EASE;IAAA;;IAAA;;IACA,0BAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwCxG,WAAxC,EAAqDyG,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;IADA,MARSN,QAQT,GARSA,QAQT;IAAA,MAPSC,QAOT,GAPSA,QAOT;IAAA,MANSC,YAMT,GANSA,YAMT;IAAA,MALSxG,WAKT,GALSA,WAKT;IAAA,MAJSyG,MAIT,GAJSA,MAIT;IAAA,MAHSC,gBAGT,GAHSA,gBAGT;IAAA,MAFSC,SAET,GAFSA,SAET;IAAA,MADSC,WACT,GADSA,WACT;;IAAA,0EAf+B,sBAe/B;;IAAA,kFAbuC,gBAavC;;IAAA,2EAXgC,OAWhC;;IAEA,MAAK2B,WAAL;;IAFA;EAGD;;;;WAED,uBAAoB;MAClB,IAAQtD,MAAR,GAAmB,KAAK0B,SAAxB,CAAQ1B,MAAR;MACA,IAAMkF,SAAS,GAAGnF,uBAAuB,CAACC,MAAD,CAAzC;MAEAkF,SAAS,CAACH,QAAV,GAAqB,qBAArB;MACA,KAAK9C,QAAL,GAAgBiD,SAAhB;IACD;;;;6FAED,iBAAkBnG,MAAlB;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACU2D,OADV,GACmC3D,MADnC,CACU2D,OADV,EACmBF,WADnB,GACmCzD,MADnC,CACmByD,WADnB;gBAAA,kBAEiE,KAAKd,SAFtE,EAEU1B,MAFV,mBAEUA,MAFV,EAEkBhF,eAFlB,mBAEkBA,eAFlB,EAEmCC,yBAFnC,mBAEmCA,yBAFnC;gBAAA;gBAIUiK,SAJV,GAIsB,IAAIhG,GAAJ,CAAQc,MAAR,CAJtB;gBAAA;gBAAA,OAK2BmD,oCAAG,WAAmBrJ,YAAY,CAACoL,SAAD,CAA/B,eAAsD;kBAC9EnB,OAAO,EAAE;oBACPC,aAAa,mBAAYxB,WAAZ;kBADN;gBADqE,CAAtD,CAL9B;;cAAA;gBAKU1H,QALV;gBAUY2J,OAVZ,GAUqC3J,QAVrC,CAUY2J,OAVZ,EAUqBvJ,IAVrB,GAUqCJ,QAVrC,CAUqBI,IAVrB,EAU2BiJ,KAV3B,GAUqCrJ,QAVrC,CAU2BqJ,KAV3B;gBAAA,iCAWW;kBACLA,KAAK,EAALA,KADK;kBAELjJ,IAAI,EAAJA,IAFK;kBAGLoJ,YAAY,EAAEG,OAHT;kBAILF,UAAU,EAAE1J,aAAa,CAACC,QAAD,EAAW,KAAKC,WAAhB,EAA6BC,eAA7B,EAA8CC,yBAA9C,CAJpB;kBAKLqG,QAAQ,EAAE,KAAKA,QALV;kBAMLvG,WAAW,EAAE,KAAKA;gBANb,CAXX;;cAAA;gBAAA;gBAAA;gBAoBI/B,cAAA;gBACMoM,YArBV,GAqByBP,6BAAS,CAACnC,OAAD,CArBlC;gBAsBYxH,KAtBZ,GAsBqCkK,YAtBrC,CAsBYlK,IAtBZ,EAsBkBiJ,MAtBlB,GAsBqCiB,YAtBrC,CAsBkBjB,KAtBlB,EAsByBM,QAtBzB,GAsBqCW,YAtBrC,CAsByBX,OAtBzB;gBAAA,iCAuBW;kBACLH,YAAY,EAAEG,QADT;kBAELvJ,IAAI,EAAJA,KAFK;kBAGLiJ,KAAK,EAALA,MAHK;kBAILI,UAAU,EAAE1J,aAAa,CAACuK,YAAD,EAAe,KAAKrK,WAApB,EAAiCC,eAAjC,EAAkDC,yBAAlD,CAJpB;kBAKLqG,QAAQ,EAAE,KAAKA,QALV;kBAMLvG,WAAW,EAAE,KAAKA;gBANb,CAvBX;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;WAkCA,6BAAkD;MAAA;;MAChD,OAAO,IAAI5B,OAAJ,CAAiC,UAACC,OAAD,EAAUC,MAAV,EAAqB;QAC3D,IAAI,MAAI,CAACoI,gBAAT,EAA2B;UACzBpI,MAAM,CAAC,IAAIM,KAAJ,CAAU,gDAAV,CAAD,CAAN;UACA;QACD;;QACD,IAAM0I,UAAU,GAAG,SAAbA,UAAa,CAAC9I,EAAD,EAAgD;UACjE,IAAI;YACF,IAAQC,KAAR,GAAwBD,EAAxB,CAAQC,KAAR;YAAA,IAAeC,IAAf,GAAwBF,EAAxB,CAAeE,IAAf;;YACA,WAGIA,IAAI,IAAI,EAHZ;YAAA,IACE6I,cADF,QACEA,cADF;YAAA,2BAEEC,UAFF;YAAA,IAE8BC,WAF9B,mBAEgBC,YAFhB;YAAA,IAEqDC,OAFrD,mBAE2CC,QAF3C;YAAA,IAEiEC,IAFjE;;YAIA,IAAIpJ,KAAJ,EAAW;cACTR,cAAA,CAAUO,EAAE,CAACC,KAAb;cACAH,MAAM,CAAC,IAAIM,KAAJ,CAAUH,KAAV,CAAD,CAAN;cACA;YACD;;YACD,IAAID,EAAE,CAACE,IAAH,IAAW6I,cAAc,CAAChB,QAAf,KAA4B,MAAI,CAACA,QAAhD,EAA0D;cACxDtI,aAAA,CAASO,EAAE,CAACE,IAAZ;cACAL,OAAO,CAAC;gBAAEoJ,WAAW,EAAXA,WAAH;gBAAgBE,OAAO,EAAEA,OAAO,IAAI;cAApC,GAA2CE,IAA3C;gBAAiDzG,KAAK,EAAEmG;cAAxD,GAAP;YACD;UACF,CAfD,CAeE,OAAO9I,KAAP,EAAc;YACdR,cAAA,CAAUQ,KAAV;YACAH,MAAM,CAACG,KAAD,CAAN;UACD;QACF,CApBD;;QAqBA,IAAM4I,EAAE,GAAG,IAAIjB,kDAAJ,4BAAyC,MAAI,CAACY,KAA9C,GAAuDxH,uBAAvD,CAAX;QACA6H,EAAE,CAACxI,gBAAH,CAAoB,SAApB;UAAA,gFAA+B,kBAAOL,EAAP;YAAA;cAAA;gBAAA;kBAAA;oBAC7B8I,UAAU,CAAC9I,EAAD,CAAV;oBACA6I,EAAE,CAACrB,KAAH;;kBAF6B;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAA/B;;UAAA;YAAA;UAAA;QAAA;;QAIA,IAAI;UACF,uBAA6C,MAAI,CAACW,SAAlD;UAAA,6CAAQsD,UAAR;UAAA,IAAQA,UAAR,sCAAqB,OAArB;UAAA,IAA8BO,UAA9B,oBAA8BA,UAA9B;UACA,IAAM9B,cAAc,GAAGL,+BAAS,CAC9B;YACEQ,SAAS,EAAE,MAAI,CAACvC,QADlB;YAEE2D,UAAU,EAAVA,UAFF;YAGEb,KAAK,EAAEa,UAAU,KAAK,OAAf,GAAyBO,UAAzB,GAAsClI,SAH/C;YAIEmI,YAAY,EAAER,UAAU,KAAK,KAAf,GAAuBO,UAAvB,GAAoClI,SAJpD;YAKEoI,IAAI,EAAE,MALR;YAMEC,UAAU,EAAE;cACV7B,KAAK,EAAE,MAAI,CAACC,KADF;cAEV3H,KAAK,EAAE,MAAI,CAACA,KAFF;cAGVuH,aAAa,EAAE,MAAI,CAACC,aAHV;cAIVpC,YAAY,EAAE,MAAI,CAACA,YAJT;cAKVQ,KAAK,EAAE,MAAI,CAACA,KALF;cAMV4C,MAAM,EAAE,MAAI,CAACC;YANH;UANd,CAD8B,EAgB9B;YACEc,UAAU,EAAE,MAAI,CAAChE;UADnB,CAhB8B,CAAhC,CAFE,CAsBF;UACA;;UACA4D,qCAAI,CAAC,MAAI,CAACrD,QAAL,CAAcjI,IAAf,EAAqBoC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACqD,SAAL,CAAegE,cAAf,CAAX,CAArB,CAAJ,CACGkC,IADH,CACQ,UAACC,QAAD,EAAc;YAClB5M,aAAA,CAAS,QAAT,EAAmB4M,QAAnB;YACA,OAAOvI,SAAP;UACD,CAJH,EAKGwI,KALH,CAKS,UAACrM,KAAD,EAAW;YAChBR,cAAA,CAAUQ,KAAV;YACAH,MAAM,CAACG,KAAD,CAAN;UACD,CARH;QASD,CAjCD,CAiCE,OAAOA,KAAP,EAAc;UACdR,cAAA,CAAUQ,KAAV;UACAH,MAAM,CAACG,KAAD,CAAN;QACD;MACF,CApEM,CAAP;IAqED;;;;EArIqC4H;;;;;;;;;;;;;;;;;;ACXxC;AACA;AAGA;;IAGqB0E;;;;;EAKnB,uBACWzE,QADX,EAEWC,QAFX,EAGWC,YAHX,EAIWxG,WAJX,EAKWyG,MALX,EAMWC,gBANX,EAOWC,SAPX,EAQWC,WARX,EASE;IAAA;;IAAA;;IACA,0BAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwCxG,WAAxC,EAAqDyG,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;IADA,MARSN,QAQT,GARSA,QAQT;IAAA,MAPSC,QAOT,GAPSA,QAOT;IAAA,MANSC,YAMT,GANSA,YAMT;IAAA,MALSxG,WAKT,GALSA,WAKT;IAAA,MAJSyG,MAIT,GAJSA,MAIT;IAAA,MAHSC,gBAGT,GAHSA,gBAGT;IAAA,MAFSC,SAET,GAFSA,SAET;IAAA,MADSC,WACT,GADSA,WACT;;IAAA,kFAbuC,OAavC;;IAAA,0EAX+B,UAW/B;;IAEA,MAAK2B,WAAL;;IAFA;EAGD;;;;WAED,uBAAoB;MAClB,IAAMC,QAAQ,GAAG,IAAIrE,GAAJ,kDAAkDtC,MAAM,CAACiB,UAAP,GAAoB,GAApB,GAA0B,UAA1B,GAAuC,EAAzF,EAAjB;MACA,IAAM2F,YAAY,GAAGpH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACqD,SAAL,CAAe,KAAKiC,SAAL,IAAkB,EAAjC,CAAX,CAArB;MACA,IAAM+B,cAAc,GAAGL,+BAAS,CAC9B;QACEjH,KAAK,EAAE,KAAKA,KADd;QAEEuH,aAAa,EAAE,KAAKC,aAFtB;QAGEC,SAAS,EAAE,KAAKvC,QAHlB;QAIEE,YAAY,EAAE,KAAKA,YAJrB;QAKEsC,KAAK,EAAE,KAAKC;MALd,CAD8B,EAQ9BN,YAR8B,CAAhC;MAUAxH,MAAM,CAACC,IAAP,CAAYwH,cAAZ,EAA4BtE,OAA5B,CAAoC,UAACC,GAAD,EAAS;QAC3C,IAAIqE,cAAc,CAACrE,GAAD,CAAlB,EAAyBmE,QAAQ,CAAClE,YAAT,CAAsBC,MAAtB,CAA6BF,GAA7B,EAAkCqE,cAAc,CAACrE,GAAD,CAAhD;MAC1B,CAFD;MAGA,KAAK6C,QAAL,GAAgBsB,QAAhB;IACD;;;;6FAED,iBAAkBxE,MAAlB;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACUyD,WADV,GAC0BzD,MAD1B,CACUyD,WADV;gBAAA;gBAAA,OAEyBW,oCAAG,CAAqC,oCAArC,EAA2E;kBACnGY,OAAO,EAAE;oBACPC,aAAa,mBAAYxB,WAAZ;kBADN;gBAD0F,CAA3E,CAF5B;;cAAA;gBAEQ1H,QAFR;gBAAA,qBAOqDA,QAPrD,CAOUiL,QAPV,EAOoBzB,YAPpB,mCAOmC,EAPnC,wCAOqDxJ,QAPrD,CAOuCI,IAPvC,EAOuCA,IAPvC,+BAO8C,EAP9C;gBAAA,iCAQS;kBACLiJ,KAAK,EAAE,EADF;kBAELjJ,IAAI,EAAJA,IAFK;kBAGLoJ,YAAY,EAAEA,YAAY,CAAC9I,KAAb,CAAmB,GAAnB,EAAwBU,MAAxB,GAAiC,CAAjC,GAAqCoI,YAAY,CAAC9I,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAArC,GAAkE8I,YAH3E;kBAILhD,QAAQ,EAAE,KAAKA,QAJV;kBAKLiD,UAAU,EAAErJ,IAAI,CAACN,WAAL,EALP;kBAMLG,WAAW,EAAE,KAAKA;gBANb,CART;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;EAtCyCqG;;;;;;;;;;;;;;;;;;;ACP3C;AACA;AAGA;;IAGqB4E;;;;;EAKnB,uBACW3E,QADX,EAEWC,QAFX,EAGWC,YAHX,EAIWxG,WAJX,EAKWyG,MALX,EAMWC,gBANX,EAOWC,SAPX,EAQWC,WARX,EASE;IAAA;;IAAA;;IACA,0BAAMN,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwCxG,WAAxC,EAAqDyG,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;IADA,MARSN,QAQT,GARSA,QAQT;IAAA,MAPSC,QAOT,GAPSA,QAOT;IAAA,MANSC,YAMT,GANSA,YAMT;IAAA,MALSxG,WAKT,GALSA,WAKT;IAAA,MAJSyG,MAIT,GAJSA,MAIT;IAAA,MAHSC,gBAGT,GAHSA,gBAGT;IAAA,MAFSC,SAET,GAFSA,SAET;IAAA,MADSC,WACT,GADSA,WACT;;IAAA,kFAbuC,OAavC;;IAAA,0EAX+B,iBAW/B;;IAEA,MAAK2B,WAAL;;IAFA;EAGD;;;;WAED,uBAAoB;MAClB,IAAMC,QAAQ,GAAG,IAAIrE,GAAJ,CAAQ,uCAAR,CAAjB;MACA,IAAMsE,YAAY,GAAGpH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACqD,SAAL,CAAe,KAAKiC,SAAL,IAAkB,EAAjC,CAAX,CAArB;MACA,IAAM+B,cAAc,GAAGL,+BAAS,CAC9B;QACEjH,KAAK,EAAE,KAAKA,KADd;QAEEuH,aAAa,EAAE,KAAKC,aAFtB;QAGEC,SAAS,EAAE,KAAKvC,QAHlB;QAIEE,YAAY,EAAE,KAAKA,YAJrB;QAKEsC,KAAK,EAAE,KAAKC,KALd;QAMEmC,YAAY,EAAE;MANhB,CAD8B,EAS9BzC,YAT8B,CAAhC;MAWAxH,MAAM,CAACC,IAAP,CAAYwH,cAAZ,EAA4BtE,OAA5B,CAAoC,UAACC,GAAD,EAAS;QAC3C,IAAIqE,cAAc,CAACrE,GAAD,CAAlB,EAAyBmE,QAAQ,CAAClE,YAAT,CAAsBC,MAAtB,CAA6BF,GAA7B,EAAkCqE,cAAc,CAACrE,GAAD,CAAhD;MAC1B,CAFD;MAGA,KAAK6C,QAAL,GAAgBsB,QAAhB;IACD;;;;6FAED,iBAAkBxE,MAAlB;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACUyD,WADV,GAC0BzD,MAD1B,CACUyD,WADV;gBAAA;gBAAA,OAEyBW,oCAAG,CACxB,mCADwB,EAExB;kBACEY,OAAO,EAAE;oBACPC,aAAa,mBAAYxB,WAAZ,CADN;oBAEP,aAAa,KAAKnB;kBAFX;gBADX,CAFwB,CAF5B;;cAAA;gBAEQvG,QAFR;gBAAA,OAW0GA,QAAQ,CAACrB,IAAT,IAAiB,EAX3H,8FAWWyM,iBAXX,EAW8B5B,YAX9B,sCAW6C,EAX7C,uDAWiD6B,YAXjD,EAW+DjL,IAX/D,oCAWsE,EAXtE,8CAW0EiJ,KAX1E,EAW0EA,KAX1E,6BAWkF,EAXlF,iBAW0FI,UAX1F,UAWsFN,EAXtF;gBAAA,iCAYS;kBACLK,YAAY,EAAZA,YADK;kBAELpJ,IAAI,EAAJA,IAFK;kBAGLiJ,KAAK,EAALA,KAHK;kBAILI,UAAU,EAAVA,UAJK;kBAKLjD,QAAQ,EAAE,KAAKA,QALV;kBAMLvG,WAAW,EAAE,KAAKA;gBANb,CAZT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;EAvCyCqG;;;;;;;;;;;;;;;;ACP3C;AACA;AAGA;AACA;AAGA,IAAMgF,sBAAsB,GAAG,oCAA/B;;IAEqBC;;;;;EACnB,yBACWhF,QADX,EAEWC,QAFX,EAGWC,YAHX,EAIWxG,WAJX,EAKWyG,MALX,EAMWC,gBANX,EAOWC,SAPX,EAQWC,WARX,EASW2E,YATX,EAUE;IAAA;;IAAA;;IACA,0BAAMjF,QAAN,EAAgBC,QAAhB,EAA0BC,YAA1B,EAAwCxG,WAAxC,EAAqDyG,MAArD,EAA6DC,gBAA7D,EAA+EC,SAA/E,EAA0FC,WAA1F;IADA,MATSN,QAST,GATSA,QAST;IAAA,MARSC,QAQT,GARSA,QAQT;IAAA,MAPSC,YAOT,GAPSA,YAOT;IAAA,MANSxG,WAMT,GANSA,WAMT;IAAA,MALSyG,MAKT,GALSA,MAKT;IAAA,MAJSC,gBAIT,GAJSA,gBAIT;IAAA,MAHSC,SAGT,GAHSA,SAGT;IAAA,MAFSC,WAET,GAFSA,WAET;IAAA,MADS2E,YACT,GADSA,YACT;;IAEA,MAAKhD,WAAL;;IAFA;EAGD;;;;WAED,uBAAoB;MAClB,IAAMC,QAAQ,GAAG,IAAIrE,GAAJ,CAAQ,gCAAR,CAAjB;MACA,IAAMsE,YAAY,GAAGpH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACqD,SAAL,CAAe,KAAKiC,SAAL,IAAkB,EAAjC,CAAX,CAArB;MACA,IAAM+B,cAAc,GAAGL,+BAAS,CAC9B;QACEmD,aAAa,EAAE,CAAC,CAAC,KAAKD,YADxB;QAEEnK,KAAK,EAAE,KAAKA,KAFd;QAGEyH,SAAS,EAAE,KAAKvC,QAHlB;QAIEE,YAAY,EAAE,KAAKA;MAJrB,CAD8B,EAO9BiC,YAP8B,CAAhC;MASAxH,MAAM,CAACC,IAAP,CAAYwH,cAAZ,EAA4BtE,OAA5B,CAAoC,UAACC,GAAD,EAAS;QAC3C,IAAIqE,cAAc,CAACrE,GAAD,CAAlB,EAAyBmE,QAAQ,CAAClE,YAAT,CAAsBC,MAAtB,CAA6BF,GAA7B,EAAkCqE,cAAc,CAACrE,GAAD,CAAhD;MAC1B,CAFD;MAGA,KAAK6C,QAAL,GAAgBsB,QAAhB;IACD;;;;6FAED,iBAAkBiD,UAAlB;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACU9D,OADV,GAC2D8D,UAD3D,CACU9D,OADV,EACmB+D,GADnB,GAC2DD,UAD3D,CACmBC,GADnB,EACwBC,iBADxB,GAC2DF,UAD3D,CACwBE,iBADxB,EAC2CC,WAD3C,GAC2DH,UAD3D,CAC2CG,WAD3C;;gBAAA,MAWMD,iBAAiB,KAAK,MAX5B;kBAAA;kBAAA;gBAAA;;gBAYI1N,cAAA,CAAU,wEAAV;gBAZJ;gBAAA,cAuBUoD,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACqK,WAAD,CAAf,CAvBV;gBAeqBpC,UAfrB,eAeQsC,WAfR;gBAgBQC,SAhBR,eAgBQA,SAhBR;gBAiBQC,cAjBR,eAiBQA,cAjBR;gBAkBQC,iBAlBR,eAkBQA,iBAlBR;gBAmBQC,SAnBR,eAmBQA,SAnBR;gBAoBQC,SApBR,eAoBQA,SApBR;gBAqBQC,QArBR,eAqBQA,QArBR;gBAsBQC,MAtBR,eAsBQA,MAtBR;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAyBMpO,aAAA,CAAS,6BAAT;gBAzBN;gBAAA,OAmCgBmK,oCAAG,WAAmDiD,sBAAnD,8BAA6F1D,OAA7F,EAnCnB;;cAAA;gBAAA;gBA2BqB6B,UA3BrB,cA2BQsC,WA3BR;gBA4BQC,SA5BR,cA4BQA,SA5BR;gBA6BQC,cA7BR,cA6BQA,cA7BR;gBA8BQC,iBA9BR,cA8BQA,iBA9BR;gBA+BQC,SA/BR,cA+BQA,SA/BR;gBAgCQC,SAhCR,cAgCQA,SAhCR;gBAiCQC,QAjCR,cAiCQA,QAjCR;gBAkCQC,MAlCR,cAkCQA,MAlCR;;cAAA;gBAAA;gBAAA;;cAAA;gBAsCIpO,cAAA,CAAU,4EAAV;gBAtCJ;gBAAA,OAgDcmK,oCAAG,WAAmDiD,sBAAnD,8BAA6F1D,OAA7F,EAhDjB;;cAAA;gBAAA;gBAwCmB6B,UAxCnB,eAwCMsC,WAxCN;gBAyCMC,SAzCN,eAyCMA,SAzCN;gBA0CMC,cA1CN,eA0CMA,cA1CN;gBA2CMC,iBA3CN,eA2CMA,iBA3CN;gBA4CMC,SA5CN,eA4CMA,SA5CN;gBA6CMC,SA7CN,eA6CMA,SA7CN;gBA8CMC,QA9CN,eA8CMA,QA9CN;gBA+CMC,MA/CN,eA+CMA,MA/CN;;cAAA;gBAAA,MAmDMN,SAAS,KAAKpE,OAnDpB;kBAAA;kBAAA;gBAAA;;gBAAA,MAoDU,IAAI/I,KAAJ,CAAU,sCAAV,CApDV;;cAAA;gBAAA,iCAuDS;kBACLwK,KAAK,EAAE,EADF;kBAELjJ,IAAI,EAAE,gBAFD;kBAGLoJ,YAAY,EAAE,EAHT;kBAILhD,QAAQ,EAAE,KAAKA,QAJV;kBAKLiD,UAAU,EAAVA,UALK;kBAMLxJ,WAAW,EAAE,KAAKA,WANb;kBAOL0L,GAAG,EAAHA,GAPK;kBAQLH,YAAY,EAAE,KAAKA,YARd;kBASLe,mBAAmB,EAAE;oBACnBP,SAAS,EAATA,SADmB;oBAEnBC,cAAc,EAAdA,cAFmB;oBAGnBC,iBAAiB,EAAjBA,iBAHmB;oBAInBC,SAAS,EAATA,SAJmB;oBAKnBC,SAAS,EAATA,SALmB;oBAMnBC,QAAQ,EAARA,QANmB;oBAOnBC,MAAM,EAANA;kBAPmB;gBAThB,CAvDT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;EAlC2ChG;;;;ACV7C;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMmG,aAAa,GAAG,SAAhBA,aAAgB,OAUoB;EAAA,IATxClG,QASwC,QATxCA,QASwC;EAAA,IARxCE,YAQwC,QARxCA,YAQwC;EAAA,IAPxCxG,WAOwC,QAPxCA,WAOwC;EAAA,IANxCuG,QAMwC,QANxCA,QAMwC;EAAA,IALxCI,SAKwC,QALxCA,SAKwC;EAAA,IAJxCD,gBAIwC,QAJxCA,gBAIwC;EAAA,IAHxCD,MAGwC,QAHxCA,MAGwC;EAAA,IAFxCG,WAEwC,QAFxCA,WAEwC;EAAA,IADxC2E,YACwC,QADxCA,YACwC;;EACxC,IAAI,CAAChF,QAAD,IAAa,CAACvG,WAAd,IAA6B,CAACsG,QAAlC,EAA4C;IAC1C,MAAM,IAAI1H,KAAJ,CAAU,gBAAV,CAAN;EACD;;EACD,YAAuD+H,SAAS,IAAI,EAApE;EAAA,IAAQ1B,MAAR,SAAQA,MAAR;EAAA,IAAgBuF,UAAhB,SAAgBA,UAAhB;EAAA,IAA4B5C,QAA5B,SAA4BA,QAA5B;EAAA,IAAsCF,YAAtC,SAAsCA,YAAtC;;EACA,QAAQ1H,WAAR;IACE,KAAK9E,YAAL;MACE,OAAO,IAAIyO,aAAJ,CAAkBrD,QAAlB,EAA4BC,QAA5B,EAAsCC,YAAtC,EAAoDxG,WAApD,EAAiEyG,MAAjE,EAAyEC,gBAAzE,EAA2FC,SAA3F,EAAsGC,WAAtG,CAAP;;IACF,KAAK1L,cAAL;MACE,OAAO,IAAIuO,eAAJ,CAAoBnD,QAApB,EAA8BC,QAA9B,EAAwCC,YAAxC,EAAsDxG,WAAtD,EAAmEyG,MAAnE,EAA2EC,gBAA3E,EAA6FC,SAA7F,EAAwGC,WAAxG,CAAP;;IACF,KAAK1L,YAAL;MACE,OAAO,IAAI+P,aAAJ,CAAkB3E,QAAlB,EAA4BC,QAA5B,EAAsCC,YAAtC,EAAoDxG,WAApD,EAAiEyG,MAAjE,EAAyEC,gBAAzE,EAA2FC,SAA3F,EAAsGC,WAAtG,CAAP;;IACF,KAAK1L,YAAL;MACE,OAAO,IAAI6P,aAAJ,CAAkBzE,QAAlB,EAA4BC,QAA5B,EAAsCC,YAAtC,EAAoDxG,WAApD,EAAiEyG,MAAjE,EAAyEC,gBAAzE,EAA2FC,SAA3F,EAAsGC,WAAtG,CAAP;;IACF,KAAK1L,aAAL;MACE,OAAO,IAAIoN,cAAJ,CAAmBhC,QAAnB,EAA6BC,QAA7B,EAAuCC,YAAvC,EAAqDxG,WAArD,EAAkEyG,MAAlE,EAA0EC,gBAA1E,EAA4FC,SAA5F,EAAuGC,WAAvG,CAAP;;IACF,KAAK1L,kBAAL;MACE,IAAI,CAAC+J,MAAD,IAAW,CAACuF,UAAhB,EAA4B,MAAM,IAAI5L,KAAJ,CAAU,gBAAV,CAAN;MAC5B,OAAO,IAAI2N,8BAAJ,CAAwBjG,QAAxB,EAAkCC,QAAlC,EAA4CC,YAA5C,EAA0DxG,WAA1D,EAAuEyG,MAAvE,EAA+EC,gBAA/E,EAAiGC,SAAjG,EAA4GC,WAA5G,CAAP;;IACF,KAAK1L,WAAL;IACA,KAAKA,YAAL;IACA,KAAKA,cAAL;IACA,KAAKA,aAAL;IACA,KAAKA,WAAL;IACA,KAAKA,UAAL;IACA,KAAKA,oBAAL;IACA,KAAKA,SAAL;MACE,IAAI,CAAC+J,MAAL,EAAa,MAAM,IAAIrG,KAAJ,CAAU,gBAAV,CAAN;;MACb,IAAIgJ,QAAQ,IAAIF,YAAhB,EAA8B;QAC5B,OAAO,IAAI4C,gBAAJ,CAAqBhE,QAArB,EAA+BC,QAA/B,EAAyCC,YAAzC,EAAuDxG,WAAvD,EAAoEyG,MAApE,EAA4EC,gBAA5E,EAA8FC,SAA9F,EAAyGC,WAAzG,CAAP;MACD;;MACD,OAAO,IAAImD,UAAJ,CAAezD,QAAf,EAAyBC,QAAzB,EAAmCC,YAAnC,EAAiDxG,WAAjD,EAA8DyG,MAA9D,EAAsEC,gBAAtE,EAAwFC,SAAxF,EAAmGC,WAAnG,CAAP;;IACF,KAAK1L,cAAL;MACE,OAAO,IAAIoQ,eAAJ,CAAoBhF,QAApB,EAA8BC,QAA9B,EAAwCC,YAAxC,EAAsDxG,WAAtD,EAAmEyG,MAAnE,EAA2EC,gBAA3E,EAA6FC,SAA7F,EAAwGC,WAAxG,EAAqH2E,YAArH,CAAP;;IACF;MACE,MAAM,IAAI3M,KAAJ,CAAU,oBAAV,CAAN;EA9BJ;AAgCD,CA/CD;;AAiDA,qDAAe4N,aAAf;;ACyBO,IAAKC,YAAZ;;WAAYA;EAAAA,aAAAA;EAAAA,aAAAA;EAAAA,aAAAA;GAAAA,iBAAAA;;ACtFZ,MAAM,wBAA4B;;;ACAlC,MAAM,mCAA4B;;ACAlC,MAAM,uCAA4B;;ACAlC;AAEA;AAEO,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,OAAD;EAAA,OACnC,IAAIxO,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;IAC/B,IAAMuO,KAAK,aAAMD,OAAN,UAAX;;IAEA,IAAI,mBAAmB/K,MAAM,CAAC+B,SAA9B,EAAyC;MACvC;MACA8I,oDAAQ,CAACG,KAAD,EAAQ;QACdC,KADc,mBACN;UACN7O,aAAA,CAAS,qGAAT;UACAI,OAAO,CAACiE,SAAD,CAAP;QACD,CAJa;QAKdyK,UALc,wBAKD;UACX9O,aAAA,CAAS,qCAAT;UACAI,OAAO,CAACiE,SAAD,CAAP;QACD,CARa;QASd0K,MATc,oBASL;UACP/O,aAAA,CAAS,0CAAT;UACAI,OAAO,CAACiE,SAAD,CAAP;QACD,CAZa;QAad2K,WAbc,yBAaA;UACZhP,aAAA,CAAS,6BAAT;QACD,CAfa;QAgBdiP,OAhBc,qBAgBJ;UACRjP,aAAA,CAAS,2CAAT;QACD,CAlBa;QAmBdkP,OAnBc,qBAmBJ;UACRlP,aAAA,CAAS,+DAAT;UACAK,MAAM,CAAC,IAAIM,KAAJ,CAAU,gBAAV,CAAD,CAAN;QACD,CAtBa;QAuBdH,KAvBc,iBAuBRA,MAvBQ,EAuBD;UACXR,cAAA,CAAU,2CAAV,EAAuDQ,MAAvD;UACAH,MAAM,CAACG,MAAD,CAAN;QACD;MA1Ba,CAAR,CAAR;IA4BD,CA9BD,MA8BO;MACLH,MAAM,CAAC,IAAIM,KAAJ,CAAU,mCAAV,CAAD,CAAN;IACD;EACF,CApCD,CADmC;AAAA,CAA9B;;;;;ACFP;;IAKqBwO;EAKnB,uBAAYC,MAAZ,EAA6BC,QAA7B,EAAgD;IAAA;;IAAA,yCAJxB,IAIwB;;IAAA,2CAFrC,EAEqC;;IAC9C,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,QAAL,GAAgBA,QAAhB;EACD;;;;WAED,0BAAiBC,OAAjB,EAAkE;MAChE,IAAI,KAAKF,MAAT,EAAiB;QACf,IAAIE,OAAO,CAACpN,IAAR,KAAiB1C,8BAAjB,IAAmD,KAAK6P,QAA5D,EAAsE;UACpEC,OAAO,CAACpN,IAAR,IAAgB,KAAKmN,QAArB;QACD;;QACD,OAAO,KAAKD,MAAL,CAAYG,gBAAZ,CAA6BD,OAA7B,CAAP;MACD;IACF;;;WAED,2BAAkBE,EAAlB,EAAgD;MAC9C,IAAIA,EAAJ,EAAQ;QACNA,EAAE,CAACC,MAAH;MACD;IACF;;;;;;;;AC9BH,MAAM,wBAA4B;;ACAlC,MAAM,gCAA4B;;;;;;;ACAlC;AACA;AACA;AAGA;AACA;;IAEMM;EAOJ,uBAAYC,SAAZ,EAA+B;IAAA;;IAAA,uDANqC1R,4CAMrC;;IAAA,gDAJP,KAIO;;IAAA,mDAFJ,iCAEI;;IAC7B,KAAK2R,gBAAL,GAAwBD,SAAxB;EACD;;;;WAED,gBAAO;MACL,IAAME,OAAO,GAAG3J,eAAe,EAA/B;MACA,IAAM4J,qBAAqB,GAAG1M,gBAAgB,CAACnF,4CAAD,CAA9C;;MACA,IAAI4R,OAAO,IAAIC,qBAAf,EAAsC;QACpC;QACA,KAAKC,oBAAL,GAA4B9R,4CAA5B;MACD,CAHD,MAGO;QACL;QACA,KAAK8R,oBAAL,GAA4B9R,qCAA5B;MACD;;MACD,KAAK+R,aAAL,GAAqB,IAArB;IACD;;;;mGAED,iBAAwBtK,MAAxB,EAA8C8E,KAA9C;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,KAAKwF,aADZ;kBAAA;kBAAA;gBAAA;;gBAAA,MACiC,IAAI1P,KAAJ,CAAU,kCAAV,CADjC;;cAAA;gBAAA,MAEM,KAAKyP,oBAAL,KAA8B9R,qCAFpC;kBAAA;kBAAA;gBAAA;;gBAGUgS,OAHV,GAGoBR,8CAAS,CAACjF,KAAD,CAH7B;gBAIU0F,UAJV,GAIuBD,OAAO,CAACjP,QAAR,CAAiB,KAAjB,CAJvB;gBAKUmP,YALV,GAKyBd,sCAAS,CAACY,OAAD,CAAT,CAAmBjP,QAAnB,CAA4B,KAA5B,CALzB;gBAAA;gBAAA,OAM0BwO,gDAAW,CAACU,UAAD,EAAaxK,MAAb,CANrC;;cAAA;gBAMU0K,OANV;gBAAA;gBAAA,OAO6Bd,iCAAI,CAACW,OAAD,EAAUR,8CAAS,CAACW,OAAD,CAAnB,CAPjC;;cAAA;gBAOU3C,SAPV,iBAOgEzM,QAPhE,CAOyE,KAPzE;gBAAA;gBAAA,OAQUiL,qCAAI,WAAI,KAAK2D,gBAAT,iBAAuC;kBAAE7J,GAAG,EAAEoK,YAAP;kBAAqB/P,IAAI,EAAEgQ,OAA3B;kBAAoC3C,SAAS,EAATA;gBAApC,CAAvC,CARd;;cAAA;gBAAA;gBAAA;;cAAA;gBAUIlK,MAAM,CAAC8M,YAAP,CAAoB5M,OAApB,uBAA2C+G,KAA3C,GAAoDzH,IAAI,CAACqD,SAAL,CAAeV,MAAf,CAApD;;cAVJ;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;sGAcA,kBAA2B8E,KAA3B;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO,KAAKwF,aADZ;kBAAA;kBAAA;gBAAA;;gBAAA,MACiC,IAAI1P,KAAJ,CAAU,kCAAV,CADjC;;cAAA;gBAAA,MAEM,KAAKyP,oBAAL,KAA8B9R,qCAFpC;kBAAA;kBAAA;gBAAA;;gBAGUgS,OAHV,GAGoBR,8CAAS,CAACjF,KAAD,CAH7B;gBAIU0F,UAJV,GAIuBD,OAAO,CAACjP,QAAR,CAAiB,KAAjB,CAJvB;gBAKUmP,YALV,GAKyBd,sCAAS,CAACY,OAAD,CAAT,CAAmBjP,QAAnB,CAA4B,KAA5B,CALzB;gBAAA;gBAAA,OAMiE8I,oCAAG,WAAI,KAAK8F,gBAAT,4BAA2CO,YAA3C,EANpE;;cAAA;gBAMUC,OANV;gBAAA;gBAAA,OAO+Bb,gDAAW,CAAeW,UAAf,EAA2BE,OAAO,CAACxJ,OAAnC,CAP1C;;cAAA;gBAOU0J,aAPV;gBAAA,kCAQWA,aARX;;cAAA;gBAUQA,YAVR,GAUuB/M,MAAM,CAAC8M,YAAP,CAAoBE,OAApB,uBAA2C/F,KAA3C,EAVvB;gBAAA,kCAWSzH,IAAI,CAACC,KAAL,CAAWsN,YAAY,IAAI,IAA3B,CAXT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;WAcA,kCAAyB9F,KAAzB,EAA8C;MAC5C,IAAI,CAAC,KAAKwF,aAAV,EAAyB,MAAM,IAAI1P,KAAJ,CAAU,kCAAV,CAAN;;MACzB,IAAI,KAAKyP,oBAAL,KAA8B9R,4CAAlC,EAAgF;QAC9EsF,MAAM,CAAC8M,YAAP,CAAoB3M,UAApB,uBAA8C8G,KAA9C;MACD,CAJ2C,CAK5C;;IACD;;;WAED,qCAAkC;MAChC,IAAI,CAAC,KAAKwF,aAAV,EAAyB,MAAM,IAAI1P,KAAJ,CAAU,kCAAV,CAAN;;MACzB,IAAI,KAAKyP,oBAAL,KAA8B9R,4CAAlC,EAAgF;QAC9E,IAAMuS,cAAc,GAAG7N,MAAM,CAACC,IAAP,CAAYW,MAAM,CAAC8M,YAAnB,CAAvB;QACAG,cAAc,CAAC1K,OAAf,CAAuB,UAACC,GAAD,EAAS;UAC9B,IAAIA,GAAG,CAAC0K,UAAJ,CAAe,cAAf,CAAJ,EAAoC;YAClClN,MAAM,CAAC8M,YAAP,CAAoB3M,UAApB,CAA+BqC,GAA/B;UACD;QACF,CAJD;MAKD,CAT+B,CAUhC;;IACD;;;;;;AAGH,0DAAe2J,aAAf;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AAEA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;;IAEMkB;EAoBJ,0BAemB;IAAA,IAdjBtC,OAciB,QAdjBA,OAciB;IAAA,wBAbjBuC,OAaiB;IAAA,IAbjBA,OAaiB,6BAbPlU,wDAaO;IAAA,8BAZjBmU,aAYiB;IAAA,IAZjBA,aAYiB,mCAZD,KAYC;IAAA,6BAXjBC,YAWiB;IAAA,IAXjBA,YAWiB,kCAXF,KAWE;IAAA,iCAVjB3I,gBAUiB;IAAA,IAVjBA,gBAUiB,sCAVE,KAUF;IAAA,iCATjB4I,gBASiB;IAAA,IATjBA,gBASiB,sCATE,UASF;IAAA,uBARjBC,MAQiB;IAAA,IARjBA,MAQiB,4BARR,eAQQ;IAAA,uBAPjB9I,MAOiB;IAAA,IAPjBA,MAOiB,4BAPRrK,aAOQ;IAAA,iCANjB6J,yBAMiB;IAAA,IANjBA,yBAMiB,sCANW,KAMX;IAAA,IALjBkB,aAKiB,QALjBA,aAKiB;IAAA,4BAJjBqI,WAIiB;IAAA,IAJjBA,WAIiB,iCAJH,yBAIG;IAAA,iCAHjBtB,gBAGiB;IAAA,IAHjBA,gBAGiB,sCAHE,iCAGF;IAAA,IAFjBuB,UAEiB,QAFjBA,UAEiB;IAAA,IADjBpC,MACiB,QADjBA,MACiB;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IAAA;;IACjB,KAAKiB,aAAL,GAAqB,KAArB;IACA,IAAMoB,OAAO,GAAG,IAAIvL,GAAJ,CAAQyI,OAAR,CAAhB;IACA,KAAK+C,MAAL,GAAc;MACZ/C,OAAO,EAAE7N,YAAY,CAAC2Q,OAAD,CADT;;MAEZ,IAAIlJ,YAAJ,GAAmB;QACjB,iBAAU,KAAKoG,OAAf,SAAyB0C,gBAAzB;MACD,CAJW;;MAKZ5I,gBAAgB,EAAhBA,gBALY;MAMZD,MAAM,EAANA,MANY;MAOZR,yBAAyB,EAAzBA,yBAPY;MAQZkB,aAAa,EAAbA;IARY,CAAd;IAUA,IAAMyI,KAAK,GAAG,IAAIZ,oBAAJ,CAAU;MACtBK,YAAY,EAAZA,YADsB;MAEtBQ,YAAY,EAAEL,WAFQ;MAGtBM,SAAS,YAAKtS,UAAU,CAAC2R,OAAD,CAAf,eAHa;MAItBY,UAAU,YAAKvS,UAAU,CAAC2R,OAAD,CAAf,cAJY;MAKtBA,OAAO,EAAPA;IALsB,CAAV,CAAd;IAOAH,4BAAA,CAAgBO,MAAhB;IACA,KAAKK,KAAL,GAAaA,KAAb;IACA,KAAKK,iBAAL,GAAyB,IAAIjV,8BAAJ,CAAsB;MAAEmU,OAAO,EAAEM,UAAU,IAAIN,OAAzB;MAAkCe,YAAY,EAAEnT,YAAY,CAACoS,OAAD;IAA5D,CAAtB,CAAzB;IACA,IAAIC,aAAJ,EAAmBnR,kBAAA,GAAnB,KACKA,mBAAA;IACL,KAAKoS,aAAL,GAAqB,IAAIrC,mBAAJ,CAAkBE,gBAAlB,CAArB;IACA,KAAKoC,aAAL,GAAqB,IAAIlD,aAAJ,CAAkBC,MAAlB,EAA0BoC,UAA1B,CAArB;EACD;;;;;sFAED;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,gEAAoF,EAApF,uBAAac,MAAb,EAAaA,MAAb,6BAAsB,KAAtB,wCAA6BC,QAA7B,EAA6BA,QAA7B,+BAAwC,KAAxC,8CAA+CC,YAA/C,EAA+CA,YAA/C,mCAA8D,KAA9D;gBACE,KAAKJ,aAAL,CAAmBK,IAAnB;;gBADF,KAEMF,QAFN;kBAAA;kBAAA;gBAAA;;gBAGI,KAAKlC,aAAL,GAAqB,IAArB;gBAHJ;;cAAA;gBAAA,IAMOiC,MANP;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAOkCI,KAAK,WAAI,KAAKhB,MAAL,CAAY/C,OAAhB,YAAgC;kBAAEgE,KAAK,EAAE;gBAAT,CAAhC,CAPvC;;cAAA;gBAOUC,eAPV;;gBAAA,KAQQA,eAAe,CAACC,EARxB;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA;gBAAA,OAUcnE,qBAAqB,CAAC,KAAKgD,MAAL,CAAY/C,OAAb,CAVnC;;cAAA;gBAWQ,KAAK0B,aAAL,GAAqB,IAArB;gBAXR;;cAAA;gBAAA;gBAAA;gBAcQrQ,aAAA;;cAdR;gBAAA;gBAAA;;cAAA;gBAAA,MAiBY,IAAIW,KAAJ,CAAU,qDAAV,CAjBZ;;cAAA;gBAAA,IAoBO6R,YApBP;kBAAA;kBAAA;gBAAA;;gBAAA,KAsBQ9M,SAAS,EAtBjB;kBAAA;kBAAA;gBAAA;;gBAuBM,KAAK2K,aAAL,GAAqB,IAArB;gBAvBN;;cAAA;gBAAA;gBAAA,OA0BU,KAAKyC,yBAAL,EA1BV;;cAAA;gBAAA;;cAAA;gBA6BE,KAAKzC,aAAL,GAAqB,IAArB;;cA7BF;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;8FAgCA,kBAAmB0C,IAAnB;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACE;gBACAC,OAAO,CAACC,IAAR,CAAa,SAAb;gBAEE3K,QAJJ,GAcMyK,IAdN,CAIIzK,QAJJ,EAKIvG,WALJ,GAcMgR,IAdN,CAKIhR,WALJ,EAMIsG,QANJ,GAcM0K,IAdN,CAMI1K,QANJ,EAOIK,SAPJ,GAcMqK,IAdN,CAOIrK,SAPJ,EAQIrG,IARJ,GAcM0Q,IAdN,CAQI1Q,IARJ,EASIC,eATJ,GAcMyQ,IAdN,CASIzQ,eATJ,EAUIqG,WAVJ,GAcMoK,IAdN,CAUIpK,WAVJ,EAWI2E,YAXJ,GAcMyF,IAdN,CAWIzF,YAXJ,uBAcMyF,IAdN,CAYIG,YAZJ,EAYIA,YAZJ,mCAYmB1E,kBAZnB,6CAcMuE,IAdN,CAaIK,aAbJ,EAaIA,aAbJ,oCAaoB,KAbpB;gBAeEpT,aAAA,CAAS,YAAT,EAAuBsI,QAAvB;;gBAfF,IAgBO,KAAK+H,aAhBZ;kBAAA;kBAAA;gBAAA;;gBAAA,MAiBU,IAAI1P,KAAJ,CAAU,qBAAV,CAjBV;;cAAA;gBAAA,MAmBM2M,YAAY,IAAIvL,WAAW,KAAK9E,cAnBtC;kBAAA;kBAAA;gBAAA;;gBAAA,MAmB4D,IAAI0D,KAAJ,CAAU,mDAAV,CAnB5D;;cAAA;gBAoBQ0S,YApBR,GAoBsC9E,cAAa,CAAC;kBAChDxM,WAAW,EAAXA,WADgD;kBAEhDsG,QAAQ,EAARA,QAFgD;kBAGhDC,QAAQ,EAARA,QAHgD;kBAIhDC,YAAY,EAAE,KAAKmJ,MAAL,CAAYnJ,YAJsB;kBAKhDE,gBAAgB,EAAE,KAAKiJ,MAAL,CAAYjJ,gBALkB;kBAMhDC,SAAS,EAATA,SANgD;kBAOhDF,MAAM,EAAE,KAAKkJ,MAAL,CAAYlJ,MAP4B;kBAQhDG,WAAW,EAAXA,WARgD;kBAShD2E,YAAY,EAAZA;gBATgD,CAAD,CApBnD;;gBAAA,MAgCMjL,IAAI,IAAIC,eAhCd;kBAAA;kBAAA;gBAAA;;gBAAA,wBAiC0DF,wBAAwB,CAACC,IAAD,EAAOC,eAAP,CAjClF,EAiCY9B,KAjCZ,yBAiCYA,KAjCZ,EAiCmB+B,cAjCnB,yBAiCmBA,cAjCnB,EAiCmCQ,kBAjCnC,yBAiCmCA,kBAjCnC;;gBAAA,KAkCQvC,KAlCR;kBAAA;kBAAA;gBAAA;;gBAAA,MAkCqB,IAAIG,KAAJ,CAAUH,KAAV,CAlCrB;;cAAA;gBAmC0BgJ,WAnC1B,GAmCsEjH,cAnCtE,CAmCYkH,YAnCZ,EAmCiDC,OAnCjD,GAmCsEnH,cAnCtE,CAmCuCoH,QAnCvC,EAmC6DC,IAnC7D,qCAmCsErH,cAnCtE,mBAoCI;;gBACA+Q,WAAW,GAAG;kBAAE9J,WAAW,EAAXA,WAAL;kBAAkBE,OAAO,EAAPA;gBAAlB,GAA8BE,IAA9B;kBAAoCzG,KAAK,EAAEJ;gBAA3C,EAAX;gBArCJ;gBAAA;;cAAA;gBAuCI,KAAKqP,aAAL,CAAmBmB,yBAAnB;gBAvCJ;gBAAA,OAwCU,KAAKnB,aAAL,CAAmBoB,iBAAnB,CAAqC;kBAAEC,MAAM,EAAE/U,0BAAV;kBAAsCqU,IAAI,EAAJA;gBAAtC,CAArC,EAAmFM,YAAY,CAACtK,KAAhG,CAxCV;;cAAA;gBAAA;gBAAA,OAyCwBsK,YAAY,CAACK,iBAAb,CAA+B;kBACjD1L,yBAAyB,EAAE,KAAK0J,MAAL,CAAY1J,yBADU;kBAEjDkB,aAAa,EAAE,KAAKwI,MAAL,CAAYxI;gBAFsB,CAA/B,CAzCxB;;cAAA;gBAyCIoK,WAzCJ;;gBAAA,MA6CQ,KAAK5B,MAAL,CAAYlJ,MAAZ,KAAuBrK,gBA7C/B;kBAAA;kBAAA;gBAAA;;gBAAA,kCA6CwD,IA7CxD;;cAAA;gBAAA;gBAAA,OAgDyBkV,YAAY,CAACM,WAAb,CAAyBL,WAAzB,CAhDzB;;cAAA;gBAgDQxR,QAhDR;;gBAAA,KAiDMwL,YAjDN;kBAAA;kBAAA;gBAAA;;gBAkDUsG,MAlDV,GAkDmB,KAAKvB,aAAL,CAAmB9C,gBAAnB,CAAoC;kBACjDrN,IAAI,EAAE1C,8BAA8BC;gBADa,CAApC,CAlDnB;gBAAA;gBAAA,OAqDuD,KAAKuS,iBAAL,CAAuB6B,cAAvB,CAAsC;kBAAEvL,QAAQ,EAARA,QAAF;kBAAYiD,UAAU,EAAEzJ,QAAQ,CAACyJ;gBAAjC,CAAtC,CArDvD;;cAAA;gBAAA;gBAqDYuI,kBArDZ,yBAqDYA,kBArDZ;gBAqDgCC,YArDhC,yBAqDgCA,YArDhC;gBAsDI,KAAK1B,aAAL,CAAmB2B,iBAAnB,CAAqCJ,MAArC;gBACMK,QAvDV,GAuDqB,KAAK5B,aAAL,CAAmB9C,gBAAnB,CAAoC;kBACnDrN,IAAI,EAAE1C,8BAA8BE;gBADe,CAApC,CAvDrB;gBAAA;gBAAA,OA0D8B,KAAKiS,KAAL,CAAWuC,gBAAX,CAA4BJ,kBAA5B,EAAgDC,YAAhD,EAA8D;kBAAEzL,QAAQ,EAARA,QAAF;kBAAYiD,UAAU,EAAEzJ,QAAQ,CAACyJ;gBAAjC,CAA9D,EAA6G,IAA7G,CA1D9B;;cAAA;gBA0DU4I,WA1DV;gBA2DI,KAAK9B,aAAL,CAAmB2B,iBAAnB,CAAqCC,QAArC;gBACMG,GA5DV,GA4DgB;kBACVtS,QAAQ,EAAE,0CACLA,QADG,GAEHwR,WAFG;gBADE,CA5DhB;;gBAAA,MAkEQ,OAAOa,WAAP,KAAuB,QAlE/B;kBAAA;kBAAA;gBAAA;;gBAAA,MAmEY,IAAIxT,KAAJ,CAAU,uCAAV,CAnEZ;;cAAA;gBAqEU0T,SArEV,GAqE+B;kBACzBC,UAAU,EAAEH,WAAW,CAACG,UADC;kBAEzBC,MAAM,EAAE;oBACNC,SAAS,EAAEL,WAAW,CAACM,CADjB;oBAENC,SAAS,EAAEP,WAAW,CAACQ;kBAFjB,CAFiB;kBAMzBC,aAAa,EAAET,WAAW,CAACU,OANF;kBAOzBC,UAAU,EAAE,IAPa;kBAQzBC,aAAa,EAAE;gBARU,CArE/B;gBAAA,4EA+EgBX,GA/EhB,GA+EwBC,SA/ExB;;cAAA;gBAiFMW,IAjFN,GAiFa,IAjFb;;gBAAA,MAmFM5B,aAAa,IAAIF,YAAY,KAAK1E,kBAnFxC;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OAoFyC,KAAKwD,iBAAL,CAAuB6B,cAAvB,CAAsC;kBAAEvL,QAAQ,EAARA,QAAF;kBAAYiD,UAAU,EAAEzJ,QAAQ,CAACyJ;gBAAjC,CAAtC,CApFzC;;cAAA;gBAAA;gBAoFYuI,mBApFZ,0BAoFYA,kBApFZ;gBAAA;gBAAA,OAqF6B9C,sCAAS,CAAC8C,mBAAD,EAAqBxL,QAArB,EAA+BxG,QAAQ,CAACyJ,UAAxC,CArFtC;;cAAA;gBAqFU2J,UArFV;gBAsFIC,UAAU,GAAGD,UAAU,SAAV,IAAAA,UAAU,WAAV,6BAAAA,UAAU,CAAEE,SAAZ,kGAAuBnS,IAAvB,0EAA6BC,MAA7B,GACT;kBAAEuR,CAAC,EAAES,UAAF,aAAEA,UAAF,iDAAEA,UAAU,CAAEE,SAAd,2DAAE,uBAAuBnS,IAAvB,CAA4B,CAA5B,EAA+BuR,SAApC;kBAA+CG,CAAC,EAAEO,UAAF,aAAEA,UAAF,iDAAEA,UAAU,CAAEE,SAAd,2DAAE,uBAAuBnS,IAAvB,CAA4B,CAA5B,EAA+ByR;gBAAjF,CADS,GAETrQ,SAFJ;;cAtFJ;gBAAA,eA0FU6O,YA1FV;gBAAA,kCA2FS1E,kBA3FT,yBA8FSA,mBA9FT,yBAiGSA,kBAjGT;gBAAA;;cAAA;gBA4FMwG,IAAI,GAAG,CAACG,UAAR;gBA5FN;;cAAA;gBA+FMH,IAAI,GAAG,IAAP;gBA/FN;;cAAA;gBAkGMA,IAAI,GAAG,KAAP;gBAlGN;;cAAA;gBAAA,MAqGY,IAAIrU,KAAJ,CAAU,sBAAV,CArGZ;;cAAA;gBAAA,KAuGmBqU,IAvGnB;kBAAA;kBAAA;gBAAA;;gBAAA,eAwGO3Q,SAxGP;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA,OAyGY,KAAKiR,WAAL,CACJhN,QADI,EAEJxG,QAAQ,CAACyJ,UAFL,EAGJ;kBAAEsC,WAAW,EAAE/L,QAAQ,CAACyJ;gBAAxB,CAHI,EAIJ+H,WAAW,CAAC5J,OAAZ,IAAuB4J,WAAW,CAAC9J,WAJ/B,EAKJ1H,QAAQ,CAACuM,mBALL,CAzGZ;;cAAA;gBAAA;;cAAA;gBAuGQgG,QAvGR;gBAgHE;gBACArB,OAAO,CAACuC,OAAR,CAAgB,SAAhB;gBAjHF,4EAmHOlB,QAnHP;kBAoHIc,UAAU,EAAVA,UApHJ;kBAqHIrT,QAAQ,EAAE,0CACLA,QADG,GAEHwR,WAFG;gBArHZ;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;uGA4HA,kBACEP,IADF;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAGE;gBACAC,OAAO,CAACC,IAAR,CAAa,SAAb,EAJF,CAKE;;gBACQuC,qBANV,GAM2IzC,IAN3I,CAMUyC,qBANV,EAMiCC,kBANjC,GAM2I1C,IAN3I,CAMiC0C,kBANjC,EAMqDC,uBANrD,GAM2I3C,IAN3I,CAMqD2C,uBANrD,wBAM2I3C,IAN3I,CAM8EG,YAN9E,EAM8EA,YAN9E,oCAM6F1E,kBAN7F,+CAM2IuE,IAN3I,CAMiHK,aANjH,EAMiHA,aANjH,qCAMiI,KANjI;;gBAAA,IAOO,KAAK/C,aAPZ;kBAAA;kBAAA;gBAAA;;gBAAA,MAQU,IAAI1P,KAAJ,CAAU,qBAAV,CARV;;cAAA;gBAAA,MAUM,CAAC6U,qBAAD,IAA0B,CAACC,kBAA3B,IAAiD,CAACE,KAAK,CAACC,OAAN,CAAcF,uBAAd,CAVxD;kBAAA;kBAAA;gBAAA;;gBAAA,MAWU,IAAI/U,KAAJ,CAAU,gBAAV,CAXV;;cAAA;gBAAA,MAaM6U,qBAAqB,KAAKvX,qCAA1B,IAAmEyX,uBAAuB,CAACxS,MAAxB,KAAmC,CAb5G;kBAAA;kBAAA;gBAAA;;gBAAA,MAcU,IAAIvC,KAAJ,CAAU,mDAAV,CAdV;;cAAA;gBAgBQkV,gBAhBR,GAgB6D,EAhB7D;gBAiBQC,gBAjBR,GAiBkD,EAjBlD;gBAAA,uCAkBkCJ,uBAlBlC;gBAAA;;gBAAA;;cAAA;gBAAA;kBAAA;kBAAA;gBAAA;;gBAkBaK,iBAlBb;gBAmBY1N,QAnBZ,GAmB+F0N,iBAnB/F,CAmBY1N,QAnBZ,EAmBsBtG,WAnBtB,GAmB+FgU,iBAnB/F,CAmBsBhU,WAnBtB,EAmBmCuG,QAnBnC,GAmB+FyN,iBAnB/F,CAmBmCzN,QAnBnC,EAmB6CI,SAnB7C,GAmB+FqN,iBAnB/F,CAmB6CrN,SAnB7C,EAmBwDrG,IAnBxD,GAmB+F0T,iBAnB/F,CAmBwD1T,IAnBxD,EAmB8DC,eAnB9D,GAmB+FyT,iBAnB/F,CAmB8DzT,eAnB9D,EAmB+EqG,WAnB/E,GAmB+FoN,iBAnB/F,CAmB+EpN,WAnB/E;gBAoBU0K,YApBV,GAoBwC9E,cAAa,CAAC;kBAChDxM,WAAW,EAAXA,WADgD;kBAEhDsG,QAAQ,EAARA,QAFgD;kBAGhDC,QAAQ,EAARA,QAHgD;kBAIhDC,YAAY,EAAE,KAAKmJ,MAAL,CAAYnJ,YAJsB;kBAKhDE,gBAAgB,EAAE,KAAKiJ,MAAL,CAAYjJ,gBALkB;kBAMhDC,SAAS,EAATA,SANgD;kBAOhDF,MAAM,EAAE,KAAKkJ,MAAL,CAAYlJ,MAP4B;kBAQhDG,WAAW,EAAXA;gBARgD,CAAD,CApBrD,EA8BI;;gBACI2K,YA/BR;;gBAAA,MAgCQjR,IAAI,IAAIC,eAhChB;kBAAA;kBAAA;gBAAA;;gBAAA,yBAiC4DF,wBAAwB,CAACC,IAAD,EAAOC,eAAP,CAjCpF,EAiCc9B,KAjCd,0BAiCcA,KAjCd,EAiCqB+B,cAjCrB,0BAiCqBA,cAjCrB,EAiCqCQ,kBAjCrC,0BAiCqCA,kBAjCrC;;gBAAA,KAkCUvC,KAlCV;kBAAA;kBAAA;gBAAA;;gBAAA,MAkCuB,IAAIG,KAAJ,CAAUH,KAAV,CAlCvB;;cAAA;gBAmC4BgJ,YAnC5B,GAmCwEjH,cAnCxE,CAmCckH,YAnCd,EAmCmDC,QAnCnD,GAmCwEnH,cAnCxE,CAmCyCoH,QAnCzC,EAmC+DC,IAnC/D,qCAmCwErH,cAnCxE,eAoCM;;gBACA+Q,YAAW,GAAG;kBAAE9J,WAAW,EAAXA,YAAL;kBAAkBE,OAAO,EAAPA;gBAAlB,GAA8BE,IAA9B;kBAAoCzG,KAAK,EAAEJ;gBAA3C,EAAX;gBArCN;gBAAA;;cAAA;gBAuCM,KAAKqP,aAAL,CAAmBmB,yBAAnB;gBAvCN;gBAAA,OAwCY,KAAKnB,aAAL,CAAmBoB,iBAAnB,CAAqC;kBAAEC,MAAM,EAAE/U,oCAAV;kBAAgDqU,IAAI,EAAJA;gBAAhD,CAArC,EAA6FM,YAAY,CAACtK,KAA1G,CAxCZ;;cAAA;gBAAA;gBAAA,OAyC0BsK,YAAY,CAACK,iBAAb,CAA+B;kBACjD1L,yBAAyB,EAAE,KAAK0J,MAAL,CAAY1J,yBADU;kBAEjDkB,aAAa,EAAE,KAAKwI,MAAL,CAAYxI;gBAFsB,CAA/B,CAzC1B;;cAAA;gBAyCMoK,YAzCN;;gBAAA,MA6CU,KAAK5B,MAAL,CAAYlJ,MAAZ,KAAuBrK,gBA7CjC;kBAAA;kBAAA;gBAAA;;gBAAA,kCA6C0D,IA7C1D;;cAAA;gBA+CI;gBAEA0X,gBAAgB,CAACG,IAAjB,CAAsB3C,YAAY,CAACM,WAAb,CAAyBL,YAAzB,CAAtB;gBACAwC,gBAAgB,CAACE,IAAjB,CAAsB1C,YAAtB;;cAlDJ;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;;gBAAA;;cAAA;gBAAA;;gBAAA;;gBAAA;;cAAA;gBAAA;gBAAA,OAoD+BnT,OAAO,CAAC8V,GAAR,CAAYJ,gBAAZ,CApD/B;;cAAA;gBAoDQK,cApDR;gBAqDQC,aArDR,GAqDwBD,cAAc,CAACE,GAAf,CAAmB,UAACtU,QAAD;kBAAA,0BAAC,uBAAmBA,QAApB;oBAA8BuU,iBAAiB,EAAEZ;kBAAjD;gBAAA,CAAnB,CArDxB;gBAsDQa,uBAtDR,GAsDkC;kBAAEC,aAAa,EAAE,EAAjB;kBAAqBC,gBAAgB,EAAE,EAAvC;kBAA2C3I,WAAW,EAAE;gBAAxD,CAtDlC;gBAuDQ4I,qBAvDR,GAuDgC,EAvDhC;gBAwDMC,mBAxDN,GAwD4B,EAxD5B;gBAyDMrI,mBAzDN,GAyD4B,EAzD5B;;gBA0DE,KAASsI,KAAT,GAAiB,CAAjB,EAAoBA,KAAK,GAAGjB,uBAAuB,CAACxS,MAApD,EAA4DyT,KAAK,IAAI,CAArE,EAAwE;kBAChErD,WADgE,GAClDwC,gBAAgB,CAACa,KAAD,CADkC;kBAE9DjN,OAF8D,GAErC4J,WAFqC,CAE9D5J,OAF8D,EAErDF,WAFqD,GAErC8J,WAFqC,CAErD9J,WAFqD;kBAGhE1H,QAHgE,GAGrDqU,aAAa,CAACQ,KAAD,CAHwC;kBAItEL,uBAAuB,CAACC,aAAxB,CAAsCP,IAAtC,CAA2C;oBAAEnI,WAAW,EAAE/L,QAAQ,CAACyJ,UAAxB;oBAAoCqL,OAAO,EAAElN,OAAO,IAAIF;kBAAxD,CAA3C;kBACA8M,uBAAuB,CAACE,gBAAxB,CAAyCR,IAAzC,CAA8ClU,QAAQ,CAACwG,QAAvD;kBACAmO,qBAAqB,CAACT,IAAtB,CAA2BtM,OAAO,IAAIF,WAAtC;kBACAkN,mBAAmB,GAAG5U,QAAQ,CAACyJ,UAA/B,CAPsE,CAO3B;;kBAC3C8C,mBAAmB,GAAGvM,QAAQ,CAACuM,mBAA/B;gBACD;;gBACDoI,qBAAqB,CAACI,IAAtB;gBACMC,gBArER,GAqE2BhH,iDAAS,CAAC2G,qBAAqB,CAACM,IAAtB,CAA2BC,MAAM,CAACC,YAAP,CAAoB,EAApB,CAA3B,CAAD,CAAT,CAA+D3V,KAA/D,CAAqE,CAArE,CArE3B;gBAsEEgV,uBAAuB,CAACzI,WAAxB,GAAsC6I,mBAAtC;gBACMQ,YAvER,GAuEuBf,aAAa,CAACC,GAAd,CAAkB,UAACvS,CAAD,EAAI8S,KAAJ;kBAAA,0BAAC,uBAAmB9S,CAApB,GAA0BiS,gBAAgB,CAACa,KAAD,CAA1C;gBAAA,CAAlB,CAvEvB;gBAwEM3B,IAxEN,GAwEa,IAxEb;;gBAAA,MA0EM5B,aAAa,IAAIF,YAAY,KAAK1E,kBA1ExC;kBAAA;kBAAA;gBAAA;;gBAAA;gBAAA,OA2EyC,KAAKwD,iBAAL,CAAuB6B,cAAvB,CAAsC;kBACzEvL,QAAQ,EAAEyK,IAAI,CAAC0C,kBAD0D;kBAEzElK,UAAU,EAAE2L,YAAY,CAAC,CAAD,CAAZ,CAAgB3L;gBAF6C,CAAtC,CA3EzC;;cAAA;gBAAA;gBA2EYuI,kBA3EZ,0BA2EYA,kBA3EZ;gBAAA;gBAAA,OA+E6B9C,sCAAS,CAAC8C,kBAAD,EAAqBf,IAAI,CAAC0C,kBAA1B,EAA8CyB,YAAY,CAAC,CAAD,CAAZ,CAAgB3L,UAA9D,CA/EtC;;cAAA;gBA+EU2J,UA/EV;gBAgFIC,UAAU,GAAGD,UAAU,SAAV,IAAAA,UAAU,WAAV,8BAAAA,UAAU,CAAEE,SAAZ,oGAAuBnS,IAAvB,0EAA6BC,MAA7B,GACT;kBAAEuR,CAAC,EAAES,UAAF,aAAEA,UAAF,iDAAEA,UAAU,CAAEE,SAAd,2DAAE,uBAAuBnS,IAAvB,CAA4B,CAA5B,EAA+BuR,SAApC;kBAA+CG,CAAC,EAAEO,UAAF,aAAEA,UAAF,iDAAEA,UAAU,CAAEE,SAAd,2DAAE,uBAAuBnS,IAAvB,CAA4B,CAA5B,EAA+ByR;gBAAjF,CADS,GAETrQ,SAFJ;;cAhFJ;gBAAA,eAoFU6O,YApFV;gBAAA,kCAqFS1E,kBArFT,yBAwFSA,mBAxFT,yBA2FSA,kBA3FT;gBAAA;;cAAA;gBAsFMwG,IAAI,GAAG,CAACG,UAAR;gBAtFN;;cAAA;gBAyFMH,IAAI,GAAG,IAAP;gBAzFN;;cAAA;gBA4FMA,IAAI,GAAG,KAAP;gBA5FN;;cAAA;gBAAA,MA+FY,IAAIrU,KAAJ,CAAU,sBAAV,CA/FZ;;cAAA;gBAAA,KAiGmBqU,IAjGnB;kBAAA;kBAAA;gBAAA;;gBAAA,eAkGO3Q,SAlGP;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA,OAmGY,KAAKiR,WAAL,CAAiBG,kBAAjB,EAAqCiB,mBAArC,EAA0DJ,uBAA1D,EAAmFQ,gBAAnF,EAAqGzI,mBAArG,CAnGZ;;cAAA;gBAAA;;cAAA;gBAiGQgG,QAjGR;gBAoGE;gBACArB,OAAO,CAACuC,OAAR,CAAgB,SAAhB;gBArGF,4EAuGOlB,QAvGP;kBAwGIc,UAAU,EAAVA,UAxGJ;kBAyGIrT,QAAQ,EAAEqU,aAAa,CAACC,GAAd,CAAkB,UAACvS,CAAD,EAAI8S,KAAJ;oBAAA,0BAAC,uBAAmB9S,CAApB,GAA0BiS,gBAAgB,CAACa,KAAD,CAA1C;kBAAA,CAAlB;gBAzGd;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;6GA6GA,kBAAkC5D,IAAlC;QAAA;;QAAA;UAAA;YAAA;cAAA;gBACUoE,WADV,GACgDpE,IADhD,CACUoE,WADV,EACuBC,oBADvB,GACgDrE,IADhD,CACuBqE,oBADvB,EAEE;;gBAFF,IAGO,KAAK/G,aAHZ;kBAAA;kBAAA;gBAAA;;gBAAA,MAIU,IAAI1P,KAAJ,CAAU,qBAAV,CAJV;;cAAA;gBAAA,MAOI,CAACyW,oBAAoB,CAAC5B,qBAAtB,IACA,CAAC4B,oBAAoB,CAAC3B,kBADtB,IAEA,CAACE,KAAK,CAACC,OAAN,CAAcwB,oBAAoB,CAAC1B,uBAAnC,CATL;kBAAA;kBAAA;gBAAA;;gBAAA,MAWU,IAAI/U,KAAJ,CAAU,gBAAV,CAXV;;cAAA;gBAAA,MAcIyW,oBAAoB,CAAC5B,qBAArB,KAA+CvX,qCAA/C,IACAmZ,oBAAoB,CAAC1B,uBAArB,CAA6CxS,MAA7C,KAAwD,CAf5D;kBAAA;kBAAA;gBAAA;;gBAAA,MAiBU,IAAIvC,KAAJ,CAAU,mDAAV,CAjBV;;cAAA;gBAmBUoB,WAnBV,GAmB6FoV,WAnB7F,CAmBUpV,WAnBV,EAmBuBsG,QAnBvB,GAmB6F8O,WAnB7F,CAmBuB9O,QAnBvB,EAmBiCC,QAnBjC,GAmB6F6O,WAnB7F,CAmBiC7O,QAnBjC,EAmB2CI,SAnB3C,GAmB6FyO,WAnB7F,CAmB2CzO,SAnB3C,EAmBsDrG,IAnBtD,GAmB6F8U,WAnB7F,CAmBsD9U,IAnBtD,EAmB4DC,eAnB5D,GAmB6F6U,WAnB7F,CAmB4D7U,eAnB5D,EAmB6EqG,WAnB7E,GAmB6FwO,WAnB7F,CAmB6ExO,WAnB7E;gBAoBQ0K,YApBR,GAoBsC9E,cAAa,CAAC;kBAChDxM,WAAW,EAAXA,WADgD;kBAEhDsG,QAAQ,EAARA,QAFgD;kBAGhDC,QAAQ,EAARA,QAHgD;kBAIhDC,YAAY,EAAE,KAAKmJ,MAAL,CAAYnJ,YAJsB;kBAKhDE,gBAAgB,EAAE,KAAKiJ,MAAL,CAAYjJ,gBALkB;kBAMhDC,SAAS,EAATA,SANgD;kBAOhDF,MAAM,EAAE,KAAKkJ,MAAL,CAAYlJ,MAP4B;kBAQhDG,WAAW,EAAXA;gBARgD,CAAD,CApBnD;;gBAAA,MA+BMtG,IAAI,IAAIC,eA/Bd;kBAAA;kBAAA;gBAAA;;gBAAA,yBAgC0DF,wBAAwB,CAACC,IAAD,EAAOC,eAAP,CAhClF,EAgCY9B,KAhCZ,0BAgCYA,KAhCZ,EAgCmB+B,cAhCnB,0BAgCmBA,cAhCnB,EAgCmCQ,kBAhCnC,0BAgCmCA,kBAhCnC;;gBAAA,KAiCQvC,KAjCR;kBAAA;kBAAA;gBAAA;;gBAAA,MAiCqB,IAAIG,KAAJ,CAAUH,KAAV,CAjCrB;;cAAA;gBAkC0BgJ,WAlC1B,GAkCsEjH,cAlCtE,CAkCYkH,YAlCZ,EAkCiDC,OAlCjD,GAkCsEnH,cAlCtE,CAkCuCoH,QAlCvC,EAkC6DC,IAlC7D,qCAkCsErH,cAlCtE,eAmCI;;gBACA+Q,WAAW,GAAG;kBAAE9J,WAAW,EAAXA,WAAL;kBAAkBE,OAAO,EAAPA;gBAAlB,GAA8BE,IAA9B;kBAAoCzG,KAAK,EAAEJ;gBAA3C,EAAX;gBApCJ;gBAAA;;cAAA;gBAsCI,KAAKqP,aAAL,CAAmBmB,yBAAnB;gBAtCJ;gBAAA,OAuCU,KAAKnB,aAAL,CAAmBoB,iBAAnB,CAAqC;kBAAEC,MAAM,EAAE/U,2CAAV;kBAAuDqU,IAAI,EAAJA;gBAAvD,CAArC,EAAoGM,YAAY,CAACtK,KAAjH,CAvCV;;cAAA;gBAAA;gBAAA,OAwCwBsK,YAAY,CAACK,iBAAb,CAA+B;kBACjD1L,yBAAyB,EAAE,KAAK0J,MAAL,CAAY1J,yBADU;kBAEjDkB,aAAa,EAAE,KAAKwI,MAAL,CAAYxI;gBAFsB,CAA/B,CAxCxB;;cAAA;gBAwCIoK,WAxCJ;;gBAAA,MA4CQ,KAAK5B,MAAL,CAAYlJ,MAAZ,KAAuBrK,gBA5C/B;kBAAA;kBAAA;gBAAA;;gBAAA,kCA4CwD,IA5CxD;;cAAA;gBAAA;gBAAA,OA+CyBkV,YAAY,CAACM,WAAb,CAAyBL,WAAzB,CA/CzB;;cAAA;gBA+CQxR,QA/CR;gBAgDQuV,gBAhDR,GAgD2B,KAAK/B,WAAL,CACvBhN,QADuB,EAEvBxG,QAAQ,CAACyJ,UAFc,EAGvB;kBAAEsC,WAAW,EAAE/L,QAAQ,CAACyJ;gBAAxB,CAHuB,EAIvB+H,WAAW,CAAC5J,OAAZ,IAAuB4J,WAAW,CAAC9J,WAJZ,EAKvB1H,QAAQ,CAACuM,mBALc,CAhD3B;gBAwDUoH,kBAxDV,GAwD0D2B,oBAxD1D,CAwDU3B,kBAxDV,EAwD8BC,uBAxD9B,GAwD0D0B,oBAxD1D,CAwD8B1B,uBAxD9B;gBAyDQY,uBAzDR,GAyDkC;kBAAEC,aAAa,EAAE,EAAjB;kBAAqBC,gBAAgB,EAAE,EAAvC;kBAA2C3I,WAAW,EAAE;gBAAxD,CAzDlC;gBA0DQ4I,qBA1DR,GA0DgC,EA1DhC;gBA2DMC,mBA3DN,GA2D4B,EA3D5B;;gBA4DE,KAASC,KAAT,GAAiB,CAAjB,EAAoBA,KAAK,GAAGjB,uBAAuB,CAACxS,MAApD,EAA4DyT,KAAK,IAAI,CAArE,EAAwE;kBAChExU,GADgE,GAC1DuT,uBAAuB,CAACiB,KAAD,CADmC;kBAAA,gBAErCrD,WAFqC,EAE9D5J,SAF8D,iBAE9DA,OAF8D,EAErDF,aAFqD,iBAErDA,WAFqD;kBAGtE8M,uBAAuB,CAACC,aAAxB,CAAsCP,IAAtC,CAA2C;oBAAEnI,WAAW,EAAE/L,QAAQ,CAACyJ,UAAxB;oBAAoCqL,OAAO,EAAElN,SAAO,IAAIF;kBAAxD,CAA3C;kBACA8M,uBAAuB,CAACE,gBAAxB,CAAyCR,IAAzC,CAA8C7T,GAAG,CAACmG,QAAlD;kBACAmO,qBAAqB,CAACT,IAAtB,CAA2BtM,SAAO,IAAIF,aAAtC;kBACAkN,mBAAmB,GAAG5U,QAAQ,CAACyJ,UAA/B,CANsE,CAM3B;gBAC5C;;gBACDkL,qBAAqB,CAACI,IAAtB;gBACMC,gBArER,GAqE2BhH,iDAAS,CAAC2G,qBAAqB,CAACM,IAAtB,CAA2BC,MAAM,CAACC,YAAP,CAAoB,EAApB,CAA3B,CAAD,CAAT,CAA+D3V,KAA/D,CAAqE,CAArE,CArE3B;gBAsEEgV,uBAAuB,CAACzI,WAAxB,GAAsC6I,mBAAtC;gBACMY,gBAvER,GAuE2B,KAAKhC,WAAL,CACvBG,kBADuB,EAEvBiB,mBAFuB,EAGvBJ,uBAHuB,EAIvBQ,gBAJuB,EAKvBhV,QAAQ,CAACuM,mBALc,CAvE3B;gBAAA;gBAAA,OA8EuClO,OAAO,CAAC8V,GAAR,CAAY,CAACoB,gBAAD,EAAmBC,gBAAnB,CAAZ,CA9EvC;;cAAA;gBAAA;gBAAA;gBA8ESC,SA9ET;gBA8EoBC,SA9EpB;gBAAA,kCA+ES;kBACLL,WAAW,EAAE;oBACXrV,QAAQ,EAAE,0CAAKA,QAAP,GAAoBwR,WAApB;kBADC,GAENiE,SAFM,CADN;kBAKLE,eAAe,EAAE,CAACD,SAAD;gBALZ,CA/ET;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;6FAwFA,kBACElP,QADF,EAEEiD,UAFF,EAGEmM,cAHF,EAIEhO,OAJF,EAKEiO,gBALF;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAOQ/D,MAPR,GAOiB,KAAKvB,aAAL,CAAmB9C,gBAAnB,CAAoC;kBACjDrN,IAAI,EAAE1C,8BAA8BC;gBADa,CAApC,CAPjB;gBAAA;gBAAA,OAUmE,KAAKuS,iBAAL,CAAuB6B,cAAvB,CAAsC;kBAAEvL,QAAQ,EAARA,QAAF;kBAAYiD,UAAU,EAAVA;gBAAZ,CAAtC,CAVnE;;cAAA;gBAAA;gBAUUuI,kBAVV,0BAUUA,kBAVV;gBAU8BC,YAV9B,0BAU8BA,YAV9B;gBAU4C6D,YAV5C,0BAU4CA,YAV5C;gBAWE,KAAKvF,aAAL,CAAmB2B,iBAAnB,CAAqCJ,MAArC;gBACA5T,cAAA,CAAU,0BAAV,EAAsC;kBAAE8T,kBAAkB,EAAlBA,kBAAF;kBAAsBC,YAAY,EAAZA,YAAtB;kBAAoC6D,YAAY,EAAZA;gBAApC,CAAtC;gBAEMC,WAdR,GAcsB,KAAKxF,aAAL,CAAmB9C,gBAAnB,CAAoC;kBACtDrN,IAAI,EAAE1C,8BAA8BE;gBADkB,CAApC,CAdtB;gBAAA;gBAAA,OAiBwB,KAAKiS,KAAL,CAAWuC,gBAAX,CAA4BJ,kBAA5B,EAAgDC,YAAhD,EAA8D;kBAAEzL,QAAQ,EAARA,QAAF;kBAAYiD,UAAU,EAAVA;gBAAZ,CAA9D,EAAwF,IAAxF,CAjBxB;;cAAA;gBAiBQsJ,OAjBR;gBAkBE,KAAKxC,aAAL,CAAmB2B,iBAAnB,CAAqC6D,WAArC;;gBAlBF,MAmBM,OAAOhD,OAAP,KAAmB,QAnBzB;kBAAA;kBAAA;gBAAA;;gBAAA,MAmByC,IAAIlU,KAAJ,CAAU,2BAAV,CAnBzC;;cAAA;gBAoBEX,cAAA,CAAU,0BAAV,EAAsC;kBAAEkU,gBAAgB,EAAEW;gBAApB,CAAtC;gBAEMiD,QAtBR,GAsBmB,KAAKzF,aAAL,CAAmB9C,gBAAnB,CAAoC;kBACnDrN,IAAI,EAAE1C,wBAAwBG;gBADqB,CAApC,CAtBnB;gBAAA;gBAAA,OAyBuB,KAAKgS,KAAL,CAAWoG,cAAX,CAA0BjE,kBAA1B,EAA8C8D,YAA9C,EAA4DtP,QAA5D,EAAsEoP,cAAtE,EAAsFhO,OAAtF,EAA+FiO,gBAA/F,CAzBvB;;cAAA;gBAyBQK,MAzBR;gBA0BE,KAAK3F,aAAL,CAAmB2B,iBAAnB,CAAqC8D,QAArC;;gBA1BF,MA2BME,MAAM,CAACC,UAAP,CAAkBrW,WAAlB,OAAoCiT,OAAO,CAACA,OAAR,CAAgBjT,WAAhB,EA3B1C;kBAAA;kBAAA;gBAAA;;gBAAA,MA4BU,IAAIjB,KAAJ,CAAU,iDAAV,CA5BV;;cAAA;gBA8BEX,cAAA,CAAU,0BAAV,EAAsC;kBAAE+X,cAAc,EAAEC;gBAAlB,CAAtC;gBA9BF,kCAgCS;kBACLpD,aAAa,EAAEoD,MAAM,CAACC,UAAP,CAAkB5W,QAAlB,EADV;kBAELyT,UAAU,EAAEkD,MAAM,CAAC1H,OAAP,CAAejP,QAAf,EAFP;kBAGL0T,aAAa,EAAEiD,MAAM,CAACjD,aAAP,CAAqB1T,QAArB,CAA8B,KAA9B,CAHV;kBAILiT,UAAU,EAAEO,OAAO,CAACP,UAJf;kBAKLC,MAAM,EAAE;oBACNC,SAAS,EAAEK,OAAO,CAACJ,CADb;oBAENC,SAAS,EAAEG,OAAO,CAACF;kBAFb;gBALH,CAhCT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;sGA4CA,kBACErM,QADF,EAEEiD,UAFF,EAEsB;MACpB2M,oBAHF;QAAA;QAAA;UAAA;YAAA;cAAA;gBAKQ5B,uBALR,GAKkC;kBAAEC,aAAa,EAAE,EAAjB;kBAAqBC,gBAAgB,EAAE,EAAvC;kBAA2C3I,WAAW,EAAE;gBAAxD,CALlC;gBAMQ4I,qBANR,GAMgC,EANhC;gBAOMpI,mBAPN,GAO4B,EAP5B;;gBAQE,KAASsI,KAAT,GAAiB,CAAjB,EAAoBA,KAAK,GAAGuB,oBAAoB,CAAChV,MAAjD,EAAyDyT,KAAK,IAAI,CAAlE,EAAqE;kBAC7D7U,QAD6D,GAClDoW,oBAAoB,CAACvB,KAAD,CAD8B;kBAEnEL,uBAAuB,CAACC,aAAxB,CAAsCP,IAAtC,CAA2C;oBAAEnI,WAAW,EAAEtC,UAAf;oBAA2BqL,OAAO,EAAE9U,QAAQ,CAAC4H;kBAA7C,CAA3C;kBACA4M,uBAAuB,CAACE,gBAAxB,CAAyCR,IAAzC,CAA8ClU,QAAQ,CAACwG,QAAvD;kBACAmO,qBAAqB,CAACT,IAAtB,CAA2BlU,QAAQ,CAAC4H,OAApC;kBACA2E,mBAAmB,GAAGvM,QAAQ,CAACuM,mBAA/B;gBACD;;gBACDoI,qBAAqB,CAACI,IAAtB;gBACMC,gBAhBR,GAgB2BhH,iDAAS,CAAC2G,qBAAqB,CAACM,IAAtB,CAA2BC,MAAM,CAACC,YAAP,CAAoB,EAApB,CAA3B,CAAD,CAAT,CAA+D3V,KAA/D,CAAqE,CAArE,CAhB3B;gBAiBEgV,uBAAuB,CAACzI,WAAxB,GAAsCtC,UAAtC;gBAjBF,kCAkBS,KAAK+J,WAAL,CAAiBhN,QAAjB,EAA2BiD,UAA3B,EAAuC+K,uBAAvC,EAAgEQ,gBAAhE,EAAkFzI,mBAAlF,CAlBT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;WAqBA,kCAAyBiC,OAAzB,EAA0CvH,KAA1C,EAAiE;MAC/D,OAAO,KAAK4I,KAAL,CAAWwG,wBAAX,CAAoC7H,OAApC,EAA6CvH,KAA7C,CAAP;IACD;;;;mGAED;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,mEAAgG,EAAhG,2BAA0BqP,UAA1B,EAA0BA,UAA1B,iCAAuC,IAAvC,mDAA6CC,iBAA7C,EAA6CA,iBAA7C,sCAAiE,IAAjE;gBAAA;gBAAA,OACQ,KAAK5F,IAAL,CAAU;kBAAEF,QAAQ,EAAE;gBAAZ,CAAV,CADR;;cAAA;gBAEQxR,GAFR,GAEc,IAAImF,GAAJ,CAAQtC,MAAM,CAACqE,QAAP,CAAgBjH,IAAxB,CAFd;gBAGQqB,IAHR,GAGetB,GAAG,CAACsB,IAAJ,CAASiW,SAAT,CAAmB,CAAnB,CAHf;gBAIQC,WAJR,GAIsB,EAJtB;gBAKExX,GAAG,CAACsF,YAAJ,CAAiBF,OAAjB,CAAyB,UAACqS,KAAD,EAAQpS,GAAR,EAAgB;kBACvCmS,WAAW,CAACnS,GAAD,CAAX,GAAmBoS,KAAnB;gBACD,CAFD;;gBAIA,IAAIJ,UAAJ,EAAgB;kBACRK,QADQ,GACG7U,MAAM,CAACqE,QAAP,CAAgByQ,MAAhB,GAAyB9U,MAAM,CAACqE,QAAP,CAAgB8D,QAD5C;kBAEdnI,MAAM,CAAC+U,OAAP,CAAeC,YAAf,CAA4B,IAA5B,EAAkC,EAAlC,EAAsCH,QAAtC;gBACD;;gBAZH,MAcM,CAACpW,IAAD,IAASW,MAAM,CAACC,IAAP,CAAYsV,WAAZ,EAAyBrV,MAAzB,KAAoC,CAdnD;kBAAA;kBAAA;gBAAA;;gBAAA,MAeU,IAAIvC,KAAJ,CAAU,yCAAV,CAfV;;cAAA;gBAAA,yBAkBwDyB,wBAAwB,CAACC,IAAD,EAAOkW,WAAP,CAlBhF,EAkBU/X,KAlBV,0BAkBUA,KAlBV,EAkBiBuC,kBAlBjB,0BAkBiBA,kBAlBjB,EAkBqCR,cAlBrC,0BAkBqCA,cAlBrC;gBAoBUuG,UApBV,GAoByB/F,kBApBzB,CAoBU+F,UApBV;gBAsBE9I,aAAA,CAAS8I,UAAT,EAAqB,YAArB;gBAtBF;gBAAA,OAwB0C,KAAKsJ,aAAL,CAAmByG,oBAAnB,CAAwC/P,UAAxC,CAxB1C;;cAAA;gBAAA;gBAwBUiK,IAxBV,yBAwBUA,IAxBV;gBAwBgBU,MAxBhB,yBAwBgBA,MAxBhB;gBAwB2B7J,IAxB3B;gBAyBE5J,aAAA,CAAS+S,IAAT,EAAeU,MAAf;;gBAEA,IAAI4E,iBAAJ,EAAuB;kBACrB,KAAKjG,aAAL,CAAmB0G,wBAAnB,CAA4ChQ,UAA5C;gBACD;;gBA7BH,KA+BMtI,KA/BN;kBAAA;kBAAA;gBAAA;;gBAAA,kCAgCW;kBAAEA,KAAK,EAALA,KAAF;kBAAS2C,KAAK,EAAEJ,kBAAkB,IAAI,EAAtC;kBAA0C0Q,MAAM,EAANA,MAA1C;kBAAkD/Q,MAAM,EAAE,EAA1D;kBAA8DH,cAAc,EAAdA,cAA9D;kBAA8EwQ,IAAI,EAAJA;gBAA9E,CAhCX;;cAAA;gBAAA;;gBAAA,MAsCQU,MAAM,KAAK/U,0BAtCnB;kBAAA;kBAAA;gBAAA;;gBAuCYqa,UAvCZ,GAuCyBhG,IAvCzB;gBAwCMgG,UAAU,CAAC1W,IAAX,GAAkBA,IAAlB;gBACA0W,UAAU,CAACzW,eAAX,GAA6BiW,WAA7B;gBAzCN;gBAAA,OA0CqB,KAAKS,YAAL,CAAkBD,UAAlB,CA1CrB;;cAAA;gBA0CMrW,MA1CN;gBAAA;gBAAA;;cAAA;gBAAA,MA2Ce+Q,MAAM,KAAK/U,oCA3C1B;kBAAA;kBAAA;gBAAA;;gBA4CYqa,WA5CZ,GA4CyBhG,IA5CzB;;gBA6CMgG,WAAU,CAACrD,uBAAX,CAAmCvP,OAAnC,CAA2C,UAACtC,CAAD,EAAO;kBAChDA,CAAC,CAACxB,IAAF,GAASA,IAAT;kBACAwB,CAAC,CAACvB,eAAF,GAAoBiW,WAApB;gBACD,CAHD;;gBA7CN;gBAAA,OAiDqB,KAAKU,qBAAL,CAA2BF,WAA3B,CAjDrB;;cAAA;gBAiDMrW,MAjDN;gBAAA;gBAAA;;cAAA;gBAAA,MAkDe+Q,MAAM,KAAK/U,2CAlD1B;kBAAA;kBAAA;gBAAA;;gBAmDYqa,YAnDZ,GAmDyBhG,IAnDzB;gBAoDMgG,YAAU,CAAC5B,WAAX,CAAuB9U,IAAvB,GAA8BA,IAA9B;gBACA0W,YAAU,CAAC5B,WAAX,CAAuB7U,eAAvB,GAAyCiW,WAAzC;gBArDN;gBAAA,OAsDqB,KAAKW,2BAAL,CAAiCH,YAAjC,CAtDrB;;cAAA;gBAsDMrW,MAtDN;;cAAA;gBAAA;gBAAA;;cAAA;gBAAA;gBAAA;gBAyDI1C,cAAA;gBAzDJ;kBA2DMQ,KAAK,qDAA8C,0EAAKyG,OAAL,KAAgB,EAA9D,CA3DX;kBA4DM9D,KAAK,EAAEJ,kBAAkB,IAAI,EA5DnC;kBA6DM0Q,MAAM,EAANA,MA7DN;kBA8DM/Q,MAAM,EAAE,EA9Dd;kBA+DMH,cAAc,EAAdA,cA/DN;kBAgEMwQ,IAAI,EAAJA;gBAhEN,GAiESnJ,IAjET;;cAAA;gBAAA,IAqEOlH,MArEP;kBAAA;kBAAA;gBAAA;;gBAAA;kBAuEMlC,KAAK,EAAE,yBAvEb;kBAwEM2C,KAAK,EAAEJ,kBAAkB,IAAI,EAxEnC;kBAyEM0Q,MAAM,EAANA,MAzEN;kBA0EM/Q,MAAM,EAAE,EA1Ed;kBA2EMH,cAAc,EAAdA,cA3EN;kBA4EMwQ,IAAI,EAAJA;gBA5EN,GA6ESnJ,IA7ET;;cAAA;gBAAA;kBAgFW6J,MAAM,EAANA,MAhFX;kBAgFmB/Q,MAAM,EAANA,MAhFnB;kBAgF2BS,KAAK,EAAEJ,kBAAkB,IAAI,EAhFxD;kBAgF4DR,cAAc,EAAdA,cAhF5D;kBAgF4EwQ,IAAI,EAAJA;gBAhF5E,GAgFqFnJ,IAhFrF;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;2GAmFA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,IACO9E,QADP;kBAAA;kBAAA;gBAAA;;gBAAA,kCACwB3E,OAAO,CAACC,OAAR,EADxB;;cAAA;gBAAA,kCAES,IAAID,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;kBACtC,IAAM8Y,YAAY,GAAGrU,QAAQ,CAACsU,aAAT,CAAuB,MAAvB,CAArB;kBACAD,YAAY,CAACnY,IAAb,GAAoB,KAAI,CAAC0Q,MAAL,CAAYnJ,YAAhC;kBACA,IAAI3E,MAAM,CAACqE,QAAP,CAAgByQ,MAAhB,KAA2B,IAAIxS,GAAJ,CAAQ,KAAI,CAACwL,MAAL,CAAYnJ,YAApB,EAAkCmQ,MAAjE,EAAyES,YAAY,CAACE,WAAb,GAA2B,WAA3B;kBACzEF,YAAY,CAACzV,IAAb,GAAoB,WAApB;kBACAyV,YAAY,CAACG,GAAb,GAAmB,UAAnB;;kBACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;oBACtB,KAAI,CAAClJ,aAAL,GAAqB,IAArB;oBACAjQ,OAAO;kBACR,CAHD;;kBAIA,IAAI;oBACF,IAAI+Y,YAAY,CAACK,OAAb,IAAwBL,YAAY,CAACK,OAAb,CAAqBC,QAAjD,EAA2D;sBACzD,IAAIN,YAAY,CAACK,OAAb,CAAqBC,QAArB,CAA8B,UAA9B,CAAJ,EAA+C;wBAC7CN,YAAY,CAACO,MAAb,GAAsBH,SAAtB;;wBACAJ,YAAY,CAACQ,OAAb,GAAuB,YAAM;0BAC3BtZ,MAAM,CAAC,IAAIM,KAAJ,yFAA2F,KAAI,CAAC+Q,MAAL,CAAYnJ,YAAvG,EAAD,CAAN;wBACD,CAFD;;wBAGAzD,QAAQ,CAAC8U,IAAT,CAAcC,WAAd,CAA0BV,YAA1B;sBACD,CAND,MAMO;wBACL;wBACAI,SAAS;sBACV;oBACF,CAXD,MAWO;sBACL;sBACAA,SAAS;oBACV;kBACF,CAhBD,CAgBE,OAAOO,GAAP,EAAY;oBACZP,SAAS;kBACV;gBACF,CA7BM,CAFT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;;;;;;;;;;;;AAmCF,4CAAetI,UAAf;;AC5nBA;AACA;AACA;AACA","sources":["webpack://@toruslabs/customauth/webpack/bootstrap","webpack://@toruslabs/customauth/webpack/runtime/compat get default export","webpack://@toruslabs/customauth/webpack/runtime/define property getters","webpack://@toruslabs/customauth/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/customauth/webpack/runtime/make namespace object","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/fetch-node-details\"","webpack://@toruslabs/customauth/./src/utils/enums.ts","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/assertThisInitialized\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@toruslabs/customauth/external commonjs2 \"lodash.merge\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/broadcast-channel\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/slicedToArray\"","webpack://@toruslabs/customauth/external commonjs2 \"bowser\"","webpack://@toruslabs/customauth/external commonjs2 \"loglevel\"","webpack://@toruslabs/customauth/./src/utils/loglevel.ts","webpack://@toruslabs/customauth/./src/utils/helpers.ts","webpack://@toruslabs/customauth/external commonjs2 \"events\"","webpack://@toruslabs/customauth/./src/utils/PopupHandler.ts","webpack://@toruslabs/customauth/./src/handlers/AbstractLoginHandler.ts","webpack://@toruslabs/customauth/./src/handlers/DiscordHandler.ts","webpack://@toruslabs/customauth/./src/handlers/FacebookHandler.ts","webpack://@toruslabs/customauth/./src/handlers/GoogleHandler.ts","webpack://@toruslabs/customauth/external commonjs2 \"jwt-decode\"","webpack://@toruslabs/customauth/./src/handlers/JwtHandler.ts","webpack://@toruslabs/customauth/./src/handlers/MockLoginHandler.ts","webpack://@toruslabs/customauth/./src/handlers/PasswordlessHandler.ts","webpack://@toruslabs/customauth/./src/handlers/RedditHandler.ts","webpack://@toruslabs/customauth/./src/handlers/TwitchHandler.ts","webpack://@toruslabs/customauth/./src/handlers/WebAuthnHandler.ts","webpack://@toruslabs/customauth/./src/handlers/HandlerFactory.ts","webpack://@toruslabs/customauth/./src/handlers/interfaces.ts","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/torus.js\"","webpack://@toruslabs/customauth/external commonjs2 \"web3-utils\"","webpack://@toruslabs/customauth/external commonjs2 \"@chaitanyapotti/register-service-worker\"","webpack://@toruslabs/customauth/./src/registerServiceWorker.ts","webpack://@toruslabs/customauth/./src/sentry.ts","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/metadata-helpers\"","webpack://@toruslabs/customauth/./src/utils/StorageHelper.ts","webpack://@toruslabs/customauth/./src/login.ts","webpack://@toruslabs/customauth/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/fetch-node-details\");","import NodeDetailManager, { TORUS_NETWORK } from \"@toruslabs/fetch-node-details\";\n\nexport const LOGIN = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  GITHUB: \"github\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  LINE: \"line\",\n  EMAIL_PASSWORD: \"email_password\",\n  PASSWORDLESS: \"passwordless\",\n  JWT: \"jwt\",\n  WEBAUTHN: \"webauthn\",\n} as const;\n\nexport const AGGREGATE_VERIFIER = {\n  SINGLE_VERIFIER_ID: \"single_id_verifier\",\n  // AND_AGGREGATE_VERIFIER : \"and_aggregate_verifier\",\n  // OR_AGGREGATE_VERIFIER : \"or_aggregate_verifier\",\n} as const;\n\nexport const UX_MODE = {\n  POPUP: \"popup\",\n  REDIRECT: \"redirect\",\n} as const;\n\nexport const REDIRECT_PARAMS_STORAGE_METHOD = {\n  LOCAL_STORAGE: \"localStorage\",\n  SESSION_STORAGE: \"sessionStorage\",\n  SERVER: \"server\",\n};\n\nexport const TORUS_METHOD = {\n  TRIGGER_LOGIN: \"triggerLogin\",\n  TRIGGER_AGGREGATE_LOGIN: \"triggerAggregateLogin\",\n  TRIGGER_AGGREGATE_HYBRID_LOGIN: \"triggerHybridAggregateLogin\",\n} as const;\n\nexport type LOGIN_TYPE = typeof LOGIN[keyof typeof LOGIN];\nexport type AGGREGATE_VERIFIER_TYPE = typeof AGGREGATE_VERIFIER[keyof typeof AGGREGATE_VERIFIER];\nexport type UX_MODE_TYPE = typeof UX_MODE[keyof typeof UX_MODE];\nexport type TORUS_METHOD_TYPE = typeof TORUS_METHOD[keyof typeof TORUS_METHOD];\nexport type REDIRECT_PARAMS_STORAGE_METHOD_TYPE = typeof REDIRECT_PARAMS_STORAGE_METHOD[keyof typeof REDIRECT_PARAMS_STORAGE_METHOD];\n\nexport const CONTRACT_MAP = {\n  [TORUS_NETWORK.MAINNET]: NodeDetailManager.PROXY_ADDRESS_MAINNET,\n  [TORUS_NETWORK.TESTNET]: NodeDetailManager.PROXY_ADDRESS_TESTNET,\n  [TORUS_NETWORK.CYAN]: NodeDetailManager.PROXY_ADDRESS_CYAN,\n  [TORUS_NETWORK.AQUA]: NodeDetailManager.PROXY_ADDRESS_AQUA,\n};\n\nexport const SIGNER_MAP = {\n  [TORUS_NETWORK.MAINNET]: \"https://signer.tor.us\",\n  [TORUS_NETWORK.TESTNET]: \"https://signer.tor.us\",\n  [TORUS_NETWORK.CYAN]: \"https://signer-polygon.tor.us\",\n  [TORUS_NETWORK.AQUA]: \"https://signer-polygon.tor.us\",\n};\n\nexport const SENTRY_TXNS = {\n  FETCH_NODE_DETAILS: \"fetchNodeDetails\",\n  PUB_ADDRESS_LOOKUP: \"pubAddressLookup\",\n  FETCH_SHARES: \"fetchShares\",\n} as const;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash.merge\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/broadcast-channel\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bowser\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"loglevel\");","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"customauth\");\n","import Bowser, { ENGINE_MAP } from \"bowser\";\n\nimport { Auth0UserInfo, TorusGenericObject } from \"../handlers/interfaces\";\nimport { LOGIN, LOGIN_TYPE, REDIRECT_PARAMS_STORAGE_METHOD_TYPE } from \"./enums\";\nimport log from \"./loglevel\";\ninterface CustomMessageEvent extends MessageEvent {\n  error: string;\n}\n\ninterface EventListener {\n  (evt: CustomMessageEvent): void;\n}\n\ntype EmitterType = { addEventListener(type: string, handler: EventListener): void; removeEventListener(type: string, handler: EventListener): void };\n\nexport function eventToPromise<T>(emitter: EmitterType): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    const handler = (ev: CustomMessageEvent) => {\n      const { error = \"\", data } = ev;\n      emitter.removeEventListener(\"message\", handler);\n      if (error) return reject(new Error(error));\n      return resolve(data as T);\n    };\n    emitter.addEventListener(\"message\", handler);\n  });\n}\n\n// These are the connection names used by auth0\nexport const loginToConnectionMap = {\n  [LOGIN.APPLE]: \"apple\",\n  [LOGIN.GITHUB]: \"github\",\n  [LOGIN.LINKEDIN]: \"linkedin\",\n  [LOGIN.TWITTER]: \"twitter\",\n  [LOGIN.WEIBO]: \"weibo\",\n  [LOGIN.LINE]: \"line\",\n  [LOGIN.EMAIL_PASSWORD]: \"Username-Password-Authentication\",\n  [LOGIN.PASSWORDLESS]: \"email\",\n};\n\nexport const padUrlString = (url: URL): string => (url.href.endsWith(\"/\") ? url.href : `${url.href}/`);\n\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */\nexport const randomId = (): string => Math.random().toString(36).slice(2);\n\nexport const broadcastChannelOptions = {\n  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n  webWorkerSupport: false, // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\n\nfunction caseSensitiveField(field: string, isCaseSensitive?: boolean): string {\n  return isCaseSensitive ? field : field.toLowerCase();\n}\n\nexport const getVerifierId = (\n  userInfo: Auth0UserInfo,\n  typeOfLogin: LOGIN_TYPE,\n  verifierIdField?: string,\n  isVerifierIdCaseSensitive = true\n): string => {\n  const { name, sub } = userInfo;\n  if (verifierIdField) return caseSensitiveField(userInfo[verifierIdField], isVerifierIdCaseSensitive);\n  switch (typeOfLogin) {\n    case LOGIN.PASSWORDLESS:\n    case LOGIN.EMAIL_PASSWORD:\n      return caseSensitiveField(name, isVerifierIdCaseSensitive);\n    case LOGIN.WEIBO:\n    case LOGIN.GITHUB:\n    case LOGIN.TWITTER:\n    case LOGIN.APPLE:\n    case LOGIN.LINKEDIN:\n    case LOGIN.LINE:\n    case LOGIN.JWT:\n      return caseSensitiveField(sub, isVerifierIdCaseSensitive);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport const handleRedirectParameters = (\n  hash: string,\n  queryParameters: TorusGenericObject\n): { error: string; instanceParameters: TorusGenericObject; hashParameters: TorusGenericObject } => {\n  const hashParameters: TorusGenericObject = hash.split(\"&\").reduce((result, item) => {\n    const [part0, part1] = item.split(\"=\");\n    result[part0] = part1;\n    return result;\n  }, {});\n  log.info(hashParameters, queryParameters);\n  let instanceParameters: TorusGenericObject = {};\n  let error = \"\";\n  if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n    instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n    error = hashParameters.error_description || hashParameters.error || error;\n  } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n    instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n    if (queryParameters.error) error = queryParameters.error;\n  }\n  return { error, instanceParameters, hashParameters };\n};\n\nexport function storageAvailable(type: REDIRECT_PARAMS_STORAGE_METHOD_TYPE): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\nexport function getPopupFeatures(): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const w = 1200;\n  const h = 700;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const isFirefox = (): boolean => window?.navigator?.userAgent.toLowerCase().indexOf(\"firefox\") > -1 || false;\n\nexport function constructURL(params: { baseURL: string; query?: Record<string, unknown>; hash?: Record<string, unknown> }): string {\n  const { baseURL, query, hash } = params;\n\n  const url = new URL(baseURL);\n  if (query) {\n    Object.keys(query).forEach((key) => {\n      url.searchParams.append(key, query[key] as string);\n    });\n  }\n  if (hash) {\n    const h = new URL(constructURL({ baseURL, query: hash })).searchParams.toString();\n    url.hash = h;\n  }\n  return url.toString();\n}\n\nexport function are3PCSupported(): boolean {\n  const browserInfo = Bowser.parse(navigator.userAgent);\n  log.info(JSON.stringify(browserInfo), \"current browser info\");\n\n  let thirdPartyCookieSupport = true;\n  // brave\n  if ((navigator as unknown as { brave: boolean })?.brave) {\n    thirdPartyCookieSupport = false;\n  }\n  // All webkit & gecko engine instances use itp (intelligent tracking prevention -\n  // https://webkit.org/tracking-prevention/#intelligent-tracking-prevention-itp)\n  if (browserInfo.engine.name === ENGINE_MAP.WebKit || browserInfo.engine.name === ENGINE_MAP.Gecko) {\n    thirdPartyCookieSupport = false;\n  }\n\n  return thirdPartyCookieSupport;\n}\n\nexport const validateAndConstructUrl = (domain: string): URL => {\n  try {\n    const url = new URL(decodeURIComponent(domain));\n    return url;\n  } catch (error) {\n    throw new Error(`${error?.message || \"\"}, Note: Your jwt domain: (i.e ${domain}) must have http:// or https:// prefix`);\n  }\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"events\");","import { EventEmitter } from \"events\";\n\nimport { getPopupFeatures } from \"./helpers\";\n\nclass PopupHandler extends EventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures();\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { BroadcastChannel } from \"@toruslabs/broadcast-channel\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, randomId } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport { Auth0ClientOptions, ILoginHandler, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nabstract class AbstractLoginHandler implements ILoginHandler {\n  public nonce: string = randomId();\n\n  public finalURL: URL;\n\n  // Not using object constructor because of this issue\n  // https://github.com/microsoft/TypeScript/issues/5326\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {}\n\n  get state(): string {\n    return encodeURIComponent(\n      window.btoa(\n        JSON.stringify({\n          ...(this.customState || {}),\n          instanceId: this.nonce,\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n          redirectToOpener: this.redirectToOpener || false,\n        })\n      )\n    );\n  }\n\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      return new Promise<LoginWindowResponse>((resolve, reject) => {\n        let bc: BroadcastChannel;\n        const handleData = async (ev: { error: string; data: PopupResponse }) => {\n          try {\n            const { error, data } = ev;\n            const {\n              instanceParams,\n              hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n            } = data || {};\n            if (error) {\n              log.error(ev);\n              reject(new Error(`Error: ${error}. Info: ${JSON.stringify(ev.data || {})}`));\n              return;\n            }\n            if (ev.data && instanceParams.verifier === this.verifier) {\n              log.info(ev.data);\n              if (!this.redirectToOpener && bc) await bc.postMessage({ success: true });\n              resolve({\n                accessToken,\n                idToken: idToken || \"\",\n                ...rest,\n                // State has to be last here otherwise it will be overwritten\n                state: instanceParams,\n              });\n            }\n          } catch (error) {\n            log.error(error);\n            reject(error);\n          }\n        };\n\n        if (!this.redirectToOpener) {\n          bc = new BroadcastChannel(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n          bc.addEventListener(\"message\", async (ev) => {\n            await handleData(ev);\n            bc.close();\n            verifierWindow.close();\n          });\n        } else {\n          const postMessageEventHandler = async (postMessageEvent: MessageEvent) => {\n            if (!postMessageEvent.data) return;\n            const ev = postMessageEvent.data;\n            if (ev.channel !== `redirect_channel_${this.nonce}`) return;\n            window.removeEventListener(\"message\", postMessageEventHandler);\n            handleData(ev);\n            verifierWindow.close();\n          };\n          window.addEventListener(\"message\", postMessageEventHandler);\n        }\n        verifierWindow.open();\n        verifierWindow.once(\"close\", () => {\n          if (bc) bc.close();\n          reject(new Error(\"user closed popup\"));\n        });\n      });\n    }\n    return null;\n  }\n\n  abstract getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse>;\n\n  abstract setFinalUrl(): void;\n}\n\nexport default AbstractLoginHandler;\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class DiscordHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identify email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://discord.com/api/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ id: string; username: string; discriminator: string; avatar?: string; email?: string }>(\n      \"https://discord.com/api/users/@me\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { id, avatar, email = \"\", username: name = \"\", discriminator = \"\" } = userInfo;\n    const profileImage =\n      avatar === null\n        ? `https://cdn.discord.com/embed/avatars/${Number(discriminator) % 5}.png`\n        : `https://cdn.discord.com/avatars/${id}/${avatar}.png?size=2048`;\n    return {\n      profileImage,\n      name: `${name}#${discriminator}`,\n      email,\n      verifierId: id,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class FacebookHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"public_profile email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://www.facebook.com/v15.0/dialog/oauth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ name: string; id: string; picture: { data: { url?: string } }; email?: string }>(\n      \"https://graph.facebook.com/me?fields=name,email,picture.type(large)\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { name = \"\", id, picture, email = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage: picture.data.url || \"\",\n      verifier: this.verifier,\n      verifierId: id,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class GoogleHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly SCOPE: string = \"profile email openid\";\n\n  private readonly PROMPT: string = \"consent select_account\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://accounts.google.com/o/oauth2/v2/auth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ picture: string; email: string; name: string }>(\"https://www.googleapis.com/userinfo/v2/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { picture: profileImage = \"\", email = \"\", name = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage,\n      verifier: this.verifier,\n      verifierId: email.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jwt-decode\");","import { get } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { getVerifierId, loginToConnectionMap, padUrlString, validateAndConstructUrl } from \"../utils/helpers\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const finalUrl = validateAndConstructUrl(domain);\n    finalUrl.pathname += finalUrl.pathname.endsWith(\"/\") ? \"authorize\" : \"/authorize\";\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        connection: loginToConnectionMap[this.typeOfLogin],\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { constructURL, getVerifierId, padUrlString } from \"../utils/helpers\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class MockLoginHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        client_id: this.clientId,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n\n    this.finalURL = new URL(constructURL({ baseURL: this.redirect_uri, query: null, hash: finalJwtParams }));\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const { id_token: idToken, access_token: accessToken } = this.jwtParams;\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      return Promise.resolve({\n        state: {},\n        idToken,\n        accessToken,\n      });\n    }\n    return null;\n  }\n}\n","import { BroadcastChannel } from \"@toruslabs/broadcast-channel\";\nimport { get, post } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, getVerifierId, padUrlString, validateAndConstructUrl } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const domainUrl = validateAndConstructUrl(domain);\n\n    domainUrl.pathname = \"/passwordless/start\";\n    this.finalURL = domainUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive } = this.jwtParams;\n    try {\n      const domainUrl = new URL(domain);\n      const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}userinfo`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      });\n      const { picture, name, email } = userInfo;\n      return {\n        email,\n        name,\n        profileImage: picture,\n        verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    } catch (error) {\n      log.error(error);\n      const decodedToken = jwtDecode(idToken) as Auth0UserInfo;\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n  }\n\n  handleLoginWindow(): Promise<LoginWindowResponse> {\n    return new Promise<LoginWindowResponse>((resolve, reject) => {\n      if (this.redirectToOpener) {\n        reject(new Error(\"Cannot use redirect to opener for passwordless\"));\n        return;\n      }\n      const handleData = (ev: { error: string; data: PopupResponse }) => {\n        try {\n          const { error, data } = ev;\n          const {\n            instanceParams,\n            hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n          } = data || {};\n          if (error) {\n            log.error(ev.error);\n            reject(new Error(error));\n            return;\n          }\n          if (ev.data && instanceParams.verifier === this.verifier) {\n            log.info(ev.data);\n            resolve({ accessToken, idToken: idToken || \"\", ...rest, state: instanceParams });\n          }\n        } catch (error) {\n          log.error(error);\n          reject(error);\n        }\n      };\n      const bc = new BroadcastChannel(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n      bc.addEventListener(\"message\", async (ev) => {\n        handleData(ev);\n        bc.close();\n      });\n      try {\n        const { connection = \"email\", login_hint } = this.jwtParams;\n        const finalJwtParams = deepmerge(\n          {\n            client_id: this.clientId,\n            connection,\n            email: connection === \"email\" ? login_hint : undefined,\n            phone_number: connection === \"sms\" ? login_hint : undefined,\n            send: \"link\",\n            authParams: {\n              scope: this.SCOPE,\n              state: this.state,\n              response_type: this.RESPONSE_TYPE,\n              redirect_uri: this.redirect_uri,\n              nonce: this.nonce,\n              prompt: this.PROMPT,\n            },\n          },\n          {\n            authParams: this.jwtParams,\n          }\n        );\n        // using stringify and parse to remove undefined params\n        // This method is only resolved when the user clicks the email link\n        post(this.finalURL.href, JSON.parse(JSON.stringify(finalJwtParams)))\n          .then((response) => {\n            log.info(\"posted\", response);\n            return undefined;\n          })\n          .catch((error) => {\n            log.error(error);\n            reject(error);\n          });\n      } catch (error) {\n        log.error(error);\n        reject(error);\n      }\n    });\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class RedditHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identity\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(`https://www.reddit.com/api/v1/authorize${window.innerWidth < 600 ? \".compact\" : \"\"}`);\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ icon_img: string; name: string }>(\"https://oauth.reddit.com/api/v1/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { icon_img: profileImage = \"\", name = \"\" } = userInfo;\n    return {\n      email: \"\",\n      name,\n      profileImage: profileImage.split(\"?\").length > 0 ? profileImage.split(\"?\")[0] : profileImage,\n      verifier: this.verifier,\n      verifierId: name.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class TwitchHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"user:read:email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://id.twitch.tv/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        force_verify: true,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ data: [{ profile_image_url: string; display_name: string; email: string; id: string }] }>(\n      \"https://api.twitch.tv/helix/users\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Client-ID\": this.clientId,\n        },\n      }\n    );\n    const [{ profile_image_url: profileImage = \"\", display_name: name = \"\", email = \"\", id: verifierId }] = userInfo.data || [];\n    return {\n      profileImage,\n      name,\n      email,\n      verifierId,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse, WebAuthnExtraParams } from \"./interfaces\";\n\nconst WEBAUTHN_LOOKUP_SERVER = \"https://api.webauthn.openlogin.com\";\n\nexport default class WebAuthnHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject,\n    readonly registerOnly?: boolean\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://webauthn.openlogin.com\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        register_only: !!this.registerOnly,\n        state: this.state,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(parameters: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, ref, extraParamsPassed, extraParams } = parameters;\n    let verifierId: string;\n    let signature: string;\n    let clientDataJSON: string;\n    let authenticatorData: string;\n    let publicKey: string;\n    let challenge: string;\n    let rpOrigin: string;\n    let credId: string;\n\n    if (extraParamsPassed === \"true\") {\n      log.debug(\"extraParamsPassed is true, using extraParams passed through hashParams\");\n      try {\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n        } = JSON.parse(atob(extraParams)));\n      } catch (error) {\n        log.warn(\"unable to parse extraParams\", error);\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n        } = await get<WebAuthnExtraParams & { verifier_id: string }>(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n      }\n    } else {\n      log.debug(\"extraParamsPassed is false, using extraParams passed through bridge server\");\n      ({\n        verifier_id: verifierId,\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n      } = await get<WebAuthnExtraParams & { verifier_id: string }>(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n    }\n\n    if (signature !== idToken) {\n      throw new Error(\"idtoken should be equal to signature\");\n    }\n\n    return {\n      email: \"\",\n      name: \"WebAuthn Login\",\n      profileImage: \"\",\n      verifier: this.verifier,\n      verifierId,\n      typeOfLogin: this.typeOfLogin,\n      ref,\n      registerOnly: this.registerOnly,\n      extraVerifierParams: {\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n      },\n    };\n  }\n}\n","import { LOGIN } from \"../utils/enums\";\nimport DiscordHandler from \"./DiscordHandler\";\nimport FacebookHandler from \"./FacebookHandler\";\nimport GoogleHandler from \"./GoogleHandler\";\nimport { CreateHandlerParams, ILoginHandler } from \"./interfaces\";\nimport JwtHandler from \"./JwtHandler\";\nimport MockLoginHandler from \"./MockLoginHandler\";\nimport PasswordlessHandler from \"./PasswordlessHandler\";\nimport RedditHandler from \"./RedditHandler\";\nimport TwitchHandler from \"./TwitchHandler\";\nimport WebAuthnHandler from \"./WebAuthnHandler\";\n\nconst createHandler = ({\n  clientId,\n  redirect_uri,\n  typeOfLogin,\n  verifier,\n  jwtParams,\n  redirectToOpener,\n  uxMode,\n  customState,\n  registerOnly,\n}: CreateHandlerParams): ILoginHandler => {\n  if (!verifier || !typeOfLogin || !clientId) {\n    throw new Error(\"Invalid params\");\n  }\n  const { domain, login_hint, id_token, access_token } = jwtParams || {};\n  switch (typeOfLogin) {\n    case LOGIN.GOOGLE:\n      return new GoogleHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.FACEBOOK:\n      return new FacebookHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.TWITCH:\n      return new TwitchHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.REDDIT:\n      return new RedditHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.DISCORD:\n      return new DiscordHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.PASSWORDLESS:\n      if (!domain || !login_hint) throw new Error(\"Invalid params\");\n      return new PasswordlessHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.APPLE:\n    case LOGIN.GITHUB:\n    case LOGIN.LINKEDIN:\n    case LOGIN.TWITTER:\n    case LOGIN.WEIBO:\n    case LOGIN.LINE:\n    case LOGIN.EMAIL_PASSWORD:\n    case LOGIN.JWT:\n      if (!domain) throw new Error(\"Invalid params\");\n      if (id_token || access_token) {\n        return new MockLoginHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n      }\n      return new JwtHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.WEBAUTHN:\n      return new WebAuthnHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState, registerOnly);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport default createHandler;\n","import { TORUS_NETWORK_TYPE } from \"@toruslabs/fetch-node-details\";\n\nimport { Sentry } from \"../sentry\";\nimport { AGGREGATE_VERIFIER_TYPE, LOGIN_TYPE, TORUS_METHOD_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\n\nexport type TorusGenericObject = {\n  [key: string]: string;\n};\n\nexport type PopupResponse = {\n  hashParams: { access_token: string; id_token?: string };\n  instanceParams: TorusGenericObject;\n};\n\nexport interface Auth0UserInfo {\n  picture: string;\n  email: string;\n  name: string;\n  sub: string;\n  nickname: string;\n}\n\nexport interface ExtraParams {\n  [key: string]: unknown;\n}\n\nexport type WebAuthnExtraParams = {\n  signature?: string;\n  clientDataJSON?: string;\n  authenticatorData?: string;\n  publicKey?: string;\n  challenge?: string;\n  rpOrigin?: string;\n  credId?: string;\n};\nexport interface TorusVerifierResponse {\n  email: string;\n  name: string;\n  profileImage: string;\n  aggregateVerifier?: string;\n  verifier: string;\n  verifierId: string;\n  typeOfLogin: LOGIN_TYPE;\n  ref?: string;\n  registerOnly?: boolean;\n  extraVerifierParams?: WebAuthnExtraParams;\n}\n\nexport interface TorusSubVerifierInfo {\n  verifier: string;\n  idToken: string;\n  extraVerifierParams?: WebAuthnExtraParams;\n}\n\nexport interface LoginWindowResponse {\n  accessToken: string;\n  idToken?: string;\n  ref?: string;\n  extraParams?: string;\n  extraParamsPassed?: string;\n  state: TorusGenericObject;\n}\n\nexport interface ILoginHandler {\n  clientId: string;\n  nonce: string;\n  finalURL: URL;\n  getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse>;\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse>;\n}\n\nexport interface TorusKeyPub {\n  pubKey?: {\n    pub_key_X: string;\n    pub_key_Y: string;\n  };\n}\n\nexport interface TorusKey extends TorusKeyPub {\n  publicAddress: string;\n  privateKey: string;\n  existingPk?: { X: string; Y: string }; // if any\n  metadataNonce: string;\n  typeOfUser: \"v1\" | \"v2\";\n}\n\nexport enum SkipTorusKey {\n  Never,\n  IfNew,\n  Always,\n}\n\nexport interface TorusAggregateVerifierResponse {\n  userInfo: (TorusVerifierResponse & LoginWindowResponse)[];\n}\n\nexport interface TorusSingleVerifierResponse {\n  userInfo: TorusVerifierResponse & LoginWindowResponse;\n}\n\nexport type TorusLoginResponse = TorusSingleVerifierResponse & TorusKey;\nexport type TorusAggregateLoginResponse = TorusAggregateVerifierResponse & TorusKey;\nexport type TorusHybridAggregateLoginResponse = { singleLogin: TorusLoginResponse; aggregateLogins: TorusKey[] };\n\nexport interface CustomAuthArgs {\n  /**\n   * baseUrl , along with redirectPathName is used to construct the uri of page\n   * where user will be redirected after login.\n   *\n   * @remarks\n   * Redirect Uri for OAuth is `baseUrl`+`redirectPathName` which means\n   * that you must specify `baseUrl`+`redirectPathName` as redirect_uri at verifier's\n   * interface.\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if baseUrl is \"http://localhost:3000/serviceworker\" and\n   * redirectPathName is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * Using serviceworker is optional, you can skip it by passing `skipSw` param\n   * in init function\n   *\n   * Use of serviceworker is recommended if you are using popup uxMode or\n   * for browsers where service workers are not supported or if you wish to not use\n   * service workers, create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * In redirect uxMode, you don't have to use serviceworker or redirect.html file.\n   * You can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  baseUrl: string;\n\n  /**\n   * Specify a custom metadata host\n   * @defaultValue https://metadata.tor.us\n   */\n  metadataUrl?: string;\n\n  /**\n   * Torus Network to target options: mainnet | testnet | cyan | aqua\n   * @defaultValue mainnet\n   */\n  network?: TORUS_NETWORK_TYPE;\n\n  /**\n   * Network Url to read blockchain data from (eg: infura url)\n   */\n  networkUrl?: string;\n\n  /**\n   * This option is used to specify whether to enable logging\n   *\n   * @defaultValue false\n   */\n  enableLogging?: boolean;\n\n  /**\n   * Use one key features\n   *\n   * @defaultValue false\n   */\n  enableOneKey?: boolean;\n\n  /**\n   * For chrome extensions, the general methods for capturing auth redirects don't work.\n   * So, we redirect to the window which opens the auth window.\n   *\n   * @defaultValue false\n   */\n  redirectToOpener?: boolean;\n\n  /**\n   * This option is used to specify the url path where user will be\n   * redirected after login. Redirect Uri for OAuth is baseUrl/redirectPathName.\n   *\n   *\n   * @defaultValue redirect\n   *\n   * @remarks\n   * At verifier's interface (where you obtain client id), please use baseUrl/redirectPathName\n   * as the redirect_uri\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if `baseUrl` is \"http://localhost:3000/serviceworker\" and\n   * `redirectPathName` is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * For browsers where service workers are not supported or if you wish to not use\n   * service workers,create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * If you are using redirect uxMode, you can get the results directly on your `redirectPathName`\n   * path using `getRedirectResult` function.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  redirectPathName?: string;\n\n  /**\n   * API Key for torus to enable higher access limits\n   *\n   */\n  apiKey?: string;\n  /**\n   * Two uxModes are supported:-\n   * - `'popup'`: In this uxMode, a popup will be shown to user for login.\n   * - `'redirect'`: In this uxMode, user will be redirected to a new window tab for login.\n   *\n   * @defaultValue `'popup'`\n   * @remarks\n   *\n   * Use of `'REDIRECT'` mode is recommended in browsers where popups might get blocked.\n   */\n  uxMode?: UX_MODE_TYPE;\n\n  /**\n   * Whether to replace the url hash/query params from OAuth at the end of the redirect flow\n   *\n   * @defaultValue false\n   */\n  locationReplaceOnRedirect?: boolean;\n\n  /**\n   * Features of popup window. Please check https://developer.mozilla.org/en-US/docs/Web/API/Window/open#window_features\n   * for further documentation.\n   */\n  popupFeatures?: string;\n  /**\n   * Specify a custom storage server url\n   * @defaultValue https://broadcast-server.tor.us\n   */\n  storageServerUrl?: string;\n\n  sentry?: Sentry;\n}\n\nexport interface InitParams {\n  /**\n   * skips the installation / check for service worker\n   * @defaultValue false\n   */\n  skipSw?: boolean;\n\n  /**\n   * skips the init function\n   * @defaultValue false\n   */\n  skipInit?: boolean;\n\n  /**\n   * skips the prefetching of redirect url\n   * @defaultValue false\n   *\n   */\n  skipPrefetch?: boolean;\n}\n\n// REGION: AUTH0 PARAMS\nexport interface BaseLoginOptions {\n  /**\n   * If you need to send custom parameters to the Authorization Server,\n   * make sure to use the original parameter name.\n   */\n  [key: string]: unknown;\n  /**\n   * - `'page'`: displays the UI with a full page view\n   * - `'popup'`: displays the UI with a popup window\n   * - `'touch'`: displays the UI in a way that leverages a touch interface\n   * - `'wap'`: displays the UI with a \"feature phone\" type interface\n   */\n  display?: \"page\" | \"popup\" | \"touch\" | \"wap\" | string;\n  /**\n   * - `'none'`: do not prompt user for login or consent on reauthentication\n   * - `'login'`: prompt user for reauthentication\n   * - `'consent'`: prompt user for consent before processing request\n   * - `'select_account'`: prompt user to select an account\n   */\n  prompt?: \"none\" | \"login\" | \"consent\" | \"select_account\" | string;\n  /**\n   * Maximum allowable elasped time (in seconds) since authentication.\n   * If the last time the user authenticated is greater than this value,\n   * the user must be reauthenticated.\n   */\n  max_age?: string | number;\n  /**\n   * The space-separated list of language tags, ordered by preference.\n   * For example: `'fr-CA fr en'`.\n   */\n  ui_locales?: string;\n  /**\n   * Previously issued ID Token.\n   */\n  id_token_hint?: string;\n  /**\n   * The user's email address or other identifier. When your app knows\n   * which user is trying to authenticate, you can provide this parameter\n   * to pre-fill the email box or select the right session for sign-in.\n   *\n   * This currently only affects the classic Lock experience.\n   */\n  login_hint?: string;\n  acr_values?: string;\n  /**\n   * The default scope to be used on authentication requests.\n   * The defaultScope defined in the Auth0Client is included\n   * along with this scope\n   */\n  scope?: string;\n  /**\n   * The default audience to be used for requesting API access.\n   */\n  audience?: string;\n  /**\n   * The name of the connection configured for your application.\n   * If null, it will redirect to the Auth0 Login Page and show\n   * the Login Widget.\n   */\n  connection?: string;\n}\n\nexport interface Auth0ClientOptions extends BaseLoginOptions {\n  /**\n   * Your Auth0 account domain such as `'example.auth0.com'`,\n   * `'example.eu.auth0.com'` or , `'example.mycompany.com'`\n   * (when using [custom domains](https://auth0.com/docs/custom-domains))\n   */\n  domain: string;\n  /**\n   * The Client ID found on your Application settings page\n   */\n  client_id?: string;\n  /**\n   * The default URL where Auth0 will redirect your browser to with\n   * the authentication result. It must be whitelisted in\n   * the \"Allowed Callback URLs\" field in your Auth0 Application's\n   * settings. If not provided here, it should be provided in the other\n   * methods that provide authentication.\n   */\n  redirect_uri?: string;\n  /**\n   * The value in seconds used to account for clock skew in JWT expirations.\n   * Typically, this value is no more than a minute or two at maximum.\n   * Defaults to 60s.\n   */\n  leeway?: number;\n\n  /**\n   * The field in jwt token which maps to verifier id\n   */\n  verifierIdField?: string;\n\n  /**\n   * Whether the verifier id field is case sensitive\n   * @defaultValue true\n   */\n  isVerifierIdCaseSensitive?: boolean;\n\n  id_token?: string;\n\n  access_token?: string;\n  /**\n   * The route for user info endpoint. This will be padded to domain\n   * @defaultValue userinfo\n   * */\n  user_info_route?: string;\n}\n\nexport interface SubVerifierDetails {\n  typeOfLogin: LOGIN_TYPE;\n  verifier: string;\n  clientId: string;\n  jwtParams?: Auth0ClientOptions;\n  hash?: string;\n  queryParameters?: TorusGenericObject;\n  customState?: TorusGenericObject;\n}\n\nexport interface CreateHandlerParams {\n  typeOfLogin: LOGIN_TYPE;\n  clientId: string;\n  verifier: string;\n  redirect_uri: string;\n  uxMode?: UX_MODE_TYPE;\n  redirectToOpener?: boolean;\n  jwtParams?: Auth0ClientOptions;\n  customState?: TorusGenericObject;\n  registerOnly?: boolean;\n}\n\nexport interface RedirectResultParams {\n  replaceUrl?: boolean;\n  clearLoginDetails?: boolean;\n}\n\nexport type SingleLoginParams = SubVerifierDetails & { registerOnly?: boolean };\n\nexport interface AggregateLoginParams {\n  aggregateVerifierType: AGGREGATE_VERIFIER_TYPE;\n  verifierIdentifier: string;\n  subVerifierDetailsArray: SubVerifierDetails[];\n}\n\nexport interface HybridAggregateLoginParams {\n  singleLogin: SubVerifierDetails;\n  aggregateLoginParams: AggregateLoginParams;\n}\n\nexport type LoginDetails = { method: TORUS_METHOD_TYPE; args: SingleLoginParams | AggregateLoginParams | HybridAggregateLoginParams };\n\nexport interface RedirectResult {\n  method: TORUS_METHOD_TYPE;\n  result?: TorusLoginResponse | TorusAggregateLoginResponse | TorusHybridAggregateLoginResponse | unknown;\n  error?: string;\n  state: Record<string, unknown>;\n  hashParameters?: Record<string, string>;\n  args: SingleLoginParams | AggregateLoginParams | HybridAggregateLoginParams;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/torus.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"web3-utils\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@chaitanyapotti/register-service-worker\");","import { register } from \"@chaitanyapotti/register-service-worker\";\n\nimport log from \"./utils/loglevel\";\n\nexport const registerServiceWorker = (baseUrl: string) =>\n  new Promise((resolve, reject) => {\n    const swUrl = `${baseUrl}sw.js`;\n\n    if (\"serviceWorker\" in window.navigator) {\n      // if swIntegrity is not calculated\n      register(swUrl, {\n        ready() {\n          log.info(\"App is being served from cache by a service worker.\\n For more details, visit https://goo.gl/AFskqB\");\n          resolve(undefined);\n        },\n        registered() {\n          log.info(\"Service worker has been registered.\");\n          resolve(undefined);\n        },\n        cached() {\n          log.info(\"Content has been cached for offline use.\");\n          resolve(undefined);\n        },\n        updatefound() {\n          log.info(\"New content is downloading.\");\n        },\n        updated() {\n          log.info(\"New content is available; please refresh.\");\n        },\n        offline() {\n          log.info(\"No internet connection found. App is running in offline mode.\");\n          reject(new Error(\"App is offline\"));\n        },\n        error(error) {\n          log.error(\"Error during service worker registration:\", error);\n          reject(error);\n        },\n      });\n    } else {\n      reject(new Error(\"Service workers are not supported\"));\n    }\n  });\n","import type { Transaction, TransactionContext } from \"@sentry/types\";\n\nimport { SENTRY_TXNS } from \"./utils/enums\";\n\nexport interface Sentry {\n  startTransaction(_: TransactionContext): Transaction;\n}\nexport default class SentryHandler {\n  sentry: Sentry | null = null;\n\n  chainUrl = \"\";\n\n  constructor(sentry?: Sentry, chainUrl?: string) {\n    this.sentry = sentry;\n    this.chainUrl = chainUrl;\n  }\n\n  startTransaction(context: TransactionContext): Transaction | void {\n    if (this.sentry) {\n      if (context.name === SENTRY_TXNS.FETCH_NODE_DETAILS && this.chainUrl) {\n        context.name += this.chainUrl;\n      }\n      return this.sentry.startTransaction(context);\n    }\n  }\n\n  finishTransaction(tx: void | Transaction): void {\n    if (tx) {\n      tx.finish();\n    }\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/metadata-helpers\");","import { getPublic, sign } from \"@toruslabs/eccrypto\";\nimport { get, post } from \"@toruslabs/http-helpers\";\nimport { decryptData, encryptData, keccak256 } from \"@toruslabs/metadata-helpers\";\n\nimport { LoginDetails } from \"../handlers/interfaces\";\nimport { REDIRECT_PARAMS_STORAGE_METHOD, REDIRECT_PARAMS_STORAGE_METHOD_TYPE } from \"./enums\";\nimport { are3PCSupported, storageAvailable } from \"./helpers\";\n\nclass StorageHelper {\n  private currentStorageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE = REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE;\n\n  private isInitialized = false;\n\n  private storageServerUrl = \"https://broadcast-server.tor.us\";\n\n  constructor(serverUrl: string) {\n    this.storageServerUrl = serverUrl;\n  }\n\n  init() {\n    const support = are3PCSupported();\n    const localStorageAvailable = storageAvailable(REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE);\n    if (support && localStorageAvailable) {\n      // use local storage as default for storing stuff\n      this.currentStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE;\n    } else {\n      // use server store as default for storing stuff\n      this.currentStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.SERVER;\n    }\n    this.isInitialized = true;\n  }\n\n  async storeLoginDetails(params: LoginDetails, scope: string): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.SERVER) {\n      const privKey = keccak256(scope);\n      const privKeyHex = privKey.toString(\"hex\");\n      const publicKeyHex = getPublic(privKey).toString(\"hex\");\n      const encData = await encryptData(privKeyHex, params);\n      const signature = (await sign(privKey, keccak256(encData))).toString(\"hex\");\n      await post(`${this.storageServerUrl}/store/set`, { key: publicKeyHex, data: encData, signature });\n    } else {\n      window.localStorage.setItem(`torus_login_${scope}`, JSON.stringify(params));\n    }\n  }\n\n  async retrieveLoginDetails(scope: string): Promise<LoginDetails> {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.SERVER) {\n      const privKey = keccak256(scope);\n      const privKeyHex = privKey.toString(\"hex\");\n      const publicKeyHex = getPublic(privKey).toString(\"hex\");\n      const encData: { message: string; success: boolean } = await get(`${this.storageServerUrl}/store/get?key=${publicKeyHex}`);\n      const loginDetails = await decryptData<LoginDetails>(privKeyHex, encData.message);\n      return loginDetails;\n    }\n    const loginDetails = window.localStorage.getItem(`torus_login_${scope}`);\n    return JSON.parse(loginDetails || \"{}\") as LoginDetails;\n  }\n\n  clearLoginDetailsStorage(scope: string): void {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE) {\n      window.localStorage.removeItem(`torus_login_${scope}`);\n    }\n    // No need to clear server details cause they auto expire and scope is never re-used for different login attempts\n  }\n\n  clearOrphanedLoginDetails(): void {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE) {\n      const allStorageKeys = Object.keys(window.localStorage);\n      allStorageKeys.forEach((key) => {\n        if (key.startsWith(\"torus_login_\")) {\n          window.localStorage.removeItem(key);\n        }\n      });\n    }\n    // No need to clear server details cause they auto expire and scope is never re-used for different login attempts\n  }\n}\n\nexport default StorageHelper;\n","import NodeDetailManager, { TORUS_NETWORK } from \"@toruslabs/fetch-node-details\";\nimport Torus, { keyLookup } from \"@toruslabs/torus.js\";\nimport { keccak256 } from \"web3-utils\";\n\nimport createHandler from \"./handlers/HandlerFactory\";\nimport {\n  AggregateLoginParams,\n  CustomAuthArgs,\n  ExtraParams,\n  HybridAggregateLoginParams,\n  ILoginHandler,\n  InitParams,\n  LoginWindowResponse,\n  RedirectResult,\n  RedirectResultParams,\n  SingleLoginParams,\n  SkipTorusKey,\n  SubVerifierDetails,\n  TorusAggregateLoginResponse,\n  TorusHybridAggregateLoginResponse,\n  TorusKey,\n  TorusLoginResponse,\n  TorusSubVerifierInfo,\n  TorusVerifierResponse,\n} from \"./handlers/interfaces\";\nimport { registerServiceWorker } from \"./registerServiceWorker\";\nimport SentryHandler from \"./sentry\";\nimport { AGGREGATE_VERIFIER, CONTRACT_MAP, LOGIN, SENTRY_TXNS, SIGNER_MAP, TORUS_METHOD, UX_MODE, UX_MODE_TYPE } from \"./utils/enums\";\nimport { handleRedirectParameters, isFirefox, padUrlString } from \"./utils/helpers\";\nimport log from \"./utils/loglevel\";\nimport StorageHelper from \"./utils/StorageHelper\";\n\nclass CustomAuth {\n  isInitialized: boolean;\n\n  config: {\n    baseUrl: string;\n    redirectToOpener: boolean;\n    redirect_uri: string;\n    uxMode: UX_MODE_TYPE;\n    locationReplaceOnRedirect: boolean;\n    popupFeatures: string;\n  };\n\n  torus: Torus;\n\n  nodeDetailManager: NodeDetailManager;\n\n  storageHelper: StorageHelper;\n\n  sentryHandler: SentryHandler;\n\n  constructor({\n    baseUrl,\n    network = TORUS_NETWORK.MAINNET,\n    enableLogging = false,\n    enableOneKey = false,\n    redirectToOpener = false,\n    redirectPathName = \"redirect\",\n    apiKey = \"torus-default\",\n    uxMode = UX_MODE.POPUP,\n    locationReplaceOnRedirect = false,\n    popupFeatures,\n    metadataUrl = \"https://metadata.tor.us\",\n    storageServerUrl = \"https://broadcast-server.tor.us\",\n    networkUrl,\n    sentry,\n  }: CustomAuthArgs) {\n    this.isInitialized = false;\n    const baseUri = new URL(baseUrl);\n    this.config = {\n      baseUrl: padUrlString(baseUri),\n      get redirect_uri() {\n        return `${this.baseUrl}${redirectPathName}`;\n      },\n      redirectToOpener,\n      uxMode,\n      locationReplaceOnRedirect,\n      popupFeatures,\n    };\n    const torus = new Torus({\n      enableOneKey,\n      metadataHost: metadataUrl,\n      allowHost: `${SIGNER_MAP[network]}/api/allow`,\n      signerHost: `${SIGNER_MAP[network]}/api/sign`,\n      network,\n    });\n    Torus.setAPIKey(apiKey);\n    this.torus = torus;\n    this.nodeDetailManager = new NodeDetailManager({ network: networkUrl || network, proxyAddress: CONTRACT_MAP[network] });\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n    this.storageHelper = new StorageHelper(storageServerUrl);\n    this.sentryHandler = new SentryHandler(sentry, networkUrl);\n  }\n\n  async init({ skipSw = false, skipInit = false, skipPrefetch = false }: InitParams = {}): Promise<void> {\n    this.storageHelper.init();\n    if (skipInit) {\n      this.isInitialized = true;\n      return;\n    }\n    if (!skipSw) {\n      const fetchSwResponse = await fetch(`${this.config.baseUrl}sw.js`, { cache: \"reload\" });\n      if (fetchSwResponse.ok) {\n        try {\n          await registerServiceWorker(this.config.baseUrl);\n          this.isInitialized = true;\n          return;\n        } catch (error) {\n          log.warn(error);\n        }\n      } else {\n        throw new Error(\"Service worker is not being served. Please serve it\");\n      }\n    }\n    if (!skipPrefetch) {\n      // Skip the redirect check for firefox\n      if (isFirefox()) {\n        this.isInitialized = true;\n        return;\n      }\n      await this.handlePrefetchRedirectUri();\n      return;\n    }\n    this.isInitialized = true;\n  }\n\n  async triggerLogin(args: SingleLoginParams & { skipTorusKey?: SkipTorusKey; checkIfNewKey?: boolean }): Promise<TorusLoginResponse> {\n    // eslint-disable-next-line\n    console.time(\"trigger\");\n    const {\n      verifier,\n      typeOfLogin,\n      clientId,\n      jwtParams,\n      hash,\n      queryParameters,\n      customState,\n      registerOnly,\n      skipTorusKey = SkipTorusKey.Never,\n      checkIfNewKey = false,\n    } = args;\n    log.info(\"Verifier: \", verifier);\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (registerOnly && typeOfLogin !== LOGIN.WEBAUTHN) throw new Error(\"registerOnly flag can only be passed for webauthn\");\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n      registerOnly,\n    });\n    let loginParams: LoginWindowResponse;\n    if (hash && queryParameters) {\n      const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n      if (error) throw new Error(error);\n      const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n      // State has to be last here otherwise it will be overwritten\n      loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n    } else {\n      this.storageHelper.clearOrphanedLoginDetails();\n      await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_LOGIN, args }, loginHandler.nonce);\n      loginParams = await loginHandler.handleLoginWindow({\n        locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n        popupFeatures: this.config.popupFeatures,\n      });\n      if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    }\n\n    const userInfo = await loginHandler.getUserInfo(loginParams);\n    if (registerOnly) {\n      const nodeTx = this.sentryHandler.startTransaction({\n        name: SENTRY_TXNS.FETCH_NODE_DETAILS,\n      });\n      const { torusNodeEndpoints, torusNodePub } = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId: userInfo.verifierId });\n      this.sentryHandler.finishTransaction(nodeTx);\n      const lookupTx = this.sentryHandler.startTransaction({\n        name: SENTRY_TXNS.PUB_ADDRESS_LOOKUP,\n      });\n      const torusPubKey = await this.torus.getPublicAddress(torusNodeEndpoints, torusNodePub, { verifier, verifierId: userInfo.verifierId }, true);\n      this.sentryHandler.finishTransaction(lookupTx);\n      const res = {\n        userInfo: {\n          ...userInfo,\n          ...loginParams,\n        },\n      };\n      if (typeof torusPubKey === \"string\") {\n        throw new Error(\"should have returned extended pub key\");\n      }\n      const torusKey: TorusKey = {\n        typeOfUser: torusPubKey.typeOfUser,\n        pubKey: {\n          pub_key_X: torusPubKey.X,\n          pub_key_Y: torusPubKey.Y,\n        },\n        publicAddress: torusPubKey.address,\n        privateKey: null,\n        metadataNonce: null,\n      };\n      return { ...res, ...torusKey };\n    }\n    let skip = true;\n    let existingPk: { X: string; Y: string };\n    if (checkIfNewKey || skipTorusKey === SkipTorusKey.IfNew) {\n      const { torusNodeEndpoints } = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId: userInfo.verifierId });\n      const lookupData = await keyLookup(torusNodeEndpoints, verifier, userInfo.verifierId);\n      existingPk = lookupData?.keyResult?.keys?.length\n        ? { X: lookupData?.keyResult?.keys[0].pub_key_X, Y: lookupData?.keyResult?.keys[0].pub_key_Y }\n        : undefined;\n    }\n    switch (skipTorusKey) {\n      case SkipTorusKey.IfNew:\n        skip = !existingPk;\n        break;\n      case SkipTorusKey.Always:\n        skip = true;\n        break;\n      case SkipTorusKey.Never:\n        skip = false;\n        break;\n      default:\n        throw new Error(\"Invalid SkipTorusKey\");\n    }\n    const torusKey = skip\n      ? (undefined as TorusKey)\n      : await this.getTorusKey(\n          verifier,\n          userInfo.verifierId,\n          { verifier_id: userInfo.verifierId },\n          loginParams.idToken || loginParams.accessToken,\n          userInfo.extraVerifierParams\n        );\n    // eslint-disable-next-line\n    console.timeEnd(\"trigger\");\n    return {\n      ...torusKey,\n      existingPk,\n      userInfo: {\n        ...userInfo,\n        ...loginParams,\n      },\n    };\n  }\n\n  async triggerAggregateLogin(\n    args: AggregateLoginParams & { skipTorusKey?: SkipTorusKey; checkIfNewKey?: boolean }\n  ): Promise<TorusAggregateLoginResponse> {\n    // eslint-disable-next-line\n    console.time(\"trigger\");\n    // This method shall break if any of the promises fail. This behaviour is intended\n    const { aggregateVerifierType, verifierIdentifier, subVerifierDetailsArray, skipTorusKey = SkipTorusKey.Never, checkIfNewKey = false } = args;\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (!aggregateVerifierType || !verifierIdentifier || !Array.isArray(subVerifierDetailsArray)) {\n      throw new Error(\"Invalid params\");\n    }\n    if (aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID && subVerifierDetailsArray.length !== 1) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const userInfoPromises: Promise<TorusVerifierResponse>[] = [];\n    const loginParamsArray: LoginWindowResponse[] = [];\n    for (const subVerifierDetail of subVerifierDetailsArray) {\n      const { clientId, typeOfLogin, verifier, jwtParams, hash, queryParameters, customState } = subVerifierDetail;\n      const loginHandler: ILoginHandler = createHandler({\n        typeOfLogin,\n        clientId,\n        verifier,\n        redirect_uri: this.config.redirect_uri,\n        redirectToOpener: this.config.redirectToOpener,\n        jwtParams,\n        uxMode: this.config.uxMode,\n        customState,\n      });\n      // We let the user login to each verifier in a loop. Don't wait for key derivation here.!\n      let loginParams: LoginWindowResponse;\n      if (hash && queryParameters) {\n        const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n        if (error) throw new Error(error);\n        const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n        // State has to be last here otherwise it will be overwritten\n        loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n      } else {\n        this.storageHelper.clearOrphanedLoginDetails();\n        await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN, args }, loginHandler.nonce);\n        loginParams = await loginHandler.handleLoginWindow({\n          locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n          popupFeatures: this.config.popupFeatures,\n        });\n        if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n      }\n      // Fail the method even if one promise fails\n\n      userInfoPromises.push(loginHandler.getUserInfo(loginParams));\n      loginParamsArray.push(loginParams);\n    }\n    const _userInfoArray = await Promise.all(userInfoPromises);\n    const userInfoArray = _userInfoArray.map((userInfo) => ({ ...userInfo, aggregateVerifier: verifierIdentifier }));\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const loginParams = loginParamsArray[index];\n      const { idToken, accessToken } = loginParams;\n      const userInfo = userInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const userInfoData = userInfoArray.map((x, index) => ({ ...x, ...loginParamsArray[index] }));\n    let skip = true;\n    let existingPk: { X: string; Y: string };\n    if (checkIfNewKey || skipTorusKey === SkipTorusKey.IfNew) {\n      const { torusNodeEndpoints } = await this.nodeDetailManager.getNodeDetails({\n        verifier: args.verifierIdentifier,\n        verifierId: userInfoData[0].verifierId,\n      });\n      const lookupData = await keyLookup(torusNodeEndpoints, args.verifierIdentifier, userInfoData[0].verifierId);\n      existingPk = lookupData?.keyResult?.keys?.length\n        ? { X: lookupData?.keyResult?.keys[0].pub_key_X, Y: lookupData?.keyResult?.keys[0].pub_key_Y }\n        : undefined;\n    }\n    switch (skipTorusKey) {\n      case SkipTorusKey.IfNew:\n        skip = !existingPk;\n        break;\n      case SkipTorusKey.Always:\n        skip = true;\n        break;\n      case SkipTorusKey.Never:\n        skip = false;\n        break;\n      default:\n        throw new Error(\"Invalid SkipTorusKey\");\n    }\n    const torusKey = skip\n      ? (undefined as TorusKey)\n      : await this.getTorusKey(verifierIdentifier, aggregateVerifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n    // eslint-disable-next-line\n    console.timeEnd(\"trigger\");\n    return {\n      ...torusKey,\n      existingPk,\n      userInfo: userInfoArray.map((x, index) => ({ ...x, ...loginParamsArray[index] })),\n    };\n  }\n\n  async triggerHybridAggregateLogin(args: HybridAggregateLoginParams): Promise<TorusHybridAggregateLoginResponse> {\n    const { singleLogin, aggregateLoginParams } = args;\n    // This method shall break if any of the promises fail. This behaviour is intended\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (\n      !aggregateLoginParams.aggregateVerifierType ||\n      !aggregateLoginParams.verifierIdentifier ||\n      !Array.isArray(aggregateLoginParams.subVerifierDetailsArray)\n    ) {\n      throw new Error(\"Invalid params\");\n    }\n    if (\n      aggregateLoginParams.aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID &&\n      aggregateLoginParams.subVerifierDetailsArray.length !== 1\n    ) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const { typeOfLogin, clientId, verifier, jwtParams, hash, queryParameters, customState } = singleLogin;\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n    });\n    let loginParams: LoginWindowResponse;\n    if (hash && queryParameters) {\n      const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n      if (error) throw new Error(error);\n      const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n      // State has to be last here otherwise it will be overwritten\n      loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n    } else {\n      this.storageHelper.clearOrphanedLoginDetails();\n      await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN, args }, loginHandler.nonce);\n      loginParams = await loginHandler.handleLoginWindow({\n        locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n        popupFeatures: this.config.popupFeatures,\n      });\n      if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    }\n\n    const userInfo = await loginHandler.getUserInfo(loginParams);\n    const torusKey1Promise = this.getTorusKey(\n      verifier,\n      userInfo.verifierId,\n      { verifier_id: userInfo.verifierId },\n      loginParams.idToken || loginParams.accessToken,\n      userInfo.extraVerifierParams\n    );\n\n    const { verifierIdentifier, subVerifierDetailsArray } = aggregateLoginParams;\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const sub = subVerifierDetailsArray[index];\n      const { idToken, accessToken } = loginParams;\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(sub.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const torusKey2Promise = this.getTorusKey(\n      verifierIdentifier,\n      aggregateVerifierId,\n      aggregateVerifierParams,\n      aggregateIdToken,\n      userInfo.extraVerifierParams\n    );\n    const [torusKey1, torusKey2] = await Promise.all([torusKey1Promise, torusKey2Promise]);\n    return {\n      singleLogin: {\n        userInfo: { ...userInfo, ...loginParams },\n        ...torusKey1,\n      },\n      aggregateLogins: [torusKey2],\n    };\n  }\n\n  async getTorusKey(\n    verifier: string,\n    verifierId: string,\n    verifierParams: { verifier_id: string },\n    idToken: string,\n    additionalParams?: ExtraParams\n  ): Promise<TorusKey> {\n    const nodeTx = this.sentryHandler.startTransaction({\n      name: SENTRY_TXNS.FETCH_NODE_DETAILS,\n    });\n    const { torusNodeEndpoints, torusNodePub, torusIndexes } = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId });\n    this.sentryHandler.finishTransaction(nodeTx);\n    log.debug(\"torus-direct/getTorusKey\", { torusNodeEndpoints, torusNodePub, torusIndexes });\n\n    const pubLookupTx = this.sentryHandler.startTransaction({\n      name: SENTRY_TXNS.PUB_ADDRESS_LOOKUP,\n    });\n    const address = await this.torus.getPublicAddress(torusNodeEndpoints, torusNodePub, { verifier, verifierId }, true);\n    this.sentryHandler.finishTransaction(pubLookupTx);\n    if (typeof address === \"string\") throw new Error(\"must use extended pub key\");\n    log.debug(\"torus-direct/getTorusKey\", { getPublicAddress: address });\n\n    const sharesTx = this.sentryHandler.startTransaction({\n      name: SENTRY_TXNS.FETCH_SHARES,\n    });\n    const shares = await this.torus.retrieveShares(torusNodeEndpoints, torusIndexes, verifier, verifierParams, idToken, additionalParams);\n    this.sentryHandler.finishTransaction(sharesTx);\n    if (shares.ethAddress.toLowerCase() !== address.address.toLowerCase()) {\n      throw new Error(\"data ethAddress does not match response address\");\n    }\n    log.debug(\"torus-direct/getTorusKey\", { retrieveShares: shares });\n\n    return {\n      publicAddress: shares.ethAddress.toString(),\n      privateKey: shares.privKey.toString(),\n      metadataNonce: shares.metadataNonce.toString(\"hex\"),\n      typeOfUser: address.typeOfUser,\n      pubKey: {\n        pub_key_X: address.X,\n        pub_key_Y: address.Y,\n      },\n    };\n  }\n\n  async getAggregateTorusKey(\n    verifier: string,\n    verifierId: string, // unique identifier for user e.g. sub on jwt\n    subVerifierInfoArray: TorusSubVerifierInfo[]\n  ): Promise<TorusKey> {\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierInfoArray.length; index += 1) {\n      const userInfo = subVerifierInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: verifierId, idtoken: userInfo.idToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(userInfo.idToken);\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = verifierId;\n    return this.getTorusKey(verifier, verifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey: string, nonce: string): string {\n    return this.torus.getPostboxKeyFrom1OutOf1(privKey, nonce);\n  }\n\n  async getRedirectResult({ replaceUrl = true, clearLoginDetails = true }: RedirectResultParams = {}): Promise<RedirectResult> {\n    await this.init({ skipInit: true });\n    const url = new URL(window.location.href);\n    const hash = url.hash.substring(1);\n    const queryParams = {};\n    url.searchParams.forEach((value, key) => {\n      queryParams[key] = value;\n    });\n\n    if (replaceUrl) {\n      const cleanUrl = window.location.origin + window.location.pathname;\n      window.history.replaceState(null, \"\", cleanUrl);\n    }\n\n    if (!hash && Object.keys(queryParams).length === 0) {\n      throw new Error(\"Unable to fetch result from OAuth login\");\n    }\n\n    const { error, instanceParameters, hashParameters } = handleRedirectParameters(hash, queryParams);\n\n    const { instanceId } = instanceParameters;\n\n    log.info(instanceId, \"instanceId\");\n\n    const { args, method, ...rest } = await this.storageHelper.retrieveLoginDetails(instanceId);\n    log.info(args, method);\n\n    if (clearLoginDetails) {\n      this.storageHelper.clearLoginDetailsStorage(instanceId);\n    }\n\n    if (error) {\n      return { error, state: instanceParameters || {}, method, result: {}, hashParameters, args };\n    }\n\n    let result: unknown;\n\n    try {\n      if (method === TORUS_METHOD.TRIGGER_LOGIN) {\n        const methodArgs = args as SubVerifierDetails & { registerOnly?: boolean };\n        methodArgs.hash = hash;\n        methodArgs.queryParameters = queryParams;\n        result = await this.triggerLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        const methodArgs = args as AggregateLoginParams;\n        methodArgs.subVerifierDetailsArray.forEach((x) => {\n          x.hash = hash;\n          x.queryParameters = queryParams;\n        });\n        result = await this.triggerAggregateLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN) {\n        const methodArgs = args as HybridAggregateLoginParams;\n        methodArgs.singleLogin.hash = hash;\n        methodArgs.singleLogin.queryParameters = queryParams;\n        result = await this.triggerHybridAggregateLogin(methodArgs);\n      }\n    } catch (err) {\n      log.error(err);\n      return {\n        error: `Could not get result from torus nodes \\n ${err?.message || \"\"}`,\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n    }\n\n    if (!result)\n      return {\n        error: \"Unsupported method type\",\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n\n    return { method, result, state: instanceParameters || {}, hashParameters, args, ...rest };\n  }\n\n  private async handlePrefetchRedirectUri(): Promise<void> {\n    if (!document) return Promise.resolve();\n    return new Promise((resolve, reject) => {\n      const redirectHtml = document.createElement(\"link\");\n      redirectHtml.href = this.config.redirect_uri;\n      if (window.location.origin !== new URL(this.config.redirect_uri).origin) redirectHtml.crossOrigin = \"anonymous\";\n      redirectHtml.type = \"text/html\";\n      redirectHtml.rel = \"prefetch\";\n      const resolveFn = () => {\n        this.isInitialized = true;\n        resolve();\n      };\n      try {\n        if (redirectHtml.relList && redirectHtml.relList.supports) {\n          if (redirectHtml.relList.supports(\"prefetch\")) {\n            redirectHtml.onload = resolveFn;\n            redirectHtml.onerror = () => {\n              reject(new Error(`Please serve redirect.html present in serviceworker folder of this package on ${this.config.redirect_uri}`));\n            };\n            document.head.appendChild(redirectHtml);\n          } else {\n            // Link prefetch is not supported. pass through\n            resolveFn();\n          }\n        } else {\n          // Link prefetch is not detectable. pass through\n          resolveFn();\n        }\n      } catch (err) {\n        resolveFn();\n      }\n    });\n  }\n}\n\nexport default CustomAuth;\n","export { default as createHandler } from \"./handlers/HandlerFactory\";\nexport * from \"./handlers/interfaces\";\nexport { default } from \"./login\";\nexport * from \"./utils/enums\";\nexport * from \"./utils/helpers\";\n"],"names":["NodeDetailManager","TORUS_NETWORK","LOGIN","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","GITHUB","LINKEDIN","TWITTER","WEIBO","LINE","EMAIL_PASSWORD","PASSWORDLESS","JWT","WEBAUTHN","AGGREGATE_VERIFIER","SINGLE_VERIFIER_ID","UX_MODE","POPUP","REDIRECT","REDIRECT_PARAMS_STORAGE_METHOD","LOCAL_STORAGE","SESSION_STORAGE","SERVER","TORUS_METHOD","TRIGGER_LOGIN","TRIGGER_AGGREGATE_LOGIN","TRIGGER_AGGREGATE_HYBRID_LOGIN","CONTRACT_MAP","MAINNET","PROXY_ADDRESS_MAINNET","TESTNET","PROXY_ADDRESS_TESTNET","CYAN","PROXY_ADDRESS_CYAN","AQUA","PROXY_ADDRESS_AQUA","SIGNER_MAP","SENTRY_TXNS","FETCH_NODE_DETAILS","PUB_ADDRESS_LOOKUP","FETCH_SHARES","loglevel","getLogger","Bowser","ENGINE_MAP","log","eventToPromise","emitter","Promise","resolve","reject","handler","ev","error","data","removeEventListener","Error","addEventListener","loginToConnectionMap","padUrlString","url","href","endsWith","randomId","Math","random","toString","slice","broadcastChannelOptions","webWorkerSupport","caseSensitiveField","field","isCaseSensitive","toLowerCase","getVerifierId","userInfo","typeOfLogin","verifierIdField","isVerifierIdCaseSensitive","name","sub","handleRedirectParameters","hash","queryParameters","hashParameters","split","reduce","result","item","part0","part1","info","instanceParameters","Object","keys","length","state","JSON","parse","atob","decodeURIComponent","error_description","storageAvailable","type","storage","window","x","setItem","removeItem","e","code","getPopupFeatures","dualScreenLeft","screenLeft","undefined","screenX","dualScreenTop","screenTop","screenY","w","h","width","innerWidth","document","documentElement","clientWidth","screen","height","innerHeight","clientHeight","systemZoom","left","abs","top","features","isFirefox","navigator","userAgent","indexOf","constructURL","params","baseURL","query","URL","forEach","key","searchParams","append","are3PCSupported","browserInfo","stringify","thirdPartyCookieSupport","brave","engine","WebKit","Gecko","validateAndConstructUrl","domain","message","EventEmitter","PopupHandler","target","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","emit","open","focus","close","locationReplaceOnRedirect","location","replace","BroadcastChannel","AbstractLoginHandler","clientId","verifier","redirect_uri","uxMode","redirectToOpener","jwtParams","customState","encodeURIComponent","btoa","instanceId","nonce","verifierWindow","finalURL","popupFeatures","redirect","bc","handleData","instanceParams","hashParams","accessToken","access_token","idToken","id_token","rest","postMessage","success","postMessageEventHandler","postMessageEvent","channel","once","get","deepmerge","DiscordHandler","setFinalUrl","finalUrl","clonedParams","finalJwtParams","response_type","RESPONSE_TYPE","client_id","scope","SCOPE","headers","Authorization","id","avatar","email","username","discriminator","profileImage","verifierId","FacebookHandler","picture","GoogleHandler","prompt","PROMPT","jwtDecode","JwtHandler","pathname","connection","user_info_route","domainUrl","warn","decodedToken","MockLoginHandler","post","login_hint","phone_number","send","authParams","then","response","catch","RedditHandler","icon_img","TwitchHandler","force_verify","profile_image_url","display_name","WEBAUTHN_LOOKUP_SERVER","WebAuthnHandler","registerOnly","register_only","parameters","ref","extraParamsPassed","extraParams","debug","verifier_id","signature","clientDataJSON","authenticatorData","publicKey","challenge","rpOrigin","credId","extraVerifierParams","PasswordlessHandler","createHandler","SkipTorusKey","register","registerServiceWorker","baseUrl","swUrl","ready","registered","cached","updatefound","updated","offline","SentryHandler","sentry","chainUrl","context","startTransaction","tx","finish","getPublic","sign","decryptData","encryptData","keccak256","StorageHelper","serverUrl","storageServerUrl","support","localStorageAvailable","currentStorageMethod","isInitialized","privKey","privKeyHex","publicKeyHex","encData","localStorage","loginDetails","getItem","allStorageKeys","startsWith","Torus","keyLookup","CustomAuth","network","enableLogging","enableOneKey","redirectPathName","apiKey","metadataUrl","networkUrl","baseUri","config","torus","metadataHost","allowHost","signerHost","setAPIKey","nodeDetailManager","proxyAddress","enableAll","disableAll","storageHelper","sentryHandler","skipSw","skipInit","skipPrefetch","init","fetch","cache","fetchSwResponse","ok","handlePrefetchRedirectUri","args","console","time","skipTorusKey","Never","checkIfNewKey","loginHandler","loginParams","clearOrphanedLoginDetails","storeLoginDetails","method","handleLoginWindow","getUserInfo","nodeTx","getNodeDetails","torusNodeEndpoints","torusNodePub","finishTransaction","lookupTx","getPublicAddress","torusPubKey","res","torusKey","typeOfUser","pubKey","pub_key_X","X","pub_key_Y","Y","publicAddress","address","privateKey","metadataNonce","skip","IfNew","lookupData","existingPk","keyResult","Always","getTorusKey","timeEnd","aggregateVerifierType","verifierIdentifier","subVerifierDetailsArray","Array","isArray","userInfoPromises","loginParamsArray","subVerifierDetail","push","all","_userInfoArray","userInfoArray","map","aggregateVerifier","aggregateVerifierParams","verify_params","sub_verifier_ids","aggregateIdTokenSeeds","aggregateVerifierId","index","idtoken","sort","aggregateIdToken","join","String","fromCharCode","userInfoData","singleLogin","aggregateLoginParams","torusKey1Promise","torusKey2Promise","torusKey1","torusKey2","aggregateLogins","verifierParams","additionalParams","torusIndexes","pubLookupTx","sharesTx","retrieveShares","shares","ethAddress","subVerifierInfoArray","getPostboxKeyFrom1OutOf1","replaceUrl","clearLoginDetails","substring","queryParams","value","cleanUrl","origin","history","replaceState","retrieveLoginDetails","clearLoginDetailsStorage","methodArgs","triggerLogin","triggerAggregateLogin","triggerHybridAggregateLogin","redirectHtml","createElement","crossOrigin","rel","resolveFn","relList","supports","onload","onerror","head","appendChild","err","default"],"sourceRoot":""}