{"version":3,"sources":["webpack://Customauth/webpack/bootstrap","webpack://Customauth/external \"@babel/runtime/helpers/defineProperty\"","webpack://Customauth/external \"@babel/runtime/regenerator\"","webpack://Customauth/external \"@babel/runtime/helpers/asyncToGenerator\"","webpack://Customauth/external \"@babel/runtime/helpers/assertThisInitialized\"","webpack://Customauth/external \"@babel/runtime/helpers/getPrototypeOf\"","webpack://Customauth/external \"@babel/runtime/helpers/classCallCheck\"","webpack://Customauth/external \"@babel/runtime/helpers/createClass\"","webpack://Customauth/external \"@babel/runtime/helpers/inherits\"","webpack://Customauth/external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://Customauth/external \"@toruslabs/http-helpers\"","webpack://Customauth/external \"lodash.merge\"","webpack://Customauth/external \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://Customauth/external \"@babel/runtime/helpers/slicedToArray\"","webpack://Customauth/external \"loglevel\"","webpack://Customauth/external \"jwt-decode\"","webpack://Customauth/external \"@toruslabs/torus.js\"","webpack://Customauth/external \"broadcast-channel\"","webpack://Customauth/external \"web3-utils\"","webpack://Customauth/external \"events\"","webpack://Customauth/external \"@toruslabs/fetch-node-details\"","webpack://Customauth/external \"@chaitanyapotti/register-service-worker\"","webpack://Customauth/./src/utils/enums.ts","webpack://Customauth/./src/utils/loglevel.ts","webpack://Customauth/./src/utils/helpers.ts","webpack://Customauth/./src/utils/PopupHandler.ts","webpack://Customauth/./src/handlers/AbstractLoginHandler.ts","webpack://Customauth/./src/handlers/DiscordHandler.ts","webpack://Customauth/./src/handlers/FacebookHandler.ts","webpack://Customauth/./src/handlers/GoogleHandler.ts","webpack://Customauth/./src/handlers/JwtHandler.ts","webpack://Customauth/./src/handlers/MockLoginHandler.ts","webpack://Customauth/./src/handlers/PasswordlessHandler.ts","webpack://Customauth/./src/handlers/RedditHandler.ts","webpack://Customauth/./src/handlers/TwitchHandler.ts","webpack://Customauth/./src/handlers/WebAuthnHandler.ts","webpack://Customauth/./src/handlers/HandlerFactory.ts","webpack://Customauth/./src/registerServiceWorker.ts","webpack://Customauth/./src/login.ts","webpack://Customauth/./src/index.ts"],"names":["TORUS_NETWORK","TESTNET","MAINNET","ETHEREUM_NETWORK","ROPSTEN","LOGIN","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","GITHUB","LINKEDIN","TWITTER","WEIBO","LINE","EMAIL_PASSWORD","PASSWORDLESS","JWT","WEBAUTHN","AGGREGATE_VERIFIER","SINGLE_VERIFIER_ID","UX_MODE","POPUP","REDIRECT","REDIRECT_PARAMS_STORAGE_METHOD","LOCAL_STORAGE","SESSION_STORAGE","TORUS_METHOD","TRIGGER_LOGIN","TRIGGER_AGGREGATE_LOGIN","TRIGGER_AGGREGATE_HYBRID_LOGIN","CONTRACT_MAP","loglevel","getLogger","eventToPromise","emitter","Promise","resolve","reject","handler","ev","error","data","removeEventListener","Error","addEventListener","loginToConnectionMap","padUrlString","url","href","endsWith","randomId","Math","random","toString","slice","broadcastChannelOptions","webWorkerSupport","caseSensitiveField","field","isCaseSensitive","toLowerCase","getVerifierId","userInfo","typeOfLogin","verifierIdField","isVerifierIdCaseSensitive","name","sub","handleRedirectParameters","hash","queryParameters","hashParameters","split","reduce","result","item","part0","part1","log","info","instanceParameters","Object","keys","length","state","JSON","parse","atob","decodeURIComponent","error_description","storageAvailable","type","storage","window","x","setItem","removeItem","e","code","storageStatus","storeLoginDetails","params","storageMethod","scope","stringify","retrieveLoginDetails","loginDetails","getItem","clearLoginDetailsStorage","clearOrphanedLoginDetails","allStorageKeys","forEach","key","startsWith","getPopupFeatures","dualScreenLeft","screenLeft","undefined","screenX","dualScreenTop","screenTop","screenY","w","h","width","innerWidth","document","documentElement","clientWidth","screen","height","innerHeight","clientHeight","systemZoom","left","abs","top","features","isFirefox","navigator","userAgent","indexOf","constructURL","baseURL","query","URL","searchParams","append","PopupHandler","target","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","emit","open","focus","close","locationReplaceOnRedirect","location","replace","EventEmitter","AbstractLoginHandler","clientId","verifier","redirect_uri","uxMode","redirectToOpener","jwtParams","customState","encodeURIComponent","btoa","instanceId","nonce","verifierWindow","finalURL","popupFeatures","redirect","bc","handleData","instanceParams","hashParams","accessToken","access_token","idToken","id_token","rest","postMessage","success","BroadcastChannel","postMessageEventHandler","postMessageEvent","channel","once","DiscordHandler","setFinalUrl","finalUrl","clonedParams","finalJwtParams","deepmerge","response_type","RESPONSE_TYPE","client_id","SCOPE","get","headers","Authorization","id","avatar","email","username","discriminator","profileImage","verifierId","FacebookHandler","picture","GoogleHandler","prompt","PROMPT","JwtHandler","domain","pathname","connection","user_info_route","domainUrl","warn","decodedToken","jwtDecode","MockLoginHandler","login_hint","phone_number","send","authParams","post","then","response","RedditHandler","icon_img","TwitchHandler","force_verify","profile_image_url","display_name","WEBAUTHN_LOOKUP_SERVER","WebAuthnHandler","registerOnly","register_only","parameters","ref","extraParamsPassed","extraParams","debug","verifier_id","signature","clientDataJSON","authenticatorData","publicKey","challenge","rpOrigin","credId","extraVerifierParams","createHandler","PasswordlessHandler","registerServiceWorker","baseUrl","swUrl","register","ready","registered","cached","updatefound","updated","offline","CustomAuth","network","proxyContractAddress","enableLogging","enableOneKey","redirectPathName","apiKey","redirectParamsStorageMethod","skipFetchingNodeDetails","metadataUrl","isInitialized","baseUri","config","torus","Torus","metadataHost","allowHost","setAPIKey","ethNetwork","nodeDetailManager","NodeDetailManager","proxyAddress","getNodeDetails","enableAll","disableAll","skipSw","skipInit","skipPrefetch","fetch","cache","fetchSwResponse","ok","handlePrefetchRedirectUri","args","skipTorusKey","loginHandler","loginParams","method","handleLoginWindow","getUserInfo","torusNodeEndpoints","torusNodePub","getPublicAddress","torusPubKey","res","torusKey","typeOfUser","pubKey","pub_key_X","X","pub_key_Y","Y","publicAddress","address","privateKey","metadataNonce","skip","keyLookup","lookupData","keyResult","getTorusKey","aggregateVerifierType","verifierIdentifier","subVerifierDetailsArray","Array","isArray","userInfoPromises","loginParamsArray","subVerifierDetail","push","all","_userInfoArray","userInfoArray","map","aggregateVerifier","aggregateVerifierParams","verify_params","sub_verifier_ids","aggregateIdTokenSeeds","aggregateVerifierId","index","idtoken","sort","aggregateIdToken","keccak256","join","String","fromCharCode","userInfoData","singleLogin","aggregateLoginParams","torusKey1Promise","torusKey2Promise","torusKey1","torusKey2","aggregateLogins","verifierParams","additionalParams","torusIndexes","retrieveShares","shares","ethAddress","privKey","subVerifierInfoArray","getPostboxKeyFrom1OutOf1","replaceUrl","clearLoginDetails","init","substr","queryParams","value","cleanUrl","origin","history","replaceState","errorInstance","methodArgs","triggerLogin","triggerAggregateLogin","triggerHybridAggregateLogin","message","redirectHtml","createElement","crossOrigin","rel","resolveFn","relList","supports","onload","onerror","head","appendChild","err"],"mappings":"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","file":"customauth.cjs.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@toruslabs/http-helpers\");","module.exports = require(\"lodash.merge\");","module.exports = require(\"@babel/runtime/helpers/objectWithoutProperties\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"loglevel\");","module.exports = require(\"jwt-decode\");","module.exports = require(\"@toruslabs/torus.js\");","module.exports = require(\"broadcast-channel\");","module.exports = require(\"web3-utils\");","module.exports = require(\"events\");","module.exports = require(\"@toruslabs/fetch-node-details\");","module.exports = require(\"@chaitanyapotti/register-service-worker\");","export const TORUS_NETWORK = {\n  TESTNET: \"testnet\",\n  MAINNET: \"mainnet\",\n} as const;\n\nexport const ETHEREUM_NETWORK = {\n  ROPSTEN: \"ropsten\",\n  MAINNET: \"mainnet\",\n} as const;\n\nexport const LOGIN = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  GITHUB: \"github\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  LINE: \"line\",\n  EMAIL_PASSWORD: \"email_password\",\n  PASSWORDLESS: \"passwordless\",\n  JWT: \"jwt\",\n  WEBAUTHN: \"webauthn\",\n} as const;\n\nexport const AGGREGATE_VERIFIER = {\n  SINGLE_VERIFIER_ID: \"single_id_verifier\",\n  // AND_AGGREGATE_VERIFIER : \"and_aggregate_verifier\",\n  // OR_AGGREGATE_VERIFIER : \"or_aggregate_verifier\",\n} as const;\n\nexport const UX_MODE = {\n  POPUP: \"popup\",\n  REDIRECT: \"redirect\",\n} as const;\n\nexport const REDIRECT_PARAMS_STORAGE_METHOD = {\n  LOCAL_STORAGE: \"localStorage\",\n  SESSION_STORAGE: \"sessionStorage\",\n};\n\nexport const TORUS_METHOD = {\n  TRIGGER_LOGIN: \"triggerLogin\",\n  TRIGGER_AGGREGATE_LOGIN: \"triggerAggregateLogin\",\n  TRIGGER_AGGREGATE_HYBRID_LOGIN: \"triggerHybridAggregateLogin\",\n} as const;\n\nexport type TORUS_NETWORK_TYPE = typeof TORUS_NETWORK[keyof typeof TORUS_NETWORK];\nexport type LOGIN_TYPE = typeof LOGIN[keyof typeof LOGIN];\nexport type AGGREGATE_VERIFIER_TYPE = typeof AGGREGATE_VERIFIER[keyof typeof AGGREGATE_VERIFIER];\nexport type UX_MODE_TYPE = typeof UX_MODE[keyof typeof UX_MODE];\nexport type TORUS_METHOD_TYPE = typeof TORUS_METHOD[keyof typeof TORUS_METHOD];\nexport type REDIRECT_PARAMS_STORAGE_METHOD_TYPE = typeof REDIRECT_PARAMS_STORAGE_METHOD[keyof typeof REDIRECT_PARAMS_STORAGE_METHOD];\n\nexport const CONTRACT_MAP = {\n  [TORUS_NETWORK.MAINNET]: \"0x638646503746d5456209e33a2ff5e3226d698bea\",\n  [TORUS_NETWORK.TESTNET]: \"0x4023d2a0D330bF11426B12C6144Cfb96B7fa6183\",\n};\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"customauth\");\n","import { Auth0UserInfo, LoginDetails, TorusGenericObject } from \"../handlers/interfaces\";\nimport { LOGIN, LOGIN_TYPE, REDIRECT_PARAMS_STORAGE_METHOD, REDIRECT_PARAMS_STORAGE_METHOD_TYPE } from \"./enums\";\nimport log from \"./loglevel\";\n\ninterface CustomMessageEvent extends MessageEvent {\n  error: string;\n}\n\ninterface EventListener {\n  (evt: CustomMessageEvent): void;\n}\n\ntype EmitterType = { addEventListener(type: string, handler: EventListener): void; removeEventListener(type: string, handler: EventListener): void };\n\nexport function eventToPromise<T>(emitter: EmitterType): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    const handler = (ev: CustomMessageEvent) => {\n      const { error = \"\", data } = ev;\n      emitter.removeEventListener(\"message\", handler);\n      if (error) return reject(new Error(error));\n      return resolve(data as T);\n    };\n    emitter.addEventListener(\"message\", handler);\n  });\n}\n\n// These are the connection names used by auth0\nexport const loginToConnectionMap = {\n  [LOGIN.APPLE]: \"apple\",\n  [LOGIN.GITHUB]: \"github\",\n  [LOGIN.LINKEDIN]: \"linkedin\",\n  [LOGIN.TWITTER]: \"twitter\",\n  [LOGIN.WEIBO]: \"weibo\",\n  [LOGIN.LINE]: \"line\",\n  [LOGIN.EMAIL_PASSWORD]: \"Username-Password-Authentication\",\n  [LOGIN.PASSWORDLESS]: \"email\",\n};\n\nexport const padUrlString = (url: URL): string => (url.href.endsWith(\"/\") ? url.href : `${url.href}/`);\n\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */\nexport const randomId = (): string => Math.random().toString(36).slice(2);\n\nexport const broadcastChannelOptions = {\n  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n  webWorkerSupport: false, // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\n\nfunction caseSensitiveField(field: string, isCaseSensitive?: boolean): string {\n  return isCaseSensitive ? field : field.toLowerCase();\n}\n\nexport const getVerifierId = (\n  userInfo: Auth0UserInfo,\n  typeOfLogin: LOGIN_TYPE,\n  verifierIdField?: string,\n  isVerifierIdCaseSensitive = true\n): string => {\n  const { name, sub } = userInfo;\n  if (verifierIdField) return caseSensitiveField(userInfo[verifierIdField], isVerifierIdCaseSensitive);\n  switch (typeOfLogin) {\n    case LOGIN.PASSWORDLESS:\n    case LOGIN.EMAIL_PASSWORD:\n      return caseSensitiveField(name, isVerifierIdCaseSensitive);\n    case LOGIN.WEIBO:\n    case LOGIN.GITHUB:\n    case LOGIN.TWITTER:\n    case LOGIN.APPLE:\n    case LOGIN.LINKEDIN:\n    case LOGIN.LINE:\n    case LOGIN.JWT:\n      return caseSensitiveField(sub, isVerifierIdCaseSensitive);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport const handleRedirectParameters = (\n  hash: string,\n  queryParameters: TorusGenericObject\n): { error: string; instanceParameters: TorusGenericObject; hashParameters: TorusGenericObject } => {\n  const hashParameters: TorusGenericObject = hash.split(\"&\").reduce((result, item) => {\n    const [part0, part1] = item.split(\"=\");\n    result[part0] = part1;\n    return result;\n  }, {});\n  log.info(hashParameters, queryParameters);\n  let instanceParameters: TorusGenericObject = {};\n  let error = \"\";\n  if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n    instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n    error = hashParameters.error_description || hashParameters.error || error;\n  } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n    instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n    if (queryParameters.error) error = queryParameters.error;\n  }\n  return { error, instanceParameters, hashParameters };\n};\n\nexport function storageAvailable(type: REDIRECT_PARAMS_STORAGE_METHOD_TYPE): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\nconst storageStatus = {\n  [REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE]: storageAvailable(REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE),\n  [REDIRECT_PARAMS_STORAGE_METHOD.SESSION_STORAGE]: storageAvailable(REDIRECT_PARAMS_STORAGE_METHOD.SESSION_STORAGE),\n};\n\nexport function storeLoginDetails(params: LoginDetails, storageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE, scope: string): void {\n  if (storageStatus[storageMethod]) {\n    window[storageMethod].setItem(`torus_login_${scope}`, JSON.stringify(params));\n  }\n}\n\nexport function retrieveLoginDetails(storageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE, scope: string): LoginDetails {\n  if (storageStatus[storageMethod]) {\n    const loginDetails = window[storageMethod].getItem(`torus_login_${scope}`);\n    return JSON.parse(loginDetails || \"{}\") as LoginDetails;\n  }\n  throw new Error(\"Unable to retrieve stored login details\");\n}\n\nexport function clearLoginDetailsStorage(storageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE, scope: string): void {\n  if (storageStatus[storageMethod]) {\n    window[storageMethod].removeItem(`torus_login_${scope}`);\n  }\n}\n\nexport function clearOrphanedLoginDetails(storageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE): void {\n  if (storageStatus[storageMethod]) {\n    const allStorageKeys = Object.keys(window[storageMethod]);\n    allStorageKeys.forEach((key) => {\n      if (key.startsWith(\"torus_login_\")) {\n        window[storageMethod].removeItem(key);\n      }\n    });\n  }\n}\n\nexport function getPopupFeatures(): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const w = 1200;\n  const h = 700;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const isFirefox = (): boolean => window?.navigator?.userAgent.toLowerCase().indexOf(\"firefox\") > -1 || false;\n\nexport function constructURL(params: { baseURL: string; query?: Record<string, unknown>; hash?: Record<string, unknown> }): string {\n  const { baseURL, query, hash } = params;\n\n  const url = new URL(baseURL);\n  if (query) {\n    Object.keys(query).forEach((key) => {\n      url.searchParams.append(key, query[key] as string);\n    });\n  }\n  if (hash) {\n    const h = new URL(constructURL({ baseURL, query: hash })).searchParams.toString();\n    url.hash = h;\n  }\n  return url.toString();\n}\n","import { EventEmitter } from \"events\";\n\nimport { getPopupFeatures } from \"./helpers\";\n\nclass PopupHandler extends EventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures();\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { BroadcastChannel } from \"broadcast-channel\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, randomId } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport { Auth0ClientOptions, ILoginHandler, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nabstract class AbstractLoginHandler implements ILoginHandler {\n  public nonce: string = randomId();\n\n  public finalURL: URL;\n\n  // Not using object constructor because of this issue\n  // https://github.com/microsoft/TypeScript/issues/5326\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {}\n\n  get state(): string {\n    return encodeURIComponent(\n      window.btoa(\n        JSON.stringify({\n          ...(this.customState || {}),\n          instanceId: this.nonce,\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n          redirectToOpener: this.redirectToOpener || false,\n        })\n      )\n    );\n  }\n\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      return new Promise<LoginWindowResponse>((resolve, reject) => {\n        let bc: BroadcastChannel;\n        const handleData = async (ev: { error: string; data: PopupResponse }) => {\n          try {\n            const { error, data } = ev;\n            const {\n              instanceParams,\n              hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n            } = data || {};\n            if (error) {\n              log.error(ev);\n              reject(new Error(`Error: ${error}. Info: ${JSON.stringify(ev.data || {})}`));\n              return;\n            }\n            if (ev.data && instanceParams.verifier === this.verifier) {\n              log.info(ev.data);\n              if (!this.redirectToOpener && bc) await bc.postMessage({ success: true });\n              resolve({\n                accessToken,\n                idToken: idToken || \"\",\n                ...rest,\n                // State has to be last here otherwise it will be overwritten\n                state: instanceParams,\n              });\n            }\n          } catch (error) {\n            log.error(error);\n            reject(error);\n          }\n        };\n\n        if (!this.redirectToOpener) {\n          bc = new BroadcastChannel(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n          bc.addEventListener(\"message\", async (ev) => {\n            await handleData(ev);\n            bc.close();\n            verifierWindow.close();\n          });\n        } else {\n          const postMessageEventHandler = async (postMessageEvent: MessageEvent) => {\n            if (!postMessageEvent.data) return;\n            const ev = postMessageEvent.data;\n            if (ev.channel !== `redirect_channel_${this.nonce}`) return;\n            window.removeEventListener(\"message\", postMessageEventHandler);\n            handleData(ev);\n            verifierWindow.close();\n          };\n          window.addEventListener(\"message\", postMessageEventHandler);\n        }\n        verifierWindow.open();\n        verifierWindow.once(\"close\", () => {\n          if (bc) bc.close();\n          reject(new Error(\"user closed popup\"));\n        });\n      });\n    }\n    return null;\n  }\n\n  abstract getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse>;\n\n  abstract setFinalUrl(): void;\n}\n\nexport default AbstractLoginHandler;\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class DiscordHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identify email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://discordapp.com/api/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ id: string; username: string; discriminator: string; avatar?: string; email?: string }>(\n      \"https://discordapp.com/api/users/@me\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { id, avatar, email = \"\", username: name = \"\", discriminator = \"\" } = userInfo;\n    const profileImage =\n      avatar === null\n        ? `https://cdn.discordapp.com/embed/avatars/${Number(discriminator) % 5}.png`\n        : `https://cdn.discordapp.com/avatars/${id}/${avatar}.png?size=2048`;\n    return {\n      profileImage,\n      name: `${name}#${discriminator}`,\n      email,\n      verifierId: id,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class FacebookHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"public_profile email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://www.facebook.com/v6.0/dialog/oauth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ name: string; id: string; picture: { data: { url?: string } }; email?: string }>(\n      \"https://graph.facebook.com/me?fields=name,email,picture.type(large)\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { name = \"\", id, picture, email = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage: picture.data.url || \"\",\n      verifier: this.verifier,\n      verifierId: id,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class GoogleHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly SCOPE: string = \"profile email openid\";\n\n  private readonly PROMPT: string = \"consent select_account\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://accounts.google.com/o/oauth2/v2/auth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ picture: string; email: string; name: string }>(\"https://www.googleapis.com/userinfo/v2/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { picture: profileImage = \"\", email = \"\", name = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage,\n      verifier: this.verifier,\n      verifierId: email.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { getVerifierId, loginToConnectionMap, padUrlString } from \"../utils/helpers\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const finalUrl = new URL(domain);\n    finalUrl.pathname += finalUrl.pathname.endsWith(\"/\") ? \"authorize\" : \"/authorize\";\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        connection: loginToConnectionMap[this.typeOfLogin],\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { constructURL, getVerifierId, padUrlString } from \"../utils/helpers\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class MockLoginHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        client_id: this.clientId,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n\n    this.finalURL = new URL(constructURL({ baseURL: this.redirect_uri, query: null, hash: finalJwtParams }));\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const { id_token: idToken, access_token: accessToken } = this.jwtParams;\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      return Promise.resolve({\n        state: {},\n        idToken,\n        accessToken,\n      });\n    }\n    return null;\n  }\n}\n","import { get, post } from \"@toruslabs/http-helpers\";\nimport { BroadcastChannel } from \"broadcast-channel\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, getVerifierId, padUrlString } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const domainUrl = new URL(domain);\n    domainUrl.pathname = \"/passwordless/start\";\n    this.finalURL = domainUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive } = this.jwtParams;\n    try {\n      const domainUrl = new URL(domain);\n      const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}userinfo`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      });\n      const { picture, name, email } = userInfo;\n      return {\n        email,\n        name,\n        profileImage: picture,\n        verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    } catch (error) {\n      log.error(error);\n      const decodedToken = jwtDecode(idToken) as Auth0UserInfo;\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n  }\n\n  handleLoginWindow(): Promise<LoginWindowResponse> {\n    return new Promise<LoginWindowResponse>((resolve, reject) => {\n      if (this.redirectToOpener) {\n        reject(new Error(\"Cannot use redirect to opener for passwordless\"));\n        return;\n      }\n      const handleData = (ev: { error: string; data: PopupResponse }) => {\n        try {\n          const { error, data } = ev;\n          const {\n            instanceParams,\n            hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n          } = data || {};\n          if (error) {\n            log.error(ev.error);\n            reject(new Error(error));\n            return;\n          }\n          if (ev.data && instanceParams.verifier === this.verifier) {\n            log.info(ev.data);\n            resolve({ accessToken, idToken: idToken || \"\", ...rest, state: instanceParams });\n          }\n        } catch (error) {\n          log.error(error);\n          reject(error);\n        }\n      };\n      const bc = new BroadcastChannel(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n      bc.addEventListener(\"message\", async (ev) => {\n        handleData(ev);\n        bc.close();\n      });\n      try {\n        const { connection = \"email\", login_hint } = this.jwtParams;\n        const finalJwtParams = deepmerge(\n          {\n            client_id: this.clientId,\n            connection,\n            email: connection === \"email\" ? login_hint : undefined,\n            phone_number: connection === \"sms\" ? login_hint : undefined,\n            send: \"link\",\n            authParams: {\n              scope: this.SCOPE,\n              state: this.state,\n              response_type: this.RESPONSE_TYPE,\n              redirect_uri: this.redirect_uri,\n              nonce: this.nonce,\n              prompt: this.PROMPT,\n            },\n          },\n          {\n            authParams: this.jwtParams,\n          }\n        );\n        // using stringify and parse to remove undefined params\n        // This method is only resolved when the user clicks the email link\n        post(this.finalURL.href, JSON.parse(JSON.stringify(finalJwtParams)))\n          .then((response) => {\n            log.info(\"posted\", response);\n            return undefined;\n          })\n          .catch((error) => {\n            log.error(error);\n            reject(error);\n          });\n      } catch (error) {\n        log.error(error);\n        reject(error);\n      }\n    });\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class RedditHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identity\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(`https://www.reddit.com/api/v1/authorize${window.innerWidth < 600 ? \".compact\" : \"\"}`);\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ icon_img: string; name: string }>(\"https://oauth.reddit.com/api/v1/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { icon_img: profileImage = \"\", name = \"\" } = userInfo;\n    return {\n      email: \"\",\n      name,\n      profileImage: profileImage.split(\"?\").length > 0 ? profileImage.split(\"?\")[0] : profileImage,\n      verifier: this.verifier,\n      verifierId: name.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class TwitchHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"user:read:email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://id.twitch.tv/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        force_verify: true,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ data: [{ profile_image_url: string; display_name: string; email: string; id: string }] }>(\n      \"https://api.twitch.tv/helix/users\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Client-ID\": this.clientId,\n        },\n      }\n    );\n    const [{ profile_image_url: profileImage = \"\", display_name: name = \"\", email = \"\", id: verifierId }] = userInfo.data || [];\n    return {\n      profileImage,\n      name,\n      email,\n      verifierId,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nconst WEBAUTHN_LOOKUP_SERVER = \"https://api.webauthn.openlogin.com\";\n\nexport default class WebAuthnHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject,\n    readonly registerOnly?: boolean\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://webauthn.openlogin.com\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        register_only: !!this.registerOnly,\n        state: this.state,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(parameters: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, ref, extraParamsPassed, extraParams } = parameters;\n    let verifierId: string;\n    let signature: string;\n    let clientDataJSON: string;\n    let authenticatorData: string;\n    let publicKey: string;\n    let challenge: string;\n    let rpOrigin: string;\n    let credId: string;\n\n    if (extraParamsPassed === \"true\") {\n      log.debug(\"extraParamsPassed is true, using extraParams passed through hashParams\");\n      try {\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n        } = JSON.parse(atob(extraParams)));\n      } catch (error) {\n        log.warn(\"unable to parse extraParams\", error);\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n        } = await get(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n      }\n    } else {\n      log.debug(\"extraParamsPassed is false, using extraParams passed through bridge server\");\n      ({\n        verifier_id: verifierId,\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n      } = await get(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n    }\n\n    if (signature !== idToken) {\n      throw new Error(\"idtoken should be equal to signature\");\n    }\n\n    return {\n      email: \"\",\n      name: \"WebAuthn Login\",\n      profileImage: \"\",\n      verifier: this.verifier,\n      verifierId,\n      typeOfLogin: this.typeOfLogin,\n      ref,\n      registerOnly: this.registerOnly,\n      extraVerifierParams: {\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n      },\n    };\n  }\n}\n","import { LOGIN } from \"../utils/enums\";\nimport DiscordHandler from \"./DiscordHandler\";\nimport FacebookHandler from \"./FacebookHandler\";\nimport GoogleHandler from \"./GoogleHandler\";\nimport { CreateHandlerParams, ILoginHandler } from \"./interfaces\";\nimport JwtHandler from \"./JwtHandler\";\nimport MockLoginHandler from \"./MockLoginHandler\";\nimport PasswordlessHandler from \"./PasswordlessHandler\";\nimport RedditHandler from \"./RedditHandler\";\nimport TwitchHandler from \"./TwitchHandler\";\nimport WebAuthnHandler from \"./WebAuthnHandler\";\n\nconst createHandler = ({\n  clientId,\n  redirect_uri,\n  typeOfLogin,\n  verifier,\n  jwtParams,\n  redirectToOpener,\n  uxMode,\n  customState,\n  registerOnly,\n}: CreateHandlerParams): ILoginHandler => {\n  if (!verifier || !typeOfLogin || !clientId) {\n    throw new Error(\"Invalid params\");\n  }\n  const { domain, login_hint, id_token, access_token } = jwtParams || {};\n  switch (typeOfLogin) {\n    case LOGIN.GOOGLE:\n      return new GoogleHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.FACEBOOK:\n      return new FacebookHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.TWITCH:\n      return new TwitchHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.REDDIT:\n      return new RedditHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.DISCORD:\n      return new DiscordHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.PASSWORDLESS:\n      if (!domain || !login_hint) throw new Error(\"Invalid params\");\n      return new PasswordlessHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.APPLE:\n    case LOGIN.GITHUB:\n    case LOGIN.LINKEDIN:\n    case LOGIN.TWITTER:\n    case LOGIN.WEIBO:\n    case LOGIN.LINE:\n    case LOGIN.EMAIL_PASSWORD:\n    case LOGIN.JWT:\n      if (!domain) throw new Error(\"Invalid params\");\n      if (id_token || access_token) {\n        return new MockLoginHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n      }\n      return new JwtHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.WEBAUTHN:\n      return new WebAuthnHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState, registerOnly);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport default createHandler;\n","import { register } from \"@chaitanyapotti/register-service-worker\";\n\nimport log from \"./utils/loglevel\";\n\nexport const registerServiceWorker = (baseUrl: string) =>\n  new Promise((resolve, reject) => {\n    const swUrl = `${baseUrl}sw.js`;\n\n    if (\"serviceWorker\" in window.navigator) {\n      // if swIntegrity is not calculated\n      register(swUrl, {\n        ready() {\n          log.info(\"App is being served from cache by a service worker.\\n For more details, visit https://goo.gl/AFskqB\");\n          resolve(undefined);\n        },\n        registered() {\n          log.info(\"Service worker has been registered.\");\n          resolve(undefined);\n        },\n        cached() {\n          log.info(\"Content has been cached for offline use.\");\n          resolve(undefined);\n        },\n        updatefound() {\n          log.info(\"New content is downloading.\");\n        },\n        updated() {\n          log.info(\"New content is available; please refresh.\");\n        },\n        offline() {\n          log.info(\"No internet connection found. App is running in offline mode.\");\n          reject(new Error(\"App is offline\"));\n        },\n        error(error) {\n          log.error(\"Error during service worker registration:\", error);\n          reject(error);\n        },\n      });\n    } else {\n      reject(new Error(\"Service workers are not supported\"));\n    }\n  });\n","import NodeDetailManager from \"@toruslabs/fetch-node-details\";\nimport Torus, { keyLookup } from \"@toruslabs/torus.js\";\nimport { keccak256 } from \"web3-utils\";\n\nimport createHandler from \"./handlers/HandlerFactory\";\nimport {\n  AggregateLoginParams,\n  CustomAuthArgs,\n  ExtraParams,\n  HybridAggregateLoginParams,\n  ILoginHandler,\n  InitParams,\n  LoginWindowResponse,\n  RedirectResult,\n  RedirectResultParams,\n  SubVerifierDetails,\n  TorusAggregateLoginResponse,\n  TorusHybridAggregateLoginResponse,\n  TorusKey,\n  TorusLoginResponse,\n  TorusSubVerifierInfo,\n  TorusVerifierResponse,\n} from \"./handlers/interfaces\";\nimport { registerServiceWorker } from \"./registerServiceWorker\";\nimport {\n  AGGREGATE_VERIFIER,\n  CONTRACT_MAP,\n  ETHEREUM_NETWORK,\n  LOGIN,\n  REDIRECT_PARAMS_STORAGE_METHOD,\n  REDIRECT_PARAMS_STORAGE_METHOD_TYPE,\n  TORUS_METHOD,\n  TORUS_NETWORK,\n  UX_MODE,\n  UX_MODE_TYPE,\n} from \"./utils/enums\";\nimport {\n  clearLoginDetailsStorage,\n  clearOrphanedLoginDetails,\n  handleRedirectParameters,\n  isFirefox,\n  padUrlString,\n  retrieveLoginDetails,\n  storeLoginDetails,\n} from \"./utils/helpers\";\nimport log from \"./utils/loglevel\";\n\nclass CustomAuth {\n  isInitialized: boolean;\n\n  config: {\n    baseUrl: string;\n    redirectToOpener: boolean;\n    redirect_uri: string;\n    uxMode: UX_MODE_TYPE;\n    redirectParamsStorageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE;\n    locationReplaceOnRedirect: boolean;\n    popupFeatures: string;\n  };\n\n  torus: Torus;\n\n  nodeDetailManager: NodeDetailManager;\n\n  constructor({\n    baseUrl,\n    network = TORUS_NETWORK.MAINNET,\n    proxyContractAddress,\n    enableLogging = false,\n    enableOneKey = false,\n    redirectToOpener = false,\n    redirectPathName = \"redirect\",\n    apiKey = \"torus-default\",\n    uxMode = UX_MODE.POPUP,\n    redirectParamsStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.SESSION_STORAGE,\n    locationReplaceOnRedirect = false,\n    popupFeatures,\n    skipFetchingNodeDetails = false,\n    metadataUrl = \"https://metadata.tor.us\",\n  }: CustomAuthArgs) {\n    this.isInitialized = false;\n    const baseUri = new URL(baseUrl);\n    this.config = {\n      baseUrl: padUrlString(baseUri),\n      get redirect_uri() {\n        return `${this.baseUrl}${redirectPathName}`;\n      },\n      redirectToOpener,\n      uxMode,\n      redirectParamsStorageMethod,\n      locationReplaceOnRedirect,\n      popupFeatures,\n    };\n    const torus = new Torus({\n      enableOneKey,\n      metadataHost: metadataUrl,\n      allowHost: \"https://signer.tor.us/api/allow\",\n    });\n    Torus.setAPIKey(apiKey);\n    this.torus = torus;\n    const ethNetwork = network === TORUS_NETWORK.TESTNET ? ETHEREUM_NETWORK.ROPSTEN : network;\n    this.nodeDetailManager = new NodeDetailManager({ network: ethNetwork, proxyAddress: proxyContractAddress || CONTRACT_MAP[network] });\n    if (!skipFetchingNodeDetails) this.nodeDetailManager.getNodeDetails(false, true);\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n  }\n\n  async init({ skipSw = false, skipInit = false, skipPrefetch = false }: InitParams = {}): Promise<void> {\n    if (skipInit) {\n      this.isInitialized = true;\n      return;\n    }\n    if (!skipSw) {\n      const fetchSwResponse = await fetch(`${this.config.baseUrl}sw.js`, { cache: \"reload\" });\n      if (fetchSwResponse.ok) {\n        try {\n          await registerServiceWorker(this.config.baseUrl);\n          this.isInitialized = true;\n          return;\n        } catch (error) {\n          log.warn(error);\n        }\n      } else {\n        throw new Error(\"Service worker is not being served. Please serve it\");\n      }\n    }\n    if (!skipPrefetch) {\n      // Skip the redirect check for firefox\n      if (isFirefox()) {\n        this.isInitialized = true;\n        return;\n      }\n      await this.handlePrefetchRedirectUri();\n      return;\n    }\n    this.isInitialized = true;\n  }\n\n  async triggerLogin(args: SubVerifierDetails & { registerOnly?: boolean; skipTorusKey?: boolean }): Promise<TorusLoginResponse> {\n    const { verifier, typeOfLogin, clientId, jwtParams, hash, queryParameters, customState, registerOnly, skipTorusKey } = args;\n    log.info(\"Verifier: \", verifier);\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (registerOnly && typeOfLogin !== LOGIN.WEBAUTHN) throw new Error(\"registerOnly flag can only be passed for webauthn\");\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n      registerOnly,\n    });\n    let loginParams: LoginWindowResponse;\n    if (hash && queryParameters) {\n      const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n      if (error) throw new Error(error);\n      const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n      // State has to be last here otherwise it will be overwritten\n      loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n    } else {\n      clearOrphanedLoginDetails(this.config.redirectParamsStorageMethod);\n      storeLoginDetails({ method: TORUS_METHOD.TRIGGER_LOGIN, args }, this.config.redirectParamsStorageMethod, loginHandler.nonce);\n      loginParams = await loginHandler.handleLoginWindow({\n        locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n        popupFeatures: this.config.popupFeatures,\n      });\n      if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    }\n\n    const userInfo = await loginHandler.getUserInfo(loginParams);\n    if (registerOnly) {\n      const { torusNodeEndpoints, torusNodePub } = await this.nodeDetailManager.getNodeDetails(false, true);\n      const torusPubKey = await this.torus.getPublicAddress(torusNodeEndpoints, torusNodePub, { verifier, verifierId: userInfo.verifierId }, true);\n\n      const res = {\n        userInfo: {\n          ...userInfo,\n          ...loginParams,\n        },\n      };\n      if (typeof torusPubKey === \"string\") {\n        throw new Error(\"should have returned extended pub key\");\n      }\n      const torusKey: TorusKey = {\n        typeOfUser: torusPubKey.typeOfUser,\n        pubKey: {\n          pub_key_X: torusPubKey.X,\n          pub_key_Y: torusPubKey.Y,\n        },\n        publicAddress: torusPubKey.address,\n        privateKey: null,\n        metadataNonce: null,\n      };\n      return { ...res, ...torusKey };\n    }\n    let skip = skipTorusKey;\n    if (skip) {\n      const { torusNodeEndpoints } = await this.nodeDetailManager.getNodeDetails(false, true);\n      const lookupData = await keyLookup(torusNodeEndpoints, verifier, userInfo.verifierId);\n      if (lookupData?.keyResult?.keys?.length) {\n        skip = false;\n      }\n    }\n    const torusKey = skip\n      ? (undefined as TorusKey)\n      : await this.getTorusKey(\n          verifier,\n          userInfo.verifierId,\n          { verifier_id: userInfo.verifierId },\n          loginParams.idToken || loginParams.accessToken,\n          userInfo.extraVerifierParams\n        );\n    return {\n      ...torusKey,\n      userInfo: {\n        ...userInfo,\n        ...loginParams,\n      },\n    };\n  }\n\n  async triggerAggregateLogin(args: AggregateLoginParams & { skipTorusKey?: boolean }): Promise<TorusAggregateLoginResponse> {\n    // This method shall break if any of the promises fail. This behaviour is intended\n    const { aggregateVerifierType, verifierIdentifier, subVerifierDetailsArray, skipTorusKey } = args;\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (!aggregateVerifierType || !verifierIdentifier || !Array.isArray(subVerifierDetailsArray)) {\n      throw new Error(\"Invalid params\");\n    }\n    if (aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID && subVerifierDetailsArray.length !== 1) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const userInfoPromises: Promise<TorusVerifierResponse>[] = [];\n    const loginParamsArray: LoginWindowResponse[] = [];\n    for (const subVerifierDetail of subVerifierDetailsArray) {\n      const { clientId, typeOfLogin, verifier, jwtParams, hash, queryParameters, customState } = subVerifierDetail;\n      const loginHandler: ILoginHandler = createHandler({\n        typeOfLogin,\n        clientId,\n        verifier,\n        redirect_uri: this.config.redirect_uri,\n        redirectToOpener: this.config.redirectToOpener,\n        jwtParams,\n        uxMode: this.config.uxMode,\n        customState,\n      });\n      // We let the user login to each verifier in a loop. Don't wait for key derivation here.!\n      let loginParams: LoginWindowResponse;\n      if (hash && queryParameters) {\n        const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n        if (error) throw new Error(error);\n        const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n        // State has to be last here otherwise it will be overwritten\n        loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n      } else {\n        clearOrphanedLoginDetails(this.config.redirectParamsStorageMethod);\n        storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN, args }, this.config.redirectParamsStorageMethod, loginHandler.nonce);\n        loginParams = await loginHandler.handleLoginWindow({\n          locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n          popupFeatures: this.config.popupFeatures,\n        });\n        if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n      }\n      // Fail the method even if one promise fails\n\n      userInfoPromises.push(loginHandler.getUserInfo(loginParams));\n      loginParamsArray.push(loginParams);\n    }\n    const _userInfoArray = await Promise.all(userInfoPromises);\n    const userInfoArray = _userInfoArray.map((userInfo) => ({ ...userInfo, aggregateVerifier: verifierIdentifier }));\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const loginParams = loginParamsArray[index];\n      const { idToken, accessToken } = loginParams;\n      const userInfo = userInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const userInfoData = userInfoArray.map((x, index) => ({ ...x, ...loginParamsArray[index] }));\n    let skip = skipTorusKey;\n    if (skip) {\n      const { torusNodeEndpoints } = await this.nodeDetailManager.getNodeDetails(false, true);\n      const lookupData = await keyLookup(torusNodeEndpoints, args.verifierIdentifier, userInfoData[0].verifierId);\n      if (lookupData?.keyResult?.keys?.length) {\n        skip = false;\n      }\n    }\n    const torusKey = skip\n      ? (undefined as TorusKey)\n      : await this.getTorusKey(verifierIdentifier, aggregateVerifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n    return {\n      ...torusKey,\n      userInfo: userInfoData,\n    };\n  }\n\n  async triggerHybridAggregateLogin(args: HybridAggregateLoginParams): Promise<TorusHybridAggregateLoginResponse> {\n    const { singleLogin, aggregateLoginParams } = args;\n    // This method shall break if any of the promises fail. This behaviour is intended\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (\n      !aggregateLoginParams.aggregateVerifierType ||\n      !aggregateLoginParams.verifierIdentifier ||\n      !Array.isArray(aggregateLoginParams.subVerifierDetailsArray)\n    ) {\n      throw new Error(\"Invalid params\");\n    }\n    if (\n      aggregateLoginParams.aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID &&\n      aggregateLoginParams.subVerifierDetailsArray.length !== 1\n    ) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const { typeOfLogin, clientId, verifier, jwtParams, hash, queryParameters, customState } = singleLogin;\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n    });\n    let loginParams: LoginWindowResponse;\n    if (hash && queryParameters) {\n      const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n      if (error) throw new Error(error);\n      const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n      // State has to be last here otherwise it will be overwritten\n      loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n    } else {\n      clearOrphanedLoginDetails(this.config.redirectParamsStorageMethod);\n      storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN, args }, this.config.redirectParamsStorageMethod, loginHandler.nonce);\n      loginParams = await loginHandler.handleLoginWindow({\n        locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n        popupFeatures: this.config.popupFeatures,\n      });\n      if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    }\n\n    const userInfo = await loginHandler.getUserInfo(loginParams);\n    const torusKey1Promise = this.getTorusKey(\n      verifier,\n      userInfo.verifierId,\n      { verifier_id: userInfo.verifierId },\n      loginParams.idToken || loginParams.accessToken,\n      userInfo.extraVerifierParams\n    );\n\n    const { verifierIdentifier, subVerifierDetailsArray } = aggregateLoginParams;\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const sub = subVerifierDetailsArray[index];\n      const { idToken, accessToken } = loginParams;\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(sub.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const torusKey2Promise = this.getTorusKey(\n      verifierIdentifier,\n      aggregateVerifierId,\n      aggregateVerifierParams,\n      aggregateIdToken,\n      userInfo.extraVerifierParams\n    );\n    const [torusKey1, torusKey2] = await Promise.all([torusKey1Promise, torusKey2Promise]);\n    return {\n      singleLogin: {\n        userInfo: { ...userInfo, ...loginParams },\n        ...torusKey1,\n      },\n      aggregateLogins: [torusKey2],\n    };\n  }\n\n  async getTorusKey(\n    verifier: string,\n    verifierId: string,\n    verifierParams: { verifier_id: string },\n    idToken: string,\n    additionalParams?: ExtraParams\n  ): Promise<TorusKey> {\n    const { torusNodeEndpoints, torusNodePub, torusIndexes } = await this.nodeDetailManager.getNodeDetails(false, true);\n    log.debug(\"torus-direct/getTorusKey\", { torusNodeEndpoints, torusNodePub, torusIndexes });\n\n    const address = await this.torus.getPublicAddress(torusNodeEndpoints, torusNodePub, { verifier, verifierId }, true);\n    if (typeof address === \"string\") throw new Error(\"must use extended pub key\");\n    log.debug(\"torus-direct/getTorusKey\", { getPublicAddress: address });\n\n    const shares = await this.torus.retrieveShares(torusNodeEndpoints, torusIndexes, verifier, verifierParams, idToken, additionalParams);\n    if (shares.ethAddress.toLowerCase() !== address.address.toLowerCase()) {\n      throw new Error(\"data ethAddress does not match response address\");\n    }\n    log.debug(\"torus-direct/getTorusKey\", { retrieveShares: shares });\n\n    return {\n      publicAddress: shares.ethAddress.toString(),\n      privateKey: shares.privKey.toString(),\n      metadataNonce: shares.metadataNonce.toString(\"hex\"),\n      typeOfUser: address.typeOfUser,\n      pubKey: {\n        pub_key_X: address.X,\n        pub_key_Y: address.Y,\n      },\n    };\n  }\n\n  async getAggregateTorusKey(\n    verifier: string,\n    verifierId: string, // unique identifier for user e.g. sub on jwt\n    subVerifierInfoArray: TorusSubVerifierInfo[]\n  ): Promise<TorusKey> {\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierInfoArray.length; index += 1) {\n      const userInfo = subVerifierInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: verifierId, idtoken: userInfo.idToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(userInfo.idToken);\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = verifierId;\n    return this.getTorusKey(verifier, verifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey: string, nonce: string): string {\n    return this.torus.getPostboxKeyFrom1OutOf1(privKey, nonce);\n  }\n\n  async getRedirectResult({ replaceUrl = true, clearLoginDetails = true }: RedirectResultParams = {}): Promise<RedirectResult> {\n    await this.init({ skipInit: true });\n    const url = new URL(window.location.href);\n    const hash = url.hash.substr(1);\n    const queryParams = {};\n    url.searchParams.forEach((value, key) => {\n      queryParams[key] = value;\n    });\n\n    if (replaceUrl) {\n      const cleanUrl = window.location.origin + window.location.pathname;\n      window.history.replaceState(null, \"\", cleanUrl);\n    }\n\n    if (!hash && Object.keys(queryParams).length === 0) {\n      throw new Error(\"Unable to fetch result from redirect\");\n    }\n\n    const { error, instanceParameters, hashParameters } = handleRedirectParameters(hash, queryParams);\n\n    const { instanceId } = instanceParameters;\n\n    log.info(instanceId, \"instanceId\");\n\n    const { args, method, ...rest } = retrieveLoginDetails(this.config.redirectParamsStorageMethod, instanceId);\n    log.info(args, method);\n\n    if (clearLoginDetails) {\n      clearLoginDetailsStorage(this.config.redirectParamsStorageMethod, instanceId);\n    }\n\n    if (error) {\n      const errorInstance = `Error: ${error}. Instance params: ${JSON.stringify(instanceParameters || {})}. Hash params: ${JSON.stringify(\n        hashParameters || {}\n      )}`;\n\n      return { error: errorInstance, state: instanceParameters || {}, method, result: {}, hashParameters, args };\n    }\n\n    let result: unknown;\n\n    try {\n      if (method === TORUS_METHOD.TRIGGER_LOGIN) {\n        const methodArgs = args as SubVerifierDetails & { registerOnly?: boolean };\n        methodArgs.hash = hash;\n        methodArgs.queryParameters = queryParams;\n        result = await this.triggerLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        const methodArgs = args as AggregateLoginParams;\n        methodArgs.subVerifierDetailsArray.forEach((x) => {\n          x.hash = hash;\n          x.queryParameters = queryParams;\n        });\n        result = await this.triggerAggregateLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN) {\n        const methodArgs = args as HybridAggregateLoginParams;\n        methodArgs.singleLogin.hash = hash;\n        methodArgs.singleLogin.queryParameters = queryParams;\n        result = await this.triggerHybridAggregateLogin(methodArgs);\n      }\n    } catch (err) {\n      log.error(err);\n      return {\n        error: `Could not get result from torus nodes ${err?.message || \"\"}`,\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n    }\n\n    if (!result)\n      return {\n        error: \"Unsupported method type\",\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n\n    return { method, result, state: instanceParameters || {}, hashParameters, args, ...rest };\n  }\n\n  private async handlePrefetchRedirectUri(): Promise<void> {\n    if (!document) return Promise.resolve();\n    return new Promise((resolve, reject) => {\n      const redirectHtml = document.createElement(\"link\");\n      redirectHtml.href = this.config.redirect_uri;\n      if (window.location.origin !== new URL(this.config.redirect_uri).origin) redirectHtml.crossOrigin = \"anonymous\";\n      redirectHtml.type = \"text/html\";\n      redirectHtml.rel = \"prefetch\";\n      const resolveFn = () => {\n        this.isInitialized = true;\n        resolve();\n      };\n      try {\n        if (redirectHtml.relList && redirectHtml.relList.supports) {\n          if (redirectHtml.relList.supports(\"prefetch\")) {\n            redirectHtml.onload = resolveFn;\n            redirectHtml.onerror = () => {\n              reject(new Error(`Please serve redirect.html present in serviceworker folder of this package on ${this.config.redirect_uri}`));\n            };\n            document.head.appendChild(redirectHtml);\n          } else {\n            // Link prefetch is not supported. pass through\n            resolveFn();\n          }\n        } else {\n          // Link prefetch is not detectable. pass through\n          resolveFn();\n        }\n      } catch (err) {\n        resolveFn();\n      }\n    });\n  }\n}\n\nexport default CustomAuth;\n","export { default as createHandler } from \"./handlers/HandlerFactory\";\nexport * from \"./handlers/interfaces\";\nexport { default } from \"./login\";\nexport * from \"./utils/enums\";\nexport * from \"./utils/helpers\";\n"],"sourceRoot":""}