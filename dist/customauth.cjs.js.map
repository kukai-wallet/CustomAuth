{"version":3,"file":"customauth.cjs.js","mappings":"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","sources":["webpack://@toruslabs/customauth/webpack/bootstrap","webpack://@toruslabs/customauth/webpack/runtime/compat get default export","webpack://@toruslabs/customauth/webpack/runtime/define property getters","webpack://@toruslabs/customauth/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/customauth/webpack/runtime/make namespace object","webpack://@toruslabs/customauth/./src/utils/enums.ts","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@toruslabs/customauth/external commonjs2 \"lodash.merge\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/broadcast-channel\"","webpack://@toruslabs/customauth/external commonjs2 \"bowser\"","webpack://@toruslabs/customauth/external commonjs2 \"loglevel\"","webpack://@toruslabs/customauth/./src/utils/loglevel.ts","webpack://@toruslabs/customauth/./src/utils/helpers.ts","webpack://@toruslabs/customauth/external commonjs2 \"events\"","webpack://@toruslabs/customauth/./src/utils/PopupHandler.ts","webpack://@toruslabs/customauth/./src/handlers/AbstractLoginHandler.ts","webpack://@toruslabs/customauth/./src/handlers/DiscordHandler.ts","webpack://@toruslabs/customauth/./src/handlers/FacebookHandler.ts","webpack://@toruslabs/customauth/./src/handlers/GoogleHandler.ts","webpack://@toruslabs/customauth/external commonjs2 \"jwt-decode\"","webpack://@toruslabs/customauth/./src/handlers/JwtHandler.ts","webpack://@toruslabs/customauth/./src/handlers/MockLoginHandler.ts","webpack://@toruslabs/customauth/./src/handlers/PasswordlessHandler.ts","webpack://@toruslabs/customauth/./src/handlers/RedditHandler.ts","webpack://@toruslabs/customauth/./src/handlers/TwitchHandler.ts","webpack://@toruslabs/customauth/./src/handlers/WebAuthnHandler.ts","webpack://@toruslabs/customauth/./src/handlers/HandlerFactory.ts","webpack://@toruslabs/customauth/./src/handlers/interfaces.ts","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/fetch-node-details\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/torus.js\"","webpack://@toruslabs/customauth/external commonjs2 \"@chaitanyapotti/register-service-worker\"","webpack://@toruslabs/customauth/./src/registerServiceWorker.ts","webpack://@toruslabs/customauth/./src/sentry.ts","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/metadata-helpers\"","webpack://@toruslabs/customauth/./src/utils/StorageHelper.ts","webpack://@toruslabs/customauth/./src/login.ts","webpack://@toruslabs/customauth/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const LOGIN = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  GITHUB: \"github\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  LINE: \"line\",\n  EMAIL_PASSWORD: \"email_password\",\n  PASSWORDLESS: \"passwordless\",\n  JWT: \"jwt\",\n  WEBAUTHN: \"webauthn\",\n} as const;\n\nexport const AGGREGATE_VERIFIER = {\n  SINGLE_VERIFIER_ID: \"single_id_verifier\",\n  // AND_AGGREGATE_VERIFIER : \"and_aggregate_verifier\",\n  // OR_AGGREGATE_VERIFIER : \"or_aggregate_verifier\",\n} as const;\n\nexport const UX_MODE = {\n  POPUP: \"popup\",\n  REDIRECT: \"redirect\",\n} as const;\n\nexport const REDIRECT_PARAMS_STORAGE_METHOD = {\n  LOCAL_STORAGE: \"localStorage\",\n  SESSION_STORAGE: \"sessionStorage\",\n  SERVER: \"server\",\n};\n\nexport const TORUS_METHOD = {\n  TRIGGER_LOGIN: \"triggerLogin\",\n  TRIGGER_AGGREGATE_LOGIN: \"triggerAggregateLogin\",\n  TRIGGER_AGGREGATE_HYBRID_LOGIN: \"triggerHybridAggregateLogin\",\n} as const;\n\nexport type LOGIN_TYPE = (typeof LOGIN)[keyof typeof LOGIN];\nexport type AGGREGATE_VERIFIER_TYPE = (typeof AGGREGATE_VERIFIER)[keyof typeof AGGREGATE_VERIFIER];\nexport type UX_MODE_TYPE = (typeof UX_MODE)[keyof typeof UX_MODE];\nexport type TORUS_METHOD_TYPE = (typeof TORUS_METHOD)[keyof typeof TORUS_METHOD];\nexport type REDIRECT_PARAMS_STORAGE_METHOD_TYPE = (typeof REDIRECT_PARAMS_STORAGE_METHOD)[keyof typeof REDIRECT_PARAMS_STORAGE_METHOD];\n\nexport const SENTRY_TXNS = {\n  FETCH_NODE_DETAILS: \"fetchNodeDetails\",\n  PUB_ADDRESS_LOOKUP: \"pubAddressLookup\",\n  FETCH_SHARES: \"fetchShares\",\n} as const;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash.merge\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/broadcast-channel\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bowser\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"loglevel\");","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"customauth\");\n","import Bowser from \"bowser\";\n\nimport { Auth0UserInfo, TorusGenericObject } from \"../handlers/interfaces\";\nimport { LOGIN, LOGIN_TYPE, REDIRECT_PARAMS_STORAGE_METHOD_TYPE } from \"./enums\";\nimport log from \"./loglevel\";\ninterface CustomMessageEvent extends MessageEvent {\n  error: string;\n}\n\ninterface EventListener {\n  (evt: CustomMessageEvent): void;\n}\n\ntype EmitterType = { addEventListener(type: string, handler: EventListener): void; removeEventListener(type: string, handler: EventListener): void };\n\nexport function eventToPromise<T>(emitter: EmitterType): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    const handler = (ev: CustomMessageEvent) => {\n      const { error = \"\", data } = ev;\n      emitter.removeEventListener(\"message\", handler);\n      if (error) return reject(new Error(error));\n      return resolve(data as T);\n    };\n    emitter.addEventListener(\"message\", handler);\n  });\n}\n\n// These are the connection names used by auth0\nexport const loginToConnectionMap = {\n  [LOGIN.APPLE]: \"apple\",\n  [LOGIN.GITHUB]: \"github\",\n  [LOGIN.LINKEDIN]: \"linkedin\",\n  [LOGIN.TWITTER]: \"twitter\",\n  [LOGIN.WEIBO]: \"weibo\",\n  [LOGIN.LINE]: \"line\",\n  [LOGIN.EMAIL_PASSWORD]: \"Username-Password-Authentication\",\n  [LOGIN.PASSWORDLESS]: \"email\",\n};\n\nexport const padUrlString = (url: URL): string => (url.href.endsWith(\"/\") ? url.href : `${url.href}/`);\n\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */\nexport const randomId = (): string => Math.random().toString(36).slice(2);\n\nexport const broadcastChannelOptions = {\n  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n  webWorkerSupport: false, // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\n\nfunction caseSensitiveField(field: string, isCaseSensitive?: boolean): string {\n  return isCaseSensitive ? field : field.toLowerCase();\n}\n\nexport const getVerifierId = (\n  userInfo: Auth0UserInfo,\n  typeOfLogin: LOGIN_TYPE,\n  verifierIdField?: string,\n  isVerifierIdCaseSensitive = true\n): string => {\n  const { name, sub } = userInfo;\n  if (verifierIdField) return caseSensitiveField(userInfo[verifierIdField], isVerifierIdCaseSensitive);\n  switch (typeOfLogin) {\n    case LOGIN.PASSWORDLESS:\n    case LOGIN.EMAIL_PASSWORD:\n      return caseSensitiveField(name, isVerifierIdCaseSensitive);\n    case LOGIN.WEIBO:\n    case LOGIN.GITHUB:\n    case LOGIN.TWITTER:\n    case LOGIN.APPLE:\n    case LOGIN.LINKEDIN:\n    case LOGIN.LINE:\n    case LOGIN.JWT:\n      return caseSensitiveField(sub, isVerifierIdCaseSensitive);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport const handleRedirectParameters = (\n  hash: string,\n  queryParameters: TorusGenericObject\n): { error: string; instanceParameters: TorusGenericObject; hashParameters: TorusGenericObject } => {\n  const hashParameters: TorusGenericObject = hash.split(\"&\").reduce((result, item) => {\n    const [part0, part1] = item.split(\"=\");\n    result[part0] = part1;\n    return result;\n  }, {});\n  log.info(hashParameters, queryParameters);\n  let instanceParameters: TorusGenericObject = {};\n  let error = \"\";\n  if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n    instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n    error = hashParameters.error_description || hashParameters.error || error;\n  } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n    instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n    if (queryParameters.error) error = queryParameters.error;\n  }\n  return { error, instanceParameters, hashParameters };\n};\n\nexport function storageAvailable(type: REDIRECT_PARAMS_STORAGE_METHOD_TYPE): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\nexport function getPopupFeatures(): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const w = 1200;\n  const h = 700;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const isFirefox = (): boolean => window?.navigator?.userAgent.toLowerCase().indexOf(\"firefox\") > -1 || false;\n\nexport function constructURL(params: { baseURL: string; query?: Record<string, unknown>; hash?: Record<string, unknown> }): string {\n  const { baseURL, query, hash } = params;\n\n  const url = new URL(baseURL);\n  if (query) {\n    Object.keys(query).forEach((key) => {\n      url.searchParams.append(key, query[key] as string);\n    });\n  }\n  if (hash) {\n    const h = new URL(constructURL({ baseURL, query: hash })).searchParams.toString();\n    url.hash = h;\n  }\n  return url.toString();\n}\n\nexport function are3PCSupported(): boolean {\n  const browserInfo = Bowser.parse(navigator.userAgent);\n  log.info(JSON.stringify(browserInfo), \"current browser info\");\n\n  let thirdPartyCookieSupport = true;\n  // brave\n  if ((navigator as unknown as { brave: boolean })?.brave) {\n    thirdPartyCookieSupport = false;\n  }\n  // All webkit & gecko engine instances use itp (intelligent tracking prevention -\n  // https://webkit.org/tracking-prevention/#intelligent-tracking-prevention-itp)\n  if (browserInfo.engine.name === Bowser.ENGINE_MAP.WebKit || browserInfo.engine.name === Bowser.ENGINE_MAP.Gecko) {\n    thirdPartyCookieSupport = false;\n  }\n\n  return thirdPartyCookieSupport;\n}\n\nexport const validateAndConstructUrl = (domain: string): URL => {\n  try {\n    const url = new URL(decodeURIComponent(domain));\n    return url;\n  } catch (error) {\n    throw new Error(`${error?.message || \"\"}, Note: Your jwt domain: (i.e ${domain}) must have http:// or https:// prefix`);\n  }\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"events\");","import { EventEmitter } from \"events\";\n\nimport { getPopupFeatures } from \"./helpers\";\n\nclass PopupHandler extends EventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures();\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    if (!this.window) return;\n\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { BroadcastChannel } from \"@toruslabs/broadcast-channel\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, randomId } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport { Auth0ClientOptions, ILoginHandler, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nabstract class AbstractLoginHandler implements ILoginHandler {\n  public nonce: string = randomId();\n\n  public finalURL: URL;\n\n  // Not using object constructor because of this issue\n  // https://github.com/microsoft/TypeScript/issues/5326\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {}\n\n  get state(): string {\n    return encodeURIComponent(\n      window.btoa(\n        JSON.stringify({\n          ...(this.customState || {}),\n          instanceId: this.nonce,\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n          redirectToOpener: this.redirectToOpener || false,\n        })\n      )\n    );\n  }\n\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      return new Promise<LoginWindowResponse>((resolve, reject) => {\n        let bc: BroadcastChannel;\n        const handleData = async (ev: { error: string; data: PopupResponse }) => {\n          try {\n            const { error, data } = ev;\n            const {\n              instanceParams,\n              hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n            } = data || {};\n            if (error) {\n              log.error(ev);\n              reject(new Error(`Error: ${error}. Info: ${JSON.stringify(ev.data || {})}`));\n              return;\n            }\n            if (ev.data && instanceParams.verifier === this.verifier) {\n              log.info(ev.data);\n              if (!this.redirectToOpener && bc) await bc.postMessage({ success: true });\n              resolve({\n                accessToken,\n                idToken: idToken || \"\",\n                ...rest,\n                // State has to be last here otherwise it will be overwritten\n                state: instanceParams,\n              });\n            }\n          } catch (error) {\n            log.error(error);\n            reject(error);\n          }\n        };\n\n        if (!this.redirectToOpener) {\n          bc = new BroadcastChannel(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n          bc.addEventListener(\"message\", async (ev) => {\n            await handleData(ev);\n            bc.close();\n            verifierWindow.close();\n          });\n        } else {\n          const postMessageEventHandler = async (postMessageEvent: MessageEvent) => {\n            if (!postMessageEvent.data) return;\n            const ev = postMessageEvent.data;\n            if (ev.channel !== `redirect_channel_${this.nonce}`) return;\n            window.removeEventListener(\"message\", postMessageEventHandler);\n            handleData(ev);\n            verifierWindow.close();\n          };\n          window.addEventListener(\"message\", postMessageEventHandler);\n        }\n        verifierWindow.open();\n        verifierWindow.once(\"close\", () => {\n          if (bc) bc.close();\n          reject(new Error(\"user closed popup\"));\n        });\n      });\n    }\n    return null;\n  }\n\n  abstract getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse>;\n\n  abstract setFinalUrl(): void;\n}\n\nexport default AbstractLoginHandler;\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class DiscordHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identify email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://discord.com/api/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ id: string; username: string; discriminator: string; avatar?: string; email?: string }>(\n      \"https://discord.com/api/users/@me\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { id, avatar, email = \"\", username: name = \"\", discriminator = \"\" } = userInfo;\n    const profileImage =\n      avatar === null\n        ? `https://cdn.discordapp.com/embed/avatars/${Number(discriminator) % 5}.png`\n        : `https://cdn.discordapp.com/avatars/${id}/${avatar}.png?size=2048`;\n    return {\n      profileImage,\n      name: `${name}#${discriminator}`,\n      email,\n      verifierId: id,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class FacebookHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"public_profile email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://www.facebook.com/v15.0/dialog/oauth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ name: string; id: string; picture: { data: { url?: string } }; email?: string }>(\n      \"https://graph.facebook.com/me?fields=name,email,picture.type(large)\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { name = \"\", id, picture, email = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage: picture.data.url || \"\",\n      verifier: this.verifier,\n      verifierId: id,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class GoogleHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly SCOPE: string = \"profile email openid\";\n\n  private readonly PROMPT: string = \"consent select_account\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://accounts.google.com/o/oauth2/v2/auth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ picture: string; email: string; name: string }>(\"https://www.googleapis.com/userinfo/v2/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { picture: profileImage = \"\", email = \"\", name = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage,\n      verifier: this.verifier,\n      verifierId: email.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jwt-decode\");","import { get } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { getVerifierId, loginToConnectionMap, padUrlString, validateAndConstructUrl } from \"../utils/helpers\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const finalUrl = validateAndConstructUrl(domain);\n    finalUrl.pathname += finalUrl.pathname.endsWith(\"/\") ? \"authorize\" : \"/authorize\";\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        connection: loginToConnectionMap[this.typeOfLogin],\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { constructURL, getVerifierId, padUrlString } from \"../utils/helpers\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class MockLoginHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        client_id: this.clientId,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n\n    this.finalURL = new URL(constructURL({ baseURL: this.redirect_uri, query: null, hash: finalJwtParams }));\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const { id_token: idToken, access_token: accessToken } = this.jwtParams;\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      return Promise.resolve({\n        state: {},\n        idToken,\n        accessToken,\n      });\n    }\n    return null;\n  }\n}\n","import { BroadcastChannel } from \"@toruslabs/broadcast-channel\";\nimport { get, post } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, getVerifierId, padUrlString, validateAndConstructUrl } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const domainUrl = validateAndConstructUrl(domain);\n\n    domainUrl.pathname = \"/passwordless/start\";\n    this.finalURL = domainUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive } = this.jwtParams;\n    try {\n      const domainUrl = new URL(domain);\n      const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}userinfo`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      });\n      const { picture, name, email } = userInfo;\n      return {\n        email,\n        name,\n        profileImage: picture,\n        verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    } catch (error) {\n      log.error(error);\n      const decodedToken = jwtDecode(idToken) as Auth0UserInfo;\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n  }\n\n  handleLoginWindow(): Promise<LoginWindowResponse> {\n    return new Promise<LoginWindowResponse>((resolve, reject) => {\n      if (this.redirectToOpener) {\n        reject(new Error(\"Cannot use redirect to opener for passwordless\"));\n        return;\n      }\n      const handleData = (ev: { error: string; data: PopupResponse }) => {\n        try {\n          const { error, data } = ev;\n          const {\n            instanceParams,\n            hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n          } = data || {};\n          if (error) {\n            log.error(ev.error);\n            reject(new Error(error));\n            return;\n          }\n          if (ev.data && instanceParams.verifier === this.verifier) {\n            log.info(ev.data);\n            resolve({ accessToken, idToken: idToken || \"\", ...rest, state: instanceParams });\n          }\n        } catch (error) {\n          log.error(error);\n          reject(error);\n        }\n      };\n      const bc = new BroadcastChannel(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n      bc.addEventListener(\"message\", async (ev) => {\n        handleData(ev);\n        bc.close();\n      });\n      try {\n        const { connection = \"email\", login_hint } = this.jwtParams;\n        const finalJwtParams = deepmerge(\n          {\n            client_id: this.clientId,\n            connection,\n            email: connection === \"email\" ? login_hint : undefined,\n            phone_number: connection === \"sms\" ? login_hint : undefined,\n            send: \"link\",\n            authParams: {\n              scope: this.SCOPE,\n              state: this.state,\n              response_type: this.RESPONSE_TYPE,\n              redirect_uri: this.redirect_uri,\n              nonce: this.nonce,\n              prompt: this.PROMPT,\n            },\n          },\n          {\n            authParams: this.jwtParams,\n          }\n        );\n        // using stringify and parse to remove undefined params\n        // This method is only resolved when the user clicks the email link\n        post(this.finalURL.href, JSON.parse(JSON.stringify(finalJwtParams)))\n          .then((response) => {\n            log.info(\"posted\", response);\n            return undefined;\n          })\n          .catch((error) => {\n            log.error(error);\n            reject(error);\n          });\n      } catch (error) {\n        log.error(error);\n        reject(error);\n      }\n    });\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class RedditHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identity\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(`https://www.reddit.com/api/v1/authorize${window.innerWidth < 600 ? \".compact\" : \"\"}`);\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ icon_img: string; name: string }>(\"https://oauth.reddit.com/api/v1/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { icon_img: profileImage = \"\", name = \"\" } = userInfo;\n    return {\n      email: \"\",\n      name,\n      profileImage: profileImage.split(\"?\").length > 0 ? profileImage.split(\"?\")[0] : profileImage,\n      verifier: this.verifier,\n      verifierId: name.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class TwitchHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"user:read:email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://id.twitch.tv/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        force_verify: true,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ data: [{ profile_image_url: string; display_name: string; email: string; id: string }] }>(\n      \"https://api.twitch.tv/helix/users\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Client-ID\": this.clientId,\n        },\n      }\n    );\n    const [{ profile_image_url: profileImage = \"\", display_name: name = \"\", email = \"\", id: verifierId }] = userInfo.data || [];\n    return {\n      profileImage,\n      name,\n      email,\n      verifierId,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse, WebAuthnExtraParams } from \"./interfaces\";\n\nconst WEBAUTHN_LOOKUP_SERVER = \"https://api.webauthn.openlogin.com\";\n\nexport default class WebAuthnHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject,\n    readonly registerOnly?: boolean\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { webauthnURL } = this.customState || {};\n    const finalUrl = webauthnURL ? new URL(webauthnURL) : new URL(\"https://webauthn.openlogin.com\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        register_only: !!this.registerOnly,\n        state: this.state,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(parameters: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, ref, extraParamsPassed, extraParams } = parameters;\n    let verifierId: string;\n    let signature: string;\n    let clientDataJSON: string;\n    let authenticatorData: string;\n    let publicKey: string;\n    let challenge: string;\n    let rpOrigin: string;\n    let credId: string;\n    let transports: AuthenticatorTransport[];\n\n    if (extraParamsPassed === \"true\") {\n      log.debug(\"extraParamsPassed is true, using extraParams passed through hashParams\");\n      try {\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n          transports,\n        } = JSON.parse(atob(extraParams)));\n      } catch (error) {\n        log.warn(\"unable to parse extraParams\", error);\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n          transports,\n        } = await get<WebAuthnExtraParams & { verifier_id: string }>(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n      }\n    } else {\n      log.debug(\"extraParamsPassed is false, using extraParams passed through bridge server\");\n      ({\n        verifier_id: verifierId,\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n        transports,\n      } = await get<WebAuthnExtraParams & { verifier_id: string }>(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n    }\n\n    if (signature !== idToken) {\n      throw new Error(\"idtoken should be equal to signature\");\n    }\n\n    return {\n      email: \"\",\n      name: \"WebAuthn Login\",\n      profileImage: \"\",\n      verifier: this.verifier,\n      verifierId,\n      typeOfLogin: this.typeOfLogin,\n      ref,\n      registerOnly: this.registerOnly,\n      extraVerifierParams: {\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n        transports,\n      },\n    };\n  }\n}\n","import { LOGIN } from \"../utils/enums\";\nimport DiscordHandler from \"./DiscordHandler\";\nimport FacebookHandler from \"./FacebookHandler\";\nimport GoogleHandler from \"./GoogleHandler\";\nimport { CreateHandlerParams, ILoginHandler } from \"./interfaces\";\nimport JwtHandler from \"./JwtHandler\";\nimport MockLoginHandler from \"./MockLoginHandler\";\nimport PasswordlessHandler from \"./PasswordlessHandler\";\nimport RedditHandler from \"./RedditHandler\";\nimport TwitchHandler from \"./TwitchHandler\";\nimport WebAuthnHandler from \"./WebAuthnHandler\";\n\nconst createHandler = ({\n  clientId,\n  redirect_uri,\n  typeOfLogin,\n  verifier,\n  jwtParams,\n  redirectToOpener,\n  uxMode,\n  customState,\n  registerOnly,\n}: CreateHandlerParams): ILoginHandler => {\n  if (!verifier || !typeOfLogin || !clientId) {\n    throw new Error(\"Invalid params\");\n  }\n  const { domain, login_hint, id_token, access_token } = jwtParams || {};\n  switch (typeOfLogin) {\n    case LOGIN.GOOGLE:\n      return new GoogleHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.FACEBOOK:\n      return new FacebookHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.TWITCH:\n      return new TwitchHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.REDDIT:\n      return new RedditHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.DISCORD:\n      return new DiscordHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.PASSWORDLESS:\n      if (!domain || !login_hint) throw new Error(\"Invalid params\");\n      return new PasswordlessHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.APPLE:\n    case LOGIN.GITHUB:\n    case LOGIN.LINKEDIN:\n    case LOGIN.TWITTER:\n    case LOGIN.WEIBO:\n    case LOGIN.LINE:\n    case LOGIN.EMAIL_PASSWORD:\n    case LOGIN.JWT:\n      if (id_token || access_token) {\n        return new MockLoginHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n      }\n      if (!domain) throw new Error(\"Invalid params\");\n      return new JwtHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.WEBAUTHN:\n      return new WebAuthnHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState, registerOnly);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport default createHandler;\n","import { TORUS_NETWORK_TYPE } from \"@toruslabs/constants\";\nimport { TorusKey } from \"@toruslabs/torus.js\";\n\nimport { Sentry } from \"../sentry\";\nimport { AGGREGATE_VERIFIER_TYPE, LOGIN_TYPE, TORUS_METHOD_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\n\nexport interface ExtendedTorusKey extends TorusKey {\n  existingPk?: { X: string; Y: string }; // if any\n}\n\nexport enum SkipTorusKey {\n  Never,\n  IfNew,\n  Always,\n}\n\nexport type TorusGenericObject = {\n  [key: string]: string;\n};\n\nexport type PopupResponse = {\n  hashParams: { access_token: string; id_token?: string };\n  instanceParams: TorusGenericObject;\n};\n\nexport interface Auth0UserInfo {\n  picture: string;\n  email: string;\n  name: string;\n  sub: string;\n  nickname: string;\n}\n\nexport interface ExtraParams {\n  [key: string]: unknown;\n}\n\nexport type WebAuthnExtraParams = {\n  signature?: string;\n  clientDataJSON?: string;\n  authenticatorData?: string;\n  publicKey?: string;\n  challenge?: string;\n  rpOrigin?: string;\n  credId?: string;\n  transports?: AuthenticatorTransport[];\n};\nexport interface TorusVerifierResponse {\n  email: string;\n  name: string;\n  profileImage: string;\n  aggregateVerifier?: string;\n  verifier: string;\n  verifierId: string;\n  typeOfLogin: LOGIN_TYPE;\n  ref?: string;\n  registerOnly?: boolean;\n  extraVerifierParams?: WebAuthnExtraParams;\n}\n\nexport interface TorusSubVerifierInfo {\n  verifier: string;\n  idToken: string;\n  extraVerifierParams?: WebAuthnExtraParams;\n}\n\nexport interface LoginWindowResponse {\n  accessToken: string;\n  idToken?: string;\n  ref?: string;\n  extraParams?: string;\n  extraParamsPassed?: string;\n  state: TorusGenericObject;\n}\n\nexport interface ILoginHandler {\n  clientId: string;\n  nonce: string;\n  finalURL: URL;\n  getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse>;\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse>;\n}\n\nexport interface TorusAggregateVerifierResponse {\n  userInfo: (TorusVerifierResponse & LoginWindowResponse)[];\n}\n\nexport interface TorusSingleVerifierResponse {\n  userInfo: TorusVerifierResponse & LoginWindowResponse;\n}\n\nexport type TorusLoginResponse = TorusSingleVerifierResponse & ExtendedTorusKey;\nexport type TorusAggregateLoginResponse = TorusAggregateVerifierResponse & ExtendedTorusKey;\nexport type TorusHybridAggregateLoginResponse = { singleLogin: TorusLoginResponse; aggregateLogins: ExtendedTorusKey[] };\n\nexport interface CustomAuthArgs {\n  /**\n   * baseUrl , along with redirectPathName is used to construct the uri of page\n   * where user will be redirected after login.\n   *\n   * @remarks\n   * Redirect Uri for OAuth is `baseUrl`+`redirectPathName` which means\n   * that you must specify `baseUrl`+`redirectPathName` as redirect_uri at verifier's\n   * interface.\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if baseUrl is \"http://localhost:3000/serviceworker\" and\n   * redirectPathName is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * Using serviceworker is optional, you can skip it by passing `skipSw` param\n   * in init function\n   *\n   * Use of serviceworker is recommended if you are using popup uxMode or\n   * for browsers where service workers are not supported or if you wish to not use\n   * service workers, create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * In redirect uxMode, you don't have to use serviceworker or redirect.html file.\n   * You can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  baseUrl: string;\n\n  /**\n   * Specify a custom metadata host for legacy networks\n   * @defaultValue https://metadata.tor.us\n   */\n  metadataUrl?: string;\n\n  /**\n   * Torus Network to target options: mainnet | testnet | cyan | aqua\n   */\n  network: TORUS_NETWORK_TYPE;\n\n  /**\n   * This option is used to specify whether to enable logging\n   *\n   * @defaultValue false\n   */\n  enableLogging?: boolean;\n\n  /**\n   * Use one key features\n   *\n   * @defaultValue false\n   */\n  enableOneKey?: boolean;\n\n  /**\n   * For chrome extensions, the general methods for capturing auth redirects don't work.\n   * So, we redirect to the window which opens the auth window.\n   *\n   * @defaultValue false\n   */\n  redirectToOpener?: boolean;\n\n  /**\n   * This option is used to specify the url path where user will be\n   * redirected after login. Redirect Uri for OAuth is baseUrl/redirectPathName.\n   *\n   *\n   * @defaultValue redirect\n   *\n   * @remarks\n   * At verifier's interface (where you obtain client id), please use baseUrl/redirectPathName\n   * as the redirect_uri\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if `baseUrl` is \"http://localhost:3000/serviceworker\" and\n   * `redirectPathName` is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * For browsers where service workers are not supported or if you wish to not use\n   * service workers,create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * If you are using redirect uxMode, you can get the results directly on your `redirectPathName`\n   * path using `getRedirectResult` function.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  redirectPathName?: string;\n\n  /**\n   * API Key for torus to enable higher access limits\n   *\n   */\n  apiKey?: string;\n  /**\n   * Two uxModes are supported:-\n   * - `'popup'`: In this uxMode, a popup will be shown to user for login.\n   * - `'redirect'`: In this uxMode, user will be redirected to a new window tab for login.\n   *\n   * @defaultValue `'popup'`\n   * @remarks\n   *\n   * Use of `'REDIRECT'` mode is recommended in browsers where popups might get blocked.\n   */\n  uxMode?: UX_MODE_TYPE;\n\n  /**\n   * Whether to replace the url hash/query params from OAuth at the end of the redirect flow\n   *\n   * @defaultValue false\n   */\n  locationReplaceOnRedirect?: boolean;\n\n  /**\n   * Features of popup window. Please check https://developer.mozilla.org/en-US/docs/Web/API/Window/open#window_features\n   * for further documentation.\n   */\n  popupFeatures?: string;\n  /**\n   * Specify a custom storage server url\n   * @defaultValue https://broadcast-server.tor.us\n   */\n  storageServerUrl?: string;\n\n  /**\n   * Get your Client ID from Web3Auth Dashboard (https://dashboard.web3auth.io)\n   */\n  web3AuthClientId: string;\n\n  sentry?: Sentry;\n}\n\nexport interface InitParams {\n  /**\n   * skips the installation / check for service worker\n   * @defaultValue false\n   */\n  skipSw?: boolean;\n\n  /**\n   * skips the init function\n   * @defaultValue false\n   */\n  skipInit?: boolean;\n\n  /**\n   * skips the prefetching of redirect url\n   * @defaultValue false\n   *\n   */\n  skipPrefetch?: boolean;\n}\n\n// REGION: AUTH0 PARAMS\nexport interface BaseLoginOptions {\n  /**\n   * If you need to send custom parameters to the Authorization Server,\n   * make sure to use the original parameter name.\n   */\n  [key: string]: unknown;\n  /**\n   * - `'page'`: displays the UI with a full page view\n   * - `'popup'`: displays the UI with a popup window\n   * - `'touch'`: displays the UI in a way that leverages a touch interface\n   * - `'wap'`: displays the UI with a \"feature phone\" type interface\n   */\n  display?: \"page\" | \"popup\" | \"touch\" | \"wap\" | string;\n  /**\n   * - `'none'`: do not prompt user for login or consent on reauthentication\n   * - `'login'`: prompt user for reauthentication\n   * - `'consent'`: prompt user for consent before processing request\n   * - `'select_account'`: prompt user to select an account\n   */\n  prompt?: \"none\" | \"login\" | \"consent\" | \"select_account\" | string;\n  /**\n   * Maximum allowable elasped time (in seconds) since authentication.\n   * If the last time the user authenticated is greater than this value,\n   * the user must be reauthenticated.\n   */\n  max_age?: string | number;\n  /**\n   * The space-separated list of language tags, ordered by preference.\n   * For example: `'fr-CA fr en'`.\n   */\n  ui_locales?: string;\n  /**\n   * Previously issued ID Token.\n   */\n  id_token_hint?: string;\n  /**\n   * The user's email address or other identifier. When your app knows\n   * which user is trying to authenticate, you can provide this parameter\n   * to pre-fill the email box or select the right session for sign-in.\n   *\n   * This currently only affects the classic Lock experience.\n   */\n  login_hint?: string;\n  acr_values?: string;\n  /**\n   * The default scope to be used on authentication requests.\n   * The defaultScope defined in the Auth0Client is included\n   * along with this scope\n   */\n  scope?: string;\n  /**\n   * The default audience to be used for requesting API access.\n   */\n  audience?: string;\n  /**\n   * The name of the connection configured for your application.\n   * If null, it will redirect to the Auth0 Login Page and show\n   * the Login Widget.\n   */\n  connection?: string;\n}\n\nexport interface Auth0ClientOptions extends BaseLoginOptions {\n  /**\n   * Your Auth0 account domain such as `'example.auth0.com'`,\n   * `'example.eu.auth0.com'` or , `'example.mycompany.com'`\n   * (when using [custom domains](https://auth0.com/docs/custom-domains))\n   */\n  domain?: string;\n  /**\n   * The Client ID found on your Application settings page\n   */\n  client_id?: string;\n  /**\n   * The default URL where Auth0 will redirect your browser to with\n   * the authentication result. It must be whitelisted in\n   * the \"Allowed Callback URLs\" field in your Auth0 Application's\n   * settings. If not provided here, it should be provided in the other\n   * methods that provide authentication.\n   */\n  redirect_uri?: string;\n  /**\n   * The value in seconds used to account for clock skew in JWT expirations.\n   * Typically, this value is no more than a minute or two at maximum.\n   * Defaults to 60s.\n   */\n  leeway?: number;\n\n  /**\n   * The field in jwt token which maps to verifier id\n   */\n  verifierIdField?: string;\n\n  /**\n   * Whether the verifier id field is case sensitive\n   * @defaultValue true\n   */\n  isVerifierIdCaseSensitive?: boolean;\n\n  id_token?: string;\n\n  access_token?: string;\n  /**\n   * The route for user info endpoint. This will be padded to domain\n   * @defaultValue userinfo\n   * */\n  user_info_route?: string;\n}\n\nexport interface SubVerifierDetails {\n  typeOfLogin: LOGIN_TYPE;\n  verifier: string;\n  clientId: string;\n  jwtParams?: Auth0ClientOptions;\n  hash?: string;\n  queryParameters?: TorusGenericObject;\n  customState?: TorusGenericObject;\n}\n\nexport interface CreateHandlerParams {\n  typeOfLogin: LOGIN_TYPE;\n  clientId: string;\n  verifier: string;\n  redirect_uri: string;\n  uxMode?: UX_MODE_TYPE;\n  redirectToOpener?: boolean;\n  jwtParams?: Auth0ClientOptions;\n  customState?: TorusGenericObject;\n  registerOnly?: boolean;\n}\n\nexport interface RedirectResultParams {\n  replaceUrl?: boolean;\n  clearLoginDetails?: boolean;\n}\n\nexport type SingleLoginParams = SubVerifierDetails & { registerOnly?: boolean };\n\nexport interface AggregateLoginParams {\n  aggregateVerifierType: AGGREGATE_VERIFIER_TYPE;\n  verifierIdentifier: string;\n  subVerifierDetailsArray: SubVerifierDetails[];\n}\n\nexport interface HybridAggregateLoginParams {\n  singleLogin: SubVerifierDetails;\n  aggregateLoginParams: AggregateLoginParams;\n}\n\nexport type LoginDetails = { method: TORUS_METHOD_TYPE; args: SingleLoginParams | AggregateLoginParams | HybridAggregateLoginParams };\n\nexport interface RedirectResult {\n  method: TORUS_METHOD_TYPE;\n  result?: TorusLoginResponse | TorusAggregateLoginResponse | TorusHybridAggregateLoginResponse | unknown;\n  error?: string;\n  state: Record<string, unknown>;\n  hashParameters?: Record<string, string>;\n  args: SingleLoginParams | AggregateLoginParams | HybridAggregateLoginParams;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/fetch-node-details\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/torus.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@chaitanyapotti/register-service-worker\");","import { register } from \"@chaitanyapotti/register-service-worker\";\n\nimport log from \"./utils/loglevel\";\n\nexport const registerServiceWorker = (baseUrl: string) =>\n  new Promise((resolve, reject) => {\n    const swUrl = `${baseUrl}sw.js`;\n\n    if (\"serviceWorker\" in window.navigator) {\n      // if swIntegrity is not calculated\n      register(swUrl, {\n        ready() {\n          log.info(\"App is being served from cache by a service worker.\\n For more details, visit https://goo.gl/AFskqB\");\n          resolve(undefined);\n        },\n        registered() {\n          log.info(\"Service worker has been registered.\");\n          resolve(undefined);\n        },\n        cached() {\n          log.info(\"Content has been cached for offline use.\");\n          resolve(undefined);\n        },\n        updatefound() {\n          log.info(\"New content is downloading.\");\n        },\n        updated() {\n          log.info(\"New content is available; please refresh.\");\n        },\n        offline() {\n          log.info(\"No internet connection found. App is running in offline mode.\");\n          reject(new Error(\"App is offline\"));\n        },\n        error(error) {\n          log.error(\"Error during service worker registration:\", error);\n          reject(error);\n        },\n      });\n    } else {\n      reject(new Error(\"Service workers are not supported\"));\n    }\n  });\n","import type { Transaction, TransactionContext } from \"@sentry/types\";\n\nexport interface Sentry {\n  startTransaction(_: TransactionContext): Transaction;\n}\nexport default class SentryHandler {\n  sentry: Sentry | null = null;\n\n  constructor(sentry?: Sentry) {\n    this.sentry = sentry;\n  }\n\n  startTransaction(context: TransactionContext): Transaction | void {\n    if (this.sentry) {\n      return this.sentry.startTransaction(context);\n    }\n  }\n\n  finishTransaction(tx: void | Transaction): void {\n    if (tx) {\n      tx.finish();\n    }\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/metadata-helpers\");","import { getPublic, sign } from \"@toruslabs/eccrypto\";\nimport { get, post } from \"@toruslabs/http-helpers\";\nimport { decryptData, encryptData, keccak256 } from \"@toruslabs/metadata-helpers\";\n\nimport { LoginDetails } from \"../handlers/interfaces\";\nimport { REDIRECT_PARAMS_STORAGE_METHOD, REDIRECT_PARAMS_STORAGE_METHOD_TYPE } from \"./enums\";\nimport { are3PCSupported, storageAvailable } from \"./helpers\";\nimport log from \"./loglevel\";\n\nclass StorageHelper {\n  private currentStorageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE = REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE;\n\n  private isInitialized = false;\n\n  private storageServerUrl = \"https://broadcast-server.tor.us\";\n\n  constructor(serverUrl: string) {\n    this.storageServerUrl = serverUrl;\n  }\n\n  init() {\n    const support = are3PCSupported();\n    const localStorageAvailable = storageAvailable(REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE);\n    if (support && localStorageAvailable) {\n      // use local storage as default for storing stuff\n      this.currentStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE;\n    } else {\n      // use server store as default for storing stuff\n      this.currentStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.SERVER;\n    }\n    this.isInitialized = true;\n  }\n\n  async storeLoginDetails(params: LoginDetails, scope: string): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.SERVER) {\n      const privKey = keccak256(Buffer.from(scope, \"utf8\"));\n      const privKeyHex = privKey.toString(\"hex\");\n      const publicKeyHex = getPublic(privKey).toString(\"hex\");\n      const encData = await encryptData(privKeyHex, params);\n      const signature = (await sign(privKey, keccak256(Buffer.from(encData, \"utf8\")))).toString(\"hex\");\n      await post(`${this.storageServerUrl}/store/set`, { key: publicKeyHex, data: encData, signature });\n    } else {\n      window.localStorage.setItem(`torus_login_${scope}`, JSON.stringify(params));\n    }\n  }\n\n  async retrieveLoginDetails(scope: string): Promise<LoginDetails> {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.SERVER) {\n      const privKey = keccak256(Buffer.from(scope, \"utf8\"));\n      const privKeyHex = privKey.toString(\"hex\");\n      const publicKeyHex = getPublic(privKey).toString(\"hex\");\n      try {\n        const encData: { message: string; success: boolean } = await get(`${this.storageServerUrl}/store/get?key=${publicKeyHex}`);\n        if (encData.message) {\n          const loginDetails = await decryptData<LoginDetails>(privKeyHex, encData.message);\n          return loginDetails;\n        }\n      } catch (error) {\n        if ((error as Response).status === 404) {\n          log.warn(error, \"Session likely expired\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    const loginDetails = window.localStorage.getItem(`torus_login_${scope}`);\n    return JSON.parse(loginDetails || \"{}\") as LoginDetails;\n  }\n\n  clearLoginDetailsStorage(scope: string): void {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE) {\n      window.localStorage.removeItem(`torus_login_${scope}`);\n    }\n    // No need to clear server details cause they auto expire and scope is never re-used for different login attempts\n  }\n\n  clearOrphanedLoginDetails(): void {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE) {\n      const allStorageKeys = Object.keys(window.localStorage);\n      allStorageKeys.forEach((key) => {\n        if (key.startsWith(\"torus_login_\")) {\n          window.localStorage.removeItem(key);\n        }\n      });\n    }\n    // No need to clear server details cause they auto expire and scope is never re-used for different login attempts\n  }\n}\n\nexport default StorageHelper;\n","import { NodeDetailManager } from \"@toruslabs/fetch-node-details\";\nimport Torus, { keccak256, legacyKeyLookup, TorusKey } from \"@toruslabs/torus.js\";\n\nimport createHandler from \"./handlers/HandlerFactory\";\nimport {\n  AggregateLoginParams,\n  CustomAuthArgs,\n  ExtraParams,\n  HybridAggregateLoginParams,\n  ILoginHandler,\n  InitParams,\n  LoginWindowResponse,\n  RedirectResult,\n  RedirectResultParams,\n  SingleLoginParams,\n  SkipTorusKey,\n  SubVerifierDetails,\n  TorusAggregateLoginResponse,\n  TorusHybridAggregateLoginResponse,\n  TorusLoginResponse,\n  TorusSubVerifierInfo,\n  TorusVerifierResponse,\n} from \"./handlers/interfaces\";\nimport { registerServiceWorker } from \"./registerServiceWorker\";\nimport SentryHandler from \"./sentry\";\nimport { AGGREGATE_VERIFIER, LOGIN, SENTRY_TXNS, TORUS_METHOD, UX_MODE, UX_MODE_TYPE } from \"./utils/enums\";\nimport { handleRedirectParameters, isFirefox, padUrlString } from \"./utils/helpers\";\nimport log from \"./utils/loglevel\";\nimport StorageHelper from \"./utils/StorageHelper\";\n\nclass CustomAuth {\n  isInitialized: boolean;\n\n  config: {\n    baseUrl: string;\n    redirectToOpener: boolean;\n    redirect_uri: string;\n    uxMode: UX_MODE_TYPE;\n    locationReplaceOnRedirect: boolean;\n    popupFeatures: string;\n  };\n\n  torus: Torus;\n\n  nodeDetailManager: NodeDetailManager;\n\n  storageHelper: StorageHelper;\n\n  sentryHandler: SentryHandler;\n\n  constructor({\n    baseUrl,\n    network,\n    enableLogging = false,\n    redirectToOpener = false,\n    redirectPathName = \"redirect\",\n    apiKey = \"torus-default\",\n    uxMode = UX_MODE.POPUP,\n    locationReplaceOnRedirect = false,\n    popupFeatures,\n    storageServerUrl = \"https://broadcast-server.tor.us\",\n    sentry,\n    enableOneKey = false,\n    web3AuthClientId,\n    metadataUrl = \"https://metadata.tor.us\",\n  }: CustomAuthArgs) {\n    if (!web3AuthClientId) throw new Error(\"Please provide a valid web3AuthClientId in constructor\");\n    if (!network) throw new Error(\"Please provide a valid network in constructor\");\n    this.isInitialized = false;\n    const baseUri = new URL(baseUrl);\n    this.config = {\n      baseUrl: padUrlString(baseUri),\n      get redirect_uri() {\n        return `${this.baseUrl}${redirectPathName}`;\n      },\n      redirectToOpener,\n      uxMode,\n      locationReplaceOnRedirect,\n      popupFeatures,\n    };\n    const torus = new Torus({\n      network,\n      clientId: web3AuthClientId,\n      enableOneKey,\n      legacyMetadataHost: metadataUrl,\n    });\n    Torus.setAPIKey(apiKey);\n    this.torus = torus;\n    this.nodeDetailManager = new NodeDetailManager({ network });\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n    this.storageHelper = new StorageHelper(storageServerUrl);\n    this.sentryHandler = new SentryHandler(sentry);\n  }\n\n  async init({ skipSw = false, skipInit = false, skipPrefetch = false }: InitParams = {}): Promise<void> {\n    this.storageHelper.init();\n    if (skipInit) {\n      this.isInitialized = true;\n      return;\n    }\n    if (!skipSw) {\n      const fetchSwResponse = await fetch(`${this.config.baseUrl}sw.js`, { cache: \"reload\" });\n      if (fetchSwResponse.ok) {\n        try {\n          await registerServiceWorker(this.config.baseUrl);\n          this.isInitialized = true;\n          return;\n        } catch (error) {\n          log.warn(error);\n        }\n      } else {\n        throw new Error(\"Service worker is not being served. Please serve it\");\n      }\n    }\n    if (!skipPrefetch) {\n      // Skip the redirect check for firefox\n      if (isFirefox()) {\n        this.isInitialized = true;\n        return;\n      }\n      await this.handlePrefetchRedirectUri();\n      return;\n    }\n    this.isInitialized = true;\n  }\n\n  async triggerLogin(args: SingleLoginParams & { skipTorusKey?: SkipTorusKey; checkIfNewKey?: boolean }): Promise<TorusLoginResponse> {\n    const {\n      verifier,\n      typeOfLogin,\n      clientId,\n      jwtParams,\n      hash,\n      queryParameters,\n      customState,\n      registerOnly,\n      skipTorusKey = SkipTorusKey.Never,\n      checkIfNewKey = false,\n    } = args;\n    log.info(\"Verifier: \", verifier);\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (registerOnly && typeOfLogin !== LOGIN.WEBAUTHN) throw new Error(\"registerOnly flag can only be passed for webauthn\");\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n      registerOnly,\n    });\n    let loginParams: LoginWindowResponse;\n    if (hash && queryParameters) {\n      const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n      if (error) throw new Error(error);\n      const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n      // State has to be last here otherwise it will be overwritten\n      loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n    } else {\n      this.storageHelper.clearOrphanedLoginDetails();\n      if (this.config.uxMode === UX_MODE.REDIRECT) {\n        await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_LOGIN, args }, loginHandler.nonce);\n      }\n      loginParams = await loginHandler.handleLoginWindow({\n        locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n        popupFeatures: this.config.popupFeatures,\n      });\n      if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    }\n\n    const userInfo = await loginHandler.getUserInfo(loginParams);\n    if (registerOnly) {\n      const nodeTx = this.sentryHandler.startTransaction({\n        name: SENTRY_TXNS.FETCH_NODE_DETAILS,\n      });\n      const nodeDetails = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId: userInfo.verifierId });\n      this.sentryHandler.finishTransaction(nodeTx);\n      const lookupTx = this.sentryHandler.startTransaction({\n        name: SENTRY_TXNS.PUB_ADDRESS_LOOKUP,\n      });\n      const torusPubKey = await this.torus.getPublicAddress(nodeDetails.torusNodeEndpoints, nodeDetails.torusNodePub, {\n        verifier,\n        verifierId: userInfo.verifierId,\n      });\n      this.sentryHandler.finishTransaction(lookupTx);\n      const res = {\n        userInfo: {\n          ...userInfo,\n          ...loginParams,\n        },\n      };\n      return {\n        ...res,\n        ...torusPubKey,\n        finalKeyData: { ...torusPubKey.finalKeyData, privKey: undefined },\n        oAuthKeyData: { ...torusPubKey.finalKeyData, privKey: undefined },\n        metadata: { ...torusPubKey.metadata, nonce: undefined },\n        sessionData: undefined,\n      };\n    }\n\n    let skip = true;\n    let existingPk: { X: string; Y: string };\n    if (checkIfNewKey || skipTorusKey === SkipTorusKey.IfNew) {\n      const { torusNodeEndpoints } = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId: userInfo.verifierId });\n      const lookupData = await legacyKeyLookup(torusNodeEndpoints, verifier, userInfo.verifierId);\n      existingPk = lookupData?.keyResult?.keys?.length\n        ? { X: lookupData?.keyResult?.keys[0].pub_key_X, Y: lookupData?.keyResult?.keys[0].pub_key_Y }\n        : undefined;\n    }\n    switch (skipTorusKey) {\n      case SkipTorusKey.IfNew:\n        skip = !existingPk;\n        break;\n      case SkipTorusKey.Always:\n        skip = true;\n        break;\n      case SkipTorusKey.Never:\n        skip = false;\n        break;\n      default:\n        throw new Error(\"Invalid SkipTorusKey\");\n    }\n    const torusKey = skip\n      ? (undefined as TorusKey)\n      : await this.getTorusKey(\n          verifier,\n          userInfo.verifierId,\n          { verifier_id: userInfo.verifierId },\n          loginParams.idToken || loginParams.accessToken,\n          userInfo.extraVerifierParams\n        );\n    return {\n      ...torusKey,\n      existingPk,\n      userInfo: {\n        ...userInfo,\n        ...loginParams,\n      },\n    };\n  }\n\n  async triggerAggregateLogin(\n    args: AggregateLoginParams & { skipTorusKey?: SkipTorusKey; checkIfNewKey?: boolean }\n  ): Promise<TorusAggregateLoginResponse> {\n    // This method shall break if any of the promises fail. This behaviour is intended\n    const { aggregateVerifierType, verifierIdentifier, subVerifierDetailsArray, skipTorusKey = SkipTorusKey.Never, checkIfNewKey = false } = args;\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (!aggregateVerifierType || !verifierIdentifier || !Array.isArray(subVerifierDetailsArray)) {\n      throw new Error(\"Invalid params\");\n    }\n    if (aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID && subVerifierDetailsArray.length !== 1) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const userInfoPromises: Promise<TorusVerifierResponse>[] = [];\n    const loginParamsArray: LoginWindowResponse[] = [];\n    for (const subVerifierDetail of subVerifierDetailsArray) {\n      const { clientId, typeOfLogin, verifier, jwtParams, hash, queryParameters, customState } = subVerifierDetail;\n      const loginHandler: ILoginHandler = createHandler({\n        typeOfLogin,\n        clientId,\n        verifier,\n        redirect_uri: this.config.redirect_uri,\n        redirectToOpener: this.config.redirectToOpener,\n        jwtParams,\n        uxMode: this.config.uxMode,\n        customState,\n      });\n      // We let the user login to each verifier in a loop. Don't wait for key derivation here.!\n      let loginParams: LoginWindowResponse;\n      if (hash && queryParameters) {\n        const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n        if (error) throw new Error(error);\n        const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n        // State has to be last here otherwise it will be overwritten\n        loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n      } else {\n        this.storageHelper.clearOrphanedLoginDetails();\n        if (this.config.uxMode === UX_MODE.REDIRECT) {\n          await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN, args }, loginHandler.nonce);\n        }\n        loginParams = await loginHandler.handleLoginWindow({\n          locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n          popupFeatures: this.config.popupFeatures,\n        });\n        if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n      }\n      // Fail the method even if one promise fails\n\n      userInfoPromises.push(loginHandler.getUserInfo(loginParams));\n      loginParamsArray.push(loginParams);\n    }\n    const _userInfoArray = await Promise.all(userInfoPromises);\n    const userInfoArray = _userInfoArray.map((userInfo) => ({ ...userInfo, aggregateVerifier: verifierIdentifier }));\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const loginParams = loginParamsArray[index];\n      const { idToken, accessToken } = loginParams;\n      const userInfo = userInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(Buffer.from(aggregateIdTokenSeeds.join(String.fromCharCode(29)), \"utf8\")).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const userInfoData = userInfoArray.map((x, index) => ({ ...x, ...loginParamsArray[index] }));\n    let skip = true;\n    let existingPk: { X: string; Y: string };\n    if (checkIfNewKey || skipTorusKey === SkipTorusKey.IfNew) {\n      const { torusNodeEndpoints } = await this.nodeDetailManager.getNodeDetails({\n        verifier: args.verifierIdentifier,\n        verifierId: userInfoData[0].verifierId,\n      });\n      const lookupData = await legacyKeyLookup(torusNodeEndpoints, args.verifierIdentifier, userInfoData[0].verifierId);\n      existingPk = lookupData?.keyResult?.keys?.length\n        ? { X: lookupData?.keyResult?.keys[0].pub_key_X, Y: lookupData?.keyResult?.keys[0].pub_key_Y }\n        : undefined;\n    }\n    switch (skipTorusKey) {\n      case SkipTorusKey.IfNew:\n        skip = !existingPk;\n        break;\n      case SkipTorusKey.Always:\n        skip = true;\n        break;\n      case SkipTorusKey.Never:\n        skip = false;\n        break;\n      default:\n        throw new Error(\"Invalid SkipTorusKey\");\n    }\n    const torusKey = skip\n      ? (undefined as TorusKey)\n      : await this.getTorusKey(verifierIdentifier, aggregateVerifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n    return {\n      ...torusKey,\n      existingPk,\n      userInfo: userInfoArray.map((x, index) => ({ ...x, ...loginParamsArray[index] })),\n    };\n  }\n\n  async triggerHybridAggregateLogin(args: HybridAggregateLoginParams): Promise<TorusHybridAggregateLoginResponse> {\n    const { singleLogin, aggregateLoginParams } = args;\n    // This method shall break if any of the promises fail. This behaviour is intended\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (\n      !aggregateLoginParams.aggregateVerifierType ||\n      !aggregateLoginParams.verifierIdentifier ||\n      !Array.isArray(aggregateLoginParams.subVerifierDetailsArray)\n    ) {\n      throw new Error(\"Invalid params\");\n    }\n    if (\n      aggregateLoginParams.aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID &&\n      aggregateLoginParams.subVerifierDetailsArray.length !== 1\n    ) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const { typeOfLogin, clientId, verifier, jwtParams, hash, queryParameters, customState } = singleLogin;\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n    });\n    let loginParams: LoginWindowResponse;\n    if (hash && queryParameters) {\n      const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n      if (error) throw new Error(error);\n      const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n      // State has to be last here otherwise it will be overwritten\n      loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n    } else {\n      this.storageHelper.clearOrphanedLoginDetails();\n      if (this.config.uxMode === UX_MODE.REDIRECT) {\n        await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN, args }, loginHandler.nonce);\n      }\n      loginParams = await loginHandler.handleLoginWindow({\n        locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n        popupFeatures: this.config.popupFeatures,\n      });\n      if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    }\n\n    const userInfo = await loginHandler.getUserInfo(loginParams);\n    const torusKey1Promise = this.getTorusKey(\n      verifier,\n      userInfo.verifierId,\n      { verifier_id: userInfo.verifierId },\n      loginParams.idToken || loginParams.accessToken,\n      userInfo.extraVerifierParams\n    );\n\n    const { verifierIdentifier, subVerifierDetailsArray } = aggregateLoginParams;\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const sub = subVerifierDetailsArray[index];\n      const { idToken, accessToken } = loginParams;\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(sub.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(Buffer.from(aggregateIdTokenSeeds.join(String.fromCharCode(29)), \"utf8\")).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const torusKey2Promise = this.getTorusKey(\n      verifierIdentifier,\n      aggregateVerifierId,\n      aggregateVerifierParams,\n      aggregateIdToken,\n      userInfo.extraVerifierParams\n    );\n    const [torusKey1, torusKey2] = await Promise.all([torusKey1Promise, torusKey2Promise]);\n    return {\n      singleLogin: {\n        userInfo: { ...userInfo, ...loginParams },\n        ...torusKey1,\n      },\n      aggregateLogins: [torusKey2],\n    };\n  }\n\n  async getTorusKey(\n    verifier: string,\n    verifierId: string,\n    verifierParams: { verifier_id: string },\n    idToken: string,\n    additionalParams?: ExtraParams\n  ): Promise<TorusKey> {\n    const nodeTx = this.sentryHandler.startTransaction({\n      name: SENTRY_TXNS.FETCH_NODE_DETAILS,\n    });\n    const nodeDetails = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId });\n    this.sentryHandler.finishTransaction(nodeTx);\n\n    if (this.torus.isLegacyNetwork) {\n      // Call getPublicAddress to do keyassign for legacy networks which are not migrated\n      const pubLookupTx = this.sentryHandler.startTransaction({\n        name: SENTRY_TXNS.PUB_ADDRESS_LOOKUP,\n      });\n      const address = await this.torus.getPublicAddress(nodeDetails.torusNodeEndpoints, nodeDetails.torusNodePub, { verifier, verifierId });\n      this.sentryHandler.finishTransaction(pubLookupTx);\n      log.debug(\"torus-direct/getTorusKey\", { getPublicAddress: address });\n    }\n\n    log.debug(\"torus-direct/getTorusKey\", { torusNodeEndpoints: nodeDetails.torusNodeEndpoints });\n\n    const sharesTx = this.sentryHandler.startTransaction({\n      name: SENTRY_TXNS.FETCH_SHARES,\n    });\n    const sharesResponse = await this.torus.retrieveShares(\n      nodeDetails.torusNodeEndpoints,\n      nodeDetails.torusIndexes,\n      verifier,\n      verifierParams,\n      idToken,\n      {\n        ...additionalParams,\n      }\n    );\n    this.sentryHandler.finishTransaction(sharesTx);\n    log.debug(\"torus-direct/getTorusKey\", { retrieveShares: sharesResponse });\n    return sharesResponse;\n  }\n\n  async getAggregateTorusKey(\n    verifier: string,\n    verifierId: string, // unique identifier for user e.g. sub on jwt\n    subVerifierInfoArray: TorusSubVerifierInfo[]\n  ): Promise<TorusKey> {\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierInfoArray.length; index += 1) {\n      const userInfo = subVerifierInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: verifierId, idtoken: userInfo.idToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(userInfo.idToken);\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(Buffer.from(aggregateIdTokenSeeds.join(String.fromCharCode(29)), \"utf8\")).slice(2);\n    aggregateVerifierParams.verifier_id = verifierId;\n    return this.getTorusKey(verifier, verifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n  }\n\n  async getRedirectResult({ replaceUrl = true, clearLoginDetails = true }: RedirectResultParams = {}): Promise<RedirectResult> {\n    await this.init({ skipInit: true });\n    const url = new URL(window.location.href);\n    const hash = url.hash.substring(1);\n    const queryParams = {};\n    url.searchParams.forEach((value, key) => {\n      queryParams[key] = value;\n    });\n\n    if (replaceUrl) {\n      const cleanUrl = window.location.origin + window.location.pathname;\n      window.history.replaceState(null, \"\", cleanUrl);\n    }\n\n    if (!hash && Object.keys(queryParams).length === 0) {\n      throw new Error(\"Unable to fetch result from OAuth login\");\n    }\n\n    const { error, instanceParameters, hashParameters } = handleRedirectParameters(hash, queryParams);\n\n    const { instanceId } = instanceParameters;\n\n    log.info(instanceId, \"instanceId\");\n\n    const { args, method, ...rest } = await this.storageHelper.retrieveLoginDetails(instanceId);\n    log.info(args, method);\n\n    if (clearLoginDetails) {\n      this.storageHelper.clearLoginDetailsStorage(instanceId);\n    }\n\n    if (error) {\n      return { error, state: instanceParameters || {}, method, result: {}, hashParameters, args };\n    }\n\n    let result: unknown;\n\n    try {\n      if (method === TORUS_METHOD.TRIGGER_LOGIN) {\n        const methodArgs = args as SubVerifierDetails & { registerOnly?: boolean };\n        methodArgs.hash = hash;\n        methodArgs.queryParameters = queryParams;\n        result = await this.triggerLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        const methodArgs = args as AggregateLoginParams;\n        methodArgs.subVerifierDetailsArray.forEach((x) => {\n          x.hash = hash;\n          x.queryParameters = queryParams;\n        });\n        result = await this.triggerAggregateLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN) {\n        const methodArgs = args as HybridAggregateLoginParams;\n        methodArgs.singleLogin.hash = hash;\n        methodArgs.singleLogin.queryParameters = queryParams;\n        result = await this.triggerHybridAggregateLogin(methodArgs);\n      }\n    } catch (err) {\n      log.error(err);\n      return {\n        error: `Could not get result from torus nodes \\n ${err?.message || \"\"}`,\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n    }\n\n    if (!result)\n      return {\n        error: \"Unsupported method type\",\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n\n    return { method, result, state: instanceParameters || {}, hashParameters, args, ...rest };\n  }\n\n  private async handlePrefetchRedirectUri(): Promise<void> {\n    if (!document) return Promise.resolve();\n    return new Promise((resolve, reject) => {\n      const redirectHtml = document.createElement(\"link\");\n      redirectHtml.href = this.config.redirect_uri;\n      if (window.location.origin !== new URL(this.config.redirect_uri).origin) redirectHtml.crossOrigin = \"anonymous\";\n      redirectHtml.type = \"text/html\";\n      redirectHtml.rel = \"prefetch\";\n      const resolveFn = () => {\n        this.isInitialized = true;\n        resolve();\n      };\n      try {\n        if (redirectHtml.relList && redirectHtml.relList.supports) {\n          if (redirectHtml.relList.supports(\"prefetch\")) {\n            redirectHtml.onload = resolveFn;\n            redirectHtml.onerror = () => {\n              reject(new Error(`Please serve redirect.html present in serviceworker folder of this package on ${this.config.redirect_uri}`));\n            };\n            document.head.appendChild(redirectHtml);\n          } else {\n            // Link prefetch is not supported. pass through\n            resolveFn();\n          }\n        } else {\n          // Link prefetch is not detectable. pass through\n          resolveFn();\n        }\n      } catch (err) {\n        resolveFn();\n      }\n    });\n  }\n}\n\nexport default CustomAuth;\n","export { default as createHandler } from \"./handlers/HandlerFactory\";\nexport * from \"./handlers/interfaces\";\nexport { default } from \"./login\";\nexport * from \"./utils/enums\";\nexport * from \"./utils/helpers\";\n"],"names":["LOGIN","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","GITHUB","LINKEDIN","TWITTER","WEIBO","LINE","EMAIL_PASSWORD","PASSWORDLESS","JWT","WEBAUTHN","AGGREGATE_VERIFIER","SINGLE_VERIFIER_ID","UX_MODE","POPUP","REDIRECT","REDIRECT_PARAMS_STORAGE_METHOD","LOCAL_STORAGE","SESSION_STORAGE","SERVER","TORUS_METHOD","TRIGGER_LOGIN","TRIGGER_AGGREGATE_LOGIN","TRIGGER_AGGREGATE_HYBRID_LOGIN","SENTRY_TXNS","FETCH_NODE_DETAILS","PUB_ADDRESS_LOOKUP","FETCH_SHARES","loglevel","getLogger","Bowser","log","eventToPromise","emitter","Promise","resolve","reject","handler","ev","error","data","removeEventListener","Error","addEventListener","loginToConnectionMap","padUrlString","url","href","endsWith","randomId","Math","random","toString","slice","broadcastChannelOptions","webWorkerSupport","caseSensitiveField","field","isCaseSensitive","toLowerCase","getVerifierId","userInfo","typeOfLogin","verifierIdField","isVerifierIdCaseSensitive","arguments","length","undefined","name","sub","handleRedirectParameters","hash","queryParameters","hashParameters","split","reduce","result","item","part0","part1","info","instanceParameters","Object","keys","state","JSON","parse","atob","decodeURIComponent","error_description","storageAvailable","type","storage","window","x","setItem","removeItem","e","code","getPopupFeatures","dualScreenLeft","screenLeft","screenX","dualScreenTop","screenTop","screenY","w","h","width","innerWidth","document","documentElement","clientWidth","screen","height","innerHeight","clientHeight","systemZoom","left","abs","top","features","isFirefox","_window","_window$navigator","navigator","userAgent","indexOf","constructURL","params","baseURL","query","URL","forEach","key","searchParams","append","are3PCSupported","_navigator","browserInfo","stringify","thirdPartyCookieSupport","brave","engine","ENGINE_MAP","WebKit","Gecko","validateAndConstructUrl","domain","message","EventEmitter","PopupHandler","constructor","_ref","target","_defineProperty","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","emit","open","_this$window","focus","close","redirect","locationReplaceOnRedirect","location","replace","BroadcastChannel","AbstractLoginHandler","clientId","verifier","redirect_uri","uxMode","redirectToOpener","jwtParams","customState","encodeURIComponent","btoa","_objectSpread","instanceId","nonce","handleLoginWindow","verifierWindow","finalURL","popupFeatures","bc","handleData","instanceParams","hashParams","access_token","accessToken","id_token","idToken","rest","_objectWithoutProperties","_excluded","postMessage","success","postMessageEventHandler","postMessageEvent","channel","once","get","deepmerge","DiscordHandler","setFinalUrl","finalUrl","clonedParams","finalJwtParams","response_type","RESPONSE_TYPE","client_id","scope","SCOPE","getUserInfo","headers","Authorization","id","avatar","email","username","discriminator","profileImage","verifierId","FacebookHandler","picture","GoogleHandler","prompt","PROMPT","jwtDecode","JwtHandler","pathname","connection","user_info_route","domainUrl","warn","decodedToken","MockLoginHandler","post","login_hint","phone_number","send","authParams","then","response","catch","RedditHandler","icon_img","TwitchHandler","force_verify","profile_image_url","display_name","WEBAUTHN_LOOKUP_SERVER","WebAuthnHandler","registerOnly","webauthnURL","register_only","parameters","ref","extraParamsPassed","extraParams","signature","clientDataJSON","authenticatorData","publicKey","challenge","rpOrigin","credId","transports","debug","verifier_id","extraVerifierParams","PasswordlessHandler","createHandler","SkipTorusKey","register","registerServiceWorker","baseUrl","swUrl","ready","registered","cached","updatefound","updated","offline","SentryHandler","sentry","startTransaction","context","finishTransaction","tx","finish","getPublic","sign","decryptData","encryptData","keccak256","StorageHelper","serverUrl","storageServerUrl","init","support","localStorageAvailable","currentStorageMethod","isInitialized","storeLoginDetails","privKey","Buffer","from","privKeyHex","publicKeyHex","encData","localStorage","retrieveLoginDetails","loginDetails","status","getItem","clearLoginDetailsStorage","clearOrphanedLoginDetails","allStorageKeys","startsWith","NodeDetailManager","Torus","legacyKeyLookup","CustomAuth","network","enableLogging","redirectPathName","apiKey","enableOneKey","web3AuthClientId","metadataUrl","baseUri","config","torus","legacyMetadataHost","setAPIKey","nodeDetailManager","enableAll","disableAll","storageHelper","sentryHandler","skipSw","skipInit","skipPrefetch","fetchSwResponse","fetch","cache","ok","handlePrefetchRedirectUri","triggerLogin","args","skipTorusKey","Never","checkIfNewKey","loginHandler","loginParams","method","nodeTx","nodeDetails","getNodeDetails","lookupTx","torusPubKey","getPublicAddress","torusNodeEndpoints","torusNodePub","res","finalKeyData","oAuthKeyData","metadata","sessionData","skip","existingPk","IfNew","_lookupData$keyResult","_lookupData$keyResult2","_lookupData$keyResult3","_lookupData$keyResult4","lookupData","keyResult","X","pub_key_X","Y","pub_key_Y","Always","torusKey","getTorusKey","triggerAggregateLogin","aggregateVerifierType","verifierIdentifier","subVerifierDetailsArray","Array","isArray","userInfoPromises","loginParamsArray","subVerifierDetail","_excluded2","push","_userInfoArray","all","userInfoArray","map","aggregateVerifier","aggregateVerifierParams","verify_params","sub_verifier_ids","aggregateIdTokenSeeds","aggregateVerifierId","index","idtoken","sort","aggregateIdToken","join","String","fromCharCode","userInfoData","_lookupData$keyResult5","_lookupData$keyResult6","_lookupData$keyResult7","_lookupData$keyResult8","triggerHybridAggregateLogin","singleLogin","aggregateLoginParams","_excluded3","torusKey1Promise","torusKey2Promise","torusKey1","torusKey2","aggregateLogins","verifierParams","additionalParams","isLegacyNetwork","pubLookupTx","address","sharesTx","sharesResponse","retrieveShares","torusIndexes","getAggregateTorusKey","subVerifierInfoArray","getRedirectResult","replaceUrl","clearLoginDetails","substring","queryParams","value","cleanUrl","origin","history","replaceState","_await$this$storageHe","_excluded4","methodArgs","err","redirectHtml","createElement","crossOrigin","rel","resolveFn","relList","supports","onload","onerror","head","appendChild","default"],"sourceRoot":""}