{"version":3,"file":"customauth.cjs.js","mappings":"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","sources":["webpack://@toruslabs/customauth/webpack/bootstrap","webpack://@toruslabs/customauth/webpack/runtime/compat get default export","webpack://@toruslabs/customauth/webpack/runtime/define property getters","webpack://@toruslabs/customauth/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/customauth/webpack/runtime/make namespace object","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/fetch-node-details\"","webpack://@toruslabs/customauth/./src/utils/enums.ts","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/asyncToGenerator\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/classCallCheck\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/createClass\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/assertThisInitialized\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/inherits\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/getPrototypeOf\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/regenerator\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@toruslabs/customauth/external commonjs2 \"lodash.merge\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/broadcast-channel\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/slicedToArray\"","webpack://@toruslabs/customauth/external commonjs2 \"bowser\"","webpack://@toruslabs/customauth/external commonjs2 \"loglevel\"","webpack://@toruslabs/customauth/./src/utils/loglevel.ts","webpack://@toruslabs/customauth/./src/utils/helpers.ts","webpack://@toruslabs/customauth/external commonjs2 \"events\"","webpack://@toruslabs/customauth/./src/utils/PopupHandler.ts","webpack://@toruslabs/customauth/./src/handlers/AbstractLoginHandler.ts","webpack://@toruslabs/customauth/./src/handlers/DiscordHandler.ts","webpack://@toruslabs/customauth/./src/handlers/FacebookHandler.ts","webpack://@toruslabs/customauth/./src/handlers/GoogleHandler.ts","webpack://@toruslabs/customauth/external commonjs2 \"jwt-decode\"","webpack://@toruslabs/customauth/./src/handlers/JwtHandler.ts","webpack://@toruslabs/customauth/./src/handlers/MockLoginHandler.ts","webpack://@toruslabs/customauth/./src/handlers/PasswordlessHandler.ts","webpack://@toruslabs/customauth/./src/handlers/RedditHandler.ts","webpack://@toruslabs/customauth/./src/handlers/TwitchHandler.ts","webpack://@toruslabs/customauth/./src/handlers/WebAuthnHandler.ts","webpack://@toruslabs/customauth/./src/handlers/HandlerFactory.ts","webpack://@toruslabs/customauth/./src/handlers/interfaces.ts","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/torus.js\"","webpack://@toruslabs/customauth/external commonjs2 \"web3-utils\"","webpack://@toruslabs/customauth/external commonjs2 \"@chaitanyapotti/register-service-worker\"","webpack://@toruslabs/customauth/./src/registerServiceWorker.ts","webpack://@toruslabs/customauth/./src/sentry.ts","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/metadata-helpers\"","webpack://@toruslabs/customauth/./src/utils/StorageHelper.ts","webpack://@toruslabs/customauth/./src/login.ts","webpack://@toruslabs/customauth/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/fetch-node-details\");","import NodeDetailManager, { TORUS_NETWORK } from \"@toruslabs/fetch-node-details\";\n\nexport const LOGIN = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  GITHUB: \"github\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  LINE: \"line\",\n  EMAIL_PASSWORD: \"email_password\",\n  PASSWORDLESS: \"passwordless\",\n  JWT: \"jwt\",\n  WEBAUTHN: \"webauthn\",\n} as const;\n\nexport const AGGREGATE_VERIFIER = {\n  SINGLE_VERIFIER_ID: \"single_id_verifier\",\n  // AND_AGGREGATE_VERIFIER : \"and_aggregate_verifier\",\n  // OR_AGGREGATE_VERIFIER : \"or_aggregate_verifier\",\n} as const;\n\nexport const UX_MODE = {\n  POPUP: \"popup\",\n  REDIRECT: \"redirect\",\n} as const;\n\nexport const REDIRECT_PARAMS_STORAGE_METHOD = {\n  LOCAL_STORAGE: \"localStorage\",\n  SESSION_STORAGE: \"sessionStorage\",\n  SERVER: \"server\",\n};\n\nexport const TORUS_METHOD = {\n  TRIGGER_LOGIN: \"triggerLogin\",\n  TRIGGER_AGGREGATE_LOGIN: \"triggerAggregateLogin\",\n  TRIGGER_AGGREGATE_HYBRID_LOGIN: \"triggerHybridAggregateLogin\",\n} as const;\n\nexport type LOGIN_TYPE = typeof LOGIN[keyof typeof LOGIN];\nexport type AGGREGATE_VERIFIER_TYPE = typeof AGGREGATE_VERIFIER[keyof typeof AGGREGATE_VERIFIER];\nexport type UX_MODE_TYPE = typeof UX_MODE[keyof typeof UX_MODE];\nexport type TORUS_METHOD_TYPE = typeof TORUS_METHOD[keyof typeof TORUS_METHOD];\nexport type REDIRECT_PARAMS_STORAGE_METHOD_TYPE = typeof REDIRECT_PARAMS_STORAGE_METHOD[keyof typeof REDIRECT_PARAMS_STORAGE_METHOD];\n\nexport const CONTRACT_MAP = {\n  [TORUS_NETWORK.MAINNET]: NodeDetailManager.PROXY_ADDRESS_MAINNET,\n  [TORUS_NETWORK.TESTNET]: NodeDetailManager.PROXY_ADDRESS_TESTNET,\n  [TORUS_NETWORK.CYAN]: NodeDetailManager.PROXY_ADDRESS_CYAN,\n  [TORUS_NETWORK.AQUA]: NodeDetailManager.PROXY_ADDRESS_AQUA,\n  [TORUS_NETWORK.CELESTE]: NodeDetailManager.PROXY_ADDRESS_CELESTE,\n};\n\nexport const SIGNER_MAP = {\n  [TORUS_NETWORK.MAINNET]: \"https://signer.tor.us\",\n  [TORUS_NETWORK.TESTNET]: \"https://signer.tor.us\",\n  [TORUS_NETWORK.CYAN]: \"https://signer-polygon.tor.us\",\n  [TORUS_NETWORK.AQUA]: \"https://signer-polygon.tor.us\",\n  [TORUS_NETWORK.CELESTE]: \"https://signer-polygon.tor.us\",\n};\n\nexport const SENTRY_TXNS = {\n  FETCH_NODE_DETAILS: \"fetchNodeDetails\",\n  PUB_ADDRESS_LOOKUP: \"pubAddressLookup\",\n  FETCH_SHARES: \"fetchShares\",\n} as const;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/asyncToGenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/regenerator\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash.merge\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/broadcast-channel\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/slicedToArray\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bowser\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"loglevel\");","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"customauth\");\n","import Bowser, { ENGINE_MAP } from \"bowser\";\n\nimport { Auth0UserInfo, TorusGenericObject } from \"../handlers/interfaces\";\nimport { LOGIN, LOGIN_TYPE, REDIRECT_PARAMS_STORAGE_METHOD_TYPE } from \"./enums\";\nimport log from \"./loglevel\";\ninterface CustomMessageEvent extends MessageEvent {\n  error: string;\n}\n\ninterface EventListener {\n  (evt: CustomMessageEvent): void;\n}\n\ntype EmitterType = { addEventListener(type: string, handler: EventListener): void; removeEventListener(type: string, handler: EventListener): void };\n\nexport function eventToPromise<T>(emitter: EmitterType): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    const handler = (ev: CustomMessageEvent) => {\n      const { error = \"\", data } = ev;\n      emitter.removeEventListener(\"message\", handler);\n      if (error) return reject(new Error(error));\n      return resolve(data as T);\n    };\n    emitter.addEventListener(\"message\", handler);\n  });\n}\n\n// These are the connection names used by auth0\nexport const loginToConnectionMap = {\n  [LOGIN.APPLE]: \"apple\",\n  [LOGIN.GITHUB]: \"github\",\n  [LOGIN.LINKEDIN]: \"linkedin\",\n  [LOGIN.TWITTER]: \"twitter\",\n  [LOGIN.WEIBO]: \"weibo\",\n  [LOGIN.LINE]: \"line\",\n  [LOGIN.EMAIL_PASSWORD]: \"Username-Password-Authentication\",\n  [LOGIN.PASSWORDLESS]: \"email\",\n};\n\nexport const padUrlString = (url: URL): string => (url.href.endsWith(\"/\") ? url.href : `${url.href}/`);\n\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */\nexport const randomId = (): string => Math.random().toString(36).slice(2);\n\nexport const broadcastChannelOptions = {\n  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n  webWorkerSupport: false, // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\n\nfunction caseSensitiveField(field: string, isCaseSensitive?: boolean): string {\n  return isCaseSensitive ? field : field.toLowerCase();\n}\n\nexport const getVerifierId = (\n  userInfo: Auth0UserInfo,\n  typeOfLogin: LOGIN_TYPE,\n  verifierIdField?: string,\n  isVerifierIdCaseSensitive = true\n): string => {\n  const { name, sub } = userInfo;\n  if (verifierIdField) return caseSensitiveField(userInfo[verifierIdField], isVerifierIdCaseSensitive);\n  switch (typeOfLogin) {\n    case LOGIN.PASSWORDLESS:\n    case LOGIN.EMAIL_PASSWORD:\n      return caseSensitiveField(name, isVerifierIdCaseSensitive);\n    case LOGIN.WEIBO:\n    case LOGIN.GITHUB:\n    case LOGIN.TWITTER:\n    case LOGIN.APPLE:\n    case LOGIN.LINKEDIN:\n    case LOGIN.LINE:\n    case LOGIN.JWT:\n      return caseSensitiveField(sub, isVerifierIdCaseSensitive);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport const handleRedirectParameters = (\n  hash: string,\n  queryParameters: TorusGenericObject\n): { error: string; instanceParameters: TorusGenericObject; hashParameters: TorusGenericObject } => {\n  const hashParameters: TorusGenericObject = hash.split(\"&\").reduce((result, item) => {\n    const [part0, part1] = item.split(\"=\");\n    result[part0] = part1;\n    return result;\n  }, {});\n  log.info(hashParameters, queryParameters);\n  let instanceParameters: TorusGenericObject = {};\n  let error = \"\";\n  if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n    instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n    error = hashParameters.error_description || hashParameters.error || error;\n  } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n    instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n    if (queryParameters.error) error = queryParameters.error;\n  }\n  return { error, instanceParameters, hashParameters };\n};\n\nexport function storageAvailable(type: REDIRECT_PARAMS_STORAGE_METHOD_TYPE): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\nexport function getPopupFeatures(): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const w = 1200;\n  const h = 700;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const isFirefox = (): boolean => window?.navigator?.userAgent.toLowerCase().indexOf(\"firefox\") > -1 || false;\n\nexport function constructURL(params: { baseURL: string; query?: Record<string, unknown>; hash?: Record<string, unknown> }): string {\n  const { baseURL, query, hash } = params;\n\n  const url = new URL(baseURL);\n  if (query) {\n    Object.keys(query).forEach((key) => {\n      url.searchParams.append(key, query[key] as string);\n    });\n  }\n  if (hash) {\n    const h = new URL(constructURL({ baseURL, query: hash })).searchParams.toString();\n    url.hash = h;\n  }\n  return url.toString();\n}\n\nexport function are3PCSupported(): boolean {\n  const browserInfo = Bowser.parse(navigator.userAgent);\n  log.info(JSON.stringify(browserInfo), \"current browser info\");\n\n  let thirdPartyCookieSupport = true;\n  // brave\n  if ((navigator as unknown as { brave: boolean })?.brave) {\n    thirdPartyCookieSupport = false;\n  }\n  // All webkit & gecko engine instances use itp (intelligent tracking prevention -\n  // https://webkit.org/tracking-prevention/#intelligent-tracking-prevention-itp)\n  if (browserInfo.engine.name === ENGINE_MAP.WebKit || browserInfo.engine.name === ENGINE_MAP.Gecko) {\n    thirdPartyCookieSupport = false;\n  }\n\n  return thirdPartyCookieSupport;\n}\n\nexport const validateAndConstructUrl = (domain: string): URL => {\n  try {\n    const url = new URL(decodeURIComponent(domain));\n    return url;\n  } catch (error) {\n    throw new Error(`${error?.message || \"\"}, Note: Your jwt domain: (i.e ${domain}) must have http:// or https:// prefix`);\n  }\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"events\");","import { EventEmitter } from \"events\";\n\nimport { getPopupFeatures } from \"./helpers\";\n\nclass PopupHandler extends EventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures();\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { BroadcastChannel } from \"@toruslabs/broadcast-channel\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, randomId } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport { Auth0ClientOptions, ILoginHandler, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nabstract class AbstractLoginHandler implements ILoginHandler {\n  public nonce: string = randomId();\n\n  public finalURL: URL;\n\n  // Not using object constructor because of this issue\n  // https://github.com/microsoft/TypeScript/issues/5326\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {}\n\n  get state(): string {\n    return encodeURIComponent(\n      window.btoa(\n        JSON.stringify({\n          ...(this.customState || {}),\n          instanceId: this.nonce,\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n          redirectToOpener: this.redirectToOpener || false,\n        })\n      )\n    );\n  }\n\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      return new Promise<LoginWindowResponse>((resolve, reject) => {\n        let bc: BroadcastChannel;\n        const handleData = async (ev: { error: string; data: PopupResponse }) => {\n          try {\n            const { error, data } = ev;\n            const {\n              instanceParams,\n              hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n            } = data || {};\n            if (error) {\n              log.error(ev);\n              reject(new Error(`Error: ${error}. Info: ${JSON.stringify(ev.data || {})}`));\n              return;\n            }\n            if (ev.data && instanceParams.verifier === this.verifier) {\n              log.info(ev.data);\n              if (!this.redirectToOpener && bc) await bc.postMessage({ success: true });\n              resolve({\n                accessToken,\n                idToken: idToken || \"\",\n                ...rest,\n                // State has to be last here otherwise it will be overwritten\n                state: instanceParams,\n              });\n            }\n          } catch (error) {\n            log.error(error);\n            reject(error);\n          }\n        };\n\n        if (!this.redirectToOpener) {\n          bc = new BroadcastChannel(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n          bc.addEventListener(\"message\", async (ev) => {\n            await handleData(ev);\n            bc.close();\n            verifierWindow.close();\n          });\n        } else {\n          const postMessageEventHandler = async (postMessageEvent: MessageEvent) => {\n            if (!postMessageEvent.data) return;\n            const ev = postMessageEvent.data;\n            if (ev.channel !== `redirect_channel_${this.nonce}`) return;\n            window.removeEventListener(\"message\", postMessageEventHandler);\n            handleData(ev);\n            verifierWindow.close();\n          };\n          window.addEventListener(\"message\", postMessageEventHandler);\n        }\n        verifierWindow.open();\n        verifierWindow.once(\"close\", () => {\n          if (bc) bc.close();\n          reject(new Error(\"user closed popup\"));\n        });\n      });\n    }\n    return null;\n  }\n\n  abstract getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse>;\n\n  abstract setFinalUrl(): void;\n}\n\nexport default AbstractLoginHandler;\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class DiscordHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identify email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://discord.com/api/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ id: string; username: string; discriminator: string; avatar?: string; email?: string }>(\n      \"https://discord.com/api/users/@me\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { id, avatar, email = \"\", username: name = \"\", discriminator = \"\" } = userInfo;\n    const profileImage =\n      avatar === null\n        ? `https://cdn.discord.com/embed/avatars/${Number(discriminator) % 5}.png`\n        : `https://cdn.discord.com/avatars/${id}/${avatar}.png?size=2048`;\n    return {\n      profileImage,\n      name: `${name}#${discriminator}`,\n      email,\n      verifierId: id,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class FacebookHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"public_profile email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://www.facebook.com/v15.0/dialog/oauth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ name: string; id: string; picture: { data: { url?: string } }; email?: string }>(\n      \"https://graph.facebook.com/me?fields=name,email,picture.type(large)\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { name = \"\", id, picture, email = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage: picture.data.url || \"\",\n      verifier: this.verifier,\n      verifierId: id,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class GoogleHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly SCOPE: string = \"profile email openid\";\n\n  private readonly PROMPT: string = \"consent select_account\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://accounts.google.com/o/oauth2/v2/auth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ picture: string; email: string; name: string }>(\"https://www.googleapis.com/userinfo/v2/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { picture: profileImage = \"\", email = \"\", name = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage,\n      verifier: this.verifier,\n      verifierId: email.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jwt-decode\");","import { get } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { getVerifierId, loginToConnectionMap, padUrlString, validateAndConstructUrl } from \"../utils/helpers\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const finalUrl = validateAndConstructUrl(domain);\n    finalUrl.pathname += finalUrl.pathname.endsWith(\"/\") ? \"authorize\" : \"/authorize\";\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        connection: loginToConnectionMap[this.typeOfLogin],\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { constructURL, getVerifierId, padUrlString } from \"../utils/helpers\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class MockLoginHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        client_id: this.clientId,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n\n    this.finalURL = new URL(constructURL({ baseURL: this.redirect_uri, query: null, hash: finalJwtParams }));\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const { id_token: idToken, access_token: accessToken } = this.jwtParams;\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      return Promise.resolve({\n        state: {},\n        idToken,\n        accessToken,\n      });\n    }\n    return null;\n  }\n}\n","import { BroadcastChannel } from \"@toruslabs/broadcast-channel\";\nimport { get, post } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, getVerifierId, padUrlString, validateAndConstructUrl } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const domainUrl = validateAndConstructUrl(domain);\n\n    domainUrl.pathname = \"/passwordless/start\";\n    this.finalURL = domainUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive } = this.jwtParams;\n    try {\n      const domainUrl = new URL(domain);\n      const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}userinfo`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      });\n      const { picture, name, email } = userInfo;\n      return {\n        email,\n        name,\n        profileImage: picture,\n        verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    } catch (error) {\n      log.error(error);\n      const decodedToken = jwtDecode(idToken) as Auth0UserInfo;\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n  }\n\n  handleLoginWindow(): Promise<LoginWindowResponse> {\n    return new Promise<LoginWindowResponse>((resolve, reject) => {\n      if (this.redirectToOpener) {\n        reject(new Error(\"Cannot use redirect to opener for passwordless\"));\n        return;\n      }\n      const handleData = (ev: { error: string; data: PopupResponse }) => {\n        try {\n          const { error, data } = ev;\n          const {\n            instanceParams,\n            hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n          } = data || {};\n          if (error) {\n            log.error(ev.error);\n            reject(new Error(error));\n            return;\n          }\n          if (ev.data && instanceParams.verifier === this.verifier) {\n            log.info(ev.data);\n            resolve({ accessToken, idToken: idToken || \"\", ...rest, state: instanceParams });\n          }\n        } catch (error) {\n          log.error(error);\n          reject(error);\n        }\n      };\n      const bc = new BroadcastChannel(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n      bc.addEventListener(\"message\", async (ev) => {\n        handleData(ev);\n        bc.close();\n      });\n      try {\n        const { connection = \"email\", login_hint } = this.jwtParams;\n        const finalJwtParams = deepmerge(\n          {\n            client_id: this.clientId,\n            connection,\n            email: connection === \"email\" ? login_hint : undefined,\n            phone_number: connection === \"sms\" ? login_hint : undefined,\n            send: \"link\",\n            authParams: {\n              scope: this.SCOPE,\n              state: this.state,\n              response_type: this.RESPONSE_TYPE,\n              redirect_uri: this.redirect_uri,\n              nonce: this.nonce,\n              prompt: this.PROMPT,\n            },\n          },\n          {\n            authParams: this.jwtParams,\n          }\n        );\n        // using stringify and parse to remove undefined params\n        // This method is only resolved when the user clicks the email link\n        post(this.finalURL.href, JSON.parse(JSON.stringify(finalJwtParams)))\n          .then((response) => {\n            log.info(\"posted\", response);\n            return undefined;\n          })\n          .catch((error) => {\n            log.error(error);\n            reject(error);\n          });\n      } catch (error) {\n        log.error(error);\n        reject(error);\n      }\n    });\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class RedditHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identity\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(`https://www.reddit.com/api/v1/authorize${window.innerWidth < 600 ? \".compact\" : \"\"}`);\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ icon_img: string; name: string }>(\"https://oauth.reddit.com/api/v1/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { icon_img: profileImage = \"\", name = \"\" } = userInfo;\n    return {\n      email: \"\",\n      name,\n      profileImage: profileImage.split(\"?\").length > 0 ? profileImage.split(\"?\")[0] : profileImage,\n      verifier: this.verifier,\n      verifierId: name.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class TwitchHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"user:read:email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://id.twitch.tv/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        force_verify: true,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ data: [{ profile_image_url: string; display_name: string; email: string; id: string }] }>(\n      \"https://api.twitch.tv/helix/users\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Client-ID\": this.clientId,\n        },\n      }\n    );\n    const [{ profile_image_url: profileImage = \"\", display_name: name = \"\", email = \"\", id: verifierId }] = userInfo.data || [];\n    return {\n      profileImage,\n      name,\n      email,\n      verifierId,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse, WebAuthnExtraParams } from \"./interfaces\";\n\nconst WEBAUTHN_LOOKUP_SERVER = \"https://api.webauthn.openlogin.com\";\n\nexport default class WebAuthnHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject,\n    readonly registerOnly?: boolean\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://webauthn.openlogin.com\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        register_only: !!this.registerOnly,\n        state: this.state,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(parameters: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, ref, extraParamsPassed, extraParams } = parameters;\n    let verifierId: string;\n    let signature: string;\n    let clientDataJSON: string;\n    let authenticatorData: string;\n    let publicKey: string;\n    let challenge: string;\n    let rpOrigin: string;\n    let credId: string;\n    let transports: AuthenticatorTransport[];\n\n    if (extraParamsPassed === \"true\") {\n      log.debug(\"extraParamsPassed is true, using extraParams passed through hashParams\");\n      try {\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n          transports,\n        } = JSON.parse(atob(extraParams)));\n      } catch (error) {\n        log.warn(\"unable to parse extraParams\", error);\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n          transports,\n        } = await get<WebAuthnExtraParams & { verifier_id: string }>(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n      }\n    } else {\n      log.debug(\"extraParamsPassed is false, using extraParams passed through bridge server\");\n      ({\n        verifier_id: verifierId,\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n        transports,\n      } = await get<WebAuthnExtraParams & { verifier_id: string }>(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n    }\n\n    if (signature !== idToken) {\n      throw new Error(\"idtoken should be equal to signature\");\n    }\n\n    return {\n      email: \"\",\n      name: \"WebAuthn Login\",\n      profileImage: \"\",\n      verifier: this.verifier,\n      verifierId,\n      typeOfLogin: this.typeOfLogin,\n      ref,\n      registerOnly: this.registerOnly,\n      extraVerifierParams: {\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n        transports,\n      },\n    };\n  }\n}\n","import { LOGIN } from \"../utils/enums\";\nimport DiscordHandler from \"./DiscordHandler\";\nimport FacebookHandler from \"./FacebookHandler\";\nimport GoogleHandler from \"./GoogleHandler\";\nimport { CreateHandlerParams, ILoginHandler } from \"./interfaces\";\nimport JwtHandler from \"./JwtHandler\";\nimport MockLoginHandler from \"./MockLoginHandler\";\nimport PasswordlessHandler from \"./PasswordlessHandler\";\nimport RedditHandler from \"./RedditHandler\";\nimport TwitchHandler from \"./TwitchHandler\";\nimport WebAuthnHandler from \"./WebAuthnHandler\";\n\nconst createHandler = ({\n  clientId,\n  redirect_uri,\n  typeOfLogin,\n  verifier,\n  jwtParams,\n  redirectToOpener,\n  uxMode,\n  customState,\n  registerOnly,\n}: CreateHandlerParams): ILoginHandler => {\n  if (!verifier || !typeOfLogin || !clientId) {\n    throw new Error(\"Invalid params\");\n  }\n  const { domain, login_hint, id_token, access_token } = jwtParams || {};\n  switch (typeOfLogin) {\n    case LOGIN.GOOGLE:\n      return new GoogleHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.FACEBOOK:\n      return new FacebookHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.TWITCH:\n      return new TwitchHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.REDDIT:\n      return new RedditHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.DISCORD:\n      return new DiscordHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.PASSWORDLESS:\n      if (!domain || !login_hint) throw new Error(\"Invalid params\");\n      return new PasswordlessHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.APPLE:\n    case LOGIN.GITHUB:\n    case LOGIN.LINKEDIN:\n    case LOGIN.TWITTER:\n    case LOGIN.WEIBO:\n    case LOGIN.LINE:\n    case LOGIN.EMAIL_PASSWORD:\n    case LOGIN.JWT:\n      if (id_token || access_token) {\n        return new MockLoginHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n      }\n      if (!domain) throw new Error(\"Invalid params\");\n      return new JwtHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.WEBAUTHN:\n      return new WebAuthnHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState, registerOnly);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport default createHandler;\n","import { TORUS_NETWORK_TYPE } from \"@toruslabs/fetch-node-details\";\n\nimport { Sentry } from \"../sentry\";\nimport { AGGREGATE_VERIFIER_TYPE, LOGIN_TYPE, TORUS_METHOD_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\n\nexport type TorusGenericObject = {\n  [key: string]: string;\n};\n\nexport type PopupResponse = {\n  hashParams: { access_token: string; id_token?: string };\n  instanceParams: TorusGenericObject;\n};\n\nexport interface Auth0UserInfo {\n  picture: string;\n  email: string;\n  name: string;\n  sub: string;\n  nickname: string;\n}\n\nexport interface ExtraParams {\n  [key: string]: unknown;\n}\n\nexport type WebAuthnExtraParams = {\n  signature?: string;\n  clientDataJSON?: string;\n  authenticatorData?: string;\n  publicKey?: string;\n  challenge?: string;\n  rpOrigin?: string;\n  credId?: string;\n  transports?: AuthenticatorTransport[];\n};\nexport interface TorusVerifierResponse {\n  email: string;\n  name: string;\n  profileImage: string;\n  aggregateVerifier?: string;\n  verifier: string;\n  verifierId: string;\n  typeOfLogin: LOGIN_TYPE;\n  ref?: string;\n  registerOnly?: boolean;\n  extraVerifierParams?: WebAuthnExtraParams;\n}\n\nexport interface TorusSubVerifierInfo {\n  verifier: string;\n  idToken: string;\n  extraVerifierParams?: WebAuthnExtraParams;\n}\n\nexport interface LoginWindowResponse {\n  accessToken: string;\n  idToken?: string;\n  ref?: string;\n  extraParams?: string;\n  extraParamsPassed?: string;\n  state: TorusGenericObject;\n}\n\nexport interface ILoginHandler {\n  clientId: string;\n  nonce: string;\n  finalURL: URL;\n  getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse>;\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse>;\n}\n\nexport interface TorusKeyPub {\n  pubKey?: {\n    pub_key_X: string;\n    pub_key_Y: string;\n  };\n}\n\nexport interface TorusKey extends TorusKeyPub {\n  publicAddress: string;\n  privateKey: string;\n  existingPk?: { X: string; Y: string }; // if any\n  metadataNonce: string;\n  typeOfUser: \"v1\" | \"v2\";\n}\n\nexport enum SkipTorusKey {\n  Never,\n  IfNew,\n  Always,\n}\n\nexport interface TorusAggregateVerifierResponse {\n  userInfo: (TorusVerifierResponse & LoginWindowResponse)[];\n}\n\nexport interface TorusSingleVerifierResponse {\n  userInfo: TorusVerifierResponse & LoginWindowResponse;\n}\n\nexport type TorusLoginResponse = TorusSingleVerifierResponse & TorusKey;\nexport type TorusAggregateLoginResponse = TorusAggregateVerifierResponse & TorusKey;\nexport type TorusHybridAggregateLoginResponse = { singleLogin: TorusLoginResponse; aggregateLogins: TorusKey[] };\n\nexport interface CustomAuthArgs {\n  /**\n   * baseUrl , along with redirectPathName is used to construct the uri of page\n   * where user will be redirected after login.\n   *\n   * @remarks\n   * Redirect Uri for OAuth is `baseUrl`+`redirectPathName` which means\n   * that you must specify `baseUrl`+`redirectPathName` as redirect_uri at verifier's\n   * interface.\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if baseUrl is \"http://localhost:3000/serviceworker\" and\n   * redirectPathName is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * Using serviceworker is optional, you can skip it by passing `skipSw` param\n   * in init function\n   *\n   * Use of serviceworker is recommended if you are using popup uxMode or\n   * for browsers where service workers are not supported or if you wish to not use\n   * service workers, create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * In redirect uxMode, you don't have to use serviceworker or redirect.html file.\n   * You can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  baseUrl: string;\n\n  /**\n   * Specify a custom metadata host\n   * @defaultValue https://metadata.tor.us\n   */\n  metadataUrl?: string;\n\n  /**\n   * Torus Network to target options: mainnet | testnet | cyan | aqua\n   * @defaultValue mainnet\n   */\n  network?: TORUS_NETWORK_TYPE;\n\n  /**\n   * Network Url to read blockchain data from (eg: infura url)\n   */\n  networkUrl?: string;\n\n  /**\n   * This option is used to specify whether to enable logging\n   *\n   * @defaultValue false\n   */\n  enableLogging?: boolean;\n\n  /**\n   * Use one key features\n   *\n   * @defaultValue false\n   */\n  enableOneKey?: boolean;\n\n  /**\n   * For chrome extensions, the general methods for capturing auth redirects don't work.\n   * So, we redirect to the window which opens the auth window.\n   *\n   * @defaultValue false\n   */\n  redirectToOpener?: boolean;\n\n  /**\n   * This option is used to specify the url path where user will be\n   * redirected after login. Redirect Uri for OAuth is baseUrl/redirectPathName.\n   *\n   *\n   * @defaultValue redirect\n   *\n   * @remarks\n   * At verifier's interface (where you obtain client id), please use baseUrl/redirectPathName\n   * as the redirect_uri\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if `baseUrl` is \"http://localhost:3000/serviceworker\" and\n   * `redirectPathName` is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * For browsers where service workers are not supported or if you wish to not use\n   * service workers,create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * If you are using redirect uxMode, you can get the results directly on your `redirectPathName`\n   * path using `getRedirectResult` function.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  redirectPathName?: string;\n\n  /**\n   * API Key for torus to enable higher access limits\n   *\n   */\n  apiKey?: string;\n  /**\n   * Two uxModes are supported:-\n   * - `'popup'`: In this uxMode, a popup will be shown to user for login.\n   * - `'redirect'`: In this uxMode, user will be redirected to a new window tab for login.\n   *\n   * @defaultValue `'popup'`\n   * @remarks\n   *\n   * Use of `'REDIRECT'` mode is recommended in browsers where popups might get blocked.\n   */\n  uxMode?: UX_MODE_TYPE;\n\n  /**\n   * Whether to replace the url hash/query params from OAuth at the end of the redirect flow\n   *\n   * @defaultValue false\n   */\n  locationReplaceOnRedirect?: boolean;\n\n  /**\n   * Features of popup window. Please check https://developer.mozilla.org/en-US/docs/Web/API/Window/open#window_features\n   * for further documentation.\n   */\n  popupFeatures?: string;\n  /**\n   * Specify a custom storage server url\n   * @defaultValue https://broadcast-server.tor.us\n   */\n  storageServerUrl?: string;\n\n  sentry?: Sentry;\n}\n\nexport interface InitParams {\n  /**\n   * skips the installation / check for service worker\n   * @defaultValue false\n   */\n  skipSw?: boolean;\n\n  /**\n   * skips the init function\n   * @defaultValue false\n   */\n  skipInit?: boolean;\n\n  /**\n   * skips the prefetching of redirect url\n   * @defaultValue false\n   *\n   */\n  skipPrefetch?: boolean;\n}\n\n// REGION: AUTH0 PARAMS\nexport interface BaseLoginOptions {\n  /**\n   * If you need to send custom parameters to the Authorization Server,\n   * make sure to use the original parameter name.\n   */\n  [key: string]: unknown;\n  /**\n   * - `'page'`: displays the UI with a full page view\n   * - `'popup'`: displays the UI with a popup window\n   * - `'touch'`: displays the UI in a way that leverages a touch interface\n   * - `'wap'`: displays the UI with a \"feature phone\" type interface\n   */\n  display?: \"page\" | \"popup\" | \"touch\" | \"wap\" | string;\n  /**\n   * - `'none'`: do not prompt user for login or consent on reauthentication\n   * - `'login'`: prompt user for reauthentication\n   * - `'consent'`: prompt user for consent before processing request\n   * - `'select_account'`: prompt user to select an account\n   */\n  prompt?: \"none\" | \"login\" | \"consent\" | \"select_account\" | string;\n  /**\n   * Maximum allowable elasped time (in seconds) since authentication.\n   * If the last time the user authenticated is greater than this value,\n   * the user must be reauthenticated.\n   */\n  max_age?: string | number;\n  /**\n   * The space-separated list of language tags, ordered by preference.\n   * For example: `'fr-CA fr en'`.\n   */\n  ui_locales?: string;\n  /**\n   * Previously issued ID Token.\n   */\n  id_token_hint?: string;\n  /**\n   * The user's email address or other identifier. When your app knows\n   * which user is trying to authenticate, you can provide this parameter\n   * to pre-fill the email box or select the right session for sign-in.\n   *\n   * This currently only affects the classic Lock experience.\n   */\n  login_hint?: string;\n  acr_values?: string;\n  /**\n   * The default scope to be used on authentication requests.\n   * The defaultScope defined in the Auth0Client is included\n   * along with this scope\n   */\n  scope?: string;\n  /**\n   * The default audience to be used for requesting API access.\n   */\n  audience?: string;\n  /**\n   * The name of the connection configured for your application.\n   * If null, it will redirect to the Auth0 Login Page and show\n   * the Login Widget.\n   */\n  connection?: string;\n}\n\nexport interface Auth0ClientOptions extends BaseLoginOptions {\n  /**\n   * Your Auth0 account domain such as `'example.auth0.com'`,\n   * `'example.eu.auth0.com'` or , `'example.mycompany.com'`\n   * (when using [custom domains](https://auth0.com/docs/custom-domains))\n   */\n  domain?: string;\n  /**\n   * The Client ID found on your Application settings page\n   */\n  client_id?: string;\n  /**\n   * The default URL where Auth0 will redirect your browser to with\n   * the authentication result. It must be whitelisted in\n   * the \"Allowed Callback URLs\" field in your Auth0 Application's\n   * settings. If not provided here, it should be provided in the other\n   * methods that provide authentication.\n   */\n  redirect_uri?: string;\n  /**\n   * The value in seconds used to account for clock skew in JWT expirations.\n   * Typically, this value is no more than a minute or two at maximum.\n   * Defaults to 60s.\n   */\n  leeway?: number;\n\n  /**\n   * The field in jwt token which maps to verifier id\n   */\n  verifierIdField?: string;\n\n  /**\n   * Whether the verifier id field is case sensitive\n   * @defaultValue true\n   */\n  isVerifierIdCaseSensitive?: boolean;\n\n  id_token?: string;\n\n  access_token?: string;\n  /**\n   * The route for user info endpoint. This will be padded to domain\n   * @defaultValue userinfo\n   * */\n  user_info_route?: string;\n}\n\nexport interface SubVerifierDetails {\n  typeOfLogin: LOGIN_TYPE;\n  verifier: string;\n  clientId: string;\n  jwtParams?: Auth0ClientOptions;\n  hash?: string;\n  queryParameters?: TorusGenericObject;\n  customState?: TorusGenericObject;\n}\n\nexport interface CreateHandlerParams {\n  typeOfLogin: LOGIN_TYPE;\n  clientId: string;\n  verifier: string;\n  redirect_uri: string;\n  uxMode?: UX_MODE_TYPE;\n  redirectToOpener?: boolean;\n  jwtParams?: Auth0ClientOptions;\n  customState?: TorusGenericObject;\n  registerOnly?: boolean;\n}\n\nexport interface RedirectResultParams {\n  replaceUrl?: boolean;\n  clearLoginDetails?: boolean;\n}\n\nexport type SingleLoginParams = SubVerifierDetails & { registerOnly?: boolean };\n\nexport interface AggregateLoginParams {\n  aggregateVerifierType: AGGREGATE_VERIFIER_TYPE;\n  verifierIdentifier: string;\n  subVerifierDetailsArray: SubVerifierDetails[];\n}\n\nexport interface HybridAggregateLoginParams {\n  singleLogin: SubVerifierDetails;\n  aggregateLoginParams: AggregateLoginParams;\n}\n\nexport type LoginDetails = { method: TORUS_METHOD_TYPE; args: SingleLoginParams | AggregateLoginParams | HybridAggregateLoginParams };\n\nexport interface RedirectResult {\n  method: TORUS_METHOD_TYPE;\n  result?: TorusLoginResponse | TorusAggregateLoginResponse | TorusHybridAggregateLoginResponse | unknown;\n  error?: string;\n  state: Record<string, unknown>;\n  hashParameters?: Record<string, string>;\n  args: SingleLoginParams | AggregateLoginParams | HybridAggregateLoginParams;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/torus.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"web3-utils\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@chaitanyapotti/register-service-worker\");","import { register } from \"@chaitanyapotti/register-service-worker\";\n\nimport log from \"./utils/loglevel\";\n\nexport const registerServiceWorker = (baseUrl: string) =>\n  new Promise((resolve, reject) => {\n    const swUrl = `${baseUrl}sw.js`;\n\n    if (\"serviceWorker\" in window.navigator) {\n      // if swIntegrity is not calculated\n      register(swUrl, {\n        ready() {\n          log.info(\"App is being served from cache by a service worker.\\n For more details, visit https://goo.gl/AFskqB\");\n          resolve(undefined);\n        },\n        registered() {\n          log.info(\"Service worker has been registered.\");\n          resolve(undefined);\n        },\n        cached() {\n          log.info(\"Content has been cached for offline use.\");\n          resolve(undefined);\n        },\n        updatefound() {\n          log.info(\"New content is downloading.\");\n        },\n        updated() {\n          log.info(\"New content is available; please refresh.\");\n        },\n        offline() {\n          log.info(\"No internet connection found. App is running in offline mode.\");\n          reject(new Error(\"App is offline\"));\n        },\n        error(error) {\n          log.error(\"Error during service worker registration:\", error);\n          reject(error);\n        },\n      });\n    } else {\n      reject(new Error(\"Service workers are not supported\"));\n    }\n  });\n","import type { Transaction, TransactionContext } from \"@sentry/types\";\n\nimport { SENTRY_TXNS } from \"./utils/enums\";\n\nexport interface Sentry {\n  startTransaction(_: TransactionContext): Transaction;\n}\nexport default class SentryHandler {\n  sentry: Sentry | null = null;\n\n  chainUrl = \"\";\n\n  constructor(sentry?: Sentry, chainUrl?: string) {\n    this.sentry = sentry;\n    this.chainUrl = chainUrl;\n  }\n\n  startTransaction(context: TransactionContext): Transaction | void {\n    if (this.sentry) {\n      if (context.name === SENTRY_TXNS.FETCH_NODE_DETAILS && this.chainUrl) {\n        context.name += this.chainUrl;\n      }\n      return this.sentry.startTransaction(context);\n    }\n  }\n\n  finishTransaction(tx: void | Transaction): void {\n    if (tx) {\n      tx.finish();\n    }\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/metadata-helpers\");","import { getPublic, sign } from \"@toruslabs/eccrypto\";\nimport { get, post } from \"@toruslabs/http-helpers\";\nimport { decryptData, encryptData, keccak256 } from \"@toruslabs/metadata-helpers\";\n\nimport { LoginDetails } from \"../handlers/interfaces\";\nimport { REDIRECT_PARAMS_STORAGE_METHOD, REDIRECT_PARAMS_STORAGE_METHOD_TYPE } from \"./enums\";\nimport { are3PCSupported, storageAvailable } from \"./helpers\";\nimport log from \"./loglevel\";\n\nclass StorageHelper {\n  private currentStorageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE = REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE;\n\n  private isInitialized = false;\n\n  private storageServerUrl = \"https://broadcast-server.tor.us\";\n\n  constructor(serverUrl: string) {\n    this.storageServerUrl = serverUrl;\n  }\n\n  init() {\n    const support = are3PCSupported();\n    const localStorageAvailable = storageAvailable(REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE);\n    if (support && localStorageAvailable) {\n      // use local storage as default for storing stuff\n      this.currentStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE;\n    } else {\n      // use server store as default for storing stuff\n      this.currentStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.SERVER;\n    }\n    this.isInitialized = true;\n  }\n\n  async storeLoginDetails(params: LoginDetails, scope: string): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.SERVER) {\n      const privKey = keccak256(scope);\n      const privKeyHex = privKey.toString(\"hex\");\n      const publicKeyHex = getPublic(privKey).toString(\"hex\");\n      const encData = await encryptData(privKeyHex, params);\n      const signature = (await sign(privKey, keccak256(encData))).toString(\"hex\");\n      await post(`${this.storageServerUrl}/store/set`, { key: publicKeyHex, data: encData, signature });\n    } else {\n      window.localStorage.setItem(`torus_login_${scope}`, JSON.stringify(params));\n    }\n  }\n\n  async retrieveLoginDetails(scope: string): Promise<LoginDetails> {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.SERVER) {\n      const privKey = keccak256(scope);\n      const privKeyHex = privKey.toString(\"hex\");\n      const publicKeyHex = getPublic(privKey).toString(\"hex\");\n      try {\n        const encData: { message: string; success: boolean } = await get(`${this.storageServerUrl}/store/get?key=${publicKeyHex}`);\n        if (encData.message) {\n          const loginDetails = await decryptData<LoginDetails>(privKeyHex, encData.message);\n          return loginDetails;\n        }\n      } catch (error) {\n        if ((error as Response).status === 404) {\n          log.warn(error, \"Session likely expired\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    const loginDetails = window.localStorage.getItem(`torus_login_${scope}`);\n    return JSON.parse(loginDetails || \"{}\") as LoginDetails;\n  }\n\n  clearLoginDetailsStorage(scope: string): void {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE) {\n      window.localStorage.removeItem(`torus_login_${scope}`);\n    }\n    // No need to clear server details cause they auto expire and scope is never re-used for different login attempts\n  }\n\n  clearOrphanedLoginDetails(): void {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE) {\n      const allStorageKeys = Object.keys(window.localStorage);\n      allStorageKeys.forEach((key) => {\n        if (key.startsWith(\"torus_login_\")) {\n          window.localStorage.removeItem(key);\n        }\n      });\n    }\n    // No need to clear server details cause they auto expire and scope is never re-used for different login attempts\n  }\n}\n\nexport default StorageHelper;\n","import NodeDetailManager, { TORUS_NETWORK } from \"@toruslabs/fetch-node-details\";\nimport Torus, { keyLookup } from \"@toruslabs/torus.js\";\nimport { keccak256 } from \"web3-utils\";\n\nimport createHandler from \"./handlers/HandlerFactory\";\nimport {\n  AggregateLoginParams,\n  CustomAuthArgs,\n  ExtraParams,\n  HybridAggregateLoginParams,\n  ILoginHandler,\n  InitParams,\n  LoginWindowResponse,\n  RedirectResult,\n  RedirectResultParams,\n  SingleLoginParams,\n  SkipTorusKey,\n  SubVerifierDetails,\n  TorusAggregateLoginResponse,\n  TorusHybridAggregateLoginResponse,\n  TorusKey,\n  TorusLoginResponse,\n  TorusSubVerifierInfo,\n  TorusVerifierResponse,\n} from \"./handlers/interfaces\";\nimport { registerServiceWorker } from \"./registerServiceWorker\";\nimport SentryHandler from \"./sentry\";\nimport { AGGREGATE_VERIFIER, CONTRACT_MAP, LOGIN, SENTRY_TXNS, SIGNER_MAP, TORUS_METHOD, UX_MODE, UX_MODE_TYPE } from \"./utils/enums\";\nimport { handleRedirectParameters, isFirefox, padUrlString } from \"./utils/helpers\";\nimport log from \"./utils/loglevel\";\nimport StorageHelper from \"./utils/StorageHelper\";\n\nclass CustomAuth {\n  isInitialized: boolean;\n\n  config: {\n    baseUrl: string;\n    redirectToOpener: boolean;\n    redirect_uri: string;\n    uxMode: UX_MODE_TYPE;\n    locationReplaceOnRedirect: boolean;\n    popupFeatures: string;\n  };\n\n  torus: Torus;\n\n  nodeDetailManager: NodeDetailManager;\n\n  storageHelper: StorageHelper;\n\n  sentryHandler: SentryHandler;\n\n  constructor({\n    baseUrl,\n    network = TORUS_NETWORK.MAINNET,\n    enableLogging = false,\n    enableOneKey = false,\n    redirectToOpener = false,\n    redirectPathName = \"redirect\",\n    apiKey = \"torus-default\",\n    uxMode = UX_MODE.POPUP,\n    locationReplaceOnRedirect = false,\n    popupFeatures,\n    metadataUrl = \"https://metadata.tor.us\",\n    storageServerUrl = \"https://broadcast-server.tor.us\",\n    networkUrl,\n    sentry,\n  }: CustomAuthArgs) {\n    this.isInitialized = false;\n    const baseUri = new URL(baseUrl);\n    this.config = {\n      baseUrl: padUrlString(baseUri),\n      get redirect_uri() {\n        return `${this.baseUrl}${redirectPathName}`;\n      },\n      redirectToOpener,\n      uxMode,\n      locationReplaceOnRedirect,\n      popupFeatures,\n    };\n    const torus = new Torus({\n      enableOneKey,\n      metadataHost: metadataUrl,\n      allowHost: `${SIGNER_MAP[network]}/api/allow`,\n      signerHost: `${SIGNER_MAP[network]}/api/sign`,\n      network,\n    });\n    Torus.setAPIKey(apiKey);\n    this.torus = torus;\n    this.nodeDetailManager = new NodeDetailManager({ network: networkUrl || network, proxyAddress: CONTRACT_MAP[network] });\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n    this.storageHelper = new StorageHelper(storageServerUrl);\n    this.sentryHandler = new SentryHandler(sentry, networkUrl);\n  }\n\n  async init({ skipSw = false, skipInit = false, skipPrefetch = false }: InitParams = {}): Promise<void> {\n    this.storageHelper.init();\n    if (skipInit) {\n      this.isInitialized = true;\n      return;\n    }\n    if (!skipSw) {\n      const fetchSwResponse = await fetch(`${this.config.baseUrl}sw.js`, { cache: \"reload\" });\n      if (fetchSwResponse.ok) {\n        try {\n          await registerServiceWorker(this.config.baseUrl);\n          this.isInitialized = true;\n          return;\n        } catch (error) {\n          log.warn(error);\n        }\n      } else {\n        throw new Error(\"Service worker is not being served. Please serve it\");\n      }\n    }\n    if (!skipPrefetch) {\n      // Skip the redirect check for firefox\n      if (isFirefox()) {\n        this.isInitialized = true;\n        return;\n      }\n      await this.handlePrefetchRedirectUri();\n      return;\n    }\n    this.isInitialized = true;\n  }\n\n  async triggerLogin(args: SingleLoginParams & { skipTorusKey?: SkipTorusKey; checkIfNewKey?: boolean }): Promise<TorusLoginResponse> {\n    const {\n      verifier,\n      typeOfLogin,\n      clientId,\n      jwtParams,\n      hash,\n      queryParameters,\n      customState,\n      registerOnly,\n      skipTorusKey = SkipTorusKey.Never,\n      checkIfNewKey = false,\n    } = args;\n    log.info(\"Verifier: \", verifier);\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (registerOnly && typeOfLogin !== LOGIN.WEBAUTHN) throw new Error(\"registerOnly flag can only be passed for webauthn\");\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n      registerOnly,\n    });\n    let loginParams: LoginWindowResponse;\n    if (hash && queryParameters) {\n      const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n      if (error) throw new Error(error);\n      const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n      // State has to be last here otherwise it will be overwritten\n      loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n    } else {\n      this.storageHelper.clearOrphanedLoginDetails();\n      if (this.config.uxMode === UX_MODE.REDIRECT) {\n        await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_LOGIN, args }, loginHandler.nonce);\n      }\n      loginParams = await loginHandler.handleLoginWindow({\n        locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n        popupFeatures: this.config.popupFeatures,\n      });\n      if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    }\n\n    const userInfo = await loginHandler.getUserInfo(loginParams);\n    if (registerOnly) {\n      const nodeTx = this.sentryHandler.startTransaction({\n        name: SENTRY_TXNS.FETCH_NODE_DETAILS,\n      });\n      const { torusNodeEndpoints, torusNodePub } = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId: userInfo.verifierId });\n      this.sentryHandler.finishTransaction(nodeTx);\n      const lookupTx = this.sentryHandler.startTransaction({\n        name: SENTRY_TXNS.PUB_ADDRESS_LOOKUP,\n      });\n      const torusPubKey = await this.torus.getPublicAddress(torusNodeEndpoints, torusNodePub, { verifier, verifierId: userInfo.verifierId }, true);\n      this.sentryHandler.finishTransaction(lookupTx);\n      const res = {\n        userInfo: {\n          ...userInfo,\n          ...loginParams,\n        },\n      };\n      if (typeof torusPubKey === \"string\") {\n        throw new Error(\"should have returned extended pub key\");\n      }\n      const torusKey: TorusKey = {\n        typeOfUser: torusPubKey.typeOfUser,\n        pubKey: {\n          pub_key_X: torusPubKey.X,\n          pub_key_Y: torusPubKey.Y,\n        },\n        publicAddress: torusPubKey.address,\n        privateKey: null,\n        metadataNonce: null,\n      };\n      return { ...res, ...torusKey };\n    }\n    let skip = true;\n    let existingPk: { X: string; Y: string };\n    if (checkIfNewKey || skipTorusKey === SkipTorusKey.IfNew) {\n      const { torusNodeEndpoints } = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId: userInfo.verifierId });\n      const lookupData = await keyLookup(torusNodeEndpoints, verifier, userInfo.verifierId);\n      existingPk = lookupData?.keyResult?.keys?.length\n        ? { X: lookupData?.keyResult?.keys[0].pub_key_X, Y: lookupData?.keyResult?.keys[0].pub_key_Y }\n        : undefined;\n    }\n    switch (skipTorusKey) {\n      case SkipTorusKey.IfNew:\n        skip = !existingPk;\n        break;\n      case SkipTorusKey.Always:\n        skip = true;\n        break;\n      case SkipTorusKey.Never:\n        skip = false;\n        break;\n      default:\n        throw new Error(\"Invalid SkipTorusKey\");\n    }\n    const torusKey = skip\n      ? (undefined as TorusKey)\n      : await this.getTorusKey(\n          verifier,\n          userInfo.verifierId,\n          { verifier_id: userInfo.verifierId },\n          loginParams.idToken || loginParams.accessToken,\n          userInfo.extraVerifierParams\n        );\n    return {\n      ...torusKey,\n      existingPk,\n      userInfo: {\n        ...userInfo,\n        ...loginParams,\n      },\n    };\n  }\n\n  async triggerAggregateLogin(\n    args: AggregateLoginParams & { skipTorusKey?: SkipTorusKey; checkIfNewKey?: boolean }\n  ): Promise<TorusAggregateLoginResponse> {\n    // This method shall break if any of the promises fail. This behaviour is intended\n    const { aggregateVerifierType, verifierIdentifier, subVerifierDetailsArray, skipTorusKey = SkipTorusKey.Never, checkIfNewKey = false } = args;\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (!aggregateVerifierType || !verifierIdentifier || !Array.isArray(subVerifierDetailsArray)) {\n      throw new Error(\"Invalid params\");\n    }\n    if (aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID && subVerifierDetailsArray.length !== 1) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const userInfoPromises: Promise<TorusVerifierResponse>[] = [];\n    const loginParamsArray: LoginWindowResponse[] = [];\n    for (const subVerifierDetail of subVerifierDetailsArray) {\n      const { clientId, typeOfLogin, verifier, jwtParams, hash, queryParameters, customState } = subVerifierDetail;\n      const loginHandler: ILoginHandler = createHandler({\n        typeOfLogin,\n        clientId,\n        verifier,\n        redirect_uri: this.config.redirect_uri,\n        redirectToOpener: this.config.redirectToOpener,\n        jwtParams,\n        uxMode: this.config.uxMode,\n        customState,\n      });\n      // We let the user login to each verifier in a loop. Don't wait for key derivation here.!\n      let loginParams: LoginWindowResponse;\n      if (hash && queryParameters) {\n        const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n        if (error) throw new Error(error);\n        const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n        // State has to be last here otherwise it will be overwritten\n        loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n      } else {\n        this.storageHelper.clearOrphanedLoginDetails();\n        if (this.config.uxMode === UX_MODE.REDIRECT) {\n          await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN, args }, loginHandler.nonce);\n        }\n        loginParams = await loginHandler.handleLoginWindow({\n          locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n          popupFeatures: this.config.popupFeatures,\n        });\n        if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n      }\n      // Fail the method even if one promise fails\n\n      userInfoPromises.push(loginHandler.getUserInfo(loginParams));\n      loginParamsArray.push(loginParams);\n    }\n    const _userInfoArray = await Promise.all(userInfoPromises);\n    const userInfoArray = _userInfoArray.map((userInfo) => ({ ...userInfo, aggregateVerifier: verifierIdentifier }));\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const loginParams = loginParamsArray[index];\n      const { idToken, accessToken } = loginParams;\n      const userInfo = userInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const userInfoData = userInfoArray.map((x, index) => ({ ...x, ...loginParamsArray[index] }));\n    let skip = true;\n    let existingPk: { X: string; Y: string };\n    if (checkIfNewKey || skipTorusKey === SkipTorusKey.IfNew) {\n      const { torusNodeEndpoints } = await this.nodeDetailManager.getNodeDetails({\n        verifier: args.verifierIdentifier,\n        verifierId: userInfoData[0].verifierId,\n      });\n      const lookupData = await keyLookup(torusNodeEndpoints, args.verifierIdentifier, userInfoData[0].verifierId);\n      existingPk = lookupData?.keyResult?.keys?.length\n        ? { X: lookupData?.keyResult?.keys[0].pub_key_X, Y: lookupData?.keyResult?.keys[0].pub_key_Y }\n        : undefined;\n    }\n    switch (skipTorusKey) {\n      case SkipTorusKey.IfNew:\n        skip = !existingPk;\n        break;\n      case SkipTorusKey.Always:\n        skip = true;\n        break;\n      case SkipTorusKey.Never:\n        skip = false;\n        break;\n      default:\n        throw new Error(\"Invalid SkipTorusKey\");\n    }\n    const torusKey = skip\n      ? (undefined as TorusKey)\n      : await this.getTorusKey(verifierIdentifier, aggregateVerifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n    return {\n      ...torusKey,\n      existingPk,\n      userInfo: userInfoArray.map((x, index) => ({ ...x, ...loginParamsArray[index] })),\n    };\n  }\n\n  async triggerHybridAggregateLogin(args: HybridAggregateLoginParams): Promise<TorusHybridAggregateLoginResponse> {\n    const { singleLogin, aggregateLoginParams } = args;\n    // This method shall break if any of the promises fail. This behaviour is intended\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (\n      !aggregateLoginParams.aggregateVerifierType ||\n      !aggregateLoginParams.verifierIdentifier ||\n      !Array.isArray(aggregateLoginParams.subVerifierDetailsArray)\n    ) {\n      throw new Error(\"Invalid params\");\n    }\n    if (\n      aggregateLoginParams.aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID &&\n      aggregateLoginParams.subVerifierDetailsArray.length !== 1\n    ) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const { typeOfLogin, clientId, verifier, jwtParams, hash, queryParameters, customState } = singleLogin;\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n    });\n    let loginParams: LoginWindowResponse;\n    if (hash && queryParameters) {\n      const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n      if (error) throw new Error(error);\n      const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n      // State has to be last here otherwise it will be overwritten\n      loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n    } else {\n      this.storageHelper.clearOrphanedLoginDetails();\n      if (this.config.uxMode === UX_MODE.REDIRECT) {\n        await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN, args }, loginHandler.nonce);\n      }\n      loginParams = await loginHandler.handleLoginWindow({\n        locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n        popupFeatures: this.config.popupFeatures,\n      });\n      if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    }\n\n    const userInfo = await loginHandler.getUserInfo(loginParams);\n    const torusKey1Promise = this.getTorusKey(\n      verifier,\n      userInfo.verifierId,\n      { verifier_id: userInfo.verifierId },\n      loginParams.idToken || loginParams.accessToken,\n      userInfo.extraVerifierParams\n    );\n\n    const { verifierIdentifier, subVerifierDetailsArray } = aggregateLoginParams;\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const sub = subVerifierDetailsArray[index];\n      const { idToken, accessToken } = loginParams;\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(sub.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const torusKey2Promise = this.getTorusKey(\n      verifierIdentifier,\n      aggregateVerifierId,\n      aggregateVerifierParams,\n      aggregateIdToken,\n      userInfo.extraVerifierParams\n    );\n    const [torusKey1, torusKey2] = await Promise.all([torusKey1Promise, torusKey2Promise]);\n    return {\n      singleLogin: {\n        userInfo: { ...userInfo, ...loginParams },\n        ...torusKey1,\n      },\n      aggregateLogins: [torusKey2],\n    };\n  }\n\n  async getTorusKey(\n    verifier: string,\n    verifierId: string,\n    verifierParams: { verifier_id: string },\n    idToken: string,\n    additionalParams?: ExtraParams\n  ): Promise<TorusKey> {\n    const nodeTx = this.sentryHandler.startTransaction({\n      name: SENTRY_TXNS.FETCH_NODE_DETAILS,\n    });\n    const { torusNodeEndpoints, torusNodePub, torusIndexes } = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId });\n    this.sentryHandler.finishTransaction(nodeTx);\n    log.debug(\"torus-direct/getTorusKey\", { torusNodeEndpoints, torusNodePub, torusIndexes });\n\n    const pubLookupTx = this.sentryHandler.startTransaction({\n      name: SENTRY_TXNS.PUB_ADDRESS_LOOKUP,\n    });\n    const address = await this.torus.getPublicAddress(torusNodeEndpoints, torusNodePub, { verifier, verifierId }, true);\n    this.sentryHandler.finishTransaction(pubLookupTx);\n    if (typeof address === \"string\") throw new Error(\"must use extended pub key\");\n    log.debug(\"torus-direct/getTorusKey\", { getPublicAddress: address });\n\n    const sharesTx = this.sentryHandler.startTransaction({\n      name: SENTRY_TXNS.FETCH_SHARES,\n    });\n    const shares = await this.torus.retrieveShares(torusNodeEndpoints, torusIndexes, verifier, verifierParams, idToken, additionalParams);\n    this.sentryHandler.finishTransaction(sharesTx);\n    if (shares.ethAddress.toLowerCase() !== address.address.toLowerCase()) {\n      throw new Error(\"data ethAddress does not match response address\");\n    }\n    log.debug(\"torus-direct/getTorusKey\", { retrieveShares: shares });\n\n    return {\n      publicAddress: shares.ethAddress.toString(),\n      privateKey: shares.privKey.toString(),\n      metadataNonce: shares.metadataNonce.toString(\"hex\"),\n      typeOfUser: address.typeOfUser,\n      pubKey: {\n        pub_key_X: address.X,\n        pub_key_Y: address.Y,\n      },\n    };\n  }\n\n  async getAggregateTorusKey(\n    verifier: string,\n    verifierId: string, // unique identifier for user e.g. sub on jwt\n    subVerifierInfoArray: TorusSubVerifierInfo[]\n  ): Promise<TorusKey> {\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierInfoArray.length; index += 1) {\n      const userInfo = subVerifierInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: verifierId, idtoken: userInfo.idToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(userInfo.idToken);\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = verifierId;\n    return this.getTorusKey(verifier, verifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey: string, nonce: string): string {\n    return this.torus.getPostboxKeyFrom1OutOf1(privKey, nonce);\n  }\n\n  async getRedirectResult({ replaceUrl = true, clearLoginDetails = true }: RedirectResultParams = {}): Promise<RedirectResult> {\n    await this.init({ skipInit: true });\n    const url = new URL(window.location.href);\n    const hash = url.hash.substring(1);\n    const queryParams = {};\n    url.searchParams.forEach((value, key) => {\n      queryParams[key] = value;\n    });\n\n    if (replaceUrl) {\n      const cleanUrl = window.location.origin + window.location.pathname;\n      window.history.replaceState(null, \"\", cleanUrl);\n    }\n\n    if (!hash && Object.keys(queryParams).length === 0) {\n      throw new Error(\"Unable to fetch result from OAuth login\");\n    }\n\n    const { error, instanceParameters, hashParameters } = handleRedirectParameters(hash, queryParams);\n\n    const { instanceId } = instanceParameters;\n\n    log.info(instanceId, \"instanceId\");\n\n    const { args, method, ...rest } = await this.storageHelper.retrieveLoginDetails(instanceId);\n    log.info(args, method);\n\n    if (clearLoginDetails) {\n      this.storageHelper.clearLoginDetailsStorage(instanceId);\n    }\n\n    if (error) {\n      return { error, state: instanceParameters || {}, method, result: {}, hashParameters, args };\n    }\n\n    let result: unknown;\n\n    try {\n      if (method === TORUS_METHOD.TRIGGER_LOGIN) {\n        const methodArgs = args as SubVerifierDetails & { registerOnly?: boolean };\n        methodArgs.hash = hash;\n        methodArgs.queryParameters = queryParams;\n        result = await this.triggerLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        const methodArgs = args as AggregateLoginParams;\n        methodArgs.subVerifierDetailsArray.forEach((x) => {\n          x.hash = hash;\n          x.queryParameters = queryParams;\n        });\n        result = await this.triggerAggregateLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN) {\n        const methodArgs = args as HybridAggregateLoginParams;\n        methodArgs.singleLogin.hash = hash;\n        methodArgs.singleLogin.queryParameters = queryParams;\n        result = await this.triggerHybridAggregateLogin(methodArgs);\n      }\n    } catch (err) {\n      log.error(err);\n      return {\n        error: `Could not get result from torus nodes \\n ${err?.message || \"\"}`,\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n    }\n\n    if (!result)\n      return {\n        error: \"Unsupported method type\",\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n\n    return { method, result, state: instanceParameters || {}, hashParameters, args, ...rest };\n  }\n\n  private async handlePrefetchRedirectUri(): Promise<void> {\n    if (!document) return Promise.resolve();\n    return new Promise((resolve, reject) => {\n      const redirectHtml = document.createElement(\"link\");\n      redirectHtml.href = this.config.redirect_uri;\n      if (window.location.origin !== new URL(this.config.redirect_uri).origin) redirectHtml.crossOrigin = \"anonymous\";\n      redirectHtml.type = \"text/html\";\n      redirectHtml.rel = \"prefetch\";\n      const resolveFn = () => {\n        this.isInitialized = true;\n        resolve();\n      };\n      try {\n        if (redirectHtml.relList && redirectHtml.relList.supports) {\n          if (redirectHtml.relList.supports(\"prefetch\")) {\n            redirectHtml.onload = resolveFn;\n            redirectHtml.onerror = () => {\n              reject(new Error(`Please serve redirect.html present in serviceworker folder of this package on ${this.config.redirect_uri}`));\n            };\n            document.head.appendChild(redirectHtml);\n          } else {\n            // Link prefetch is not supported. pass through\n            resolveFn();\n          }\n        } else {\n          // Link prefetch is not detectable. pass through\n          resolveFn();\n        }\n      } catch (err) {\n        resolveFn();\n      }\n    });\n  }\n}\n\nexport default CustomAuth;\n","export { default as createHandler } from \"./handlers/HandlerFactory\";\nexport * from \"./handlers/interfaces\";\nexport { default } from \"./login\";\nexport * from \"./utils/enums\";\nexport * from \"./utils/helpers\";\n"],"names":["NodeDetailManager","TORUS_NETWORK","LOGIN","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","GITHUB","LINKEDIN","TWITTER","WEIBO","LINE","EMAIL_PASSWORD","PASSWORDLESS","JWT","WEBAUTHN","AGGREGATE_VERIFIER","SINGLE_VERIFIER_ID","UX_MODE","POPUP","REDIRECT","REDIRECT_PARAMS_STORAGE_METHOD","LOCAL_STORAGE","SESSION_STORAGE","SERVER","TORUS_METHOD","TRIGGER_LOGIN","TRIGGER_AGGREGATE_LOGIN","TRIGGER_AGGREGATE_HYBRID_LOGIN","CONTRACT_MAP","MAINNET","PROXY_ADDRESS_MAINNET","TESTNET","PROXY_ADDRESS_TESTNET","CYAN","PROXY_ADDRESS_CYAN","AQUA","PROXY_ADDRESS_AQUA","CELESTE","PROXY_ADDRESS_CELESTE","SIGNER_MAP","SENTRY_TXNS","FETCH_NODE_DETAILS","PUB_ADDRESS_LOOKUP","FETCH_SHARES","loglevel","getLogger","Bowser","ENGINE_MAP","log","eventToPromise","emitter","Promise","resolve","reject","handler","ev","error","data","removeEventListener","Error","addEventListener","loginToConnectionMap","padUrlString","url","href","endsWith","randomId","Math","random","toString","slice","broadcastChannelOptions","webWorkerSupport","caseSensitiveField","field","isCaseSensitive","toLowerCase","getVerifierId","userInfo","typeOfLogin","verifierIdField","isVerifierIdCaseSensitive","name","sub","handleRedirectParameters","hash","queryParameters","hashParameters","split","reduce","result","item","part0","part1","info","instanceParameters","Object","keys","length","state","JSON","parse","atob","decodeURIComponent","error_description","storageAvailable","type","storage","window","x","setItem","removeItem","e","code","getPopupFeatures","dualScreenLeft","screenLeft","undefined","screenX","dualScreenTop","screenTop","screenY","w","h","width","innerWidth","document","documentElement","clientWidth","screen","height","innerHeight","clientHeight","systemZoom","left","abs","top","features","isFirefox","navigator","userAgent","indexOf","constructURL","params","baseURL","query","URL","forEach","key","searchParams","append","are3PCSupported","browserInfo","stringify","thirdPartyCookieSupport","brave","engine","WebKit","Gecko","validateAndConstructUrl","domain","message","EventEmitter","PopupHandler","target","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","emit","open","focus","close","locationReplaceOnRedirect","location","replace","BroadcastChannel","AbstractLoginHandler","clientId","verifier","redirect_uri","uxMode","redirectToOpener","jwtParams","customState","encodeURIComponent","btoa","instanceId","nonce","verifierWindow","finalURL","popupFeatures","redirect","bc","handleData","instanceParams","hashParams","accessToken","access_token","idToken","id_token","rest","postMessage","success","postMessageEventHandler","postMessageEvent","channel","once","get","deepmerge","DiscordHandler","setFinalUrl","finalUrl","clonedParams","finalJwtParams","response_type","RESPONSE_TYPE","client_id","scope","SCOPE","headers","Authorization","id","avatar","email","username","discriminator","profileImage","verifierId","FacebookHandler","picture","GoogleHandler","prompt","PROMPT","jwtDecode","JwtHandler","pathname","connection","user_info_route","domainUrl","warn","decodedToken","MockLoginHandler","post","login_hint","phone_number","send","authParams","then","response","catch","RedditHandler","icon_img","TwitchHandler","force_verify","profile_image_url","display_name","WEBAUTHN_LOOKUP_SERVER","WebAuthnHandler","registerOnly","register_only","parameters","ref","extraParamsPassed","extraParams","debug","verifier_id","signature","clientDataJSON","authenticatorData","publicKey","challenge","rpOrigin","credId","transports","extraVerifierParams","PasswordlessHandler","createHandler","SkipTorusKey","register","registerServiceWorker","baseUrl","swUrl","ready","registered","cached","updatefound","updated","offline","SentryHandler","sentry","chainUrl","context","startTransaction","tx","finish","getPublic","sign","decryptData","encryptData","keccak256","StorageHelper","serverUrl","storageServerUrl","support","localStorageAvailable","currentStorageMethod","isInitialized","privKey","privKeyHex","publicKeyHex","encData","localStorage","loginDetails","status","getItem","allStorageKeys","startsWith","Torus","keyLookup","CustomAuth","network","enableLogging","enableOneKey","redirectPathName","apiKey","metadataUrl","networkUrl","baseUri","config","torus","metadataHost","allowHost","signerHost","setAPIKey","nodeDetailManager","proxyAddress","enableAll","disableAll","storageHelper","sentryHandler","skipSw","skipInit","skipPrefetch","init","fetch","cache","fetchSwResponse","ok","handlePrefetchRedirectUri","args","skipTorusKey","Never","checkIfNewKey","loginHandler","loginParams","clearOrphanedLoginDetails","storeLoginDetails","method","handleLoginWindow","getUserInfo","nodeTx","getNodeDetails","torusNodeEndpoints","torusNodePub","finishTransaction","lookupTx","getPublicAddress","torusPubKey","res","torusKey","typeOfUser","pubKey","pub_key_X","X","pub_key_Y","Y","publicAddress","address","privateKey","metadataNonce","skip","IfNew","lookupData","existingPk","keyResult","Always","getTorusKey","aggregateVerifierType","verifierIdentifier","subVerifierDetailsArray","Array","isArray","userInfoPromises","loginParamsArray","subVerifierDetail","push","all","_userInfoArray","userInfoArray","map","aggregateVerifier","aggregateVerifierParams","verify_params","sub_verifier_ids","aggregateIdTokenSeeds","aggregateVerifierId","index","idtoken","sort","aggregateIdToken","join","String","fromCharCode","userInfoData","singleLogin","aggregateLoginParams","torusKey1Promise","torusKey2Promise","torusKey1","torusKey2","aggregateLogins","verifierParams","additionalParams","torusIndexes","pubLookupTx","sharesTx","retrieveShares","shares","ethAddress","subVerifierInfoArray","getPostboxKeyFrom1OutOf1","replaceUrl","clearLoginDetails","substring","queryParams","value","cleanUrl","origin","history","replaceState","retrieveLoginDetails","clearLoginDetailsStorage","methodArgs","triggerLogin","triggerAggregateLogin","triggerHybridAggregateLogin","redirectHtml","createElement","crossOrigin","rel","resolveFn","relList","supports","onload","onerror","head","appendChild","err","default"],"sourceRoot":""}