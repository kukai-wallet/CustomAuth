{"version":3,"file":"customauth.cjs.js","mappings":"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","sources":["webpack://@toruslabs/customauth/webpack/bootstrap","webpack://@toruslabs/customauth/webpack/runtime/compat get default export","webpack://@toruslabs/customauth/webpack/runtime/define property getters","webpack://@toruslabs/customauth/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/customauth/webpack/runtime/make namespace object","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/fetch-node-details\"","webpack://@toruslabs/customauth/./src/utils/enums.ts","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@toruslabs/customauth/external commonjs2 \"lodash.merge\"","webpack://@toruslabs/customauth/external commonjs2 \"@babel/runtime/helpers/objectWithoutProperties\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/broadcast-channel\"","webpack://@toruslabs/customauth/external commonjs2 \"bowser\"","webpack://@toruslabs/customauth/external commonjs2 \"loglevel\"","webpack://@toruslabs/customauth/./src/utils/loglevel.ts","webpack://@toruslabs/customauth/./src/utils/helpers.ts","webpack://@toruslabs/customauth/external commonjs2 \"events\"","webpack://@toruslabs/customauth/./src/utils/PopupHandler.ts","webpack://@toruslabs/customauth/./src/handlers/AbstractLoginHandler.ts","webpack://@toruslabs/customauth/./src/handlers/DiscordHandler.ts","webpack://@toruslabs/customauth/./src/handlers/FacebookHandler.ts","webpack://@toruslabs/customauth/./src/handlers/GoogleHandler.ts","webpack://@toruslabs/customauth/external commonjs2 \"jwt-decode\"","webpack://@toruslabs/customauth/./src/handlers/JwtHandler.ts","webpack://@toruslabs/customauth/./src/handlers/MockLoginHandler.ts","webpack://@toruslabs/customauth/./src/handlers/PasswordlessHandler.ts","webpack://@toruslabs/customauth/./src/handlers/RedditHandler.ts","webpack://@toruslabs/customauth/./src/handlers/TwitchHandler.ts","webpack://@toruslabs/customauth/./src/handlers/WebAuthnHandler.ts","webpack://@toruslabs/customauth/./src/handlers/HandlerFactory.ts","webpack://@toruslabs/customauth/./src/handlers/interfaces.ts","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/torus.js\"","webpack://@toruslabs/customauth/external commonjs2 \"web3-utils\"","webpack://@toruslabs/customauth/external commonjs2 \"@chaitanyapotti/register-service-worker\"","webpack://@toruslabs/customauth/./src/registerServiceWorker.ts","webpack://@toruslabs/customauth/./src/sentry.ts","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@toruslabs/customauth/external commonjs2 \"@toruslabs/metadata-helpers\"","webpack://@toruslabs/customauth/./src/utils/StorageHelper.ts","webpack://@toruslabs/customauth/./src/login.ts","webpack://@toruslabs/customauth/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/fetch-node-details\");","import NodeDetailManager, { ETHEREUM_NETWORK } from \"@toruslabs/fetch-node-details\";\n\nexport const TORUS_NETWORK = {\n  TESTNET: \"testnet\",\n  MAINNET: \"mainnet\",\n  CYAN: \"cyan\",\n} as const;\n\nexport const LOGIN = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  GITHUB: \"github\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  LINE: \"line\",\n  EMAIL_PASSWORD: \"email_password\",\n  PASSWORDLESS: \"passwordless\",\n  JWT: \"jwt\",\n  WEBAUTHN: \"webauthn\",\n} as const;\n\nexport const AGGREGATE_VERIFIER = {\n  SINGLE_VERIFIER_ID: \"single_id_verifier\",\n  // AND_AGGREGATE_VERIFIER : \"and_aggregate_verifier\",\n  // OR_AGGREGATE_VERIFIER : \"or_aggregate_verifier\",\n} as const;\n\nexport const UX_MODE = {\n  POPUP: \"popup\",\n  REDIRECT: \"redirect\",\n} as const;\n\nexport const REDIRECT_PARAMS_STORAGE_METHOD = {\n  LOCAL_STORAGE: \"localStorage\",\n  SESSION_STORAGE: \"sessionStorage\",\n  SERVER: \"server\",\n};\n\nexport const TORUS_METHOD = {\n  TRIGGER_LOGIN: \"triggerLogin\",\n  TRIGGER_AGGREGATE_LOGIN: \"triggerAggregateLogin\",\n  TRIGGER_AGGREGATE_HYBRID_LOGIN: \"triggerHybridAggregateLogin\",\n} as const;\n\nexport type TORUS_NETWORK_TYPE = typeof TORUS_NETWORK[keyof typeof TORUS_NETWORK];\nexport type LOGIN_TYPE = typeof LOGIN[keyof typeof LOGIN];\nexport type AGGREGATE_VERIFIER_TYPE = typeof AGGREGATE_VERIFIER[keyof typeof AGGREGATE_VERIFIER];\nexport type UX_MODE_TYPE = typeof UX_MODE[keyof typeof UX_MODE];\nexport type TORUS_METHOD_TYPE = typeof TORUS_METHOD[keyof typeof TORUS_METHOD];\nexport type REDIRECT_PARAMS_STORAGE_METHOD_TYPE = typeof REDIRECT_PARAMS_STORAGE_METHOD[keyof typeof REDIRECT_PARAMS_STORAGE_METHOD];\n\nexport const CONTRACT_MAP = {\n  [TORUS_NETWORK.MAINNET]: NodeDetailManager.PROXY_ADDRESS_MAINNET,\n  [TORUS_NETWORK.TESTNET]: NodeDetailManager.PROXY_ADDRESS_ROPSTEN,\n  [TORUS_NETWORK.CYAN]: NodeDetailManager.PROXY_ADDRESS_POLYGON,\n};\n\nexport const NETWORK_MAP = {\n  [TORUS_NETWORK.MAINNET]: ETHEREUM_NETWORK.MAINNET,\n  [TORUS_NETWORK.TESTNET]: ETHEREUM_NETWORK.ROPSTEN,\n  [TORUS_NETWORK.CYAN]: ETHEREUM_NETWORK.POLYGON,\n};\n\nexport const SIGNER_MAP = {\n  [TORUS_NETWORK.MAINNET]: \"https://signer.tor.us\",\n  [TORUS_NETWORK.TESTNET]: \"https://signer.tor.us\",\n  [TORUS_NETWORK.CYAN]: \"https://signer-polygon.tor.us\",\n};\n\nexport const SENTRY_TXNS = {\n  FETCH_NODE_DETAILS: \"fetchNodeDetails\",\n  PUB_ADDRESS_LOOKUP: \"pubAddressLookup\",\n  FETCH_SHARES: \"fetchShares\",\n} as const;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash.merge\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectWithoutProperties\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/broadcast-channel\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bowser\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"loglevel\");","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"customauth\");\n","import Bowser, { ENGINE_MAP } from \"bowser\";\n\nimport { Auth0UserInfo, TorusGenericObject } from \"../handlers/interfaces\";\nimport { LOGIN, LOGIN_TYPE, REDIRECT_PARAMS_STORAGE_METHOD_TYPE } from \"./enums\";\nimport log from \"./loglevel\";\ninterface CustomMessageEvent extends MessageEvent {\n  error: string;\n}\n\ninterface EventListener {\n  (evt: CustomMessageEvent): void;\n}\n\ntype EmitterType = { addEventListener(type: string, handler: EventListener): void; removeEventListener(type: string, handler: EventListener): void };\n\nexport function eventToPromise<T>(emitter: EmitterType): Promise<T> {\n  return new Promise<T>((resolve, reject) => {\n    const handler = (ev: CustomMessageEvent) => {\n      const { error = \"\", data } = ev;\n      emitter.removeEventListener(\"message\", handler);\n      if (error) return reject(new Error(error));\n      return resolve(data as T);\n    };\n    emitter.addEventListener(\"message\", handler);\n  });\n}\n\n// These are the connection names used by auth0\nexport const loginToConnectionMap = {\n  [LOGIN.APPLE]: \"apple\",\n  [LOGIN.GITHUB]: \"github\",\n  [LOGIN.LINKEDIN]: \"linkedin\",\n  [LOGIN.TWITTER]: \"twitter\",\n  [LOGIN.WEIBO]: \"weibo\",\n  [LOGIN.LINE]: \"line\",\n  [LOGIN.EMAIL_PASSWORD]: \"Username-Password-Authentication\",\n  [LOGIN.PASSWORDLESS]: \"email\",\n};\n\nexport const padUrlString = (url: URL): string => (url.href.endsWith(\"/\") ? url.href : `${url.href}/`);\n\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */\nexport const randomId = (): string => Math.random().toString(36).slice(2);\n\nexport const broadcastChannelOptions = {\n  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n  webWorkerSupport: false, // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\n\nfunction caseSensitiveField(field: string, isCaseSensitive?: boolean): string {\n  return isCaseSensitive ? field : field.toLowerCase();\n}\n\nexport const getVerifierId = (\n  userInfo: Auth0UserInfo,\n  typeOfLogin: LOGIN_TYPE,\n  verifierIdField?: string,\n  isVerifierIdCaseSensitive = true\n): string => {\n  const { name, sub } = userInfo;\n  if (verifierIdField) return caseSensitiveField(userInfo[verifierIdField], isVerifierIdCaseSensitive);\n  switch (typeOfLogin) {\n    case LOGIN.PASSWORDLESS:\n    case LOGIN.EMAIL_PASSWORD:\n      return caseSensitiveField(name, isVerifierIdCaseSensitive);\n    case LOGIN.WEIBO:\n    case LOGIN.GITHUB:\n    case LOGIN.TWITTER:\n    case LOGIN.APPLE:\n    case LOGIN.LINKEDIN:\n    case LOGIN.LINE:\n    case LOGIN.JWT:\n      return caseSensitiveField(sub, isVerifierIdCaseSensitive);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport const handleRedirectParameters = (\n  hash: string,\n  queryParameters: TorusGenericObject\n): { error: string; instanceParameters: TorusGenericObject; hashParameters: TorusGenericObject } => {\n  const hashParameters: TorusGenericObject = hash.split(\"&\").reduce((result, item) => {\n    const [part0, part1] = item.split(\"=\");\n    result[part0] = part1;\n    return result;\n  }, {});\n  log.info(hashParameters, queryParameters);\n  let instanceParameters: TorusGenericObject = {};\n  let error = \"\";\n  if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n    instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n    error = hashParameters.error_description || hashParameters.error || error;\n  } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n    instanceParameters = JSON.parse(atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n    if (queryParameters.error) error = queryParameters.error;\n  }\n  return { error, instanceParameters, hashParameters };\n};\n\nexport function storageAvailable(type: REDIRECT_PARAMS_STORAGE_METHOD_TYPE): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\nexport function getPopupFeatures(): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const w = 1200;\n  const h = 700;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const isFirefox = (): boolean => window?.navigator?.userAgent.toLowerCase().indexOf(\"firefox\") > -1 || false;\n\nexport function constructURL(params: { baseURL: string; query?: Record<string, unknown>; hash?: Record<string, unknown> }): string {\n  const { baseURL, query, hash } = params;\n\n  const url = new URL(baseURL);\n  if (query) {\n    Object.keys(query).forEach((key) => {\n      url.searchParams.append(key, query[key] as string);\n    });\n  }\n  if (hash) {\n    const h = new URL(constructURL({ baseURL, query: hash })).searchParams.toString();\n    url.hash = h;\n  }\n  return url.toString();\n}\n\nexport function are3PCSupported(): boolean {\n  const browserInfo = Bowser.parse(navigator.userAgent);\n  log.info(JSON.stringify(browserInfo), \"current browser info\");\n\n  let thirdPartyCookieSupport = true;\n  // brave\n  if ((navigator as unknown as { brave: boolean })?.brave) {\n    thirdPartyCookieSupport = false;\n  }\n  // All webkit & gecko engine instances use itp (intelligent tracking prevention -\n  // https://webkit.org/tracking-prevention/#intelligent-tracking-prevention-itp)\n  if (browserInfo.engine.name === ENGINE_MAP.WebKit || browserInfo.engine.name === ENGINE_MAP.Gecko) {\n    thirdPartyCookieSupport = false;\n  }\n\n  return thirdPartyCookieSupport;\n}\n\nexport const validateAndConstructUrl = (domain: string): URL => {\n  try {\n    const url = new URL(decodeURIComponent(domain));\n    return url;\n  } catch (error) {\n    throw new Error(`${error?.message || \"\"}, Note: Your jwt domain: (i.e ${domain}) must have http:// or https:// prefix`);\n  }\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"events\");","import { EventEmitter } from \"events\";\n\nimport { getPopupFeatures } from \"./helpers\";\n\nclass PopupHandler extends EventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures();\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { BroadcastChannel } from \"@toruslabs/broadcast-channel\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, randomId } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport { Auth0ClientOptions, ILoginHandler, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nabstract class AbstractLoginHandler implements ILoginHandler {\n  public nonce: string = randomId();\n\n  public finalURL: URL;\n\n  // Not using object constructor because of this issue\n  // https://github.com/microsoft/TypeScript/issues/5326\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {}\n\n  get state(): string {\n    return encodeURIComponent(\n      window.btoa(\n        JSON.stringify({\n          ...(this.customState || {}),\n          instanceId: this.nonce,\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n          redirectToOpener: this.redirectToOpener || false,\n        })\n      )\n    );\n  }\n\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      return new Promise<LoginWindowResponse>((resolve, reject) => {\n        let bc: BroadcastChannel;\n        const handleData = async (ev: { error: string; data: PopupResponse }) => {\n          try {\n            const { error, data } = ev;\n            const {\n              instanceParams,\n              hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n            } = data || {};\n            if (error) {\n              log.error(ev);\n              reject(new Error(`Error: ${error}. Info: ${JSON.stringify(ev.data || {})}`));\n              return;\n            }\n            if (ev.data && instanceParams.verifier === this.verifier) {\n              log.info(ev.data);\n              if (!this.redirectToOpener && bc) await bc.postMessage({ success: true });\n              resolve({\n                accessToken,\n                idToken: idToken || \"\",\n                ...rest,\n                // State has to be last here otherwise it will be overwritten\n                state: instanceParams,\n              });\n            }\n          } catch (error) {\n            log.error(error);\n            reject(error);\n          }\n        };\n\n        if (!this.redirectToOpener) {\n          bc = new BroadcastChannel(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n          bc.addEventListener(\"message\", async (ev) => {\n            await handleData(ev);\n            bc.close();\n            verifierWindow.close();\n          });\n        } else {\n          const postMessageEventHandler = async (postMessageEvent: MessageEvent) => {\n            if (!postMessageEvent.data) return;\n            const ev = postMessageEvent.data;\n            if (ev.channel !== `redirect_channel_${this.nonce}`) return;\n            window.removeEventListener(\"message\", postMessageEventHandler);\n            handleData(ev);\n            verifierWindow.close();\n          };\n          window.addEventListener(\"message\", postMessageEventHandler);\n        }\n        verifierWindow.open();\n        verifierWindow.once(\"close\", () => {\n          if (bc) bc.close();\n          reject(new Error(\"user closed popup\"));\n        });\n      });\n    }\n    return null;\n  }\n\n  abstract getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse>;\n\n  abstract setFinalUrl(): void;\n}\n\nexport default AbstractLoginHandler;\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class DiscordHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identify email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://discord.com/api/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ id: string; username: string; discriminator: string; avatar?: string; email?: string }>(\n      \"https://discord.com/api/users/@me\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { id, avatar, email = \"\", username: name = \"\", discriminator = \"\" } = userInfo;\n    const profileImage =\n      avatar === null\n        ? `https://cdn.discord.com/embed/avatars/${Number(discriminator) % 5}.png`\n        : `https://cdn.discord.com/avatars/${id}/${avatar}.png?size=2048`;\n    return {\n      profileImage,\n      name: `${name}#${discriminator}`,\n      email,\n      verifierId: id,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class FacebookHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"public_profile email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://www.facebook.com/v6.0/dialog/oauth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ name: string; id: string; picture: { data: { url?: string } }; email?: string }>(\n      \"https://graph.facebook.com/me?fields=name,email,picture.type(large)\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      }\n    );\n    const { name = \"\", id, picture, email = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage: picture.data.url || \"\",\n      verifier: this.verifier,\n      verifierId: id,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class GoogleHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly SCOPE: string = \"profile email openid\";\n\n  private readonly PROMPT: string = \"consent select_account\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://accounts.google.com/o/oauth2/v2/auth\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ picture: string; email: string; name: string }>(\"https://www.googleapis.com/userinfo/v2/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { picture: profileImage = \"\", email = \"\", name = \"\" } = userInfo;\n    return {\n      email,\n      name,\n      profileImage,\n      verifier: this.verifier,\n      verifierId: email.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jwt-decode\");","import { get } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { getVerifierId, loginToConnectionMap, padUrlString, validateAndConstructUrl } from \"../utils/helpers\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const finalUrl = validateAndConstructUrl(domain);\n    finalUrl.pathname += finalUrl.pathname.endsWith(\"/\") ? \"authorize\" : \"/authorize\";\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        prompt: this.PROMPT,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        connection: loginToConnectionMap[this.typeOfLogin],\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { LOGIN_TYPE, UX_MODE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { constructURL, getVerifierId, padUrlString } from \"../utils/helpers\";\nimport PopupHandler from \"../utils/PopupHandler\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class MockLoginHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams));\n    delete clonedParams.domain;\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        client_id: this.clientId,\n        nonce: this.nonce,\n      },\n      clonedParams\n    );\n\n    this.finalURL = new URL(constructURL({ baseURL: this.redirect_uri, query: null, hash: finalJwtParams }));\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive, user_info_route = \"userinfo\" } = this.jwtParams;\n    if (accessToken) {\n      try {\n        const domainUrl = new URL(domain);\n        const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}${user_info_route}`, {\n          headers: {\n            Authorization: `Bearer ${accessToken}`,\n          },\n        });\n        const { picture, name, email } = userInfo;\n        return {\n          email,\n          name,\n          profileImage: picture,\n          verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n          verifier: this.verifier,\n          typeOfLogin: this.typeOfLogin,\n        };\n      } catch (error) {\n        // ignore\n        log.warn(error, \"Unable to get userinfo from endpoint\");\n      }\n    }\n    if (idToken) {\n      const decodedToken = jwtDecode<Auth0UserInfo>(idToken);\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n    throw new Error(\"Access/id token not available\");\n  }\n\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse> {\n    const { id_token: idToken, access_token: accessToken } = this.jwtParams;\n    const verifierWindow = new PopupHandler({ url: this.finalURL, features: params.popupFeatures });\n    if (this.uxMode === UX_MODE.REDIRECT) {\n      verifierWindow.redirect(params.locationReplaceOnRedirect);\n    } else {\n      return Promise.resolve({\n        state: {},\n        idToken,\n        accessToken,\n      });\n    }\n    return null;\n  }\n}\n","import { BroadcastChannel } from \"@toruslabs/broadcast-channel\";\nimport { get, post } from \"@toruslabs/http-helpers\";\nimport jwtDecode from \"jwt-decode\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport { broadcastChannelOptions, getVerifierId, padUrlString, validateAndConstructUrl } from \"../utils/helpers\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, Auth0UserInfo, LoginWindowResponse, PopupResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class JwtHandler extends AbstractLoginHandler {\n  private readonly SCOPE: string = \"openid profile email\";\n\n  private readonly RESPONSE_TYPE: string = \"token id_token\";\n\n  private readonly PROMPT: string = \"login\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const { domain } = this.jwtParams;\n    const domainUrl = validateAndConstructUrl(domain);\n\n    domainUrl.pathname = \"/passwordless/start\";\n    this.finalURL = domainUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, accessToken } = params;\n    const { domain, verifierIdField, isVerifierIdCaseSensitive } = this.jwtParams;\n    try {\n      const domainUrl = new URL(domain);\n      const userInfo = await get<Auth0UserInfo>(`${padUrlString(domainUrl)}userinfo`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      });\n      const { picture, name, email } = userInfo;\n      return {\n        email,\n        name,\n        profileImage: picture,\n        verifierId: getVerifierId(userInfo, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    } catch (error) {\n      log.error(error);\n      const decodedToken = jwtDecode(idToken) as Auth0UserInfo;\n      const { name, email, picture } = decodedToken;\n      return {\n        profileImage: picture,\n        name,\n        email,\n        verifierId: getVerifierId(decodedToken, this.typeOfLogin, verifierIdField, isVerifierIdCaseSensitive),\n        verifier: this.verifier,\n        typeOfLogin: this.typeOfLogin,\n      };\n    }\n  }\n\n  handleLoginWindow(): Promise<LoginWindowResponse> {\n    return new Promise<LoginWindowResponse>((resolve, reject) => {\n      if (this.redirectToOpener) {\n        reject(new Error(\"Cannot use redirect to opener for passwordless\"));\n        return;\n      }\n      const handleData = (ev: { error: string; data: PopupResponse }) => {\n        try {\n          const { error, data } = ev;\n          const {\n            instanceParams,\n            hashParams: { access_token: accessToken, id_token: idToken, ...rest },\n          } = data || {};\n          if (error) {\n            log.error(ev.error);\n            reject(new Error(error));\n            return;\n          }\n          if (ev.data && instanceParams.verifier === this.verifier) {\n            log.info(ev.data);\n            resolve({ accessToken, idToken: idToken || \"\", ...rest, state: instanceParams });\n          }\n        } catch (error) {\n          log.error(error);\n          reject(error);\n        }\n      };\n      const bc = new BroadcastChannel(`redirect_channel_${this.nonce}`, broadcastChannelOptions);\n      bc.addEventListener(\"message\", async (ev) => {\n        handleData(ev);\n        bc.close();\n      });\n      try {\n        const { connection = \"email\", login_hint } = this.jwtParams;\n        const finalJwtParams = deepmerge(\n          {\n            client_id: this.clientId,\n            connection,\n            email: connection === \"email\" ? login_hint : undefined,\n            phone_number: connection === \"sms\" ? login_hint : undefined,\n            send: \"link\",\n            authParams: {\n              scope: this.SCOPE,\n              state: this.state,\n              response_type: this.RESPONSE_TYPE,\n              redirect_uri: this.redirect_uri,\n              nonce: this.nonce,\n              prompt: this.PROMPT,\n            },\n          },\n          {\n            authParams: this.jwtParams,\n          }\n        );\n        // using stringify and parse to remove undefined params\n        // This method is only resolved when the user clicks the email link\n        post(this.finalURL.href, JSON.parse(JSON.stringify(finalJwtParams)))\n          .then((response) => {\n            log.info(\"posted\", response);\n            return undefined;\n          })\n          .catch((error) => {\n            log.error(error);\n            reject(error);\n          });\n      } catch (error) {\n        log.error(error);\n        reject(error);\n      }\n    });\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class RedditHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"identity\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(`https://www.reddit.com/api/v1/authorize${window.innerWidth < 600 ? \".compact\" : \"\"}`);\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ icon_img: string; name: string }>(\"https://oauth.reddit.com/api/v1/me\", {\n      headers: {\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n    const { icon_img: profileImage = \"\", name = \"\" } = userInfo;\n    return {\n      email: \"\",\n      name,\n      profileImage: profileImage.split(\"?\").length > 0 ? profileImage.split(\"?\")[0] : profileImage,\n      verifier: this.verifier,\n      verifierId: name.toLowerCase(),\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nexport default class TwitchHandler extends AbstractLoginHandler {\n  private readonly RESPONSE_TYPE: string = \"token\";\n\n  private readonly SCOPE: string = \"user:read:email\";\n\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://id.twitch.tv/oauth2/authorize\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        state: this.state,\n        response_type: this.RESPONSE_TYPE,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n        scope: this.SCOPE,\n        force_verify: true,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { accessToken } = params;\n    const userInfo = await get<{ data: [{ profile_image_url: string; display_name: string; email: string; id: string }] }>(\n      \"https://api.twitch.tv/helix/users\",\n      {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n          \"Client-ID\": this.clientId,\n        },\n      }\n    );\n    const [{ profile_image_url: profileImage = \"\", display_name: name = \"\", email = \"\", id: verifierId }] = userInfo.data || [];\n    return {\n      profileImage,\n      name,\n      email,\n      verifierId,\n      verifier: this.verifier,\n      typeOfLogin: this.typeOfLogin,\n    };\n  }\n}\n","import { get } from \"@toruslabs/http-helpers\";\nimport deepmerge from \"lodash.merge\";\n\nimport { LOGIN_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\nimport log from \"../utils/loglevel\";\nimport AbstractLoginHandler from \"./AbstractLoginHandler\";\nimport { Auth0ClientOptions, LoginWindowResponse, TorusGenericObject, TorusVerifierResponse } from \"./interfaces\";\n\nconst WEBAUTHN_LOOKUP_SERVER = \"https://api.webauthn.openlogin.com\";\n\nexport default class WebAuthnHandler extends AbstractLoginHandler {\n  constructor(\n    readonly clientId: string,\n    readonly verifier: string,\n    readonly redirect_uri: string,\n    readonly typeOfLogin: LOGIN_TYPE,\n    readonly uxMode: UX_MODE_TYPE,\n    readonly redirectToOpener?: boolean,\n    readonly jwtParams?: Auth0ClientOptions,\n    readonly customState?: TorusGenericObject,\n    readonly registerOnly?: boolean\n  ) {\n    super(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    this.setFinalUrl();\n  }\n\n  setFinalUrl(): void {\n    const finalUrl = new URL(\"https://webauthn.openlogin.com\");\n    const clonedParams = JSON.parse(JSON.stringify(this.jwtParams || {}));\n    const finalJwtParams = deepmerge(\n      {\n        register_only: !!this.registerOnly,\n        state: this.state,\n        client_id: this.clientId,\n        redirect_uri: this.redirect_uri,\n      },\n      clonedParams\n    );\n    Object.keys(finalJwtParams).forEach((key) => {\n      if (finalJwtParams[key]) finalUrl.searchParams.append(key, finalJwtParams[key]);\n    });\n    this.finalURL = finalUrl;\n  }\n\n  async getUserInfo(parameters: LoginWindowResponse): Promise<TorusVerifierResponse> {\n    const { idToken, ref, extraParamsPassed, extraParams } = parameters;\n    let verifierId: string;\n    let signature: string;\n    let clientDataJSON: string;\n    let authenticatorData: string;\n    let publicKey: string;\n    let challenge: string;\n    let rpOrigin: string;\n    let credId: string;\n\n    if (extraParamsPassed === \"true\") {\n      log.debug(\"extraParamsPassed is true, using extraParams passed through hashParams\");\n      try {\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n        } = JSON.parse(atob(extraParams)));\n      } catch (error) {\n        log.warn(\"unable to parse extraParams\", error);\n        ({\n          verifier_id: verifierId,\n          signature,\n          clientDataJSON,\n          authenticatorData,\n          publicKey,\n          challenge,\n          rpOrigin,\n          credId,\n        } = await get(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n      }\n    } else {\n      log.debug(\"extraParamsPassed is false, using extraParams passed through bridge server\");\n      ({\n        verifier_id: verifierId,\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n      } = await get(`${WEBAUTHN_LOOKUP_SERVER}/signature/fetch/${idToken}`));\n    }\n\n    if (signature !== idToken) {\n      throw new Error(\"idtoken should be equal to signature\");\n    }\n\n    return {\n      email: \"\",\n      name: \"WebAuthn Login\",\n      profileImage: \"\",\n      verifier: this.verifier,\n      verifierId,\n      typeOfLogin: this.typeOfLogin,\n      ref,\n      registerOnly: this.registerOnly,\n      extraVerifierParams: {\n        signature,\n        clientDataJSON,\n        authenticatorData,\n        publicKey,\n        challenge,\n        rpOrigin,\n        credId,\n      },\n    };\n  }\n}\n","import { LOGIN } from \"../utils/enums\";\nimport DiscordHandler from \"./DiscordHandler\";\nimport FacebookHandler from \"./FacebookHandler\";\nimport GoogleHandler from \"./GoogleHandler\";\nimport { CreateHandlerParams, ILoginHandler } from \"./interfaces\";\nimport JwtHandler from \"./JwtHandler\";\nimport MockLoginHandler from \"./MockLoginHandler\";\nimport PasswordlessHandler from \"./PasswordlessHandler\";\nimport RedditHandler from \"./RedditHandler\";\nimport TwitchHandler from \"./TwitchHandler\";\nimport WebAuthnHandler from \"./WebAuthnHandler\";\n\nconst createHandler = ({\n  clientId,\n  redirect_uri,\n  typeOfLogin,\n  verifier,\n  jwtParams,\n  redirectToOpener,\n  uxMode,\n  customState,\n  registerOnly,\n}: CreateHandlerParams): ILoginHandler => {\n  if (!verifier || !typeOfLogin || !clientId) {\n    throw new Error(\"Invalid params\");\n  }\n  const { domain, login_hint, id_token, access_token } = jwtParams || {};\n  switch (typeOfLogin) {\n    case LOGIN.GOOGLE:\n      return new GoogleHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.FACEBOOK:\n      return new FacebookHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.TWITCH:\n      return new TwitchHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.REDDIT:\n      return new RedditHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.DISCORD:\n      return new DiscordHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.PASSWORDLESS:\n      if (!domain || !login_hint) throw new Error(\"Invalid params\");\n      return new PasswordlessHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.APPLE:\n    case LOGIN.GITHUB:\n    case LOGIN.LINKEDIN:\n    case LOGIN.TWITTER:\n    case LOGIN.WEIBO:\n    case LOGIN.LINE:\n    case LOGIN.EMAIL_PASSWORD:\n    case LOGIN.JWT:\n      if (!domain) throw new Error(\"Invalid params\");\n      if (id_token || access_token) {\n        return new MockLoginHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n      }\n      return new JwtHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState);\n    case LOGIN.WEBAUTHN:\n      return new WebAuthnHandler(clientId, verifier, redirect_uri, typeOfLogin, uxMode, redirectToOpener, jwtParams, customState, registerOnly);\n    default:\n      throw new Error(\"Invalid login type\");\n  }\n};\n\nexport default createHandler;\n","import { Sentry } from \"../sentry\";\nimport { AGGREGATE_VERIFIER_TYPE, LOGIN_TYPE, TORUS_METHOD_TYPE, TORUS_NETWORK_TYPE, UX_MODE_TYPE } from \"../utils/enums\";\n\nexport type TorusGenericObject = {\n  [key: string]: string;\n};\n\nexport type PopupResponse = {\n  hashParams: { access_token: string; id_token?: string };\n  instanceParams: TorusGenericObject;\n};\n\nexport interface Auth0UserInfo {\n  picture: string;\n  email: string;\n  name: string;\n  sub: string;\n  nickname: string;\n}\n\nexport interface ExtraParams {\n  [key: string]: unknown;\n}\n\nexport type WebAuthnExtraParams = {\n  signature?: string;\n  clientDataJSON?: string;\n  authenticatorData?: string;\n  publicKey?: string;\n  challenge?: string;\n  rpOrigin?: string;\n  credId?: string;\n};\nexport interface TorusVerifierResponse {\n  email: string;\n  name: string;\n  profileImage: string;\n  aggregateVerifier?: string;\n  verifier: string;\n  verifierId: string;\n  typeOfLogin: LOGIN_TYPE;\n  ref?: string;\n  registerOnly?: boolean;\n  extraVerifierParams?: WebAuthnExtraParams;\n}\n\nexport interface TorusSubVerifierInfo {\n  verifier: string;\n  idToken: string;\n  extraVerifierParams?: WebAuthnExtraParams;\n}\n\nexport interface LoginWindowResponse {\n  accessToken: string;\n  idToken?: string;\n  ref?: string;\n  extraParams?: string;\n  extraParamsPassed?: string;\n  state: TorusGenericObject;\n}\n\nexport interface ILoginHandler {\n  clientId: string;\n  nonce: string;\n  finalURL: URL;\n  getUserInfo(params: LoginWindowResponse): Promise<TorusVerifierResponse>;\n  handleLoginWindow(params: { locationReplaceOnRedirect?: boolean; popupFeatures?: string }): Promise<LoginWindowResponse>;\n}\n\nexport interface TorusKeyPub {\n  pubKey?: {\n    pub_key_X: string;\n    pub_key_Y: string;\n  };\n}\n\nexport interface TorusKey extends TorusKeyPub {\n  publicAddress: string;\n  privateKey: string;\n  existingPk?: { X: string; Y: string }; // if any\n  metadataNonce: string;\n  typeOfUser: \"v1\" | \"v2\";\n}\n\nexport enum SkipTorusKey {\n  Never,\n  IfNew,\n  Always,\n}\n\nexport interface TorusAggregateVerifierResponse {\n  userInfo: (TorusVerifierResponse & LoginWindowResponse)[];\n}\n\nexport interface TorusSingleVerifierResponse {\n  userInfo: TorusVerifierResponse & LoginWindowResponse;\n}\n\nexport type TorusLoginResponse = TorusSingleVerifierResponse & TorusKey;\nexport type TorusAggregateLoginResponse = TorusAggregateVerifierResponse & TorusKey;\nexport type TorusHybridAggregateLoginResponse = { singleLogin: TorusLoginResponse; aggregateLogins: TorusKey[] };\n\nexport interface CustomAuthArgs {\n  /**\n   * baseUrl , along with redirectPathName is used to construct the uri of page\n   * where user will be redirected after login.\n   *\n   * @remarks\n   * Redirect Uri for OAuth is `baseUrl`+`redirectPathName` which means\n   * that you must specify `baseUrl`+`redirectPathName` as redirect_uri at verifier's\n   * interface.\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if baseUrl is \"http://localhost:3000/serviceworker\" and\n   * redirectPathName is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * Using serviceworker is optional, you can skip it by passing `skipSw` param\n   * in init function\n   *\n   * Use of serviceworker is recommended if you are using popup uxMode or\n   * for browsers where service workers are not supported or if you wish to not use\n   * service workers, create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * In redirect uxMode, you don't have to use serviceworker or redirect.html file.\n   * You can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  baseUrl: string;\n\n  /**\n   * Specify a custom metadata host\n   * @defaultValue https://metadata.tor.us\n   */\n  metadataUrl?: string;\n\n  /**\n   * Torus Network to target options: mainnet | testnet | cyan\n   * @defaultValue mainnet\n   */\n  network?: TORUS_NETWORK_TYPE;\n\n  /**\n   * Network Url to read blockchain data from (eg: infura url)\n   */\n  networkUrl?: string;\n\n  /**\n   * This option is used to specify whether to enable logging\n   *\n   * @defaultValue false\n   */\n  enableLogging?: boolean;\n\n  /**\n   * Use one key features\n   *\n   * @defaultValue false\n   */\n  enableOneKey?: boolean;\n\n  /**\n   * For chrome extensions, the general methods for capturing auth redirects don't work.\n   * So, we redirect to the window which opens the auth window.\n   *\n   * @defaultValue false\n   */\n  redirectToOpener?: boolean;\n\n  /**\n   * This option is used to specify the url path where user will be\n   * redirected after login. Redirect Uri for OAuth is baseUrl/redirectPathName.\n   *\n   *\n   * @defaultValue redirect\n   *\n   * @remarks\n   * At verifier's interface (where you obtain client id), please use baseUrl/redirectPathName\n   * as the redirect_uri\n   *\n   * Torus Direct SDK installs a service worker relative to baseUrl to capture\n   * the auth redirect at `redirectPathName` path.\n   *\n   * For ex: While using serviceworker if `baseUrl` is \"http://localhost:3000/serviceworker\" and\n   * `redirectPathName` is 'redirect' (which is default)\n   * then user will be redirected to http://localhost:3000/serviceworker/redirect page after login\n   * where service worker will capture the results and send it back to original window where login\n   * was initiated.\n   *\n   * For browsers where service workers are not supported or if you wish to not use\n   * service workers,create and serve redirect page (i.e redirect.html file which is\n   * available in serviceworker folder of this package)\n   *\n   * If you are using redirect uxMode, you can get the results directly on your `redirectPathName`\n   * path using `getRedirectResult` function.\n   *\n   * For ex: if baseUrl is \"http://localhost:3000\" and `redirectPathName` is 'auth'\n   * then user will be redirected to http://localhost:3000/auth page after login\n   * where you can get login result by calling `getRedirectResult` on redirected page mount.\n   *\n   * Please refer to examples https://github.com/torusresearch/customauth/tree/master/examples\n   * for more understanding.\n   *\n   */\n  redirectPathName?: string;\n\n  /**\n   * API Key for torus to enable higher access limits\n   *\n   */\n  apiKey?: string;\n  /**\n   * Two uxModes are supported:-\n   * - `'popup'`: In this uxMode, a popup will be shown to user for login.\n   * - `'redirect'`: In this uxMode, user will be redirected to a new window tab for login.\n   *\n   * @defaultValue `'popup'`\n   * @remarks\n   *\n   * Use of `'REDIRECT'` mode is recommended in browsers where popups might get blocked.\n   */\n  uxMode?: UX_MODE_TYPE;\n\n  /**\n   * Whether to replace the url hash/query params from OAuth at the end of the redirect flow\n   *\n   * @defaultValue false\n   */\n  locationReplaceOnRedirect?: boolean;\n\n  /**\n   * Features of popup window. Please check https://developer.mozilla.org/en-US/docs/Web/API/Window/open#window_features\n   * for further documentation.\n   */\n  popupFeatures?: string;\n  /**\n   * Specify a custom storage server url\n   * @defaultValue https://broadcast-server.tor.us\n   */\n  storageServerUrl?: string;\n\n  sentry?: Sentry;\n}\n\nexport interface InitParams {\n  /**\n   * skips the installation / check for service worker\n   * @defaultValue false\n   */\n  skipSw?: boolean;\n\n  /**\n   * skips the init function\n   * @defaultValue false\n   */\n  skipInit?: boolean;\n\n  /**\n   * skips the prefetching of redirect url\n   * @defaultValue false\n   *\n   */\n  skipPrefetch?: boolean;\n}\n\n// REGION: AUTH0 PARAMS\nexport interface BaseLoginOptions {\n  /**\n   * If you need to send custom parameters to the Authorization Server,\n   * make sure to use the original parameter name.\n   */\n  [key: string]: unknown;\n  /**\n   * - `'page'`: displays the UI with a full page view\n   * - `'popup'`: displays the UI with a popup window\n   * - `'touch'`: displays the UI in a way that leverages a touch interface\n   * - `'wap'`: displays the UI with a \"feature phone\" type interface\n   */\n  display?: \"page\" | \"popup\" | \"touch\" | \"wap\" | string;\n  /**\n   * - `'none'`: do not prompt user for login or consent on reauthentication\n   * - `'login'`: prompt user for reauthentication\n   * - `'consent'`: prompt user for consent before processing request\n   * - `'select_account'`: prompt user to select an account\n   */\n  prompt?: \"none\" | \"login\" | \"consent\" | \"select_account\" | string;\n  /**\n   * Maximum allowable elasped time (in seconds) since authentication.\n   * If the last time the user authenticated is greater than this value,\n   * the user must be reauthenticated.\n   */\n  max_age?: string | number;\n  /**\n   * The space-separated list of language tags, ordered by preference.\n   * For example: `'fr-CA fr en'`.\n   */\n  ui_locales?: string;\n  /**\n   * Previously issued ID Token.\n   */\n  id_token_hint?: string;\n  /**\n   * The user's email address or other identifier. When your app knows\n   * which user is trying to authenticate, you can provide this parameter\n   * to pre-fill the email box or select the right session for sign-in.\n   *\n   * This currently only affects the classic Lock experience.\n   */\n  login_hint?: string;\n  acr_values?: string;\n  /**\n   * The default scope to be used on authentication requests.\n   * The defaultScope defined in the Auth0Client is included\n   * along with this scope\n   */\n  scope?: string;\n  /**\n   * The default audience to be used for requesting API access.\n   */\n  audience?: string;\n  /**\n   * The name of the connection configured for your application.\n   * If null, it will redirect to the Auth0 Login Page and show\n   * the Login Widget.\n   */\n  connection?: string;\n}\n\nexport interface Auth0ClientOptions extends BaseLoginOptions {\n  /**\n   * Your Auth0 account domain such as `'example.auth0.com'`,\n   * `'example.eu.auth0.com'` or , `'example.mycompany.com'`\n   * (when using [custom domains](https://auth0.com/docs/custom-domains))\n   */\n  domain: string;\n  /**\n   * The Client ID found on your Application settings page\n   */\n  client_id?: string;\n  /**\n   * The default URL where Auth0 will redirect your browser to with\n   * the authentication result. It must be whitelisted in\n   * the \"Allowed Callback URLs\" field in your Auth0 Application's\n   * settings. If not provided here, it should be provided in the other\n   * methods that provide authentication.\n   */\n  redirect_uri?: string;\n  /**\n   * The value in seconds used to account for clock skew in JWT expirations.\n   * Typically, this value is no more than a minute or two at maximum.\n   * Defaults to 60s.\n   */\n  leeway?: number;\n\n  /**\n   * The field in jwt token which maps to verifier id\n   */\n  verifierIdField?: string;\n\n  /**\n   * Whether the verifier id field is case sensitive\n   * @defaultValue true\n   */\n  isVerifierIdCaseSensitive?: boolean;\n\n  id_token?: string;\n\n  access_token?: string;\n  /**\n   * The route for user info endpoint. This will be padded to domain\n   * @defaultValue userinfo\n   * */\n  user_info_route?: string;\n}\n\nexport interface SubVerifierDetails {\n  typeOfLogin: LOGIN_TYPE;\n  verifier: string;\n  clientId: string;\n  jwtParams?: Auth0ClientOptions;\n  hash?: string;\n  queryParameters?: TorusGenericObject;\n  customState?: TorusGenericObject;\n}\n\nexport interface CreateHandlerParams {\n  typeOfLogin: LOGIN_TYPE;\n  clientId: string;\n  verifier: string;\n  redirect_uri: string;\n  uxMode?: UX_MODE_TYPE;\n  redirectToOpener?: boolean;\n  jwtParams?: Auth0ClientOptions;\n  customState?: TorusGenericObject;\n  registerOnly?: boolean;\n}\n\nexport interface RedirectResultParams {\n  replaceUrl?: boolean;\n  clearLoginDetails?: boolean;\n}\n\nexport type SingleLoginParams = SubVerifierDetails & { registerOnly?: boolean };\n\nexport interface AggregateLoginParams {\n  aggregateVerifierType: AGGREGATE_VERIFIER_TYPE;\n  verifierIdentifier: string;\n  subVerifierDetailsArray: SubVerifierDetails[];\n}\n\nexport interface HybridAggregateLoginParams {\n  singleLogin: SubVerifierDetails;\n  aggregateLoginParams: AggregateLoginParams;\n}\n\nexport type LoginDetails = { method: TORUS_METHOD_TYPE; args: SingleLoginParams | AggregateLoginParams | HybridAggregateLoginParams };\n\nexport interface RedirectResult {\n  method: TORUS_METHOD_TYPE;\n  result?: TorusLoginResponse | TorusAggregateLoginResponse | TorusHybridAggregateLoginResponse | unknown;\n  error?: string;\n  state: Record<string, unknown>;\n  hashParameters?: Record<string, string>;\n  args: SingleLoginParams | AggregateLoginParams | HybridAggregateLoginParams;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/torus.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"web3-utils\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@chaitanyapotti/register-service-worker\");","import { register } from \"@chaitanyapotti/register-service-worker\";\n\nimport log from \"./utils/loglevel\";\n\nexport const registerServiceWorker = (baseUrl: string) =>\n  new Promise((resolve, reject) => {\n    const swUrl = `${baseUrl}sw.js`;\n\n    if (\"serviceWorker\" in window.navigator) {\n      // if swIntegrity is not calculated\n      register(swUrl, {\n        ready() {\n          log.info(\"App is being served from cache by a service worker.\\n For more details, visit https://goo.gl/AFskqB\");\n          resolve(undefined);\n        },\n        registered() {\n          log.info(\"Service worker has been registered.\");\n          resolve(undefined);\n        },\n        cached() {\n          log.info(\"Content has been cached for offline use.\");\n          resolve(undefined);\n        },\n        updatefound() {\n          log.info(\"New content is downloading.\");\n        },\n        updated() {\n          log.info(\"New content is available; please refresh.\");\n        },\n        offline() {\n          log.info(\"No internet connection found. App is running in offline mode.\");\n          reject(new Error(\"App is offline\"));\n        },\n        error(error) {\n          log.error(\"Error during service worker registration:\", error);\n          reject(error);\n        },\n      });\n    } else {\n      reject(new Error(\"Service workers are not supported\"));\n    }\n  });\n","import type { Transaction, TransactionContext } from \"@sentry/types\";\n\nimport { SENTRY_TXNS } from \"./utils/enums\";\n\nexport interface Sentry {\n  startTransaction(_: TransactionContext): Transaction;\n}\nexport default class SentryHandler {\n  sentry: Sentry | null = null;\n\n  chainUrl = \"\";\n\n  constructor(sentry?: Sentry, chainUrl?: string) {\n    this.sentry = sentry;\n    this.chainUrl = chainUrl;\n  }\n\n  startTransaction(context: TransactionContext): Transaction | void {\n    if (this.sentry) {\n      if (context.name === SENTRY_TXNS.FETCH_NODE_DETAILS && this.chainUrl) {\n        context.name += this.chainUrl;\n      }\n      return this.sentry.startTransaction(context);\n    }\n  }\n\n  finishTransaction(tx: void | Transaction): void {\n    if (tx) {\n      tx.finish();\n    }\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/metadata-helpers\");","import { getPublic, sign } from \"@toruslabs/eccrypto\";\nimport { get, post } from \"@toruslabs/http-helpers\";\nimport { decryptData, encryptData, keccak256 } from \"@toruslabs/metadata-helpers\";\n\nimport { LoginDetails } from \"../handlers/interfaces\";\nimport { REDIRECT_PARAMS_STORAGE_METHOD, REDIRECT_PARAMS_STORAGE_METHOD_TYPE } from \"./enums\";\nimport { are3PCSupported, storageAvailable } from \"./helpers\";\n\nclass StorageHelper {\n  private currentStorageMethod: REDIRECT_PARAMS_STORAGE_METHOD_TYPE = REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE;\n\n  private isInitialized = false;\n\n  private storageServerUrl = \"https://broadcast-server.tor.us\";\n\n  constructor(serverUrl: string) {\n    this.storageServerUrl = serverUrl;\n  }\n\n  init() {\n    const support = are3PCSupported();\n    const localStorageAvailable = storageAvailable(REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE);\n    if (support && localStorageAvailable) {\n      // use local storage as default for storing stuff\n      this.currentStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE;\n    } else {\n      // use server store as default for storing stuff\n      this.currentStorageMethod = REDIRECT_PARAMS_STORAGE_METHOD.SERVER;\n    }\n    this.isInitialized = true;\n  }\n\n  async storeLoginDetails(params: LoginDetails, scope: string): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.SERVER) {\n      const privKey = keccak256(scope);\n      const privKeyHex = privKey.toString(\"hex\");\n      const publicKeyHex = getPublic(privKey).toString(\"hex\");\n      const encData = await encryptData(privKeyHex, params);\n      const signature = (await sign(privKey, keccak256(encData))).toString(\"hex\");\n      await post(`${this.storageServerUrl}/store/set`, { key: publicKeyHex, data: encData, signature });\n    } else {\n      window.localStorage.setItem(`torus_login_${scope}`, JSON.stringify(params));\n    }\n  }\n\n  async retrieveLoginDetails(scope: string): Promise<LoginDetails> {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.SERVER) {\n      const privKey = keccak256(scope);\n      const privKeyHex = privKey.toString(\"hex\");\n      const publicKeyHex = getPublic(privKey).toString(\"hex\");\n      const encData: { message: string; success: boolean } = await get(`${this.storageServerUrl}/store/get?key=${publicKeyHex}`);\n      const loginDetails = await decryptData<LoginDetails>(privKeyHex, encData.message);\n      return loginDetails;\n    }\n    const loginDetails = window.localStorage.getItem(`torus_login_${scope}`);\n    return JSON.parse(loginDetails || \"{}\") as LoginDetails;\n  }\n\n  clearLoginDetailsStorage(scope: string): void {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE) {\n      window.localStorage.removeItem(`torus_login_${scope}`);\n    }\n    // No need to clear server details cause they auto expire and scope is never re-used for different login attempts\n  }\n\n  clearOrphanedLoginDetails(): void {\n    if (!this.isInitialized) throw new Error(\"StorageHelper is not initialized\");\n    if (this.currentStorageMethod === REDIRECT_PARAMS_STORAGE_METHOD.LOCAL_STORAGE) {\n      const allStorageKeys = Object.keys(window.localStorage);\n      allStorageKeys.forEach((key) => {\n        if (key.startsWith(\"torus_login_\")) {\n          window.localStorage.removeItem(key);\n        }\n      });\n    }\n    // No need to clear server details cause they auto expire and scope is never re-used for different login attempts\n  }\n}\n\nexport default StorageHelper;\n","import NodeDetailManager from \"@toruslabs/fetch-node-details\";\nimport Torus, { keyLookup } from \"@toruslabs/torus.js\";\nimport { keccak256 } from \"web3-utils\";\n\nimport createHandler from \"./handlers/HandlerFactory\";\nimport {\n  AggregateLoginParams,\n  CustomAuthArgs,\n  ExtraParams,\n  HybridAggregateLoginParams,\n  ILoginHandler,\n  InitParams,\n  LoginWindowResponse,\n  RedirectResult,\n  RedirectResultParams,\n  SingleLoginParams,\n  SkipTorusKey,\n  SubVerifierDetails,\n  TorusAggregateLoginResponse,\n  TorusHybridAggregateLoginResponse,\n  TorusKey,\n  TorusLoginResponse,\n  TorusSubVerifierInfo,\n  TorusVerifierResponse,\n} from \"./handlers/interfaces\";\nimport { registerServiceWorker } from \"./registerServiceWorker\";\nimport SentryHandler from \"./sentry\";\nimport {\n  AGGREGATE_VERIFIER,\n  CONTRACT_MAP,\n  LOGIN,\n  NETWORK_MAP,\n  SENTRY_TXNS,\n  SIGNER_MAP,\n  TORUS_METHOD,\n  TORUS_NETWORK,\n  UX_MODE,\n  UX_MODE_TYPE,\n} from \"./utils/enums\";\nimport { handleRedirectParameters, isFirefox, padUrlString } from \"./utils/helpers\";\nimport log from \"./utils/loglevel\";\nimport StorageHelper from \"./utils/StorageHelper\";\n\nclass CustomAuth {\n  isInitialized: boolean;\n\n  config: {\n    baseUrl: string;\n    redirectToOpener: boolean;\n    redirect_uri: string;\n    uxMode: UX_MODE_TYPE;\n    locationReplaceOnRedirect: boolean;\n    popupFeatures: string;\n  };\n\n  torus: Torus;\n\n  nodeDetailManager: NodeDetailManager;\n\n  storageHelper: StorageHelper;\n\n  sentryHandler: SentryHandler;\n\n  constructor({\n    baseUrl,\n    network = TORUS_NETWORK.MAINNET,\n    enableLogging = false,\n    enableOneKey = false,\n    redirectToOpener = false,\n    redirectPathName = \"redirect\",\n    apiKey = \"torus-default\",\n    uxMode = UX_MODE.POPUP,\n    locationReplaceOnRedirect = false,\n    popupFeatures,\n    metadataUrl = \"https://metadata.tor.us\",\n    storageServerUrl = \"https://broadcast-server.tor.us\",\n    networkUrl,\n    sentry,\n  }: CustomAuthArgs) {\n    this.isInitialized = false;\n    const baseUri = new URL(baseUrl);\n    this.config = {\n      baseUrl: padUrlString(baseUri),\n      get redirect_uri() {\n        return `${this.baseUrl}${redirectPathName}`;\n      },\n      redirectToOpener,\n      uxMode,\n      locationReplaceOnRedirect,\n      popupFeatures,\n    };\n    const torus = new Torus({\n      enableOneKey,\n      metadataHost: metadataUrl,\n      allowHost: `${SIGNER_MAP[network]}/api/allow`,\n      signerHost: `${SIGNER_MAP[network]}/api/sign`,\n      network,\n    });\n    Torus.setAPIKey(apiKey);\n    this.torus = torus;\n    const ethNetwork = NETWORK_MAP[network];\n    this.nodeDetailManager = new NodeDetailManager({ network: networkUrl || ethNetwork, proxyAddress: CONTRACT_MAP[network] });\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n    this.storageHelper = new StorageHelper(storageServerUrl);\n    this.sentryHandler = new SentryHandler(sentry, networkUrl);\n  }\n\n  async init({ skipSw = false, skipInit = false, skipPrefetch = false }: InitParams = {}): Promise<void> {\n    this.storageHelper.init();\n    if (skipInit) {\n      this.isInitialized = true;\n      return;\n    }\n    if (!skipSw) {\n      const fetchSwResponse = await fetch(`${this.config.baseUrl}sw.js`, { cache: \"reload\" });\n      if (fetchSwResponse.ok) {\n        try {\n          await registerServiceWorker(this.config.baseUrl);\n          this.isInitialized = true;\n          return;\n        } catch (error) {\n          log.warn(error);\n        }\n      } else {\n        throw new Error(\"Service worker is not being served. Please serve it\");\n      }\n    }\n    if (!skipPrefetch) {\n      // Skip the redirect check for firefox\n      if (isFirefox()) {\n        this.isInitialized = true;\n        return;\n      }\n      await this.handlePrefetchRedirectUri();\n      return;\n    }\n    this.isInitialized = true;\n  }\n\n  async triggerLogin(args: SingleLoginParams & { skipTorusKey?: SkipTorusKey; checkIfNewKey?: boolean }): Promise<TorusLoginResponse> {\n    const {\n      verifier,\n      typeOfLogin,\n      clientId,\n      jwtParams,\n      hash,\n      queryParameters,\n      customState,\n      registerOnly,\n      skipTorusKey = SkipTorusKey.Never,\n      checkIfNewKey = false,\n    } = args;\n    log.info(\"Verifier: \", verifier);\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (registerOnly && typeOfLogin !== LOGIN.WEBAUTHN) throw new Error(\"registerOnly flag can only be passed for webauthn\");\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n      registerOnly,\n    });\n    let loginParams: LoginWindowResponse;\n    if (hash && queryParameters) {\n      const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n      if (error) throw new Error(error);\n      const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n      // State has to be last here otherwise it will be overwritten\n      loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n    } else {\n      this.storageHelper.clearOrphanedLoginDetails();\n      await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_LOGIN, args }, loginHandler.nonce);\n      loginParams = await loginHandler.handleLoginWindow({\n        locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n        popupFeatures: this.config.popupFeatures,\n      });\n      if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    }\n\n    const userInfo = await loginHandler.getUserInfo(loginParams);\n    if (registerOnly) {\n      const nodeTx = this.sentryHandler.startTransaction({\n        name: SENTRY_TXNS.FETCH_NODE_DETAILS,\n      });\n      const { torusNodeEndpoints, torusNodePub } = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId: userInfo.verifierId });\n      this.sentryHandler.finishTransaction(nodeTx);\n      const lookupTx = this.sentryHandler.startTransaction({\n        name: SENTRY_TXNS.PUB_ADDRESS_LOOKUP,\n      });\n      const torusPubKey = await this.torus.getPublicAddress(torusNodeEndpoints, torusNodePub, { verifier, verifierId: userInfo.verifierId }, true);\n      this.sentryHandler.finishTransaction(lookupTx);\n      const res = {\n        userInfo: {\n          ...userInfo,\n          ...loginParams,\n        },\n      };\n      if (typeof torusPubKey === \"string\") {\n        throw new Error(\"should have returned extended pub key\");\n      }\n      const torusKey: TorusKey = {\n        typeOfUser: torusPubKey.typeOfUser,\n        pubKey: {\n          pub_key_X: torusPubKey.X,\n          pub_key_Y: torusPubKey.Y,\n        },\n        publicAddress: torusPubKey.address,\n        privateKey: null,\n        metadataNonce: null,\n      };\n      return { ...res, ...torusKey };\n    }\n    let skip = true;\n    let existingPk: { X: string; Y: string };\n    if (checkIfNewKey || skipTorusKey === SkipTorusKey.IfNew) {\n      const { torusNodeEndpoints } = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId: userInfo.verifierId });\n      const lookupData = await keyLookup(torusNodeEndpoints, verifier, userInfo.verifierId);\n      existingPk = lookupData?.keyResult?.keys?.length\n        ? { X: lookupData?.keyResult?.keys[0].pub_key_X, Y: lookupData?.keyResult?.keys[0].pub_key_Y }\n        : undefined;\n    }\n    switch (skipTorusKey) {\n      case SkipTorusKey.IfNew:\n        skip = !existingPk;\n        break;\n      case SkipTorusKey.Always:\n        skip = true;\n        break;\n      case SkipTorusKey.Never:\n        skip = false;\n        break;\n      default:\n        throw new Error(\"Invalid SkipTorusKey\");\n    }\n    const torusKey = skip\n      ? (undefined as TorusKey)\n      : await this.getTorusKey(\n          verifier,\n          userInfo.verifierId,\n          { verifier_id: userInfo.verifierId },\n          loginParams.idToken || loginParams.accessToken,\n          userInfo.extraVerifierParams\n        );\n    return {\n      ...torusKey,\n      existingPk,\n      userInfo: {\n        ...userInfo,\n        ...loginParams,\n      },\n    };\n  }\n\n  async triggerAggregateLogin(\n    args: AggregateLoginParams & { skipTorusKey?: SkipTorusKey; checkIfNewKey?: boolean }\n  ): Promise<TorusAggregateLoginResponse> {\n    // This method shall break if any of the promises fail. This behaviour is intended\n    const { aggregateVerifierType, verifierIdentifier, subVerifierDetailsArray, skipTorusKey = SkipTorusKey.Never, checkIfNewKey = false } = args;\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (!aggregateVerifierType || !verifierIdentifier || !Array.isArray(subVerifierDetailsArray)) {\n      throw new Error(\"Invalid params\");\n    }\n    if (aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID && subVerifierDetailsArray.length !== 1) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const userInfoPromises: Promise<TorusVerifierResponse>[] = [];\n    const loginParamsArray: LoginWindowResponse[] = [];\n    for (const subVerifierDetail of subVerifierDetailsArray) {\n      const { clientId, typeOfLogin, verifier, jwtParams, hash, queryParameters, customState } = subVerifierDetail;\n      const loginHandler: ILoginHandler = createHandler({\n        typeOfLogin,\n        clientId,\n        verifier,\n        redirect_uri: this.config.redirect_uri,\n        redirectToOpener: this.config.redirectToOpener,\n        jwtParams,\n        uxMode: this.config.uxMode,\n        customState,\n      });\n      // We let the user login to each verifier in a loop. Don't wait for key derivation here.!\n      let loginParams: LoginWindowResponse;\n      if (hash && queryParameters) {\n        const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n        if (error) throw new Error(error);\n        const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n        // State has to be last here otherwise it will be overwritten\n        loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n      } else {\n        this.storageHelper.clearOrphanedLoginDetails();\n        await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN, args }, loginHandler.nonce);\n        loginParams = await loginHandler.handleLoginWindow({\n          locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n          popupFeatures: this.config.popupFeatures,\n        });\n        if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n      }\n      // Fail the method even if one promise fails\n\n      userInfoPromises.push(loginHandler.getUserInfo(loginParams));\n      loginParamsArray.push(loginParams);\n    }\n    const _userInfoArray = await Promise.all(userInfoPromises);\n    const userInfoArray = _userInfoArray.map((userInfo) => ({ ...userInfo, aggregateVerifier: verifierIdentifier }));\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const loginParams = loginParamsArray[index];\n      const { idToken, accessToken } = loginParams;\n      const userInfo = userInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const userInfoData = userInfoArray.map((x, index) => ({ ...x, ...loginParamsArray[index] }));\n    let skip = true;\n    let existingPk: { X: string; Y: string };\n    if (checkIfNewKey || skipTorusKey === SkipTorusKey.IfNew) {\n      const { torusNodeEndpoints } = await this.nodeDetailManager.getNodeDetails({\n        verifier: args.verifierIdentifier,\n        verifierId: userInfoData[0].verifierId,\n      });\n      const lookupData = await keyLookup(torusNodeEndpoints, args.verifierIdentifier, userInfoData[0].verifierId);\n      existingPk = lookupData?.keyResult?.keys?.length\n        ? { X: lookupData?.keyResult?.keys[0].pub_key_X, Y: lookupData?.keyResult?.keys[0].pub_key_Y }\n        : undefined;\n    }\n    switch (skipTorusKey) {\n      case SkipTorusKey.IfNew:\n        skip = !existingPk;\n        break;\n      case SkipTorusKey.Always:\n        skip = true;\n        break;\n      case SkipTorusKey.Never:\n        skip = false;\n        break;\n      default:\n        throw new Error(\"Invalid SkipTorusKey\");\n    }\n    const torusKey = skip\n      ? (undefined as TorusKey)\n      : await this.getTorusKey(verifierIdentifier, aggregateVerifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n    return {\n      ...torusKey,\n      existingPk,\n      userInfo: userInfoArray.map((x, index) => ({ ...x, ...loginParamsArray[index] })),\n    };\n  }\n\n  async triggerHybridAggregateLogin(args: HybridAggregateLoginParams): Promise<TorusHybridAggregateLoginResponse> {\n    const { singleLogin, aggregateLoginParams } = args;\n    // This method shall break if any of the promises fail. This behaviour is intended\n    if (!this.isInitialized) {\n      throw new Error(\"Not initialized yet\");\n    }\n    if (\n      !aggregateLoginParams.aggregateVerifierType ||\n      !aggregateLoginParams.verifierIdentifier ||\n      !Array.isArray(aggregateLoginParams.subVerifierDetailsArray)\n    ) {\n      throw new Error(\"Invalid params\");\n    }\n    if (\n      aggregateLoginParams.aggregateVerifierType === AGGREGATE_VERIFIER.SINGLE_VERIFIER_ID &&\n      aggregateLoginParams.subVerifierDetailsArray.length !== 1\n    ) {\n      throw new Error(\"Single id verifier can only have one sub verifier\");\n    }\n    const { typeOfLogin, clientId, verifier, jwtParams, hash, queryParameters, customState } = singleLogin;\n    const loginHandler: ILoginHandler = createHandler({\n      typeOfLogin,\n      clientId,\n      verifier,\n      redirect_uri: this.config.redirect_uri,\n      redirectToOpener: this.config.redirectToOpener,\n      jwtParams,\n      uxMode: this.config.uxMode,\n      customState,\n    });\n    let loginParams: LoginWindowResponse;\n    if (hash && queryParameters) {\n      const { error, hashParameters, instanceParameters } = handleRedirectParameters(hash, queryParameters);\n      if (error) throw new Error(error);\n      const { access_token: accessToken, id_token: idToken, ...rest } = hashParameters;\n      // State has to be last here otherwise it will be overwritten\n      loginParams = { accessToken, idToken, ...rest, state: instanceParameters };\n    } else {\n      this.storageHelper.clearOrphanedLoginDetails();\n      await this.storageHelper.storeLoginDetails({ method: TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN, args }, loginHandler.nonce);\n      loginParams = await loginHandler.handleLoginWindow({\n        locationReplaceOnRedirect: this.config.locationReplaceOnRedirect,\n        popupFeatures: this.config.popupFeatures,\n      });\n      if (this.config.uxMode === UX_MODE.REDIRECT) return null;\n    }\n\n    const userInfo = await loginHandler.getUserInfo(loginParams);\n    const torusKey1Promise = this.getTorusKey(\n      verifier,\n      userInfo.verifierId,\n      { verifier_id: userInfo.verifierId },\n      loginParams.idToken || loginParams.accessToken,\n      userInfo.extraVerifierParams\n    );\n\n    const { verifierIdentifier, subVerifierDetailsArray } = aggregateLoginParams;\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let aggregateVerifierId = \"\";\n    for (let index = 0; index < subVerifierDetailsArray.length; index += 1) {\n      const sub = subVerifierDetailsArray[index];\n      const { idToken, accessToken } = loginParams;\n      aggregateVerifierParams.verify_params.push({ verifier_id: userInfo.verifierId, idtoken: idToken || accessToken });\n      aggregateVerifierParams.sub_verifier_ids.push(sub.verifier);\n      aggregateIdTokenSeeds.push(idToken || accessToken);\n      aggregateVerifierId = userInfo.verifierId; // using last because idk\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = aggregateVerifierId;\n    const torusKey2Promise = this.getTorusKey(\n      verifierIdentifier,\n      aggregateVerifierId,\n      aggregateVerifierParams,\n      aggregateIdToken,\n      userInfo.extraVerifierParams\n    );\n    const [torusKey1, torusKey2] = await Promise.all([torusKey1Promise, torusKey2Promise]);\n    return {\n      singleLogin: {\n        userInfo: { ...userInfo, ...loginParams },\n        ...torusKey1,\n      },\n      aggregateLogins: [torusKey2],\n    };\n  }\n\n  async getTorusKey(\n    verifier: string,\n    verifierId: string,\n    verifierParams: { verifier_id: string },\n    idToken: string,\n    additionalParams?: ExtraParams\n  ): Promise<TorusKey> {\n    const nodeTx = this.sentryHandler.startTransaction({\n      name: SENTRY_TXNS.FETCH_NODE_DETAILS,\n    });\n    const { torusNodeEndpoints, torusNodePub, torusIndexes } = await this.nodeDetailManager.getNodeDetails({ verifier, verifierId });\n    this.sentryHandler.finishTransaction(nodeTx);\n    log.debug(\"torus-direct/getTorusKey\", { torusNodeEndpoints, torusNodePub, torusIndexes });\n\n    const pubLookupTx = this.sentryHandler.startTransaction({\n      name: SENTRY_TXNS.PUB_ADDRESS_LOOKUP,\n    });\n    const address = await this.torus.getPublicAddress(torusNodeEndpoints, torusNodePub, { verifier, verifierId }, true);\n    this.sentryHandler.finishTransaction(pubLookupTx);\n    if (typeof address === \"string\") throw new Error(\"must use extended pub key\");\n    log.debug(\"torus-direct/getTorusKey\", { getPublicAddress: address });\n\n    const sharesTx = this.sentryHandler.startTransaction({\n      name: SENTRY_TXNS.FETCH_SHARES,\n    });\n    const shares = await this.torus.retrieveShares(torusNodeEndpoints, torusIndexes, verifier, verifierParams, idToken, additionalParams);\n    this.sentryHandler.finishTransaction(sharesTx);\n    if (shares.ethAddress.toLowerCase() !== address.address.toLowerCase()) {\n      throw new Error(\"data ethAddress does not match response address\");\n    }\n    log.debug(\"torus-direct/getTorusKey\", { retrieveShares: shares });\n\n    return {\n      publicAddress: shares.ethAddress.toString(),\n      privateKey: shares.privKey.toString(),\n      metadataNonce: shares.metadataNonce.toString(\"hex\"),\n      typeOfUser: address.typeOfUser,\n      pubKey: {\n        pub_key_X: address.X,\n        pub_key_Y: address.Y,\n      },\n    };\n  }\n\n  async getAggregateTorusKey(\n    verifier: string,\n    verifierId: string, // unique identifier for user e.g. sub on jwt\n    subVerifierInfoArray: TorusSubVerifierInfo[]\n  ): Promise<TorusKey> {\n    const aggregateVerifierParams = { verify_params: [], sub_verifier_ids: [], verifier_id: \"\" };\n    const aggregateIdTokenSeeds = [];\n    let extraVerifierParams = {};\n    for (let index = 0; index < subVerifierInfoArray.length; index += 1) {\n      const userInfo = subVerifierInfoArray[index];\n      aggregateVerifierParams.verify_params.push({ verifier_id: verifierId, idtoken: userInfo.idToken });\n      aggregateVerifierParams.sub_verifier_ids.push(userInfo.verifier);\n      aggregateIdTokenSeeds.push(userInfo.idToken);\n      extraVerifierParams = userInfo.extraVerifierParams;\n    }\n    aggregateIdTokenSeeds.sort();\n    const aggregateIdToken = keccak256(aggregateIdTokenSeeds.join(String.fromCharCode(29))).slice(2);\n    aggregateVerifierParams.verifier_id = verifierId;\n    return this.getTorusKey(verifier, verifierId, aggregateVerifierParams, aggregateIdToken, extraVerifierParams);\n  }\n\n  getPostboxKeyFrom1OutOf1(privKey: string, nonce: string): string {\n    return this.torus.getPostboxKeyFrom1OutOf1(privKey, nonce);\n  }\n\n  async getRedirectResult({ replaceUrl = true, clearLoginDetails = true }: RedirectResultParams = {}): Promise<RedirectResult> {\n    await this.init({ skipInit: true });\n    const url = new URL(window.location.href);\n    const hash = url.hash.substring(1);\n    const queryParams = {};\n    url.searchParams.forEach((value, key) => {\n      queryParams[key] = value;\n    });\n\n    if (replaceUrl) {\n      const cleanUrl = window.location.origin + window.location.pathname;\n      window.history.replaceState(null, \"\", cleanUrl);\n    }\n\n    if (!hash && Object.keys(queryParams).length === 0) {\n      throw new Error(\"Unable to fetch result from OAuth login\");\n    }\n\n    const { error, instanceParameters, hashParameters } = handleRedirectParameters(hash, queryParams);\n\n    const { instanceId } = instanceParameters;\n\n    log.info(instanceId, \"instanceId\");\n\n    const { args, method, ...rest } = await this.storageHelper.retrieveLoginDetails(instanceId);\n    log.info(args, method);\n\n    if (clearLoginDetails) {\n      this.storageHelper.clearLoginDetailsStorage(instanceId);\n    }\n\n    if (error) {\n      return { error, state: instanceParameters || {}, method, result: {}, hashParameters, args };\n    }\n\n    let result: unknown;\n\n    try {\n      if (method === TORUS_METHOD.TRIGGER_LOGIN) {\n        const methodArgs = args as SubVerifierDetails & { registerOnly?: boolean };\n        methodArgs.hash = hash;\n        methodArgs.queryParameters = queryParams;\n        result = await this.triggerLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_LOGIN) {\n        const methodArgs = args as AggregateLoginParams;\n        methodArgs.subVerifierDetailsArray.forEach((x) => {\n          x.hash = hash;\n          x.queryParameters = queryParams;\n        });\n        result = await this.triggerAggregateLogin(methodArgs);\n      } else if (method === TORUS_METHOD.TRIGGER_AGGREGATE_HYBRID_LOGIN) {\n        const methodArgs = args as HybridAggregateLoginParams;\n        methodArgs.singleLogin.hash = hash;\n        methodArgs.singleLogin.queryParameters = queryParams;\n        result = await this.triggerHybridAggregateLogin(methodArgs);\n      }\n    } catch (err) {\n      log.error(err);\n      return {\n        error: `Could not get result from torus nodes \\n ${err?.message || \"\"}`,\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n    }\n\n    if (!result)\n      return {\n        error: \"Unsupported method type\",\n        state: instanceParameters || {},\n        method,\n        result: {},\n        hashParameters,\n        args,\n        ...rest,\n      };\n\n    return { method, result, state: instanceParameters || {}, hashParameters, args, ...rest };\n  }\n\n  private async handlePrefetchRedirectUri(): Promise<void> {\n    if (!document) return Promise.resolve();\n    return new Promise((resolve, reject) => {\n      const redirectHtml = document.createElement(\"link\");\n      redirectHtml.href = this.config.redirect_uri;\n      if (window.location.origin !== new URL(this.config.redirect_uri).origin) redirectHtml.crossOrigin = \"anonymous\";\n      redirectHtml.type = \"text/html\";\n      redirectHtml.rel = \"prefetch\";\n      const resolveFn = () => {\n        this.isInitialized = true;\n        resolve();\n      };\n      try {\n        if (redirectHtml.relList && redirectHtml.relList.supports) {\n          if (redirectHtml.relList.supports(\"prefetch\")) {\n            redirectHtml.onload = resolveFn;\n            redirectHtml.onerror = () => {\n              reject(new Error(`Please serve redirect.html present in serviceworker folder of this package on ${this.config.redirect_uri}`));\n            };\n            document.head.appendChild(redirectHtml);\n          } else {\n            // Link prefetch is not supported. pass through\n            resolveFn();\n          }\n        } else {\n          // Link prefetch is not detectable. pass through\n          resolveFn();\n        }\n      } catch (err) {\n        resolveFn();\n      }\n    });\n  }\n}\n\nexport default CustomAuth;\n","export { default as createHandler } from \"./handlers/HandlerFactory\";\nexport * from \"./handlers/interfaces\";\nexport { default } from \"./login\";\nexport * from \"./utils/enums\";\nexport * from \"./utils/helpers\";\n"],"names":["NodeDetailManager","ETHEREUM_NETWORK","TORUS_NETWORK","TESTNET","MAINNET","CYAN","LOGIN","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","GITHUB","LINKEDIN","TWITTER","WEIBO","LINE","EMAIL_PASSWORD","PASSWORDLESS","JWT","WEBAUTHN","AGGREGATE_VERIFIER","SINGLE_VERIFIER_ID","UX_MODE","POPUP","REDIRECT","REDIRECT_PARAMS_STORAGE_METHOD","LOCAL_STORAGE","SESSION_STORAGE","SERVER","TORUS_METHOD","TRIGGER_LOGIN","TRIGGER_AGGREGATE_LOGIN","TRIGGER_AGGREGATE_HYBRID_LOGIN","CONTRACT_MAP","PROXY_ADDRESS_MAINNET","PROXY_ADDRESS_ROPSTEN","PROXY_ADDRESS_POLYGON","NETWORK_MAP","ROPSTEN","POLYGON","SIGNER_MAP","SENTRY_TXNS","FETCH_NODE_DETAILS","PUB_ADDRESS_LOOKUP","FETCH_SHARES","loglevel","getLogger","Bowser","ENGINE_MAP","log","eventToPromise","emitter","Promise","resolve","reject","handler","ev","error","data","removeEventListener","Error","addEventListener","loginToConnectionMap","padUrlString","url","href","endsWith","randomId","Math","random","toString","slice","broadcastChannelOptions","webWorkerSupport","caseSensitiveField","field","isCaseSensitive","toLowerCase","getVerifierId","userInfo","typeOfLogin","verifierIdField","isVerifierIdCaseSensitive","name","sub","handleRedirectParameters","hash","queryParameters","hashParameters","split","reduce","result","item","part0","part1","info","instanceParameters","Object","keys","length","state","JSON","parse","atob","decodeURIComponent","error_description","storageAvailable","type","storage","window","x","setItem","removeItem","e","code","getPopupFeatures","dualScreenLeft","screenLeft","undefined","screenX","dualScreenTop","screenTop","screenY","w","h","width","innerWidth","document","documentElement","clientWidth","screen","height","innerHeight","clientHeight","systemZoom","left","abs","top","features","isFirefox","navigator","userAgent","indexOf","constructURL","params","baseURL","query","URL","forEach","key","searchParams","append","are3PCSupported","browserInfo","stringify","thirdPartyCookieSupport","brave","engine","WebKit","Gecko","validateAndConstructUrl","domain","message","EventEmitter","PopupHandler","constructor","target","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","emit","open","focus","close","redirect","locationReplaceOnRedirect","location","replace","BroadcastChannel","AbstractLoginHandler","clientId","verifier","redirect_uri","uxMode","redirectToOpener","jwtParams","customState","encodeURIComponent","btoa","instanceId","nonce","handleLoginWindow","verifierWindow","finalURL","popupFeatures","bc","handleData","instanceParams","hashParams","access_token","accessToken","id_token","idToken","rest","postMessage","success","postMessageEventHandler","postMessageEvent","channel","once","get","deepmerge","DiscordHandler","setFinalUrl","finalUrl","clonedParams","finalJwtParams","response_type","RESPONSE_TYPE","client_id","scope","SCOPE","getUserInfo","headers","Authorization","id","avatar","email","username","discriminator","profileImage","verifierId","FacebookHandler","picture","GoogleHandler","prompt","PROMPT","jwtDecode","JwtHandler","pathname","connection","user_info_route","domainUrl","warn","decodedToken","MockLoginHandler","post","login_hint","phone_number","send","authParams","then","response","catch","RedditHandler","icon_img","TwitchHandler","force_verify","profile_image_url","display_name","WEBAUTHN_LOOKUP_SERVER","WebAuthnHandler","registerOnly","register_only","parameters","ref","extraParamsPassed","extraParams","signature","clientDataJSON","authenticatorData","publicKey","challenge","rpOrigin","credId","debug","verifier_id","extraVerifierParams","PasswordlessHandler","createHandler","SkipTorusKey","register","registerServiceWorker","baseUrl","swUrl","ready","registered","cached","updatefound","updated","offline","SentryHandler","sentry","chainUrl","startTransaction","context","finishTransaction","tx","finish","getPublic","sign","decryptData","encryptData","keccak256","StorageHelper","serverUrl","storageServerUrl","init","support","localStorageAvailable","currentStorageMethod","isInitialized","storeLoginDetails","privKey","privKeyHex","publicKeyHex","encData","localStorage","retrieveLoginDetails","loginDetails","getItem","clearLoginDetailsStorage","clearOrphanedLoginDetails","allStorageKeys","startsWith","Torus","keyLookup","CustomAuth","network","enableLogging","enableOneKey","redirectPathName","apiKey","metadataUrl","networkUrl","baseUri","config","torus","metadataHost","allowHost","signerHost","setAPIKey","ethNetwork","nodeDetailManager","proxyAddress","enableAll","disableAll","storageHelper","sentryHandler","skipSw","skipInit","skipPrefetch","fetchSwResponse","fetch","cache","ok","handlePrefetchRedirectUri","triggerLogin","args","skipTorusKey","Never","checkIfNewKey","loginHandler","loginParams","method","nodeTx","torusNodeEndpoints","torusNodePub","getNodeDetails","lookupTx","torusPubKey","getPublicAddress","res","torusKey","typeOfUser","pubKey","pub_key_X","X","pub_key_Y","Y","publicAddress","address","privateKey","metadataNonce","skip","existingPk","IfNew","lookupData","keyResult","Always","getTorusKey","triggerAggregateLogin","aggregateVerifierType","verifierIdentifier","subVerifierDetailsArray","Array","isArray","userInfoPromises","loginParamsArray","subVerifierDetail","push","_userInfoArray","all","userInfoArray","map","aggregateVerifier","aggregateVerifierParams","verify_params","sub_verifier_ids","aggregateIdTokenSeeds","aggregateVerifierId","index","idtoken","sort","aggregateIdToken","join","String","fromCharCode","userInfoData","triggerHybridAggregateLogin","singleLogin","aggregateLoginParams","torusKey1Promise","torusKey2Promise","torusKey1","torusKey2","aggregateLogins","verifierParams","additionalParams","torusIndexes","pubLookupTx","sharesTx","shares","retrieveShares","ethAddress","getAggregateTorusKey","subVerifierInfoArray","getPostboxKeyFrom1OutOf1","getRedirectResult","replaceUrl","clearLoginDetails","substring","queryParams","value","cleanUrl","origin","history","replaceState","methodArgs","err","redirectHtml","createElement","crossOrigin","rel","resolveFn","relList","supports","onload","onerror","head","appendChild","default"],"sourceRoot":""}